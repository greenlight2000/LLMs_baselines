[{"task_name": "Sudan function", "task_url": "https://rosettacode.org/wiki/Sudan_function", "task_cat": "Classic CS problems and programs", "lang": "Python", "code": "\nTranslation of: Javascript\n# Aamrun, 11th July 2022\n\ndef F(n,x,y):\n  if n==0:\n    return x + y\n  elif y==0:\n    return x\n  else:\n    return F(n - 1, F(n, x, y - 1), F(n, x, y - 1) + y)\n    \n    \nprint(\"F(1,3,3) = \", F(1,3,3))\n\n\nF(1,3,3) =  35\n\n", "explain": "Output\n"}, {"task_name": "Sudan function", "task_url": "https://rosettacode.org/wiki/Sudan_function", "task_cat": "Classic CS problems and programs", "lang": "C", "code": "\nTranslation of: Javascript\n//Aamrun, 11th July 2022\n\n#include <stdio.h>\n\nint F(int n,int x,int y) {\n  if (n == 0) {\n    return x + y;\n  }\n \n  else if (y == 0) {\n    return x;\n  }\n \n  return F(n - 1, F(n, x, y - 1), F(n, x, y - 1) + y);\n}\n\nint main() {\n  printf(\"F1(3,3) = %d\",F(1,3,3));\n  return 0;\n}\n\n\nF1(3,3) = 35\n\n", "explain": "Output\n"}, {"task_name": "Sudan function", "task_url": "https://rosettacode.org/wiki/Sudan_function", "task_cat": "Classic CS problems and programs", "lang": "C++", "code": "\nTranslation of: C\n//Aamrun , 11th July, 2022\n\n#include <iostream>\nusing namespace std;\n\nint F(int n,int x,int y) {\n  if (n == 0) {\n    return x + y;\n  }\n \n  else if (y == 0) {\n    return x;\n  }\n \n  return F(n - 1, F(n, x, y - 1), F(n, x, y - 1) + y);\n}\n\nint main() {\n  cout << \"F(1,3,3) = \"<<F(1,3,3)<<endl;\n  return 0;\n}\n\n\nF(1,3,3) = 35\n\n", "explain": "Output\n"}, {"task_name": "Sudan function", "task_url": "https://rosettacode.org/wiki/Sudan_function", "task_cat": "Classic CS problems and programs", "lang": "Java", "code": "\nTranslation of: C\n//Aamrun, 11th July 2022\n\npublic class Main {\n\n  private static int F(int n,int x,int y) {\n  \tif (n == 0) {\n    \treturn x + y;\n  \t}\n \n \t else if (y == 0) {\n    \treturn x;\n  \t}\n \n  \treturn F(n - 1, F(n, x, y - 1), F(n, x, y - 1) + y);\n }\n\n  public static void main(String[] args) {\n    System.out.println(\"F(1,3,3) = \" + F(1,3,3));\n  }\n}\n\n\nF(1,3,3) = 35\n\n", "explain": "Output\n"}, {"task_name": "Sudan function", "task_url": "https://rosettacode.org/wiki/Sudan_function", "task_cat": "Classic CS problems and programs", "lang": "C#", "code": "\nTranslation of: C\n//Aamrun, 11th July 2022\n\nusing System;\n\nnamespace Sudan\n{\n  class Sudan\n  {\n  \tstatic int F(int n,int x,int y) {\n  \t\tif (n == 0) {\n    \t\treturn x + y;\n  \t\t}\n \n  \t\telse if (y == 0) {\n    \t\treturn x;\n  \t\t}\n \n  \t\treturn F(n - 1, F(n, x, y - 1), F(n, x, y - 1) + y);\n\t}\n    \n    static void Main(string[] args)\n    {\n      Console.WriteLine(\"F(1,3,3) = \" + F(1,3,3));    \n    }\n  }\n}\n\n\nF(1,3,3) = 35\n\n", "explain": "Output\n"}, {"task_name": "Sudan function", "task_url": "https://rosettacode.org/wiki/Sudan_function", "task_cat": "Classic CS problems and programs", "lang": "JavaScript", "code": "\n/**\n * @param {bigint} n\n * @param {bigint} x\n * @param {bigint} y\n * @returns {bigint}\n */\nfunction F(n, x, y) {\n  if (n === 0) {\n    return x + y;\n  }\n\n  if (y === 0) {\n    return x;\n  }\n\n  return F(n - 1, F(n, x, y - 1), F(n, x, y - 1) + y);\n}\n\n", "explain": ""}, {"task_name": "Sudan function", "task_url": "https://rosettacode.org/wiki/Sudan_function", "task_cat": "Classic CS problems and programs", "lang": "PHP", "code": "\nTranslation of: C\n#Aamrun , 11th July 2022\n\n<?php\nfunction F(int $n,int $x,int $y) {\n  if ($n == 0) {\n    return $x + $y;\n  }\n \n  else if ($y == 0) {\n    return $x;\n  }\n \n  return F($n - 1, F($n, $x, $y - 1), F($n, $x, $y - 1) + $y);\n}\necho \"F(1,3,3) = \" . F(1,3,3); \n?>\n\n\nF(1,3,3) = 35\n\n", "explain": "Output\n"}, {"task_name": "Sudan function", "task_url": "https://rosettacode.org/wiki/Sudan_function", "task_cat": "Classic CS problems and programs", "lang": "Go", "code": "\nTranslation of: Wren\npackage main\n\nimport \"fmt\"\n\nfunc F(n, x, y int) int {\n    if n == 0 {\n        return x + y\n    }\n    if y == 0 {\n        return x\n    }\n    return F(n-1, F(n, x, y-1), F(n, x, y-1)+y)\n}\n\nfunc main() {\n    for n := 0; n < 2; n++ {\n        fmt.Printf(\"Values of F(%d, x, y):\\n\", n)\n        fmt.Println(\"y/x    0   1   2   3   4   5\")\n        fmt.Println(\"----------------------------\")\n        for y := 0; y < 7; y++ {\n            fmt.Printf(\"%d  |\", y)\n            for x := 0; x < 6; x++ {\n                fmt.Printf(\"%4d\", F(n, x, y))\n            }\n            fmt.Println()\n        }\n        fmt.Println()\n    }\n    fmt.Printf(\"F(2, 1, 1) = %d\\n\", F(2, 1, 1))\n    fmt.Printf(\"F(3, 1, 1) = %d\\n\", F(3, 1, 1))\n    fmt.Printf(\"F(2, 2, 1) = %d\\n\", F(2, 2, 1))\n}\n\n\nOutput:\nIdentical to Wren example.\n\n", "explain": ""}, {"task_name": "Sudan function", "task_url": "https://rosettacode.org/wiki/Sudan_function", "task_cat": "Classic CS problems and programs", "lang": "Delphi", "code": "\nWorks with: Delphi version 6.0\nLibrary: SysUtils,StdCtrls\n\nfunction SudanFunction(N,X,Y: integer): integer;\nbegin\nif n = 0 then Result:=X + Y\nelse if y = 0 then Result:=X\nelse Result:=SudanFunction(N - 1, SudanFunction(N, X, Y - 1), SudanFunction(N, X, Y - 1) + Y);\nend;\n\n\nprocedure ShowSudanFunction(Memo: TMemo; N,X,Y: integer);\nbegin\nMemo.Lines.Add(Format('Sudan(%d,%d,%d)=%d',[n,x,y,SudanFunction(N,X,Y)]));\nend;\n\n\nprocedure ShowSudanFunctions(Memo: TMemo);\nvar N,X,Y: integer;\nvar S: string;\nbegin\nfor N:=0 to 1 do\n\tbegin\n\tMemo.Lines.Add(Format('Sudan(%d,X,Y)',[N]));\n\tMemo.Lines.Add('Y/X    0   1   2   3   4   5');\n\tMemo.Lines.Add('----------------------------');\n\tfor Y:=0 to 6 do\n\t\tbegin\n\t\tS:=Format('%2d | ',[Y]);\n\t\tfor X:=0 to 5 do\n\t\t\tbegin\n\t\t\tS:=S+Format('%3d ',[SudanFunction(N,X,Y)]);\n\t\t\tend;\n\t\tMemo.Lines.Add(S);\n\t\tend;\n\tMemo.Lines.Add('');\n\tend;\n\nShowSudanFunction(Memo, 1, 3, 3);\nShowSudanFunction(Memo, 2, 1, 1);\nShowSudanFunction(Memo, 2, 2, 1);\nShowSudanFunction(Memo, 3, 1, 1);\nend;\n\n\nOutput:\nSudan(0,X,Y)\nY/X    0   1   2   3   4   5\n----------------------------\n 0 |   0   1   2   3   4   5 \n 1 |   1   2   3   4   5   6 \n 2 |   2   3   4   5   6   7 \n 3 |   3   4   5   6   7   8 \n 4 |   4   5   6   7   8   9 \n 5 |   5   6   7   8   9  10 \n 6 |   6   7   8   9  10  11 \n\nSudan(1,X,Y)\nY/X    0   1   2   3   4   5\n----------------------------\n 0 |   0   1   2   3   4   5 \n 1 |   1   3   5   7   9  11 \n 2 |   4   8  12  16  20  24 \n 3 |  11  19  27  35  43  51 \n 4 |  26  42  58  74  90 106 \n 5 |  57  89 121 153 185 217 \n 6 | 120 184 248 312 376 440 \n\nSudan(1,3,3)=35\nSudan(2,1,1)=8\nSudan(2,2,1)=27\nSudan(3,1,1)=10228\n\nElapsed Time: 47.644 ms.\n\n\n\n", "explain": "\n\n"}, {"task_name": "Sudan function", "task_url": "https://rosettacode.org/wiki/Sudan_function", "task_cat": "Classic CS problems and programs", "lang": "Ruby", "code": "\ndef sudan(n, x, y)\n  return x + y if n == 0\n  return x if y == 0\n\n  sudan(n - 1, sudan(n, x, y - 1), sudan(n, x, y - 1) + y)\nend\n\n\nputs sudan(1, 3, 3)\n> 35\n\n", "explain": "Output\n"}, {"task_name": "Sudan function", "task_url": "https://rosettacode.org/wiki/Sudan_function", "task_cat": "Classic CS problems and programs", "lang": "Swift", "code": "\nTranslation of: C\n\nC like[edit]\n//Aamrun, 3rd February 2023\n\nfunc F(n: Int,x: Int,y: Int) -> Int {\n  if (n == 0) {\n    return x + y;\n  }\n\n  else if (y == 0) {\n    return x;\n  }\n\n    return F(n: n - 1, x: F(n: n, x: x, y: y - 1), y: F(n: n, x: x, y: y - 1) + y);\n}\n\nprint(\"F1(3,3) = \" + String(F(n: 1,x: 3,y: 3)));\n\nPure Swift[edit]\n//Aamrun, 3rd February 2023\n\nfunc F(n: Int,x: Int,y: Int) -> Int {\n  if n == 0 {\n    return x + y\n  }\n\n  else if y == 0 {\n    return x\n  }\n\n    return F(n: n - 1, x: F(n: n, x: x, y: y - 1), y: F(n: n, x: x, y: y - 1) + y)\n}\n\nprint(\"F1(3,3) = \" + String(F(n: 1,x: 3,y: 3)))\n\n\n\nOutput:\nF1(3,3) = 35\n\n", "explain": "I have started working on Swift and am going to practice on RosettaCode. On converting my C implementation for this task to Swift which I contributed last year, I found Swift allows statement ending semicolons and enclosing parantheses in if/else statements which are mandatory in C. I didn't find that anywhere while learning Swift so I am posting both implementations here, the \"C like\" and the \"Pure\" Swift.\nBoth have been tested with Xcode 14.2 (14C18)\nOutput is the same for both\n"}, {"task_name": "Sudan function", "task_url": "https://rosettacode.org/wiki/Sudan_function", "task_cat": "Classic CS problems and programs", "lang": "R", "code": "\nTranslation of: C\n#Aamrun, 11th July 2022\n\nF <- function(n, x, y) {\n  if(n==0){\n  \tF <- x+y\n    return (F)\n  }\n  \n  else if(y == 0) {\n    F <- x\n    return (F)\n  }\n \n  F <- F(n - 1, F(n, x, y - 1), F(n, x, y - 1) + y)\n  return (F)\n}\n\nprint(paste(\"F(1,3,3) = \" , F(1,3,3)))\n\n\n[1] \"F(1,3,3) =  35\"\n\n", "explain": "Output\n"}, {"task_name": "Sudan function", "task_url": "https://rosettacode.org/wiki/Sudan_function", "task_cat": "Classic CS problems and programs", "lang": "Ada", "code": "\nTranslation of: Javascript\nwith Ada.Text_IO; use Ada.Text_IO;\n\nprocedure Sudan_Function is\n\n   function F (N, X, Y : Natural) return Natural\n   is (if    N = 0 then X + Y\n       elsif Y = 0 then X\n       else  F (N => N - 1,\n                X => F (N, X, Y - 1),\n                Y => F (N, X, Y - 1) + Y));\n\nbegin\n   Put_Line (\"F0 (0, 0) = \" & F (0, 0, 0)'Image);\n   Put_Line (\"F1 (1, 1) = \" & F (1, 1, 1)'Image);\n   Put_Line (\"F1 (3, 3) = \" & F (1, 3, 3)'Image);\n   Put_Line (\"F2 (1, 1) = \" & F (2, 1, 1)'Image);\n   Put_Line (\"F2 (2, 1) = \" & F (2, 2, 1)'Image);\n   Put_Line (\"F3 (1, 1) = \" & F (3, 1, 1)'Image);\nend Sudan_Function;\n\n\nOutput:\nF0 (0, 0) =  0\nF1 (1, 1) =  3\nF1 (3, 3) =  35\nF2 (1, 1) =  8\nF2 (2, 1) =  27\nF3 (1, 1) =  10228\n\n", "explain": ""}, {"task_name": "Sudan function", "task_url": "https://rosettacode.org/wiki/Sudan_function", "task_cat": "Classic CS problems and programs", "lang": "Julia", "code": "\nusing Memoize\n\n@memoize function sudan(n, x, y)\n   return n == 0 ? x + y : y == 0 ? x : sudan(n - 1, sudan(n, x, y - 1), sudan(n, x, y - 1) + y)\nend\n\nforeach(t -> println(\"sudan($(t[1]), $(t[2]), $(t[3])) = \",\n   sudan(t[1], t[2], t[3])), ((0,0,0), (1,1,1), (2,1,1), (3,1,1), (2,2,1)))\n\nOutput:\nsudan(0, 0, 0) = 0\nsudan(1, 1, 1) = 3\nsudan(2, 1, 1) = 8\nsudan(3, 1, 1) = 10228\nsudan(2, 2, 1) = 27\n\n", "explain": ""}, {"task_name": "Sudan function", "task_url": "https://rosettacode.org/wiki/Sudan_function", "task_cat": "Classic CS problems and programs", "lang": "Perl", "code": "\n\nuse v5.36;\nuse experimental 'for_list';\n\nsub F1($n, $x, $y) { $n ? $y ? F1($n-1, F2($n,$x,$y-1), F3($n,$x,$y-1)+$y) : $x : $x+$y }\n\nsub F2($n, $x, $y) { $n == 0 ? $x+$y : $y == 0 ? $x : F2($n-1, F1($n,$x,$y-1), F3($n,$x,$y-1)+$y) }\n\nsub F3($n, $x, $y) {\n  return $x + $y if $n == 0;\n  return $x      if $y == 0;\n  F3($n-1, F1($n, $x, $y-1), F2($n, $x, $y-1) + $y)\n}\n\nfor my($n,$x,$y) (0,0,0, 1,1,1, 2,1,1, 3,1,1, 2,2,1) {\n    say join ' ',F1($n,$x,$y), F2($n,$x,$y), F3($n,$x,$y)\n}\n\n\nOutput:\n0 0 0\n3 3 3\n8 8 8\n10228 10228 10228\n27 27 27\n", "explain": "Three ways of doing the same thing.\n"}, {"task_name": "Sudan function", "task_url": "https://rosettacode.org/wiki/Sudan_function", "task_cat": "Classic CS problems and programs", "lang": "Lua", "code": "\nfunction F (n, x, y)\n    if n == 0 then\n        return x + y\n    elseif y == 0 then\n        return x\n    else\n        return F(n - 1, F(n, x, y - 1), F(n, x, y - 1) + y)\n    end\nend\n\nlocal testCases = {\n    {0, 0, 0},\n    {1, 1, 1},\n    {1, 3, 3},\n    {2, 1, 1},\n    {2, 2, 1},\n    {3, 1, 1}\n}\n\nfor _, v in pairs(testCases) do\n    io.write(\"F(\" .. table.concat(v, \",\") .. \") = \")\n    print(F(unpack(v)))\nend\n\n\nOutput:\nF(0,0,0) = 0\nF(1,1,1) = 3\nF(1,3,3) = 35\nF(2,1,1) = 8\nF(2,2,1) = 27\nF(3,1,1) = 10228\n", "explain": ""}, {"task_name": "Sudan function", "task_url": "https://rosettacode.org/wiki/Sudan_function", "task_cat": "Classic CS problems and programs", "lang": "Dart", "code": "\nTranslation of: C++\nint F(int n, int x, int y) {\n  if (n == 0) {\n    return x + y;\n  } else if (y == 0) {\n    return x;\n  }\n\n  return F(n - 1, F(n, x, y - 1), F(n, x, y - 1) + y);\n}\n\nvoid main() {\n  print('F(1,3,3) = ${F(1, 3, 3)}');\n}\n\n\nOutput:\nSame as C++ entry.\n", "explain": ""}, {"task_name": "Sudan function", "task_url": "https://rosettacode.org/wiki/Sudan_function", "task_cat": "Classic CS problems and programs", "lang": "Haskell", "code": "\nimport Control.Monad.Memo (Memo, memo, startEvalMemo)\nimport Data.List.Split (chunksOf)\nimport System.Environment (getArgs)\nimport Text.Tabular (Header(..), Properties(..), Table(..))\nimport Text.Tabular.AsciiArt (render)\n\ntype SudanArgs = (Int, Integer, Integer)\n\n-- Given argument (n, x, y) calculate F\u2099(x, y).  For performance reasons we do\n-- the calculation in a memoization monad.\nsudan :: SudanArgs -> Memo SudanArgs Integer Integer\nsudan (0, x, y) = return $ x + y\nsudan (_, x, 0) = return x\nsudan (n, x, y) = memo sudan (n, x, y-1) >>= \\x2 -> sudan (n-1, x2, x2 + y)\n\n-- A table of F\u2099(x, y) values, where the rows are y values and the columns are\n-- x values.\nsudanTable :: Int -> [Integer] -> [Integer] -> String\nsudanTable n xs ys = render show show show\n                   $ Table (Group NoLine $ map Header ys)\n                           (Group NoLine $ map Header xs)\n                   $ chunksOf (length xs)\n                   $ startEvalMemo\n                   $ sequence\n                   $ [sudan (n, x, y) | y <- ys, x <- xs]\n\nmain :: IO ()\nmain = do\n  args <- getArgs\n  case args of\n    [n, xlo, xhi, ylo, yhi] -> do\n      putStrLn $ \"F\u2099(x, y), where the rows are y values \" ++\n                 \"and the columns are x values.\\n\"\n      putStr $ sudanTable (read n)\n                          [read xlo .. read xhi]\n                          [read ylo .. read yhi]\n    _ -> error \"Usage: sudan n xmin xmax ymin ymax\"\n\n\nOutput:\n$ sudan 0 0 5 0 6\nF\u2099(x, y), where the rows are y values and the columns are x values.\n\n+---++---------------+\n|   || 0 1 2 3  4  5 |\n+===++===============+\n| 0 || 0 1 2 3  4  5 |\n| 1 || 1 2 3 4  5  6 |\n| 2 || 2 3 4 5  6  7 |\n| 3 || 3 4 5 6  7  8 |\n| 4 || 4 5 6 7  8  9 |\n| 5 || 5 6 7 8  9 10 |\n| 6 || 6 7 8 9 10 11 |\n+---++---------------+\n$ sudan 1 0 5 0 6\nF\u2099(x, y), where the rows are y values and the columns are x values.\n\n+---++-------------------------+\n|   ||   0   1   2   3   4   5 |\n+===++=========================+\n| 0 ||   0   1   2   3   4   5 |\n| 1 ||   1   3   5   7   9  11 |\n| 2 ||   4   8  12  16  20  24 |\n| 3 ||  11  19  27  35  43  51 |\n| 4 ||  26  42  58  74  90 106 |\n| 5 ||  57  89 121 153 185 217 |\n| 6 || 120 184 248 312 376 440 |\n+---++-------------------------+\n\n", "explain": ""}, {"task_name": "Sudan function", "task_url": "https://rosettacode.org/wiki/Sudan_function", "task_cat": "Classic CS problems and programs", "lang": "F#", "code": "\nTranslation of: OCaml\nlet rec sudan = function\n   0L, x, y -> x + y\n  |_, x, 0L -> x\n  |n, x, y -> let x' = sudan (n, x, y-1L) in sudan (n-1L, x', x' + y)\nprintfn \"%d\\n%d\\n%d\" (sudan(1L, 13L, 14L)) (sudan(2L, 5L, 1L)) (sudan(2L, 2L, 2L))\n\n\nOutput:\n245744\n440\n15569256417\n\n", "explain": ""}, {"task_name": "Sudan function", "task_url": "https://rosettacode.org/wiki/Sudan_function", "task_cat": "Classic CS problems and programs", "lang": "AWK", "code": "\n# syntax: GAWK -f SUDAN_FUNCTION.AWK\nBEGIN {\n    for (n=0; n<=1; n++) {\n      printf(\"sudan(%d,x,y)\\n\",n)\n      printf(\"y/x    0   1   2   3   4   5\\n\")\n      printf(\"%s\\n\",strdup(\"-\",28))\n      for (y=0; y<=6; y++) {\n        printf(\"%2d | \",y)\n        for (x=0; x<=5; x++) {\n          printf(\"%3d \",sudan(n,x,y))\n        }\n        printf(\"\\n\")\n      }\n      printf(\"\\n\")\n    }\n    n=1; x=3; y=3; printf(\"sudan(%d,%d,%d)=%d\\n\",n,x,y,sudan(n,x,y))\n    n=2; x=1; y=1; printf(\"sudan(%d,%d,%d)=%d\\n\",n,x,y,sudan(n,x,y))\n    n=2; x=2; y=1; printf(\"sudan(%d,%d,%d)=%d\\n\",n,x,y,sudan(n,x,y))\n    n=3; x=1; y=1; printf(\"sudan(%d,%d,%d)=%d\\n\",n,x,y,sudan(n,x,y))\n    exit(0)\n}\nfunction sudan(n,x,y) {\n    if (n == 0) { return(x+y) }\n    if (y == 0) { return(x) }\n    return sudan(n-1, sudan(n,x,y-1), sudan(n,x,y-1)+y)\n}\nfunction strdup(str,n,  i,new_str) {\n    for (i=1; i<=n; i++) {\n      new_str = new_str str\n    }\n    return(new_str)\n}\n\n\nOutput:\nsudan(0,x,y)\ny/x    0   1   2   3   4   5\n----------------------------\n 0 |   0   1   2   3   4   5\n 1 |   1   2   3   4   5   6\n 2 |   2   3   4   5   6   7\n 3 |   3   4   5   6   7   8\n 4 |   4   5   6   7   8   9\n 5 |   5   6   7   8   9  10\n 6 |   6   7   8   9  10  11\n\nsudan(1,x,y)\ny/x    0   1   2   3   4   5\n----------------------------\n 0 |   0   1   2   3   4   5\n 1 |   1   3   5   7   9  11\n 2 |   4   8  12  16  20  24\n 3 |  11  19  27  35  43  51\n 4 |  26  42  58  74  90 106\n 5 |  57  89 121 153 185 217\n 6 | 120 184 248 312 376 440\n\nsudan(1,3,3)=35\nsudan(2,1,1)=8\nsudan(2,2,1)=27\nsudan(3,1,1)=10228\n\n", "explain": ""}]