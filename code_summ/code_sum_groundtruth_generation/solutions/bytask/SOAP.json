[{"task_name": "SOAP", "task_url": "https://rosettacode.org/wiki/SOAP", "task_cat": "Networking and Web Interaction", "lang": "Python", "code": "\nWorks with: Python version 2.4 and 2.5\nfrom SOAPpy import WSDL \nproxy = WSDL.Proxy(\"http://example.com/soap/wsdl\")\nresult = proxy.soapFunc(\"hello\")\nresult = proxy.anotherSoapFunc(34234)\n\n\n", "explain": "Note: SOAPpy is a third-party module and can be found at Python Web Services\n"}, {"task_name": "SOAP", "task_url": "https://rosettacode.org/wiki/SOAP", "task_cat": "Networking and Web Interaction", "lang": "C", "code": "\n\nLibrary: libcurl\n#include <curl/curl.h>\n#include <string.h>\n#include <stdio.h>\n\nsize_t write_data(void *ptr, size_t size, size_t nmeb, void *stream){\n    return fwrite(ptr,size,nmeb,stream);\n}\n\nsize_t read_data(void *ptr, size_t size, size_t nmeb, void *stream){\n    return fread(ptr,size,nmeb,stream);\n}\n\nvoid callSOAP(char* URL, char * inFile, char * outFile) {\n\n    FILE * rfp = fopen(inFile, \"r\");\n    if(!rfp) \n        perror(\"Read File Open:\");\n\n    FILE * wfp = fopen(outFile, \"w+\");\n    if(!wfp)\n        perror(\"Write File Open:\");\n\n    struct curl_slist *header = NULL;\n\t\theader = curl_slist_append (header, \"Content-Type:text/xml\");\n\t\theader = curl_slist_append (header, \"SOAPAction: rsc\");\n\t\theader = curl_slist_append (header, \"Transfer-Encoding: chunked\");\n\t\theader = curl_slist_append (header, \"Expect:\");\n    CURL *curl;\n\n    curl = curl_easy_init();\n    if(curl) {\n        curl_easy_setopt(curl, CURLOPT_URL, URL);\n        curl_easy_setopt(curl, CURLOPT_POST, 1L);\n        curl_easy_setopt(curl, CURLOPT_READFUNCTION, read_data);\n        curl_easy_setopt(curl, CURLOPT_READDATA, rfp); \n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_data);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, wfp);\n        curl_easy_setopt(curl, CURLOPT_HTTPHEADER, header);\n        curl_easy_setopt(curl, CURLOPT_POSTFIELDSIZE_LARGE, (curl_off_t)-1);\n        curl_easy_setopt(curl, CURLOPT_VERBOSE,1L);            \n        curl_easy_perform(curl);\n\n        curl_easy_cleanup(curl);\n    }\n}\n\nint main(int argC,char* argV[])\n{\n\tif(argC!=4)\n\t\tprintf(\"Usage\u00a0: %s <URL of WSDL> <Input file path> <Output File Path>\",argV[0]);\n\telse\n\t\tcallSOAP(argV[1],argV[2],argV[3]);\n\treturn 0;\n}\n\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<soapenv:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \nxmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" \nxmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" \nxmlns:dom=\"http://example.com/soap/wsdl\">\n   <soapenv:Header/>\n   <soapenv:Body>\n      <dom:soapFunc soapenv:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\"/>\n   </soapenv:Body>\n</soapenv:Envelope>\n\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<soapenv:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \nxmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" \nxmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" \nxmlns:dom=\"http://example.com/soap/wsdl\">\n   <soapenv:Header/>\n   <soapenv:Body>\n      <dom:anotherSoapFunc soapenv:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\"/>\n   </soapenv:Body>\n</soapenv:Envelope>\n\n", "explain": "Although this is a generic task to show that calling SOAP functions are possible, the following implementation is geared for the real world. In order to execute it, just choose an actual WSDL URL and construct the input XML files for the functions properly, this can also be done in C but requires libraries like xerces unless you want to really construct the XML from scratch.\nInput XML for soapFunc()\nInput XML for anotherSoapFunc()\n"}, {"task_name": "SOAP", "task_url": "https://rosettacode.org/wiki/SOAP", "task_cat": "Networking and Web Interaction", "lang": "PHP", "code": "\nWorks with: PHP version 5.0.0+\n<?php\n//load the wsdl file\n$client = new SoapClient(\"http://example.com/soap/definition.wsdl\");\n//functions are now available to be called\n$result = $client->soapFunc(\"hello\");\n$result = $client->anotherSoapFunc(34234);\n\n//SOAP Information\n$client = new SoapClient(\"http://example.com/soap/definition.wsdl\");\n//list of SOAP types\nprint_r($client->__getTypes());\n//list if SOAP Functions\nprint_r($client->__getFunctions());\n?>\n\n", "explain": ""}, {"task_name": "SOAP", "task_url": "https://rosettacode.org/wiki/SOAP", "task_cat": "Networking and Web Interaction", "lang": "Go", "code": "\nLibrary: Go Soap\n\npackage main\n\nimport (\n    \"fmt\"\n    \"github.com/tiaguinho/gosoap\"\n    \"log\"\n)\n\ntype CheckVatResponse struct {\n    CountryCode string `xml:\"countryCode\"`\n    VatNumber   string `xml:\"vatNumber\"`\n    RequestDate string `xml:\"requestDate\"`\n    Valid       string `xml:\"valid\"`\n    Name        string `xml:\"name\"`\n    Address     string `xml:\"address\"`\n}\n\nvar (\n    rv CheckVatResponse\n)\n\nfunc check(err error) {\n    if err != nil {\n        log.Fatal(err)\n    }\n}\n\nfunc main() {\n    // create SOAP client\n    soap, err := gosoap.SoapClient(\"http://ec.europa.eu/taxation_customs/vies/checkVatService.wsdl\")\n\n    // map parameter names to values\n    params := gosoap.Params{\n        \"vatNumber\":   \"6388047V\",\n        \"countryCode\": \"IE\",\n    }\n\n    // call 'checkVat' function\n    err = soap.Call(\"checkVat\", params)\n    check(err)\n\n    // unmarshal response to 'rv'\n    err = soap.Unmarshal(&rv)\n    check(err)\n\n    // print response\n    fmt.Println(\"Country Code \u00a0: \", rv.CountryCode)\n    fmt.Println(\"Vat Number   \u00a0: \", rv.VatNumber)\n    fmt.Println(\"Request Date \u00a0: \", rv.RequestDate)\n    fmt.Println(\"Valid        \u00a0: \", rv.Valid)\n    fmt.Println(\"Name         \u00a0: \", rv.Name)\n    fmt.Println(\"Address      \u00a0: \", rv.Address)\n}\n\n\nOutput:\nCountry Code \u00a0:  IE\nVat Number   \u00a0:  6388047V\nRequest Date \u00a0:  2019-02-08+01:00\nValid        \u00a0:  true\nName         \u00a0:  GOOGLE IRELAND LIMITED\nAddress      \u00a0:  3RD FLOOR, GORDON HOUSE, BARROW STREET, DUBLIN 4\n\n", "explain": "\nTo make this example a bit more interesting we test against a publicly available working SOAP server at the date of posting.\n"}, {"task_name": "SOAP", "task_url": "https://rosettacode.org/wiki/SOAP", "task_cat": "Networking and Web Interaction", "lang": "Ruby", "code": "\nWorks with: Ruby version 1.8\nrequire 'soap/wsdlDriver'\n\nwsdl = SOAP::WSDLDriverFactory.new(\"http://example.com/soap/wsdl\")\nsoap = wsdl.create_rpc_driver\n\nresponse1 = soap.soapFunc(:elementName => \"value\")\nputs response1.soapFuncReturn\n\nresponse2 = soap.anotherSoapFunc(:aNumber => 42)\nputs response2.anotherSoapFuncReturn\n\n", "explain": ""}, {"task_name": "SOAP", "task_url": "https://rosettacode.org/wiki/SOAP", "task_cat": "Networking and Web Interaction", "lang": "Julia", "code": "\nTranslation of: C\nusing LibCURL\n\nfunction callSOAP(url, infilename, outfilename)\n    rfp = open(infilename, \"r\")\n    wfp = open(outfilename, \"w+\")\n\n    header = curl_slist_append(header, \"Content-Type:text/xml\")\n    header = curl_slist_append(header, \"SOAPAction: rsc\");\n    header = curl_slist_append(header, \"Transfer-Encoding: chunked\")\n    header = curl_slist_append(header, \"Expect:\")\n\n    curl = curl_easy_init();\n    curl_easy_setopt(curl, CURLOPT_URL, URL)\n    curl_easy_setopt(curl, CURLOPT_POST, 1L)\n    curl_easy_setopt(curl, CURLOPT_READFUNCTION, read_data)\n    curl_easy_setopt(curl, CURLOPT_READDATA, rfp)\n    curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_data)\n    curl_easy_setopt(curl, CURLOPT_WRITEDATA, wfp)\n    curl_easy_setopt(curl, CURLOPT_HTTPHEADER, header)\n    curl_easy_setopt(curl, CURLOPT_POSTFIELDSIZE_LARGE, (curl_off_t)-1)\n    curl_easy_setopt(curl, CURLOPT_VERBOSE,1L)\n    curl_easy_perform(curl)\n\n    curl_easy_cleanup(curl)\nend\n\ntry\n    callSOAP(ARGS[1], ARGS[2], ARGS[3])\ncatch y\n    println(\"Usage\u00a0: $(@__FILE__) <URL of WSDL> <Input file path> <Output File Path>\")\nend\n\n", "explain": ""}, {"task_name": "SOAP", "task_url": "https://rosettacode.org/wiki/SOAP", "task_cat": "Networking and Web Interaction", "lang": "Kotlin", "code": "\nTranslation of: C\nLibrary: libcurl\nWorks with: Ubuntu 14.04\n\n// libcurl.def\nheaders = /usr/include/curl/curl.h\nlinkerOpts.linux = -L/usr/lib/x86_64-linux-gnu -lcurl\n\n\n// Kotlin Native v0.6\n\nimport kotlinx.cinterop.*\nimport platform.posix.*\nimport libcurl.*\n\nfun writeData(ptr: COpaquePointer?, size: size_t, nmeb: size_t, stream: COpaquePointer?)\n    = fwrite(ptr, size, nmeb, stream?.reinterpret<FILE>())\n\nfun readData(ptr: COpaquePointer?, size: size_t, nmeb: size_t, stream: COpaquePointer?)\n    = fread(ptr, size, nmeb, stream?.reinterpret<FILE>())\n\nfun callSOAP(url: String, inFile: String, outFile: String) {\n    val rfp = fopen(inFile, \"r\")\n    if (rfp == null) {\n        perror(\"Read File Open: \")\n        exit(1)\n    }\n    val wfp = fopen(outFile, \"w+\")\n    if (wfp == null) {\n        perror(\"Write File Open: \")\n        fclose(rfp)\n        exit(1)\n    }\n\n    var header: CPointer<curl_slist>? = null\n    header = curl_slist_append (header, \"Content-Type:text/xml\")\n    header = curl_slist_append (header, \"SOAPAction: rsc\")\n    header = curl_slist_append (header, \"Transfer-Encoding: chunked\")\n    header = curl_slist_append (header, \"Expect:\")\n\n    val curl = curl_easy_init()\n    if (curl != null) {\n        curl_easy_setopt(curl, CURLOPT_URL, url)\n        curl_easy_setopt(curl, CURLOPT_POST, 1L)\n        curl_easy_setopt(curl, CURLOPT_READFUNCTION, staticCFunction(::readData))\n        curl_easy_setopt(curl, CURLOPT_READDATA, rfp)\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, staticCFunction(::writeData))\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, wfp)\n        curl_easy_setopt(curl, CURLOPT_HTTPHEADER, header)\n        curl_easy_setopt(curl, CURLOPT_POSTFIELDSIZE_LARGE, -1L)\n        curl_easy_setopt(curl, CURLOPT_VERBOSE, 1L)\n        curl_easy_perform(curl)\n        curl_easy_cleanup(curl)\n    }\n\n    curl_slist_free_all(header) \n    fclose(rfp)\n    fclose(wfp)\n}\n\nfun main(args: Array<String>) {\n    if (args.size != 3) {\n        println(\"You need to pass exactly 3 command line arguments, namely\u00a0:-\")\n        println(\"    <URL of WSDL> <Input file path> <Output File Path>\")\n        return\n    }\n    callSOAP(args[0], args[1], args[2])\n}\n\n\n", "explain": "Assuming that libcurl is already installed on your system in the default location(s), you first need to build libcurl.klib using the following .def file and the cinterop tool:\nNext, you need to compile the following Kotlin program, linking against libcurl.klib.\nFinally, the resulting .kexe file should be executed passing it similar command line arguments to the C entry.\n"}, {"task_name": "SOAP", "task_url": "https://rosettacode.org/wiki/SOAP", "task_cat": "Networking and Web Interaction", "lang": "Perl", "code": "\nLibrary: SOAP::LiteLite\nuse SOAP::Lite;\n\nprint SOAP::Lite\n  -> service('http://example.com/soap/wsdl')\n  -> soapFunc(\"hello\");\nprint SOAP::Lite\n  -> service('http://example.com/soap/wsdl')\n  -> anotherSoapFunc(34234);\n\n", "explain": ""}, {"task_name": "SOAP", "task_url": "https://rosettacode.org/wiki/SOAP", "task_cat": "Networking and Web Interaction", "lang": "VBScript", "code": "\nDim client\nDim result\nSet client = CreateObject(\"MSSOAP.SoapClient\")\nclient.MSSoapInit \"http://example.com/soap/wsdl\"\nresult = client.soapFunc(\"hello\")\nresult = client.anotherSoapFunc(34234)\n\n", "explain": ""}, {"task_name": "SOAP", "task_url": "https://rosettacode.org/wiki/SOAP", "task_cat": "Networking and Web Interaction", "lang": "ColdFusion", "code": "\n<cfset client = createObject(\"webservice\",\"http://example.com/soap/wsdl\")>\n<cfset result = client.soapFunc(\"hello\")>\n<cfset result = client.anotherSoapFunc(34234)>\n\n", "explain": ""}, {"task_name": "SOAP", "task_url": "https://rosettacode.org/wiki/SOAP", "task_cat": "Networking and Web Interaction", "lang": "F#", "code": "\n\nopen Microsoft.FSharp.Data.TypeProviders\n\ntype Wsdl = WsdlService<\"http://example.com/soap/wsdl\">\nlet result = Wsdl.soapFunc(\"hello\")\nlet result2 = Wsdl.anotherSoapFunc(34234)\n\n", "explain": "The availability of functions and the type of parameters is checked at compile time. The development environment supports auto-completion and parameter information just like for regular types.\n"}]