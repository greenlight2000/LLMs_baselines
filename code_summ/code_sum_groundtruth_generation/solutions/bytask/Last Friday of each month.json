[{"task_name": "Last Friday of each month", "task_url": "https://rosettacode.org/wiki/Last_Friday_of_each_month", "task_cat": "Date and time", "lang": "Python", "code": "\nimport calendar\n\ndef last_fridays(year):\n    for month in range(1, 13):\n        last_friday = max(week[calendar.FRIDAY]\n            for week in calendar.monthcalendar(year, month))\n        print('{:4d}-{:02d}-{:02d}'.format(year, month, last_friday))\n\n\nOutput:\n>>> last_fridays(2012)\n2012-01-27\n2012-02-24\n2012-03-30\n2012-04-27\n2012-05-25\n2012-06-29\n2012-07-27\n2012-08-31\n2012-09-28\n2012-10-26\n2012-11-30\n2012-12-28\n\nimport calendar\nc=calendar.Calendar()\nfridays={}\nyear=raw_input(\"year\")\nfor item in c.yeardatescalendar(int(year)):\n    for i1 in item:\n        for i2 in i1:\n            for i3 in i2:\n                if \"Fri\" in i3.ctime() and year in i3.ctime():\n                    month,day=str(i3).rsplit(\"-\",1)\n                    fridays[month]=day\n\nfor item in sorted((month+\"-\"+day for month,day in fridays.items()),\n                   key=lambda x:int(x.split(\"-\")[1])):\n    print item\n\n\nimport calendar\nc=calendar.Calendar()\nfridays={}\nyear=raw_input(\"year\")\nadd=list.__add__\nfor day in reduce(add,reduce(add,reduce(add,c.yeardatescalendar(int(year))))):\n\n    if \"Fri\" in day.ctime() and year in day.ctime():\n        month,day=str(day).rsplit(\"-\",1)\n        fridays[month]=day\n\nfor item in sorted((month+\"-\"+day for month,day in fridays.items()),\n                   key=lambda x:int(x.split(\"-\")[1])):\n    print item\n\n\nimport calendar\nfrom itertools import chain\nf=chain.from_iterable\nc=calendar.Calendar()\nfridays={}\nyear=raw_input(\"year\")\nadd=list.__add__\n\nfor day in f(f(f(c.yeardatescalendar(int(year))))):\n\n    if \"Fri\" in day.ctime() and year in day.ctime():\n        month,day=str(day).rsplit(\"-\",1)\n        fridays[month]=day\n\nfor item in sorted((month+\"-\"+day for month,day in fridays.items()),\n                   key=lambda x:int(x.split(\"-\")[1])):\n    print item\n\n", "explain": "Another solution\nUsing reduce\nusing itertools\n"}, {"task_name": "Last Friday of each month", "task_url": "https://rosettacode.org/wiki/Last_Friday_of_each_month", "task_cat": "Date and time", "lang": "C", "code": "\n\n#include <stdio.h>\n#include <stdlib.h>\n\nint main(int c, char *v[])\n{\n\tint days[] = {31,29,31,30,31,30,31,31,30,31,30,31};\n\tint m, y, w;\n\n\tif (c < 2 || (y = atoi(v[1])) <= 1700) return 1;\n \tdays[1] -= (y % 4) || (!(y % 100) && (y % 400));\n\tw = y * 365 + (y - 1) / 4 - (y - 1) / 100 + (y - 1) / 400 + 6;\n\n\tfor(m = 0; m < 12; m++) {\n\t\tw = (w + days[m]) % 7;\n\t\tprintf(\"%d-%02d-%d\\n\", y, m + 1,\n\t\t\tdays[m] + (w < 5 ? -2 : 5) - w);\n\t}\n\n\treturn 0;\n}\n\n", "explain": "Doesn't work with Julian calendar (then again, you probably don't need to plan your weekends for middle ages).\n"}, {"task_name": "Last Friday of each month", "task_url": "https://rosettacode.org/wiki/Last_Friday_of_each_month", "task_cat": "Date and time", "lang": "C++", "code": "\nLibrary: Boost\n\n#include <boost/date_time/gregorian/gregorian.hpp>\n#include <iostream>\n#include <cstdlib>\n\nint main( int argc , char* argv[ ] ) {\n   using namespace boost::gregorian ;\n\n   greg_month months[ ] = { Jan , Feb , Mar , Apr , May , Jun , Jul ,\n      Aug , Sep , Oct , Nov , Dec } ;\n   greg_year gy = atoi( argv[ 1 ] ) ;\n   for ( int i = 0 ; i < 12 ; i++ ) {\n      last_day_of_the_week_in_month lwdm ( Friday , months[ i ] ) ;\n      date d = lwdm.get_date( gy ) ;\n      std::cout << d << std::endl ;\n   }\n   return 0 ;\n}\n\n\nOutput:\n2012-Jan-27\n2012-Feb-24\n2012-Mar-30\n2012-Apr-27\n2012-May-25\n2012-Jun-29\n2012-Jul-27\n2012-Aug-31\n2012-Sep-28\n2012-Oct-26\n2012-Nov-30\n2012-Dec-28\n\nUsing C++20[edit]\n\n#include <chrono>\n#include <iostream>\n\nint main() {\n\tstd::cout << \"The dates of the last Friday in each month of 2023:\" << std::endl;\n\n\tfor ( unsigned int m = 1; m <= 12; ++m ) {\n\t\tstd::chrono::days days_in_month = std::chrono::sys_days{std::chrono::year{2023}/m/std::chrono::last}\n\t\t\t- std::chrono::sys_days{std::chrono::year{2023}/m/1} + std::chrono::days{1};\n\n\t\tconst unsigned int last_day = days_in_month / std::chrono::days{1};\n\t\tstd::chrono::year_month_day ymd{std::chrono::year{2023}, std::chrono::month{m}, std::chrono::day{last_day}};\n\n\t\twhile ( std::chrono::weekday{ymd} != std::chrono::Friday ) {\n\t\t\tymd = std::chrono::sys_days{ymd} - std::chrono::days{1};\n\t\t}\n\n\t\tstd::cout << ymd << std::endl;\n\t}\n}\n\n\nOutput:\nThe dates of the last Friday in each month of 2023:\n2023-01-27\n2023-02-24\n2023-03-31\n2023-04-28\n2023-05-26\n2023-06-30\n2023-07-28\n2023-08-25\n2023-09-29\n2023-10-27\n2023-11-24\n2023-12-29\n\n", "explain": "called with ./last_fridays 2012\nUsing C++20 this task can be completed without external libraries.\n"}, {"task_name": "Last Friday of each month", "task_url": "https://rosettacode.org/wiki/Last_Friday_of_each_month", "task_cat": "Date and time", "lang": "Java", "code": "\nWorks with: Java version 1.5+\nimport java.text.*;\nimport java.util.*;\n\npublic class LastFridays {\n\n    public static void main(String[] args) throws Exception {\n        int year = Integer.parseInt(args[0]);\n        GregorianCalendar c = new GregorianCalendar(year, 0, 1);\n\n        for (String mon : new DateFormatSymbols(Locale.US).getShortMonths()) {\n            if (!mon.isEmpty()) {\n                int totalDaysOfMonth = c.getActualMaximum(Calendar.DAY_OF_MONTH);\n                c.set(Calendar.DAY_OF_MONTH, totalDaysOfMonth);\n\n                int daysToRollBack = (c.get(Calendar.DAY_OF_WEEK) + 1) % 7;\n\n                int day = totalDaysOfMonth - daysToRollBack;\n                c.set(Calendar.DAY_OF_MONTH, day);\n\n                System.out.printf(\"%d %s %d\\n\", year, mon, day);\n\n                c.set(year, c.get(Calendar.MONTH) + 1, 1);\n            }\n        }\n    }\n}\n\n\nOutput: (for java LastFridays 2012)\n\n2012 Jan 27\n2012 Feb 24\n2012 Mar 30\n2012 Apr 27\n2012 May 25\n2012 Jun 29\n2012 Jul 27\n2012 Aug 31\n2012 Sep 28\n2012 Oct 26\n2012 Nov 30\n2012 Dec 28\n", "explain": ""}, {"task_name": "Last Friday of each month", "task_url": "https://rosettacode.org/wiki/Last_Friday_of_each_month", "task_cat": "Date and time", "lang": "C#", "code": "\nusing System;\nusing System.Collections.Generic;\nusing System.Globalization;\nusing System.Linq;\n\nnamespace RosettaCode.LastFridaysOfYear\n{\n    internal static class Program\n    {\n        private static IEnumerable<DateTime> LastFridaysOfYear(int year)\n        {\n            for (var month = 1; month <= 12; month++)\n            {\n                var date = new DateTime(year, month, 1).AddMonths(1).AddDays(-1);\n                while (date.DayOfWeek != DayOfWeek.Friday)\n                {\n                    date = date.AddDays(-1);\n                }\n                yield return date;\n            }\n        }\n\n        private static void Main(string[] arguments)\n        {\n            int year;\n            var argument = arguments.FirstOrDefault();\n            if (string.IsNullOrEmpty(argument) || !int.TryParse(argument, out year))\n            {\n                year = DateTime.Today.Year;\n            }\n\n            foreach (var date in LastFridaysOfYear(year))\n            {\n                Console.WriteLine(date.ToString(\"d\", CultureInfo.InvariantCulture));\n            }\n        }\n    }\n}\n\n\nOutput:\n01/27/2012\n02/24/2012\n03/30/2012\n04/27/2012\n05/25/2012\n06/29/2012\n07/27/2012\n08/31/2012\n09/28/2012\n10/26/2012\n11/30/2012\n12/28/2012\n", "explain": ""}, {"task_name": "Last Friday of each month", "task_url": "https://rosettacode.org/wiki/Last_Friday_of_each_month", "task_cat": "Date and time", "lang": "JavaScript", "code": "\nES5[edit]\nIteration[edit]\nWorks with: Nodejs\nvar last_friday_of_month, print_last_fridays_of_month;\n\nlast_friday_of_month = function(year, month) {\n  var i, last_day;\n  i = 0;\n  while (true) {\n    last_day = new Date(year, month, i);\n    if (last_day.getDay() === 5) {\n      return last_day.toDateString();\n    }\n    i -= 1;\n  }\n};\n\nprint_last_fridays_of_month = function(year) {\n  var month, results;\n  results = [];\n  for (month = 1; month <= 12; ++month) {\n    results.push(console.log(last_friday_of_month(year, month)));\n  }\n  return results;\n};\n\n(function() {\n  var year;\n  year = parseInt(process.argv[2]);\n  return print_last_fridays_of_month(year);\n})();\n\n\nOutput:\n>node lastfriday.js  2015\nFri Jan 30 2015\nFri Feb 27 2015\nFri Mar 27 2015\nFri Apr 24 2015\nFri May 29 2015\nFri Jun 26 2015\nFri Jul 31 2015\nFri Aug 28 2015\nFri Sep 25 2015\nFri Oct 30 2015\nFri Nov 27 2015\nFri Dec 25 2015\nFunctional composition[edit]\n(function () {\n    'use strict';\n\n    // lastFridaysOfYear\u00a0:: Int -> [Date]\n    function lastFridaysOfYear(y) {\n        return lastWeekDaysOfYear(y, days.friday);\n    }\n\n    // lastWeekDaysOfYear\u00a0:: Int -> Int -> [Date]\n    function lastWeekDaysOfYear(y, iWeekDay) {\n        return [\n                31,\n                0 === y % 4 && 0 !== y % 100 || 0 === y % 400 ? 29 : 28,\n                31, 30, 31, 30, 31, 31, 30, 31, 30, 31\n            ]\n            .map(function (d, m) {\n                var dte = new Date(Date.UTC(y, m, d));\n\n                return new Date(Date.UTC(\n                    y, m, d - (\n                        (dte.getDay() + (7 - iWeekDay)) % 7\n                    )\n                ));\n            });\n    }\n\n    // isoDateString\u00a0:: Date -> String\n    function isoDateString(dte) {\n        return dte.toISOString()\n            .substr(0, 10);\n    }\n\n    // range\u00a0:: Int -> Int -> [Int]\n    function range(m, n) {\n        return Array.apply(null, Array(n - m + 1))\n            .map(function (x, i) {\n                return m + i;\n            });\n    }\n\n    // transpose\u00a0:: [[a]] -> [[a]]\n    function transpose(lst) {\n        return lst[0].map(function (_, iCol) {\n            return lst.map(function (row) {\n                return row[iCol];\n            });\n        });\n    }\n\n    var days = {\n        sunday: 0,\n        monday: 1,\n        tuesday: 2,\n        wednesday: 3,\n        thursday: 4,\n        friday: 5,\n        saturday: 6\n    }\n\n    // TEST\n    return transpose(\n            range(2012, 2016)\n            .map(lastFridaysOfYear)\n        )\n        .map(function (row) {\n            return row\n                .map(isoDateString)\n                .join('\\t');\n        })\n        .join('\\n');\n})();\n\n\nOutput:\n2012-01-27\t2013-01-25\t2014-01-31\t2015-01-30\t2016-01-29\n2012-02-24\t2013-02-22\t2014-02-28\t2015-02-27\t2016-02-26\n2012-03-30\t2013-03-29\t2014-03-28\t2015-03-27\t2016-03-25\n2012-04-27\t2013-04-26\t2014-04-25\t2015-04-24\t2016-04-29\n2012-05-25\t2013-05-31\t2014-05-30\t2015-05-29\t2016-05-27\n2012-06-29\t2013-06-28\t2014-06-27\t2015-06-26\t2016-06-24\n2012-07-27\t2013-07-26\t2014-07-25\t2015-07-31\t2016-07-29\n2012-08-31\t2013-08-30\t2014-08-29\t2015-08-28\t2016-08-26\n2012-09-28\t2013-09-27\t2014-09-26\t2015-09-25\t2016-09-30\n2012-10-26\t2013-10-25\t2014-10-31\t2015-10-30\t2016-10-28\n2012-11-30\t2013-11-29\t2014-11-28\t2015-11-27\t2016-11-25\n2012-12-28\t2013-12-27\t2014-12-26\t2015-12-25\t2016-12-30\nES6[edit]\n(() => {\n    \"use strict\";\n\n    // ------------ LAST FRIDAY OF EACH MONTH ------------\n\n    // lastWeekDaysOfYear\u00a0:: Int -> Int -> [Date]\n    const lastWeekDaysOfYear = iWeekDay =>\n        y => {\n            const isLeap = n => (\n                (0 === n % 4) && (0 !== n % 100)) || (\n                0 === y % 400\n            );\n\n            return [\n                    31, isLeap(y) ? 29 : 28,\n                    31, 30, 31, 30, 31, 31, 30, 31, 30, 31\n                ]\n                .map((d, m) =>\n                    new Date(Date.UTC(\n                        y, m, d - ((\n                            new Date(Date.UTC(\n                                y, m, d\n                            ))\n                            .getDay() + (7 - iWeekDay)\n                        ) % 7)\n                    ))\n                );\n        };\n\n\n    const days = {\n        sunday: 0,\n        monday: 1,\n        tuesday: 2,\n        wednesday: 3,\n        thursday: 4,\n        friday: 5,\n        saturday: 6\n    };\n\n    // ---------------------- TEST -----------------------\n    const main = () =>\n        transpose(\n            enumFromTo(2015)(2019)\n            .map(lastWeekDaysOfYear(days.friday))\n        )\n        .map(\n            row => row.map(isoDateString).join(\"\\t\")\n        )\n        .join(\"\\n\");\n\n\n    // ---------------- GENERIC FUNCTIONS ----------------\n\n    // enumFromTo\u00a0:: Int -> Int -> [Int]\n    const enumFromTo = m =>\n        n => Array.from({\n            length: 1 + n - m\n        }, (_, i) => m + i);\n\n\n    // isoDateString\u00a0:: Date -> String\n    const isoDateString = dte =>\n        dte.toISOString()\n        .substr(0, 10);\n\n\n    // transpose\u00a0:: [[a]] -> [[a]]\n    const transpose = rows =>\n        // The columns of the input transposed\n        // into new rows.\n        0 < rows.length ? rows[0].map(\n            (x, i) => rows.flatMap(\n                v => v[i]\n            )\n        ) : [];\n\n    // MAIN ---\n    return main();\n})();\n\n\nOutput:\n2015-01-30    2016-01-29    2017-01-27    2018-01-26    2019-01-25\n2015-02-27    2016-02-26    2017-02-24    2018-02-23    2019-02-22\n2015-03-27    2016-03-25    2017-03-31    2018-03-30    2019-03-29\n2015-04-24    2016-04-29    2017-04-28    2018-04-27    2019-04-26\n2015-05-29    2016-05-27    2017-05-26    2018-05-25    2019-05-31\n2015-06-26    2016-06-24    2017-06-30    2018-06-29    2019-06-28\n2015-07-31    2016-07-29    2017-07-28    2018-07-27    2019-07-26\n2015-08-28    2016-08-26    2017-08-25    2018-08-31    2019-08-30\n2015-09-25    2016-09-30    2017-09-29    2018-09-28    2019-09-27\n2015-10-30    2016-10-28    2017-10-27    2018-10-26    2019-10-25\n2015-11-27    2016-11-25    2017-11-24    2018-11-30    2019-11-29\n2015-12-25    2016-12-30    2017-12-29    2018-12-28    2019-12-27\n", "explain": ""}, {"task_name": "Last Friday of each month", "task_url": "https://rosettacode.org/wiki/Last_Friday_of_each_month", "task_cat": "Date and time", "lang": "SQL", "code": "\nselect to_char( next_day( last_day( add_months( to_date(\n        :yr||'01','yyyymm' ),level-1))-7,'Fri') ,'yyyy-mm-dd Dy') lastfriday\nfrom dual\nconnect by level <= 12;\n\nLASTFRIDAY\n-----------------------\n2012-01-27 Fri\n2012-02-24 Fri\n2012-03-30 Fri\n2012-04-27 Fri\n2012-05-25 Fri\n2012-06-29 Fri\n2012-07-27 Fri\n2012-08-31 Fri\n2012-09-28 Fri\n2012-10-26 Fri\n2012-11-30 Fri\n2012-12-28 Fri\n\n12 rows selected.\n\n", "explain": ""}, {"task_name": "Last Friday of each month", "task_url": "https://rosettacode.org/wiki/Last_Friday_of_each_month", "task_cat": "Date and time", "lang": "PHP", "code": "\n\n<?php\nfunction last_friday_of_month($year, $month) {\n  $day = 0;\n  while(True) {\n    $last_day = mktime(0, 0, 0, $month+1, $day, $year); \n    if (date(\"w\", $last_day) == 5) {\n      return date(\"Y-m-d\", $last_day);\n    }\n    $day -= 1;\n  }\n}\n \nfunction print_last_fridays_of_month($year) {\n  foreach(range(1, 12) as $month) {\n    echo last_friday_of_month($year, $month), \"<br>\";\n  }\n}\n \ndate_default_timezone_set(\"GMT\");\n$year = 2012;\nprint_last_fridays_of_month($year);\n?>\n\n\nOutput:\n2012-01-27\n2012-02-24\n2012-03-30\n2012-04-27\n2012-05-25\n2012-06-29\n2012-07-27\n2012-08-31\n2012-09-28\n2012-10-26\n2012-11-30\n2012-12-28\n\n", "explain": "PHP is generally used for web apps, so I am not implementing the command-line component of this task.\n"}, {"task_name": "Last Friday of each month", "task_url": "https://rosettacode.org/wiki/Last_Friday_of_each_month", "task_cat": "Date and time", "lang": "Fortran", "code": "\n\nprogram fridays\n   implicit none\n   integer :: days(1:12) = (/31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31/)\n   integer :: year, k, y, m\n   read *, year\n   if (mod(year, 400) == 0 .or. (mod(year, 4) == 0 .and. mod(year, 100) /= 0)) days(2) = 29\n   y = year - 1\n   k = 44 + y + y/4 + 6*(y/100) + y/400\n   do m = 1, 12\n      k = k + days(m)\n      print \"(I4,A1,I2.2,A1,I2)\", year, '-', m, '-', days(m) - mod(k, 7)\n   end do\nend program\n\n", "explain": "Algorithm: compute day of week for last day of month, then subtract just enough to get to the preceding friday. Do this for each month. To simplify computations further, we only need to compute day of week of january 1st (the others are found by adding month lengths). Since day of week need only be known modulo 7, we do not compute modulo at all except once when subtracting.\n"}, {"task_name": "Last Friday of each month", "task_url": "https://rosettacode.org/wiki/Last_Friday_of_each_month", "task_cat": "Date and time", "lang": "Go", "code": "\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"strconv\"\n\t\"time\"\n)\n\nfunc main() {\n\ty := time.Now().Year()\n\tif len(os.Args) == 2 {\n\t\tif i, err := strconv.Atoi(os.Args[1]); err == nil {\n\t\t\ty = i\n\t\t}\n\t}\n\tfor m := time.January; m <= time.December; m++ {\n\t\td := time.Date(y, m+1, 1, 0, 0, 0, 0, time.UTC).Add(-24 * time.Hour)\n\t\td = d.Add(-time.Duration((d.Weekday()+7-time.Friday)%7) * 24 * time.Hour)\n\t\tfmt.Println(d.Format(\"2006-01-02\"))\n\t}\n}\n\n\nOutput:\n> ./fridays 2012\n2012-01-27\n2012-02-24\n2012-03-30\n2012-04-27\n2012-05-25\n2012-06-29\n2012-07-27\n2012-08-31\n2012-09-28\n2012-10-26\n2012-11-30\n2012-12-28\n\n", "explain": ""}, {"task_name": "Last Friday of each month", "task_url": "https://rosettacode.org/wiki/Last_Friday_of_each_month", "task_cat": "Date and time", "lang": "Delphi", "code": "\n\nprogram LastFridayOfMonth;\n\n{$APPTYPE CONSOLE}\n\nuses\n  System.SysUtils, System.DateUtils;\n\nvar\n  Year: Word;\n  Month: Word;\n  D1: TDateTime;\n  D2: Word;\n\nbegin\n  Write('Enter year: ');\n  ReadLn(Year);\n\n  for Month := MonthJanuary to MonthDecember do begin\n    D1 := EndOfAMonth(Year, Month);\n    D2 := DayOfTheWeek(D1);\n    while D2 <> DayFriday do begin\n      D1 := IncDay(D1, -1);\n      D2 := DayOfTheWeek(D1);\n    end;\n    WriteLn(DateToStr(D1));\n  end;\nend.\n\n\nOutput:\nEnter year: 2019\n25.01.2019\n22.02.2019\n29.03.2019\n26.04.2019\n31.05.2019\n28.06.2019\n26.07.2019\n30.08.2019\n27.09.2019\n25.10.2019\n29.11.2019\n27.12.2019\n", "explain": "Uses the standard Delphi library.\n"}, {"task_name": "Last Friday of each month", "task_url": "https://rosettacode.org/wiki/Last_Friday_of_each_month", "task_cat": "Date and time", "lang": "Ruby", "code": "\nrequire 'date'\n\ndef last_friday(year, month)\n  # Last day of month: Date.new interprets a negative number as a relative month/day from the end of year/month.\n  d = Date.new(year, month, -1)\n  d -= (d.wday - 5) % 7  # Subtract days after Friday.\nend\n\nyear = Integer(ARGV.shift)\n(1..12).each {|month| puts last_friday(year, month)}\n\n\n\nOutput:\n2012-01-27\n2012-02-24\n2012-03-30\n2012-04-27\n2012-05-25\n2012-06-29\n2012-07-27\n2012-08-31\n2012-09-28\n2012-10-26\n2012-11-30\n2012-12-28\n\n\nrequire 'date'\n\ndef last_friday(year, month)\n  d = Date.new(year, month, -1)\n  d = d.prev_day until d.friday?\n  d\nend\n\n", "explain": "Friday is d.wday == 5; the expression (d.wday - 5)\u00a0% 7 counts days after Friday.\nOr get the last day of the month and go to the previous day until it's a Friday.\n"}, {"task_name": "Last Friday of each month", "task_url": "https://rosettacode.org/wiki/Last_Friday_of_each_month", "task_cat": "Date and time", "lang": "Rust", "code": "\nuse std::env::args;\nuse time::{Date, Duration};\n\nfn main() {\n    let year = args().nth(1).unwrap().parse::<i32>().unwrap();\n    (1..=12)\n        .map(|month| Date::try_from_ymd(year + month / 12, ((month % 12) + 1) as u8, 1))\n        .filter_map(|date| date.ok())\n        .for_each(|date| {\n            let days_back =\n                Duration::days(((date.weekday().number_from_sunday() as i64) % 7) + 1);\n            println!(\"{}\", date - days_back);\n        });\n}\n\n\nOutput:\n2012-01-27\n2012-02-24\n2012-03-30\n2012-04-27\n2012-05-25\n2012-06-29\n2012-07-27\n2012-08-31\n2012-09-28\n2012-10-26\n2012-11-30\n2012-12-28\n\n", "explain": ""}, {"task_name": "Last Friday of each month", "task_url": "https://rosettacode.org/wiki/Last_Friday_of_each_month", "task_cat": "Date and time", "lang": "Swift", "code": "\nimport Foundation\n\nfunc lastFridays(of year: Int) -> [Date] {\n\t\n\tlet calendar = Calendar.current\n\tvar dates = [Date]()\n\t\n\tfor month in 2...13 {\n\t\t\n\t\tlet lastDayOfMonth = DateComponents(calendar: calendar,\n\t\t                                    year: year,\n\t\t                                    month: month,\n\t\t                                    day: 0,\n\t\t                                    hour: 12)\n\t\t\n\t\tlet date = calendar.date(from: lastDayOfMonth)!\n\t\t\n\t\tlet isFriday = calendar.component(.weekday, from: date) == 6\n\t\t\n\t\tif isFriday {\n\t\t\t\n\t\t\tdates.append(calendar.date(from: lastDayOfMonth)!)\n\t\t\t\n\t\t} else {\n\t\t\t\n\t\t\tlet lastWeekofMonth = calendar.ordinality(of: .weekOfMonth,\n\t\t\t                                          in: .month,\n\t\t\t                                          for: date)!\n\t\t\t\n\t\t\tlet lastWithFriday = lastWeekofMonth - (calendar.component(.weekday, from: date) > 6 ? 0 : 1)\n\t\t\t\n\t\t\tlet lastFridayOfMonth = DateComponents(calendar: calendar,\n\t\t\t                                       year: year,\n\t\t\t                                       month: month - 1,\n\t\t\t                                       hour: 12,\n\t\t\t                                       weekday: 6,\n\t\t\t                                       weekOfMonth: lastWithFriday)\n\t\t\t\n\t\t\tdates.append(calendar.date(from: lastFridayOfMonth)!)\n\t\t}\n\t}\n\treturn dates\n}\n\nvar dateFormatter = DateFormatter()\ndateFormatter.dateStyle = .short\n\nprint(lastFridays(of: 2013).map(dateFormatter.string).joined(separator: \"\\n\"))\n\n1/27/12\n2/24/12\n3/30/12\n4/27/12\n5/25/12\n6/29/12\n7/27/12\n8/31/12\n9/28/12\n10/26/12\n11/30/12\n12/28/12\n\n", "explain": ""}, {"task_name": "Last Friday of each month", "task_url": "https://rosettacode.org/wiki/Last_Friday_of_each_month", "task_cat": "Date and time", "lang": "R", "code": "\nyear = commandArgs(T)\nd = as.Date(paste0(year, \"-01-01\"))\nfridays = d + seq(by = 7,\n    (5 - as.POSIXlt(d)$wday) %% 7,\n    364 + (months(d + 30 + 29) == \"February\"))\nmessage(paste(collapse = \"\\n\", fridays[tapply(\n    seq_along(fridays), as.POSIXlt(fridays)$mon, max)]))\n\n", "explain": ""}, {"task_name": "Last Friday of each month", "task_url": "https://rosettacode.org/wiki/Last_Friday_of_each_month", "task_cat": "Date and time", "lang": "COBOL", "code": "\n       program-id. last-fri.\n       data division.\n       working-storage section.\n       1 wk-date.\n        2 yr pic 9999.\n        2 mo pic 99 value 1.\n        2 da pic 99 value 1.\n       1 rd-date redefines wk-date pic 9(8).\n       1 binary.\n        2 int-date pic 9(8).\n        2 dow pic 9(4).\n        2 friday pic 9(4) value 5.\n       procedure division.\n           display \"Enter a calendar year (1601 thru 9999): \"\n               with no advancing\n           accept yr\n           if yr >= 1601 and <= 9999\n               continue\n           else\n               display \"Invalid year\"\n               stop run\n           end-if\n           perform 12 times\n               move 1 to da\n               add 1 to mo\n               if mo > 12              *> to avoid y10k in 9999\n                   move 12 to mo\n                   move 31 to da\n               end-if\n               compute int-date = function\n                   integer-of-date (rd-date)\n               if mo =12 and da = 31   *> to avoid y10k in 9999\n                   continue\n               else\n                   subtract 1 from int-date\n               end-if\n               compute rd-date = function\n                   date-of-integer (int-date)\n               compute dow = function mod\n                   ((int-date - 1) 7) + 1\n               compute dow = function mod ((dow - friday) 7)\n               subtract dow from da\n               display yr \"-\" mo \"-\" da\n               add 1 to mo\n           end-perform\n           stop run\n           .\n       end program last-fri.\n\n\nOutput:\n2016-01-29\n2016-02-26\n2016-03-25\n2016-04-29\n2016-05-27\n2016-06-24\n2016-07-29\n2016-08-26\n2016-09-30\n2016-10-28\n2016-11-25\n2016-12-30\n\n", "explain": ""}, {"task_name": "Last Friday of each month", "task_url": "https://rosettacode.org/wiki/Last_Friday_of_each_month", "task_cat": "Date and time", "lang": "Visual_FoxPro", "code": "\n*!* OOP implementaion\nLOCAL lnYear As Integer, oCalc As fricalc\nCLEAR\nlnYear = VAL(INPUTBOX(\"Year\", \"Year\"))\noCalc = NEWOBJECT(\"fricalc\")\noCalc.LastFriday(lnYear)\n\nDEFINE CLASS fricalc As Session\nDataSession = 2\t&& Private\n\nPROCEDURE Init\n*!* These date settings are private to this class\nSET DATE YMD\nSET CENTURY ON\nSET MARK TO \"-\"\nENDPROC\n\nFUNCTION LastFriday(tnYear As Integer) As VOID\nLOCAL i As Integer, ldDate As Date\nCLEAR\n? \"Last Fridays in the year \" + TRANSFORM(tnYear)\nFOR i = 1 TO 12\n\tldDate = DATE(tnYear, i, 1)\t&& 1st of month\n\tldDate = GOMONTH(ldDate, 1) - 1\t&& last day of month\n\t*!* Use the built in function to return the day of the week\n\t*!* 6 is Friday\n\tDO WHILE DOW(ldDate) # 6\n\t\tldDate = ldDate - 1 \n\tENDDO\n\t? ldDate\nENDFOR\nENDFUNC\n\nENDDEFINE\n\n", "explain": ""}, {"task_name": "Last Friday of each month", "task_url": "https://rosettacode.org/wiki/Last_Friday_of_each_month", "task_cat": "Date and time", "lang": "Ada", "code": "\n\nwith Ada.Text_IO, GNAT.Calendar.Time_IO, Ada.Command_Line,\n  Ada.Calendar.Formatting, Ada.Calendar.Arithmetic;\n\nprocedure Last_Weekday_In_Month is\n   \n   procedure Put_Line(T: Ada.Calendar.Time) is\n      use GNAT.Calendar.Time_IO;\n   begin\n      Ada.Text_IO.Put_Line(Image(Date => T, Picture => ISO_Date));\n   end Put_Line;\n   \n   use Ada.Calendar, Ada.Calendar.Arithmetic;\n   subtype Day_Name is Formatting.Day_Name; use type Formatting.Day_Name;\n   \n   T, Selected : Time;\n   Weekday: Day_Name  := Day_Name'Value(Ada.Command_Line.Argument (1));\n   Year : Year_Number := Integer'Value (Ada.Command_Line.Argument (2));\n   \nbegin\n   for Month in 1 .. 12 loop\n      T := Time_Of (Year => Year, Month => Month, Day => 01);\n      while Ada.Calendar.Month(T) = Month loop\n\t if Formatting.Day_Of_Week (T) = Weekday then\n\t    Selected := T;\n\t end if;\n\t T := T + Day_Count(1);\n      end loop;\n      Put_Line(Selected);\n   end loop;\nend Last_Weekday_In_Month;\n\n\nOutput:\n>./last_weekday_in_month friday 2012\n2012-01-27\n2012-02-24\n2012-03-30\n2012-04-27\n2012-05-25\n2012-06-29\n2012-07-27\n2012-08-31\n2012-09-28\n2012-10-26\n2012-11-30\n2012-12-28\n", "explain": "Uses GNAT. Applicable to any day of the week, cf. [[1]]. \n"}, {"task_name": "Last Friday of each month", "task_url": "https://rosettacode.org/wiki/Last_Friday_of_each_month", "task_cat": "Date and time", "lang": "Julia", "code": "\nusing Dates\n\nconst wday = Dates.Fri\nconst lo = 1\nconst hi = 12\n\nprint(\"\\nThis script will print the last \", Dates.dayname(wday))\nprintln(\"s of each month of the year given.\")\nprintln(\"(Leave input empty to quit.)\")\n\nwhile true\n    print(\"\\nYear> \")\n    y = chomp(readline())\n    0 < length(y) || break\n    y = try\n        parseint(y)\n    catch\n        println(\"Sorry, but \\\"\", y, \"\\\" does not compute as a year.\")\n        continue\n    end\n    println()\n    for m in Date(y, lo):Month(1):Date(y, hi)\n        println(\"    \", tolast(m, wday))\n    end\nend\n\nOutput:\nThis script will print the last Fridays of each month of the year given.\n(Leave input empty to quit.)\n\nYear> 2012\n\n    2012-01-27\n    2012-02-24\n    2012-03-30\n    2012-04-27\n    2012-05-25\n    2012-06-29\n    2012-07-27\n    2012-08-31\n    2012-09-28\n    2012-10-26\n    2012-11-30\n    2012-12-28\n\nYear> this year \nSorry, but \"this year\" does not compute as a year.\n\nYear> \n\n", "explain": ""}, {"task_name": "Last Friday of each month", "task_url": "https://rosettacode.org/wiki/Last_Friday_of_each_month", "task_cat": "Date and time", "lang": "Kotlin", "code": "\n// version 1.0.6\n\nimport java.util.*\n\nfun main(args: Array<String>) {\n    print(\"Enter a year\u00a0: \")\n    val year = readLine()!!.toInt()\n    \n    println(\"The last Fridays of each month in $year are as follows:\")\n    val calendar = GregorianCalendar(year, 0, 31)\n    for (month in 1..12) {\n        val daysInMonth = calendar.getActualMaximum(Calendar.DAY_OF_MONTH)\n        var offset = calendar[Calendar.DAY_OF_WEEK] - Calendar.FRIDAY\n        if (offset < 0) offset += 7\n        val lastFriday = daysInMonth - offset\n        println(\"$year-\" + \"%02d-\".format(month) + \"%02d\".format(lastFriday))\n        if (month < 12) {\n            calendar.add(Calendar.DAY_OF_MONTH, 1)\n            calendar.add(Calendar.MONTH, 1)\n            calendar.add(Calendar.DAY_OF_MONTH, -1)\n        }\n    }\n}\n\n\nOutput:\nEnter a year\u00a0: 2012\nThe last Fridays of each month in 2012 are as follows:\n2012-01-27\n2012-02-24\n2012-03-30\n2012-04-27\n2012-05-25\n2012-06-29\n2012-07-27\n2012-08-31\n2012-09-28\n2012-10-26\n2012-11-30\n2012-12-28\n\n", "explain": ""}, {"task_name": "Last Friday of each month", "task_url": "https://rosettacode.org/wiki/Last_Friday_of_each_month", "task_cat": "Date and time", "lang": "Perl", "code": "\n#!/usr/bin/perl -w\nuse strict ;\nuse DateTime ;\nuse feature qw( say ) ;\n\nforeach my $month ( 1..12 ) {\n   my $dt = DateTime->last_day_of_month( year => $ARGV[ 0 ] , month => $month ) ;\n   while ( $dt->day_of_week != 5 ) {\n      $dt->subtract( days => 1 ) ;\n   }\n   say $dt->ymd ;\n}\n\n\nOutput:\n2012-01-27\n2012-02-24\n2012-03-30\n2012-04-27\n2012-05-25\n2012-06-29\n2012-07-27\n2012-08-31\n2012-09-28\n2012-10-26\n2012-11-30\n2012-12-28\n\n", "explain": ""}, {"task_name": "Last Friday of each month", "task_url": "https://rosettacode.org/wiki/Last_Friday_of_each_month", "task_cat": "Date and time", "lang": "Lua", "code": "\nfunction isLeapYear (y)\n    return (y % 4 == 0 and y % 100 ~=0) or y % 400 == 0\nend\n\nfunction dayOfWeek (y, m, d)\n    local t = os.time({year = y, month = m, day = d})\n    return os.date(\"%A\", t)\nend\n\nfunction lastWeekdays (wday, year)\n    local monthLength, day = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}\n    if isLeapYear(year) then monthLength[2] = 29 end\n    for month = 1, 12 do\n        day = monthLength[month]\n        while dayOfWeek(year, month, day) ~= wday do day = day - 1 end\n        print(year .. \"-\" .. month .. \"-\" .. day)\n    end\nend\n\nlastWeekdays(\"Friday\", tonumber(arg[1]))\n\n\n>lua lastFridays.lua 2012\n2012-1-27\n2012-2-24\n2012-3-30\n2012-4-27\n2012-5-25\n2012-6-29\n2012-7-27\n2012-8-31\n2012-9-28\n2012-10-26\n2012-11-30\n2012-12-28\n\n>\n", "explain": "Command line session:\n"}, {"task_name": "Last Friday of each month", "task_url": "https://rosettacode.org/wiki/Last_Friday_of_each_month", "task_cat": "Date and time", "lang": "Scala", "code": "\nimport java.util.Calendar\nimport java.text.SimpleDateFormat\n\nobject Fridays {\n\n  def lastFridayOfMonth(year:Int, month:Int)={\n    val cal=Calendar.getInstance\n    cal.set(Calendar.YEAR, year)\n    cal.set(Calendar.MONTH, month)\n    cal.set(Calendar.DAY_OF_WEEK, Calendar.FRIDAY)\n    cal.set(Calendar.DAY_OF_WEEK_IN_MONTH, -1)\n    cal.getTime\n  }\n\t\n  def fridaysOfYear(year:Int)=for(month <- 0 to 11) yield lastFridayOfMonth(year, month)\n\t\n  def main(args:Array[String]){\n    val year=args(0).toInt\n    val formatter=new SimpleDateFormat(\"yyyy-MMM-dd\")\n    fridaysOfYear(year).foreach{date=>\n      println(formatter.format(date))\n    }\n  }\n}\n\n\nOutput:\n2012-Jan-27\n2012-Feb-24\n2012-Mrz-30\n2012-Apr-27\n2012-Mai-25\n2012-Jun-29\n2012-Jul-27\n2012-Aug-31\n2012-Sep-28\n2012-Okt-26\n2012-Nov-30\n2012-Dez-28\n", "explain": ""}, {"task_name": "Last Friday of each month", "task_url": "https://rosettacode.org/wiki/Last_Friday_of_each_month", "task_cat": "Date and time", "lang": "D", "code": "\nimport std.stdio, std.datetime, std.traits;\n\nvoid lastFridays(in uint year) {\n    auto date = Date(year, 1, 1);\n    foreach (_; [EnumMembers!Month]) {\n        date.day(date.daysInMonth);\n        date.roll!\"days\"(-(date.dayOfWeek + 2) % 7);\n        writeln(date);\n        date.add!\"months\"(1, AllowDayOverflow.no);\n    }\n}\n\nvoid main() {\n    lastFridays(2012);\n}\n\n2012-Jan-27\n2012-Feb-24\n2012-Mar-30\n2012-Apr-27\n2012-May-25\n2012-Jun-29\n2012-Jul-27\n2012-Aug-31\n2012-Sep-28\n2012-Oct-26\n2012-Nov-30\n2012-Dec-28\n", "explain": ""}, {"task_name": "Last Friday of each month", "task_url": "https://rosettacode.org/wiki/Last_Friday_of_each_month", "task_cat": "Date and time", "lang": "Haskell", "code": "\nimport Data.Time.Calendar\n       (Day, addDays, showGregorian, fromGregorian, gregorianMonthLength)\nimport Data.Time.Calendar.WeekDate (toWeekDate)\nimport Data.List (transpose, intercalate)\n\n-- [1 .. 7] for [Mon .. Sun]\nfindWeekDay :: Int -> Day -> Day\nfindWeekDay dayOfWeek date =\n  head\n    (filter\n       (\\x ->\n           let (_, _, day) = toWeekDate x\n           in day == dayOfWeek)\n       ((`addDays` date) <$> [-6 .. 0]))\n\nweekDayDates :: Int -> Integer -> [String]\nweekDayDates dayOfWeek year =\n  ((showGregorian . findWeekDay dayOfWeek) .\n   (fromGregorian year <*> gregorianMonthLength year)) <$>\n  [1 .. 12]\n\nmain :: IO ()\nmain =\n  mapM_\n    putStrLn\n    (intercalate \"  \" <$> transpose (weekDayDates 5 <$> [2012 .. 2017]))\n\n\nOutput:\n2012-01-27  2013-01-25  2014-01-31  2015-01-30  2016-01-29  2017-01-27\n2012-02-24  2013-02-22  2014-02-28  2015-02-27  2016-02-26  2017-02-24\n2012-03-30  2013-03-29  2014-03-28  2015-03-27  2016-03-25  2017-03-31\n2012-04-27  2013-04-26  2014-04-25  2015-04-24  2016-04-29  2017-04-28\n2012-05-25  2013-05-31  2014-05-30  2015-05-29  2016-05-27  2017-05-26\n2012-06-29  2013-06-28  2014-06-27  2015-06-26  2016-06-24  2017-06-30\n2012-07-27  2013-07-26  2014-07-25  2015-07-31  2016-07-29  2017-07-28\n2012-08-31  2013-08-30  2014-08-29  2015-08-28  2016-08-26  2017-08-25\n2012-09-28  2013-09-27  2014-09-26  2015-09-25  2016-09-30  2017-09-29\n2012-10-26  2013-10-25  2014-10-31  2015-10-30  2016-10-28  2017-10-27\n2012-11-30  2013-11-29  2014-11-28  2015-11-27  2016-11-25  2017-11-24\n2012-12-28  2013-12-27  2014-12-26  2015-12-25  2016-12-30  2017-12-29\n", "explain": ""}, {"task_name": "Last Friday of each month", "task_url": "https://rosettacode.org/wiki/Last_Friday_of_each_month", "task_cat": "Date and time", "lang": "PowerShell", "code": "\nfunction last-dayofweek {\n    param(\n     [Int][ValidatePattern(\"[1-9][0-9][0-9][0-9]\")]$year,\n     [String][validateset('Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday')]$dayofweek\n    )\n    $date = (Get-Date -Year $year -Month 1 -Day 1)\n    while($date.DayOfWeek -ne $dayofweek) {$date = $date.AddDays(1)}\n    while($date.year -eq $year) {\n        if($date.Month -ne $date.AddDays(7).Month) {$date.ToString(\"yyyy-dd-MM\")}\n        $date = $date.AddDays(7)\n    }\n}\nlast-dayofweek 2012 \"Friday\"\n\n\n2012-01-27\n2012-02-24\n2012-03-30\n2012-04-27\n2012-05-25\n2012-06-29\n2012-07-27\n2012-08-31\n2012-09-28\n2012-10-26\n2012-11-30\n2012-12-28\n\nAlternate Version[edit]\n\nfunction Get-Date0fDayOfWeek\n{\n    [CmdletBinding(DefaultParameterSetName=\"None\")]\n    [OutputType([datetime])]\n    Param\n    (\n        [Parameter(Mandatory=$false,\n                   ValueFromPipeline=$true,\n                   ValueFromPipelineByPropertyName=$true,\n                   Position=0)]\n        [ValidateRange(1,12)]\n        [int]\n        $Month = (Get-Date).Month,\n\n        [Parameter(Mandatory=$false,\n                   ValueFromPipelineByPropertyName=$true,\n                   Position=1)]\n        [ValidateRange(1,9999)]\n        [int]\n        $Year = (Get-Date).Year,\n\n        [Parameter(Mandatory=$true, ParameterSetName=\"Sunday\")]\n        [switch]\n        $Sunday,\n\n        [Parameter(Mandatory=$true, ParameterSetName=\"Monday\")]\n        [switch]\n        $Monday,\n\n        [Parameter(Mandatory=$true, ParameterSetName=\"Tuesday\")]\n        [switch]\n        $Tuesday,\n\n        [Parameter(Mandatory=$true, ParameterSetName=\"Wednesday\")]\n        [switch]\n        $Wednesday,\n\n        [Parameter(Mandatory=$true, ParameterSetName=\"Thursday\")]\n        [switch]\n        $Thursday,\n\n        [Parameter(Mandatory=$true, ParameterSetName=\"Friday\")]\n        [switch]\n        $Friday,\n\n        [Parameter(Mandatory=$true, ParameterSetName=\"Saturday\")]\n        [switch]\n        $Saturday,\n\n        [switch]\n        $First,\n\n        [switch]\n        $Last,\n\n        [switch]\n        $AsString,\n\n        [Parameter(Mandatory=$false)]\n        [ValidateNotNullOrEmpty()]\n        [string]\n        $Format = \"dd-MMM-yyyy\"\n    )\n\n    Process\n    {\n        [datetime[]]$dates = 1..[DateTime]::DaysInMonth($Year,$Month) | ForEach-Object {\n            Get-Date -Year $Year -Month $Month -Day $_ -Hour 0 -Minute 0 -Second 0 |\n            Where-Object -Property DayOfWeek -Match $PSCmdlet.ParameterSetName\n        }\n\n        if ($First -or $Last)\n        {\n            if ($AsString)\n            {\n                if ($First) {$dates[0].ToString($Format)}\n                if ($Last)  {$dates[-1].ToString($Format)}\n            }\n            else\n            {\n                if ($First) {$dates[0]}\n                if ($Last)  {$dates[-1]}\n            }\n        }\n        else\n        {\n            if ($AsString)\n            {\n                $dates | ForEach-Object {$_.ToString($Format)}\n            }\n            else\n            {\n                $dates\n            }\n        }\n    }\n}\n\n\n1..12 | Get-Date0fDayOfWeek -Year 2012 -Last -Friday\n\n\nOutput:\nFriday, January 27, 2012 12:00:00 AM\nFriday, February 24, 2012 12:00:00 AM\nFriday, March 30, 2012 12:00:00 AM\nFriday, April 27, 2012 12:00:00 AM\nFriday, May 25, 2012 12:00:00 AM\nFriday, June 29, 2012 12:00:00 AM\nFriday, July 27, 2012 12:00:00 AM\nFriday, August 31, 2012 12:00:00 AM\nFriday, September 28, 2012 12:00:00 AM\nFriday, October 26, 2012 12:00:00 AM\nFriday, November 30, 2012 12:00:00 AM\nFriday, December 28, 2012 12:00:00 AM\n\n\n1..12 | Get-Date0fDayOfWeek -Year 2012 -Last -Friday -AsString\n\n\nOutput:\n27-Jan-2012\n24-Feb-2012\n30-Mar-2012\n27-Apr-2012\n25-May-2012\n29-Jun-2012\n27-Jul-2012\n31-Aug-2012\n28-Sep-2012\n26-Oct-2012\n30-Nov-2012\n28-Dec-2012\n\n\n1..12 | Get-Date0fDayOfWeek -Year 2012 -Last -Friday -AsString -Format yyyy-MM-dd\n\n\nOutput:\n2012-01-27\n2012-02-24\n2012-03-30\n2012-04-27\n2012-05-25\n2012-06-29\n2012-07-27\n2012-08-31\n2012-09-28\n2012-10-26\n2012-11-30\n2012-12-28\n\n", "explain": "Output:\nThis script finds the first and/or last or all dates of any of the days of week; accepts [Int32] and [DateTime] values for Month and Year parameters; outputs [DateTime] objects by default but has an option to output time strings in various formats.  This script also allows for pipeline input based mainly upon the Month parameter.\nThis script has a syntax as complex as any PowerShell Cmdlet because it attempts to do everything.\nThe default is to return [DateTime] objects:\nReturn the [DateTime] objects as strings (using the default string format):\nReturn the [DateTime] objects as strings (specifying the string format):\n"}, {"task_name": "Last Friday of each month", "task_url": "https://rosettacode.org/wiki/Last_Friday_of_each_month", "task_cat": "Date and time", "lang": "Logo", "code": "\n; Determine if a Gregorian calendar year is leap \nto leap? :year\n  output (and \n    equal? 0 modulo :year 4\n    not member? modulo :year 400 [100 200 300]\n  )\nend\n\n; Convert Gregorian calendar date to a simple day count from \n; RD 1 = January 1, 1 CE \nto day_number :year :month :day\n  local \"elapsed make \"elapsed difference :year 1\n  output (sum  product 365 :elapsed\n              int quotient :elapsed 4\n              minus int quotient :elapsed 100\n              int quotient :elapsed 400\n              int quotient difference product 367 :month 362 12\n              ifelse lessequal? :month 2 0 ifelse leap? :year -1 -2\n              :day)\nend\n\n; Find the day of the week from a day number, 0 = Sunday through 6 = Saturday\nto day_of_week :day_number\n  output modulo :day_number 7\nend\n\n; Find the date of the last Friday of a given month\nto last_friday :year :month\n  local \"zero make \"zero day_number :year :month 0\n  local \"last make \"last day_number :year sum 1 :month 0\n  local \"wday make \"wday day_of_week :last\n  local \"friday make \"friday sum :last remainder difference -2 :wday 7\n  output difference :friday :zero\nend\n\nlocal \"year\nmake \"year ifelse empty? :command.line 2012 :command.line\n\nrepeat 12 [\n  local \"month make \"month #\n  local \"day make \"day last_friday :year :month\n  if (less? :month 10) [make \"month word \"0 :month]\n  print reduce [(word ?1 \"- ?2)] (list :year :month :day)\n]\nbye\n\nOutput:\n$  logo last_fridays.lg - 2012\n2012-01-27\n2012-02-24\n2012-03-30\n2012-04-27\n2012-05-25\n2012-06-29\n2012-07-27\n2012-08-31\n2012-09-28\n2012-10-26\n2012-11-30\n2012-12-28\n", "explain": ""}, {"task_name": "Last Friday of each month", "task_url": "https://rosettacode.org/wiki/Last_Friday_of_each_month", "task_cat": "Date and time", "lang": "Groovy", "code": "\n\ndef ymd = { it.format('yyyy-MM-dd') }\ndef lastFridays = lastWeekDays.curry(Day.Fri)\nlastFridays(args[0] as int).each { println (ymd(it)) }\n\n\n[2273] groovy lastFridays.groovy 2012\n\nOutput:\n2012-01-27\n2012-02-24\n2012-03-30\n2012-04-27\n2012-05-25\n2012-06-29\n2012-07-27\n2012-08-31\n2012-09-28\n2012-10-26\n2012-11-30\n2012-12-28\n", "explain": "Solution: Same as Find last Sunday of each month\nTest:\nExecution (Cygwin on Windows 7):\n"}, {"task_name": "Last Friday of each month", "task_url": "https://rosettacode.org/wiki/Last_Friday_of_each_month", "task_cat": "Date and time", "lang": "AWK", "code": "\n# syntax: GAWK -f LAST_FRIDAY_OF_EACH_MONTH.AWK year\n# converted from Fortran\nBEGIN {\n    split(\"31,28,31,30,31,30,31,31,30,31,30,31\",daynum_array,\",\") # days per month in non leap year\n    year = ARGV[1]\n    if (year % 400 == 0 || (year % 4 == 0 && year % 100 != 0)) {\n      daynum_array[2] = 29\n    }\n    y = year - 1\n    k = 44 + y + int(y/4) + int(6*(y/100)) + int(y/400)\n    for (m=1; m<=12; m++) {\n      k += daynum_array[m]\n      d = daynum_array[m] - (k%7)\n      printf(\"%04d-%02d-%02d\\n\",year,m,d)\n    }\n    exit(0)\n}\n\n\nOutput:\n2012-01-27\n2012-02-24\n2012-03-30\n2012-04-27\n2012-05-25\n2012-06-29\n2012-07-27\n2012-08-31\n2012-09-28\n2012-10-26\n2012-11-30\n2012-12-28\n\n", "explain": ""}]