[{"task_name": "Random numbers", "task_url": "https://rosettacode.org/wiki/Random_numbers", "task_cat": "Randomness", "lang": "Python", "code": "\nUsing random.gauss\n\n>>> import random\n>>> values = [random.gauss(1, .5) for i in range(1000)]\n>>>\n\nQuick check of distribution\n\n>>> def quick_check(numbers):\n    count = len(numbers)\n    mean = sum(numbers) / count\n    sdeviation = (sum((i - mean)**2 for i in numbers) / count)**0.5\n    return mean, sdeviation\n\n>>> quick_check(values)\n(1.0140373306786599, 0.49943411329234066)\n>>>\n\n\nAlternatively using random.normalvariate\n\n>>> values = [ random.normalvariate(1, 0.5) for i in range(1000)]\n>>> quick_check(values)\n(0.990099111944864, 0.5029847005836282)\n>>>\n\n", "explain": "Note that the random module in the Python standard library supports a number of statistical distribution methods.\n"}, {"task_name": "Random numbers", "task_url": "https://rosettacode.org/wiki/Random_numbers", "task_cat": "Randomness", "lang": "C", "code": "\n#include <stdlib.h>\n#include <math.h>\n#ifndef M_PI\n#define M_PI 3.14159265358979323846\n#endif\n\ndouble drand()   /* uniform distribution, (0..1] */\n{\n  return (rand()+1.0)/(RAND_MAX+1.0);\n}\ndouble random_normal()  /* normal distribution, centered on 0, std dev 1 */\n{\n  return sqrt(-2*log(drand())) * cos(2*M_PI*drand());\n}\nint main()\n{\n  int i;\n  double rands[1000];\n  for (i=0; i<1000; i++)\n    rands[i] = 1.0 + 0.5*random_normal();\n  return 0;\n}\n\n", "explain": ""}, {"task_name": "Random numbers", "task_url": "https://rosettacode.org/wiki/Random_numbers", "task_cat": "Randomness", "lang": "C++", "code": "\nWorks with: C++11\n\n#include <random>\n#include <functional>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nint main()\n{\n  random_device seed;\n  mt19937 engine(seed());\n  normal_distribution<double> dist(1.0, 0.5);\n  auto rnd = bind(dist, engine);\n\n  vector<double> v(1000);\n  generate(v.begin(), v.end(), rnd);\n  return 0;\n}\n\nWorks with: C++03\n#include <cstdlib>   // for rand\n#include <cmath>     // for atan, sqrt, log, cos\n#include <algorithm> // for generate_n\n\ndouble const pi = 4*std::atan(1.0);\n\n// simple functor for normal distribution\nclass normal_distribution\n{\npublic:\n  normal_distribution(double m, double s): mu(m), sigma(s) {}\n  double operator() const // returns a single normally distributed number\n  {\n    double r1 = (std::rand() + 1.0)/(RAND_MAX + 1.0); // gives equal distribution in (0, 1]\n    double r2 = (std::rand() + 1.0)/(RAND_MAX + 1.0);\n    return mu + sigma * std::sqrt(-2*std::log(r1))*std::cos(2*pi*r2);\n  }\nprivate:\n  const double mu, sigma;\n};\n\nint main()\n{\n  double array[1000];\n  std::generate_n(array, 1000, normal_distribution(1.0, 0.5));\n  return 0;\n}\n\nLibrary: Boost\n\n#include <vector>\n#include \"boost/random.hpp\"\n#include \"boost/generator_iterator.hpp\"    \n#include <boost/random/normal_distribution.hpp>\n#include <algorithm>\n\ntypedef boost::mt19937 RNGType; ///< mersenne twister generator\n\nint main() {\n    RNGType rng;\n    boost::normal_distribution<> rdist(1.0,0.5); /**< normal distribution \n                           with mean of 1.0 and standard deviation of 0.5 */\n\n    boost::variate_generator< RNGType, boost::normal_distribution<> >\n                    get_rand(rng, rdist);  \n\n    std::vector<double> v(1000);\n    generate(v.begin(),v.end(),get_rand);\n    return 0;\n}\n\n", "explain": "The new C++ standard looks very similar to the Boost library example below.\nThis example used Mersenne Twister generator. It can be changed by changing the typedef.\n"}, {"task_name": "Random numbers", "task_url": "https://rosettacode.org/wiki/Random_numbers", "task_cat": "Randomness", "lang": "Java", "code": "\ndouble[] list = new double[1000];\ndouble mean = 1.0, std = 0.5;\nRandom rng = new Random();\nfor(int i = 0;i<list.length;i++) {\n  list[i] = mean + std * rng.nextGaussian();\n}\n\n", "explain": ""}, {"task_name": "Random numbers", "task_url": "https://rosettacode.org/wiki/Random_numbers", "task_cat": "Randomness", "lang": "C#", "code": "\nTranslation of: JavaScript\nprivate static double randomNormal()\n{\n\treturn Math.Cos(2 * Math.PI * tRand.NextDouble()) * Math.Sqrt(-2 * Math.Log(tRand.NextDouble()));\n}\n\n\nstatic Random tRand = new Random();\n\nstatic void Main(string[] args)\n{\n\tdouble[] a = new double[1000];\n\n\tdouble tAvg = 0;\n\tfor (int x = 0; x < a.Length; x++)\n\t{\n\t\ta[x] = randomNormal() / 2 + 1;\n\t\ttAvg += a[x];\n\t}\n\n\ttAvg /= a.Length;\n\tConsole.WriteLine(\"Average: \" + tAvg.ToString());\n\n\tdouble s = 0;\n\tfor (int x = 0; x < a.Length; x++)\n\t{\n\t\ts += Math.Pow((a[x] - tAvg), 2);\n\t}\n\ts = Math.Sqrt(s / 1000);\n\n\tConsole.WriteLine(\"Standard Deviation: \" + s.ToString());\n\n\tConsole.ReadLine();\n}\n\n\nAverage: 1,00510073053613\nStandard Deviation: 0,502540443430955\n\n", "explain": "Then the methods in Random numbers#Metafont are used to calculate the average and the Standard Deviation:\nAn example result:\n"}, {"task_name": "Random numbers", "task_url": "https://rosettacode.org/wiki/Random_numbers", "task_cat": "Randomness", "lang": "JavaScript", "code": "\nfunction randomNormal() {\n  return Math.cos(2 * Math.PI * Math.random()) * Math.sqrt(-2 * Math.log(Math.random()))\n}\n\nvar a = []\nfor (var i=0; i < 1000; i++){\n  a[i] = randomNormal() / 2 + 1\n}\n\n", "explain": ""}, {"task_name": "Random numbers", "task_url": "https://rosettacode.org/wiki/Random_numbers", "task_cat": "Randomness", "lang": "PHP", "code": "\nfunction random() {\n    return mt_rand() / mt_getrandmax();\n}\n\n$pi \t= pi();          // Set PI\n\n$a = array();\nfor ($i = 0; $i < 1000; $i++) {\n    $a[$i] = 1.0 + ((sqrt(-2 * log(random())) * cos(2 * $pi * random())) * 0.5);\n    \n}\n\n", "explain": ""}, {"task_name": "Random numbers", "task_url": "https://rosettacode.org/wiki/Random_numbers", "task_cat": "Randomness", "lang": "MATLAB", "code": "\n\n    mu = 1; sd = 0.5; \n    x = randn(1000,1) * sd + mu;\n\n\n   x = normrnd(mu, sd, [1000,1]);\n\n\nfunction randNum = randNorm(mu0,chi2, sz)\n           \n    radiusSquared = +Inf;\n\n    while (radiusSquared >= 1)\n        u = ( 2 * rand(sz) ) - 1;\n        v = ( 2 * rand(sz) ) - 1;\n\n        radiusSquared = u.^2 + v.^2;\n    end\n\n    scaleFactor = sqrt( ( -2*log(radiusSquared) )./ radiusSquared );\n    randNum = (v .* scaleFactor .* chi2) + mu0;\n\nend\n\n\n>> randNorm(1,.5, [1000,1])\n\nans =\n\n   0.693984121077029\n\n", "explain": "Native support\u00a0:\nThe statistics toolbox provides this function \nThis script uses the Box-Mueller Transform to transform a number from the uniform distribution to a normal distribution of mean = mu0 and standard deviation = chi2.\nOutput:\n"}, {"task_name": "Random numbers", "task_url": "https://rosettacode.org/wiki/Random_numbers", "task_cat": "Randomness", "lang": "Fortran", "code": "\nWorks with: Fortran version 90 and later\nPROGRAM Random\n\n  INTEGER, PARAMETER :: n = 1000\n  INTEGER :: i\n  REAL :: array(n), pi, temp, mean = 1.0, sd = 0.5\n\n  pi = 4.0*ATAN(1.0)\n  CALL RANDOM_NUMBER(array) ! Uniform distribution\n \n! Now convert to normal distribution\n  DO i = 1, n-1, 2\n    temp = sd * SQRT(-2.0*LOG(array(i))) * COS(2*pi*array(i+1)) + mean\n    array(i+1) = sd * SQRT(-2.0*LOG(array(i))) * SIN(2*pi*array(i+1)) + mean\n    array(i) = temp\n  END DO\n\n! Check mean and standard deviation\n  mean = SUM(array)/n\n  sd = SQRT(SUM((array - mean)**2)/n)\n \n  WRITE(*, \"(A,F8.6)\") \"Mean = \", mean\n  WRITE(*, \"(A,F8.6)\") \"Standard Deviation = \", sd\n\nEND PROGRAM Random\n\n\nOutput:\n Mean = 0.995112\n Standard Deviation = 0.503373\n\n", "explain": ""}, {"task_name": "Random numbers", "task_url": "https://rosettacode.org/wiki/Random_numbers", "task_cat": "Randomness", "lang": "Go", "code": "\n\npackage main\n\nimport (\n    \"fmt\"\n    \"math\"\n    \"math/rand\"\n    \"strings\"\n    \"time\"\n)\n\nconst mean = 1.0\nconst stdv = .5\nconst n = 1000\n\nfunc main() {\n    var list [n]float64\n    rand.Seed(time.Now().UnixNano())\n    for i := range list {\n        list[i] = mean + stdv*rand.NormFloat64()\n    }\n    // show computed mean and stdv of list\n    var s, sq float64\n    for _, v := range list {\n        s += v\n    }\n    cm := s / n\n    for _, v := range list {\n        d := v - cm\n        sq += d * d\n    }\n    fmt.Printf(\"mean\u00a0%.3f, stdv\u00a0%.3f\\n\", cm, math.Sqrt(sq/(n-1)))\n    // show histogram by hdiv divisions per stdv over +/-hrange stdv\n    const hdiv = 3\n    const hrange = 2\n    var h [1 + 2*hrange*hdiv]int\n    for _, v := range list {\n        bin := hrange*hdiv + int(math.Floor((v-mean)/stdv*hdiv+.5))\n        if bin >= 0 && bin < len(h) {\n            h[bin]++\n        }\n    }\n    const hscale = 10\n    for _, c := range h {\n        fmt.Println(strings.Repeat(\"*\", (c+hscale/2)/hscale))\n    }\n}\n\n\nOutput:\nmean 0.995, stdv 0.503\n**\n****\n******\n********\n************\n************\n*************\n************\n**********\n********\n*****\n***\n**\n\n", "explain": "This solution uses math/rand package in the standard library.  See also though the subrepository rand package at https://godoc.org/golang.org/x/exp/rand, which also has a NormFloat64 and has a rand source with a number of advantages over the one in standard library.\n"}, {"task_name": "Random numbers", "task_url": "https://rosettacode.org/wiki/Random_numbers", "task_cat": "Randomness", "lang": "Delphi", "code": "\n\nprogram Randoms;\n\n{$APPTYPE CONSOLE}\n\nuses\n  Math;\n\nvar\n  Values: array[0..999] of Double;\n  I: Integer;\n\nbegin\n//  Randomize;   Commented to obtain reproducible results\n  for I:= Low(Values) to High(Values) do\n    Values[I]:= RandG(1.0, 0.5);  // Mean = 1.0, StdDev = 0.5\n  Writeln('Mean          = ', Mean(Values):6:4);\n  Writeln('Std Deviation = ', StdDev(Values):6:4);\n  Readln;\nend.\n\n\nOutput:\nMean          = 1.0098\nStd deviation = 0.5016\n", "explain": "Delphi has RandG function which generates random numbers with normal distribution using Marsaglia-Bray algorithm:\n"}, {"task_name": "Random numbers", "task_url": "https://rosettacode.org/wiki/Random_numbers", "task_cat": "Randomness", "lang": "Ruby", "code": "\nArray.new(1000) { 1 + Math.sqrt(-2 * Math.log(rand)) * Math.cos(2 * Math::PI * rand) }\n\n", "explain": ""}, {"task_name": "Random numbers", "task_url": "https://rosettacode.org/wiki/Random_numbers", "task_cat": "Randomness", "lang": "Rust", "code": "\nLibrary: rand\n\nextern crate rand;\nuse rand::distributions::{Normal, IndependentSample};\n\nfn main() {\n    let mut rands = [0.0; 1000];\n    let normal = Normal::new(1.0, 0.5);\n    let mut rng = rand::thread_rng();\n    for num in rands.iter_mut() {\n        *num = normal.ind_sample(&mut rng);\n    }\n}\n\n\nextern crate rand;\nuse rand::distributions::{Normal, IndependentSample};\n\nfn main() {\n    let rands: Vec<_> = {\n        let normal = Normal::new(1.0, 0.5);\n        let mut rng = rand::thread_rng();\n        (0..1000).map(|_| normal.ind_sample(&mut rng)).collect()\n    };\n}\n\n", "explain": "Using a for-loop:\nUsing iterators:\n"}, {"task_name": "Random numbers", "task_url": "https://rosettacode.org/wiki/Random_numbers", "task_cat": "Randomness", "lang": "R", "code": "\n# For reproducibility, set the seed:\nset.seed(12345L)\n\nresult <- rnorm(1000, mean = 1, sd = 0.5)\n\n", "explain": ""}, {"task_name": "Random numbers", "task_url": "https://rosettacode.org/wiki/Random_numbers", "task_cat": "Randomness", "lang": "COBOL", "code": "\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. RANDOM.\n       AUTHOR.  Bill Gunshannon\n       INSTALLATION.  Home.\n       DATE-WRITTEN.  14 January 2022.\n      ************************************************************\n      ** Program Abstract:\n      **   Able to get the Mean to be really close to 1.0 but\n      **     couldn't get the Standard Deviation any closer than\n      **     .3 to .4.\n      ************************************************************\n       \n       DATA DIVISION.\n       \n       WORKING-STORAGE SECTION.\n       \n       01  Sample-Size          PIC 9(5)         VALUE 1000.\n       01  Total                PIC 9(10)V9(5)  VALUE 0.0.\n       01  Arith-Mean           PIC 999V999  VALUE 0.0.\n       01  Std-Dev              PIC 999V999  VALUE 0.0.\n       01  Seed                 PIC 999V999.\n       01  TI                   PIC 9(8).\n\n       01  Idx                  PIC 99999     VALUE 0.\n       01  Intermediate         PIC 9(10)V9(5)  VALUE 0.0.\n       01  Rnd-Work.\n           05  Rnd-Tbl \n                   OCCURS 1 TO 99999 TIMES DEPENDING ON Sample-Size.\n               10  Rnd              PIC 9V9999999  VALUE 0.0.\n       \n       PROCEDURE DIVISION.\n       \n       Main-Program.\n           ACCEPT TI FROM TIME.\n           MOVE FUNCTION RANDOM(TI) TO Seed.\n           PERFORM WITH TEST AFTER VARYING Idx \n                   FROM 1 BY 1 \n                   UNTIL Idx = Sample-Size\n              COMPUTE Intermediate = \n                           (FUNCTION RANDOM() * 2.01) \n              MOVE Intermediate TO Rnd(Idx)\n           END-PERFORM.\n           PERFORM WITH TEST AFTER VARYING Idx \n                   FROM 1 BY 1 \n                   UNTIL Idx = Sample-Size \n              COMPUTE Total = Total + Rnd(Idx)\n           END-PERFORM.\n\n\n           COMPUTE Arith-Mean = Total / Sample-Size.\n           DISPLAY \"Mean: \" Arith-Mean.\n\n\n           PERFORM WITH TEST AFTER VARYING Idx\n                   FROM 1 BY 1\n                   UNTIL Idx = Sample-Size\n              COMPUTE Intermediate = \n                      Intermediate + (Rnd(Idx) - Arith-Mean) ** 2\n           END-PERFORM.\n              COMPUTE Std-Dev = Intermediate / Sample-Size.\n\n\n           DISPLAY \"Std-Dev: \" Std-Dev.\n\n           STOP RUN.\n       \n       END PROGRAM RANDOM.\n\n", "explain": ""}, {"task_name": "Random numbers", "task_url": "https://rosettacode.org/wiki/Random_numbers", "task_cat": "Randomness", "lang": "Visual_FoxPro", "code": "\nLOCAL i As Integer, m As Double, n As Integer, sd As Double\npy = PI()\nSET TALK OFF \nSET DECIMALS TO 6\nCREATE CURSOR gdev (deviate B(6))\nRAND(-1)\nn = 1000\nm = 1\nsd = 0.5\nCLEAR\nFOR i = 1 TO n\n\tINSERT INTO gdev VALUES (GaussDev(m, 1/sd))\nENDFOR\nCALCULATE AVG(deviate), STD(deviate) TO m, sd\n? \"Mean\", m, \"Std Dev\", sd\nSET TALK ON\nSET DECIMALS TO \n\nFUNCTION GaussDev(mean As Double, sdev As Double) As Double\nLOCAL z As Double\nz = SQRT(-2*LOG(RAND()))*COS(py*RAND())\nIF sdev # 0\n\tz = mean + z/sdev\nENDIF\nRETURN z\t\nENDFUNC\n\n", "explain": ""}, {"task_name": "Random numbers", "task_url": "https://rosettacode.org/wiki/Random_numbers", "task_cat": "Randomness", "lang": "Ada", "code": "\nwith Ada.Numerics;                       use Ada.Numerics;\nwith Ada.Numerics.Float_Random;          use Ada.Numerics.Float_Random;\nwith Ada.Numerics.Elementary_Functions;  use Ada.Numerics.Elementary_Functions;\n\nprocedure Normal_Random is\n   function Normal_Distribution\n            (  Seed  : Generator;\n               Mu    : Float := 1.0;\n               Sigma : Float := 0.5\n            )  return Float is \n   begin\n      return\n         Mu + (Sigma * Sqrt (-2.0 * Log (Random (Seed), 10.0)) * Cos (2.0 * Pi * Random (Seed)));\n   end Normal_Distribution;\n      \n   Seed         : Generator;\n   Distribution : array (1..1_000) of Float; \nbegin\n   Reset (Seed);\n   for I in Distribution'Range loop\n      Distribution (I) := Normal_Distribution (Seed);\n   end loop;\nend Normal_Random;\n\n", "explain": ""}, {"task_name": "Random numbers", "task_url": "https://rosettacode.org/wiki/Random_numbers", "task_cat": "Randomness", "lang": "Julia", "code": "\n\nrandn(1000) * 0.5 + 1\n\n", "explain": "Julia's standard library provides a randn function to generate normally distributed random numbers (with mean 0 and standard deviation 0.5, which can be easily rescaled to any desired values):\n"}, {"task_name": "Random numbers", "task_url": "https://rosettacode.org/wiki/Random_numbers", "task_cat": "Randomness", "lang": "SAS", "code": "\n/* Generate 1000 random numbers with mean 1 and standard deviation 0.5. \n  SAS version 9.2 was used to create this code.*/\n\ndata norm1000;\n  call streaminit(123456); \n/* Set the starting point, so we can replicate results. \n   If you want different results each time, comment the above line. */\n  do i=1 to 1000;\n    r=rand('normal',1,0.5);\n    output;\n  end;\nrun;\n\n\n The MEANS Procedure\n\n                     Analysis Variable\u00a0: r\n\n                          Mean         Std Dev\n                  ----------------------------\n                     0.9907408       0.4844051\n                  ----------------------------\n\n", "explain": "Results: \n"}, {"task_name": "Random numbers", "task_url": "https://rosettacode.org/wiki/Random_numbers", "task_cat": "Randomness", "lang": "Kotlin", "code": "\n// version 1.0.6\n\nimport java.util.Random\n\nfun main(args: Array<String>) {\n    val r = Random()\n    val da = DoubleArray(1000)\n    for (i in 0 until 1000)  da[i] = 1.0 + 0.5 * r.nextGaussian()\n    // now check actual mean and SD\n    val mean = da.average()\n    val sd = Math.sqrt(da.map { (it - mean) * (it - mean) }.average())\n    println(\"Mean is $mean\")\n    println(\"S.D. is $sd\")\n}\n\n\n\nOutput:\nMean is 1.0071784073168768\nS.D. is 0.48567118114896807\n\n", "explain": "Sample output:\n"}, {"task_name": "Random numbers", "task_url": "https://rosettacode.org/wiki/Random_numbers", "task_cat": "Randomness", "lang": "Perl", "code": "\nmy $PI = 2 * atan2 1, 0;\n\nmy @nums = map {\n    1 + 0.5 * sqrt(-2 * log rand) * cos(2 * $PI * rand)\n} 1..1000;\n\n", "explain": ""}, {"task_name": "Random numbers", "task_url": "https://rosettacode.org/wiki/Random_numbers", "task_cat": "Randomness", "lang": "Lua", "code": "\nlocal list = {}\nfor i = 1, 1000 do\n  list[i] = 1 + math.sqrt(-2 * math.log(math.random())) * math.cos(2 * math.pi * math.random()) / 2\nend\n\n", "explain": ""}, {"task_name": "Random numbers", "task_url": "https://rosettacode.org/wiki/Random_numbers", "task_cat": "Randomness", "lang": "Scala", "code": "\nOne liner[edit]\nList.fill(1000)(1.0 + 0.5 * scala.util.Random.nextGaussian)\n\nAcademic[edit]\nobject RandomNumbers extends App {\n\n  val distribution: LazyList[Double] = {\n    def randomNormal: Double = 1.0 + 0.5 * scala.util.Random.nextGaussian\n\n    def normalDistribution(a: Double): LazyList[Double] = a #:: normalDistribution(randomNormal)\n\n    normalDistribution(randomNormal)\n  }\n\n  /*\n   * Let's test it\n   */\n  def calcAvgAndStddev[T](ts: Iterable[T])(implicit num: Fractional[T]): (T, Double) = {\n    val mean: T =\n      num.div(ts.sum, num.fromInt(ts.size)) // Leaving with type of function T\n\n    // Root of mean diffs\n    val stdDev = Math.sqrt(ts.map { x =>\n      val diff = num.toDouble(num.minus(x, mean))\n      diff * diff\n    }.sum / ts.size)\n\n    (mean, stdDev)\n  }\n\n  println(calcAvgAndStddev(distribution.take(1000))) // e.g. (1.0061433267806525,0.5291834867560893)\n}\n\n", "explain": ""}, {"task_name": "Random numbers", "task_url": "https://rosettacode.org/wiki/Random_numbers", "task_cat": "Randomness", "lang": "D", "code": "\nimport std.stdio, std.random, std.math;\n\nstruct NormalRandom {\n    double mean, stdDev;\n\n    // Necessary because it also defines an opCall.\n    this(in double mean_, in double stdDev_) pure nothrow {\n        this.mean = mean_;\n        this.stdDev = stdDev_;\n    }\n\n    double opCall() const /*nothrow*/ {\n        immutable r1 = uniform01, r2 = uniform01; // Not nothrow.\n        return mean + stdDev * sqrt(-2 * r1.log) * cos(2 * PI * r2);\n    }\n}\n\nvoid main() {\n    double[1000] array;\n    auto nRnd = NormalRandom(1.0, 0.5);\n    foreach (ref x; array)\n        //x = nRnd;\n        x = nRnd();\n}\n\nAlternative Version[edit]\n\nLibrary: tango\nimport tango.math.random.Random;\n\nvoid main() {\n    double[1000] list;\n    auto r = new Random();\n    foreach (ref l; list) {\n        r.normalSource!(double)()(l);\n        l = 1.0 + 0.5 * l;\n    }\n}\n\n", "explain": "(Untested)\n"}, {"task_name": "Random numbers", "task_url": "https://rosettacode.org/wiki/Random_numbers", "task_cat": "Randomness", "lang": "Haskell", "code": "\nimport System.Random\n\npairs :: [a] -> [(a,a)]\npairs (x:y:zs) = (x,y):pairs zs\npairs _        = []\n\ngauss mu sigma (r1,r2) = \n  mu + sigma * sqrt (-2 * log r1) * cos (2 * pi * r2)\n\ngaussians :: (RandomGen g, Random a, Floating a) => Int -> g -> [a]\ngaussians n g = take n $ map (gauss 1.0 0.5) $ pairs $ randoms g\n\nresult :: IO [Double]\nresult = getStdGen >>= \\g -> return $ gaussians 1000 g\n\n\nreplicateM 1000 $ normal 1 0.5\n\n\nimport  Data.Random\nimport Control.Monad\n\nthousandRandomNumbers :: RVar [Double]\nthousandRandomNumbers =  replicateM 1000 $ normal 1 0.5\n\nmain = do\n   x <- sample thousandRandomNumbers\n   print x\n\n", "explain": "Or using Data.Random from random-fu package:\nTo print them:\n"}, {"task_name": "Random numbers", "task_url": "https://rosettacode.org/wiki/Random_numbers", "task_cat": "Randomness", "lang": "PL/SQL", "code": "\nDECLARE\n  --The desired collection\n  type t_coll is table of number index by binary_integer; \n  l_coll t_coll;\n\n  c_max pls_integer\u00a0:= 1000;\nBEGIN\n   FOR l_counter IN 1 .. c_max\n   LOOP\n      -- dbms_random.normal delivers normal distributed random numbers with a mean of 0 and a variance of 1\n      -- We just adjust the values and get the desired result:\n      l_coll(l_counter)\u00a0:= DBMS_RANDOM.normal * 0.5 + 1;\n      DBMS_OUTPUT.put_line (l_coll(l_counter));\n   END LOOP;\nEND;\n", "explain": ""}, {"task_name": "Random numbers", "task_url": "https://rosettacode.org/wiki/Random_numbers", "task_cat": "Randomness", "lang": "Scheme", "code": "\n; linear congruential generator given in C99 section 7.20.2.1\n(define ((c-rand seed)) (set! seed (remainder (+ (* 1103515245 seed) 12345) 2147483648)) (quotient seed 65536))\n\n; uniform real numbers in open interval (0, 1)\n(define (unif-rand seed) (let ((r (c-rand seed))) (lambda () (/ (+ (r) 1) 32769.0))))\n\n; Box-Muller method to generate normal distribution\n(define (normal-rand unif m s)\n(let ((? #t) (! 0.0) (twopi (* 2.0 (acos -1.0))))\n(lambda ()\n   (set! ? (not ?))\n   (if ? !\n         (let ((a (sqrt (* -2.0 (log (unif))))) (b (* twopi (unif))))\n              (set! ! (+ m (* s a (sin b))))\n              (+ m (* s a (cos b))))))))\n\n(define rnorm (normal-rand (unif-rand 0) 1.0 0.5))\n\n; auxiliary function to get a list of 'n random numbers from generator 'r\n(define (rand-list r n) = (if (zero? n) '() (cons (r) (rand-list r (- n 1)))))\n\n(define v (rand-list rnorm 1000))\n\nv\n#|\n(-0.27965824722565835\n -0.8870860825789542\n 0.6499618744638194\n 0.31336141955110863\n ...\n 0.5648743998193049\n 0.8282656735558756\n 0.6399951934564637\n 0.7699535302478072)\n|#\n\n; check mean and standard deviation\n(define (mean-sdev v)\n(let loop ((v v) (a 0) (b 0) (n 0))\n(if (null? v)\n    (let ((mean (/ a n)))\n         (list mean (sqrt (/ (- b (* n mean mean)) (- n 1)))))\n    (let ((x (car v)))\n         (loop (cdr v) (+ a x) (+ b (* x x)) (+ n 1))))))\n\n(mean-sdev v)\n; (0.9562156817697293 0.5097087109575911)\n\n", "explain": ""}, {"task_name": "Random numbers", "task_url": "https://rosettacode.org/wiki/Random_numbers", "task_cat": "Randomness", "lang": "PowerShell", "code": "\n\nfunction Get-RandomNormal\n    {\n    [CmdletBinding()]\n    Param ( [double]$Mean, [double]$StandardDeviation )\n \n    $RandomNormal = $Mean + $StandardDeviation * [math]::Sqrt( -2 * [math]::Log( ( Get-Random -Minimum 0.0 -Maximum 1.0 ) ) ) * [math]::Cos( 2 * [math]::PI * ( Get-Random -Minimum 0.0 -Maximum 1.0 ) )\n \n    return $RandomNormal\n    }\n \n#  Standard deviation function for testing\nfunction Get-StandardDeviation\n    {\n    [CmdletBinding()]\n    param ( [double[]]$Numbers )\n \n    $Measure = $Numbers | Measure-Object -Average\n    $PopulationDeviation = 0\n    ForEach ($Number in $Numbers) { $PopulationDeviation += [math]::Pow( ( $Number - $Measure.Average ), 2 ) }\n    $StandardDeviation = [math]::Sqrt( $PopulationDeviation / ( $Measure.Count - 1 ) )\n    return $StandardDeviation\n    }\n \n#  Test\n$RandomNormalNumbers = 1..1000 | ForEach { Get-RandomNormal -Mean 1 -StandardDeviation 0.5 }\n \n$Measure = $RandomNormalNumbers | Measure-Object -Average\n \n$Stats = [PSCustomObject]@{\n    Count             = $Measure.Count\n    Average           = $Measure.Average\n    StandardDeviation = Get-StandardDeviation -Numbers $RandomNormalNumbers\n}\n\n$Stats | Format-List\n\n\nOutput:\nCount            \u00a0: 1000\nAverage          \u00a0: 1.01206560135809\nStandardDeviation\u00a0: 0.489099623426272\n\n", "explain": "Equation adapted from Liberty BASIC\n"}, {"task_name": "Random numbers", "task_url": "https://rosettacode.org/wiki/Random_numbers", "task_cat": "Randomness", "lang": "Logo", "code": "\nWorks with: UCB Logo\n\nto random.float  \u00a0; 0..1\n  localmake \"max.int lshift -1 -1\n  output quotient random :max.int :max.int\nend\n\nto random.gaussian\n  output product cos random 360  sqrt -2 / ln random.float\nend\n\nmake \"randoms cascade 1000 [fput random.gaussian / 2 + 1\u00a0?] []\n", "explain": "The earliest Logos only have a RANDOM function for picking a random non-negative integer. Many modern Logos have floating point random generators built-in.\n"}, {"task_name": "Random numbers", "task_url": "https://rosettacode.org/wiki/Random_numbers", "task_cat": "Randomness", "lang": "F#", "code": "\nlet n = MathNet.Numerics.Distributions.Normal(1.0,0.5)\nList.init 1000 (fun _->n.Sample())\n\n\nOutput:\n  [0.734433576; 1.54225304; 0.4407528678; 1.177675412; 0.4318617021;\n   0.6026656337; 0.769764924; 1.104693934; 0.6297500925; 0.9594598077;\n   1.684736389; 1.160376323; 0.883354356; 0.9513968363; 0.9727698268;\n   0.5315570949; 0.9599239266; 1.564976755; 0.7232002879; 1.084139442;\n   1.220914517; 0.3553085946; 1.112549824; 1.989443553; 0.5752307543;\n   1.156682549; 0.7886670467; 0.02050745923; 1.532060208; 1.18789591;\n   1.408946777; 1.038812004; 1.724679503; 1.671565045; 1.266831442;\n   1.363611654; 1.705819067; 0.5772366328; 0.4503488498; 1.496891481;\n   0.9831877282; 0.3845460366; 0.8253240671; 1.298969969; 0.4265904553;\n   0.9303696876; 0.445003361; 0.753175816; 0.6143534043; 1.059982235;\n   0.7143206784; 0.2233328038; 1.005178481; 0.7697392436; 0.5904948577;\n   0.5127953044; 0.6467346747; 0.7929387604; -0.1501790761; 0.8750780903;\n   0.941704369; 1.37941579; 0.4739006145; 1.998886344; 1.219428519;\n   0.06270791476; 1.097739804; 0.7584232803; 1.042177217; 1.166561247;\n   1.502357164; 1.171525776; 0.1528807432; 0.2289389756; 1.36208422;\n   0.3714421124; 1.299571092; 1.171553369; 1.317807265; 1.616662281;\n   1.724223246; 1.059580642; 1.270520918; -0.1827677907; 1.938593232;\n   1.420362143; 1.888357595; 0.7851629936; 0.7080554899; 0.7747215818;\n   1.403719877; 0.5765950249; 1.275206565; 0.6292054813; 1.525562798;\n   0.6224640457; 0.8524078517; 0.7646595627; 0.6799834691; 0.773111053; ...]\n ==F#==\nlet gaussianRand count =\n    let o = new System.Random()\n    let pi = System.Math.PI\n    let gaussrnd = \n        (fun _ -> 1. + 0.5 * sqrt(-2. * log(o.NextDouble())) * cos(2. * pi * o.NextDouble()))\n    [ for i in {0 .. (int count)} -> gaussrnd() ]\n\n", "explain": ""}, {"task_name": "Random numbers", "task_url": "https://rosettacode.org/wiki/Random_numbers", "task_cat": "Randomness", "lang": "Groovy", "code": "\nrnd = new Random()\nresult = (1..1000).inject([]) { r, i -> r << rnd.nextGaussian() }\n\n", "explain": ""}, {"task_name": "Random numbers", "task_url": "https://rosettacode.org/wiki/Random_numbers", "task_cat": "Randomness", "lang": "AWK", "code": "\n\n$ awk 'func r(){return sqrt(-2*log(rand()))*cos(6.2831853*rand())}BEGIN{for(i=0;i<1000;i++)s=s\" \"1+0.5*r();print s}'\n\n\nfunction r() {\n  return sqrt( -2*log( rand() ) ) * cos(6.2831853*rand() )\n}\n\nBEGIN {\n  n=1000\n  for(i=0;i<n;i++) {\n    x = 1 + 0.5*r()\n    s = s\" \"x\n  }\n  print s\n}\n\n\nOutput: first few values only\n0.783753 1.16682 1.17989 1.14975 1.34784 0.29296 0.979227 1.04402 0.567835 1.58812 0.465559 1.27186 0.324533 0.725827 -0.0626549 0.632273 1.0145 1.3387 0.861667 1.04147 1.2576 1.02497 0.58453 0.9619 1.26902 0.851048 -0.126259 0.863256 \n\n", "explain": "One-liner:\nReadable version:\n...\n"}]