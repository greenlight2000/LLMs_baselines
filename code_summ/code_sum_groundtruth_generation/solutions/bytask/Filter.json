[{"task_name": "Filter", "task_url": "https://rosettacode.org/wiki/Filter", "task_cat": "Iteration", "lang": "Python", "code": "\nWorks with: Python version 2.4\nvalues = range(10)\nevens = [x for x in values if not x & 1]\nievens = (x for x in values if not x & 1) # lazy\n# alternately but less idiomatic:\nevens = filter(lambda x: not x & 1, values)\n\nvalues = range(10)\nevens = values[::2]\n\nvalues = range(10)\nvalues[::2] = [11,13,15,17,19]\nprint values\n11, 1, 13, 3, 15, 5, 17, 7, 19, 9\n\nWorks with: Python version 3\n'''Functional filtering - by descending generality and increasing brevity'''\n\nfrom functools import (reduce)\nfrom itertools import (chain)\nimport inspect\nimport re\n\n\ndef f1(xs):\n    '''Catamorphism: fold / reduce.\n       See [The expressiveness and universality of fold]\n       (http://www.cs.nott.ac.uk/~pszgmh/fold.pdf)'''\n    return reduce(lambda a, x: a + [x] if even(x) else a, xs, [])\n\n\ndef f2(xs):\n    '''List monad bind/inject operator (concatMap combined with\n       an (a -> [b]) function which wraps its result in a\n       possibly empty list). This is the universal abstraction\n       which underlies list comprehensions.'''\n    return concatMap(lambda x: [x] if even(x) else [])(xs)\n\n\ndef f3(xs):\n    '''Built-in syntactic sugar for list comprehensions.\n       Convenient, and encouraged as 'Pythonic',\n       but less general and expressive than a fold.'''\n    return (x for x in xs if even(x))\n\n\ndef f4(xs):\n    '''Built-in filter function'''\n    return filter(even, xs)\n\n\ndef main():\n    '''Tests'''\n    xs = enumFromTo(0)(10)\n    print(\n        tabulated(showReturn)(\n            'By descending generality and increasing brevity:\\n'\n        )(\n            lambda f: list(f(xs))\n        )([f1, f2, f3, f4])\n    )\n\n\n# GENERIC -------------------------------------------------\n\n\n# concatMap\u00a0:: (a -> [b]) -> [a] -> [b]\ndef concatMap(f):\n    '''Concatenated list over which a function has been mapped.\n       The list monad can be derived by using a function of the type\n       (a -> [b]) which wraps its output in list\n       (using an empty list to represent computational failure).'''\n    return lambda xs: list(\n        chain.from_iterable(\n            map(f, xs)\n        )\n    )\n\n\n# enumFromTo\u00a0:: (Int, Int) -> [Int]\ndef enumFromTo(m):\n    '''Integer enumeration from m to n.'''\n    return lambda n: list(range(m, 1 + n))\n\n\n# even\u00a0:: Int -> Bool\ndef even(x):\n    '''Predicate'''\n    return 0 == x\u00a0% 2\n\n\n# showReturn\u00a0:: (a -> b) -> String\ndef showReturn(f):\n    '''Stringification of final (return) expression in function body.'''\n    return re.split('return ', inspect.getsource(f))[-1].strip()\n\n\n# tabulated\u00a0:: (a -> String) -> String -> (a -> b) -> [a] -> String\ndef tabulated(fShow):\n    '''heading -> function -> input List -> tabulated output string'''\n    def go(s, f, xs):\n        w = max(len(fShow(x)) for x in xs)\n        return s + '\\n' + '\\n'.join([\n            fShow(x).rjust(w, ' ') +\n            ' -> ' + str(f(x)) for x in xs\n        ])\n    return lambda s: lambda f: lambda xs: go(s, f, xs)\n\n\nif __name__ == '__main__':\n    main()\n\nOutput:\nBy descending generality and increasing brevity:\n\nreduce(lambda a, x: a + [x] if even(x) else a, xs, []) -> [0, 2, 4, 6, 8, 10]\n       concatMap(lambda x: [x] if even(x) else [])(xs) -> [0, 2, 4, 6, 8, 10]\n                            (x for x in xs if even(x)) -> [0, 2, 4, 6, 8, 10]\n                                      filter(even, xs) -> [0, 2, 4, 6, 8, 10]\n", "explain": "Alternative using the slice syntax with its optional \"stride\" expression:\nThis works for all versions of Python (at least as far back as 1.5).  Lists (arrays) can be \"sliced\" by indexing them with a range (lower and upper bounds).  Thus mylist[1:9] evaluates  into a list from the second item (excluding the first item which is mylist[0], of course) up to but not including the ninth item.  In Python the expression mylist[:] is synonymous with mylist[0:len(mylist)] ... returning a copy of the complete list.  also mylist[:x] returns the first x items from the list and negative numbers can be used such that mylist[-x:] returns the last x items from the list.  The relatively obscure and optional stride expression can skip items and/or force the evaluation from the end of the list downward towards it's lower elements.  Thus mylist[::-1] returns a reversed copy of the list, mylist[::2] returns all even elements, mylist[1::2] returns all odd elements, and so on.\nSince strings in Python can be treated as a sort of immutable list of characters then the slicing and extended slicing can also be used with them as well.  Thus mystring[::-2] will return every other character from the reverse order of the string.\nOne can also assign to a slice (of a list or other mutable indexed object.  Thus the following:\n\nOr in functional terms, by descending generality and increasing brevity:\n"}, {"task_name": "Filter", "task_url": "https://rosettacode.org/wiki/Filter", "task_cat": "Iteration", "lang": "C", "code": "\n#include <stdio.h>\n#include <stdlib.h>\n\nint even_sel(int x) { return !(x & 1); }\nint tri_sel(int x) { return x % 3; }\n\n/* using a predicate function sel() to select elements */\nint* grep(int *in, int len, int *outlen, int (*sel)(int), int inplace)\n{\n\tint i, j, *out;\n\n\tif (inplace)\tout = in;\n\telse\t\tout = malloc(sizeof(int) * len);\n\n\tfor (i = j = 0; i < len; i++)\n\t\tif (sel(in[i]))\n\t\t\tout[j++] = in[i];\n\n\tif (!inplace && j < len)\n\t\tout = realloc(out, sizeof(int) * j);\n\n\t*outlen = j;\n\treturn out;\n}\n\nint main()\n{\n\tint in[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };\n\tint i, len;\n\n\tint *even = grep(in, 10, &len, even_sel, 0);\n\tprintf(\"Filtered even:\");\n\tfor (i = 0; i < len; i++) printf(\" %d\", even[i]);\n\tprintf(\"\\n\");\n\n\tgrep(in, 8, &len, tri_sel, 1);\n\tprintf(\"In-place filtered not multiple of 3:\");\n\tfor (i = 0; i < len; i++) printf(\" %d\", in[i]);\n\n\tprintf(\"\\n\");\n\n\treturn 0;\n}\n\n\nOutput:\nFiltered even: 2 4 6 8 10\nIn-place filtered not multiple of 3: 1 2 4 5 7 8 10\n", "explain": ""}, {"task_name": "Filter", "task_url": "https://rosettacode.org/wiki/Filter", "task_cat": "Iteration", "lang": "C++", "code": "\n#include <vector>\n#include <algorithm>\n#include <functional>\n#include <iterator>\n#include <iostream>\n\nint main() {\n  std::vector<int> ary;\n  for (int i = 0; i < 10; i++)\n    ary.push_back(i);\n  std::vector<int> evens;\n  std::remove_copy_if(ary.begin(), ary.end(), back_inserter(evens),\n                      std::bind2nd(std::modulus<int>(), 2)); // filter copy\n  std::copy(evens.begin(), evens.end(),\n            std::ostream_iterator<int>(std::cout, \"\\n\"));\n\n  return 0;\n}\n\n\nWorks with: C++11\n#include <vector>\n#include <algorithm>\n#include <iterator>\n#include <iostream>\n\nusing namespace std;\n\nint main() {\n  vector<int> ary = {1, 2, 3, 4, 5, 6, 7, 8, 9};\n  vector<int> evens;\n\n  copy_if(ary.begin(), ary.end(), back_inserter(evens),\n      [](int i) { return i % 2 == 0; });\n\n  // print result\n  copy(evens.begin(), evens.end(), ostream_iterator<int>(cout, \"\\n\"));\n}\n\n", "explain": "\n"}, {"task_name": "Filter", "task_url": "https://rosettacode.org/wiki/Filter", "task_cat": "Iteration", "lang": "Java", "code": "\nint[] array = {1, 2, 3, 4, 5 };\nList<Integer> evensList = new ArrayList<Integer>();\nfor (int  i: array) {\n    if (i % 2 == 0) evensList.add(i);\n}\nint[] evens = evensList.toArray(new int[0]);\n\n\n\npublic static <T> T[] filter(T[] input, Predicate<T> filterMethod) {\n    return Arrays.stream(input)\n        .filter(filterMethod)\n        .toArray(size -> (T[]) Array.newInstance(input.getClass().getComponentType(), size));\n}\n\n\nInteger[] array = {1, 2, 3, 4, 5};\nInteger[] result = filter(array, i -> (i % 2) == 0);\n\n\n", "explain": "A Java 8 solution with stream and generic types:\nMethodcall:\nWarning: This solution works not with primitive types!\nFor arrays with a primitive type use the wrapper class.\n"}, {"task_name": "Filter", "task_url": "https://rosettacode.org/wiki/Filter", "task_cat": "Iteration", "lang": "C#", "code": "\nWorks with: .NET version 1.1\nArrayList array = new ArrayList( new int[] { 1, 2, 3, 4, 5 } );\nArrayList evens = new ArrayList();\nforeach( int i in array )\n{\n        if( (i%2) == 0 )\n                evens.Add( i );\n}\nforeach( int i in evens )\n       System.Console.WriteLine( i.ToString() );\n\nWorks with: .NET version 2.0\nList<int> array = new List<int>( new int[] { 1, 2, 3, 4, 5 } );\nList<int> evens = array.FindAll( delegate( int i ) { return (i%2)==0; } );\nforeach( int i in evens )\n       System.Console.WriteLine( i.ToString() );\n\nWorks with: .NET version 3.5\nIEnumerable<int> array = new List<int>( new int[] { 1, 2, 3, 4, 5 } );\nIEnumerable<int> evens = array.Where( delegate( int i ) { return (i%2)==0; } );\nforeach( int i in evens )\n       System.Console.WriteLine( i.ToString() );\n\n\nint[] array = { 1, 2, 3, 4, 5 };\nint[] evens = array.Where(i => (i % 2) == 0).ToArray();\n\nforeach (int i in evens)\n    Console.WriteLine(i);\n\n", "explain": "Replacing the delegate with the more concise lambda expression syntax.\n"}, {"task_name": "Filter", "task_url": "https://rosettacode.org/wiki/Filter", "task_cat": "Iteration", "lang": "JavaScript", "code": "\nES5[edit]\nThe standard way is to use the Array.prototype.filter function (Works with: JavaScript version 1.6):\nvar arr = [1,2,3,4,5];\nvar evens = arr.filter(function(a) {return a % 2 == 0});\n\n\nvar arr = [1,2,3,4,5];\nvar evens = [];\nfor (var i=0, ilen=arr.length; i<ilen; i++)\n      if (arr[i] % 2 == 0)\n              evens.push(arr[i]);\n\nWorks with: Firefox version 2.0\nvar numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar evens = [i for (i in numbers) if (i % 2 == 0)];\n\nfunction range(limit) {\n  for(var i = 0; i < limit; i++) {\n    yield i;\n  }\n}\n\nvar evens2 = [i for (i in range(100)) if (i % 2 == 0)];\n\nLibrary: Functional\nFunctional.select(\"+1&1\", [1,2,3,4])   // [2, 4]\n\nES6[edit]\n(() => {\n    'use strict';\n\n    // isEven\u00a0:: Int -> Bool\n    const isEven = n => n % 2 === 0;\n\n\n    // TEST\n\n    return [1,2,3,4,5,6,7,8,9]\n        .filter(isEven);\n\n    // [2, 4, 6, 8]\n})();\n\n\nOutput:\n[2, 4, 6, 8]\n\n", "explain": "Other ways:\n"}, {"task_name": "Filter", "task_url": "https://rosettacode.org/wiki/Filter", "task_cat": "Iteration", "lang": "Visual_Basic_.NET", "code": "\nWorks with: Visual Basic .NET version 9.0+\nModule Filter\n\n    Sub Main()\n        Dim array() As Integer = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n        Dim newEvenArray() As Integer\n\n        Console.WriteLine(\"Current Array:\")\n        For Each i As Integer In array\n            Console.WriteLine(i)\n        Next\n\n        newEvenArray = filterArrayIntoNewArray(array)\n\n        Console.WriteLine(\"New Filtered Array:\")\n        For Each i As Integer In newEvenArray\n            Console.WriteLine(i)\n        Next\n\n        array = changeExistingArray(array)\n\n        Console.WriteLine(\"Orginal Array After Filtering:\")\n        For Each i As Integer In array\n            Console.WriteLine(i)\n        Next\n    End Sub\n\n    Private Function changeExistingArray(array() As Integer) As Integer()\n        Return filterArrayIntoNewArray(array)\n    End Function\n\n    Private Function filterArrayIntoNewArray(array() As Integer) As Integer()\n        Dim result As New List(Of Integer)\n        For Each element As Integer In array\n            If element Mod 2 = 0 Then\n                result.Add(element)\n            End If\n        Next\n        Return result.ToArray\n    End Function\n\nEnd Module\n\nOutput:\nCurrent Array:\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\nNew Filtered Array:\n2\n4\n6\n8\n10\nOrginal Array After Filtering:\n2\n4\n6\n8\n10\n\n", "explain": ""}, {"task_name": "Filter", "task_url": "https://rosettacode.org/wiki/Filter", "task_cat": "Iteration", "lang": "SQL", "code": "\n\nWorks with: MS SQL\n--Create the original array (table #nos) with numbers from 1 to 10\ncreate table #nos (v int)\ndeclare @n int set @n=1\nwhile @n<=10 begin insert into #nos values (@n) set @n=@n+1 end\n\n--Select the subset that are even into the new array (table #evens)\nselect v into #evens from #nos where v\u00a0% 2 = 0\n\n-- Show #evens\nselect * from #evens\n\n-- Clean up so you can edit and repeat:\ndrop table #nos\ndrop table #evens\n'Works with: MySQL\ncreate temporary table nos (v int);\ninsert into nos values (1),(2),(3),(4),(5),(6),(7),(8),(9),(10);\ncreate temporary table evens (v int);\ninsert into evens select v from nos where v%2=0;\nselect * from evens order by v; /*2,4,6,8,10*/\ndrop table nos;\ndrop table evens;\n\ncreate temporary table evens select * from nos where v%2=0;\n", "explain": "Task: Select certain elements from an Array into a new Array in a generic way. To demonstrate, select all even numbers from an Array.\nOr to be shorter, you could create the table evens directly from the query result\u00a0:\n"}, {"task_name": "Filter", "task_url": "https://rosettacode.org/wiki/Filter", "task_cat": "Iteration", "lang": "PHP", "code": "\n\n$arr = range(1,5);\n$evens = array();\nforeach ($arr as $val){\n      if ($val\u00a0% 2 == 0) $evens[] = $val);\n}\nprint_r($evens);\n\nfunction is_even($var) { return(!($var & 1)); }\n$arr = range(1,5);\n$evens = array_filter($arr, \"is_even\");\nprint_r($evens);\n", "explain": "Using a standard loop\nUsing a filter function\n"}, {"task_name": "Filter", "task_url": "https://rosettacode.org/wiki/Filter", "task_cat": "Iteration", "lang": "MATLAB", "code": "\nfunction evens = selectEvenNumbers(list)\n\n    evens = list( mod(list,2) == 0 );\n\nend\n\n\nOutput:\n>> selectEvenNumbers([0 1 2 3 4 5 6 7 8 9 10])\n\nans =\n\n     0     2     4     6     8    10\n\n", "explain": ""}, {"task_name": "Filter", "task_url": "https://rosettacode.org/wiki/Filter", "task_cat": "Iteration", "lang": "Fortran", "code": "\nmodule funcs\n  implicit none\ncontains\n  pure function iseven(x)\n    logical :: iseven\n    integer, intent(in) :: x\n    iseven = mod(x, 2) == 0\n  end function iseven\nend module funcs\n\nprogram Filter\n  use funcs\n  implicit none\n\n  integer, parameter                 :: N = 100\n  integer, dimension(N)              :: array\n  integer, dimension(:), pointer     :: filtered\n\n  integer :: i\n\n  forall(i=1:N) array(i) = i\n\n  filtered => filterwith(array, iseven)\n  print *, filtered\n\ncontains\n\n  function filterwith(ar, testfunc)\n    integer, dimension(:), pointer        :: filterwith\n    integer, dimension(:), intent(in)     :: ar\n    interface\n       elemental function testfunc(x)\n         logical :: testfunc\n         integer, intent(in) :: x\n       end function testfunc\n    end interface\n\n    integer :: i, j, n\n\n    n = count( testfunc(ar) )\n    allocate( filterwith(n) )\n\n    j = 1\n    do i = lbound(ar, dim=1), ubound(ar, dim=1)\n       if ( testfunc(ar(i)) ) then\n          filterwith(j) = ar(i)\n          j = j + 1\n       end if\n    end do\n\n  end function filterwith\n\nend program Filter\n\n", "explain": ""}, {"task_name": "Filter", "task_url": "https://rosettacode.org/wiki/Filter", "task_cat": "Iteration", "lang": "Go", "code": "\npackage main\n\nimport (\n    \"fmt\"\n    \"math/rand\"\n)\n\nfunc main() {\n    a := rand.Perm(20)\n    fmt.Println(a)       // show array to filter\n    fmt.Println(even(a)) // show result of non-destructive filter\n    fmt.Println(a)       // show that original array is unchanged\n    reduceToEven(&a)     // destructive filter\n    fmt.Println(a)       // show that a is now changed\n    // a is not only changed, it is changed in place.  length and capacity\n    // show that it still has its original allocated capacity but has now\n    // been reduced in length.\n    fmt.Println(\"a len:\", len(a), \"cap:\", cap(a))\n}\n\nfunc even(a []int) (r []int) {\n    for _, e := range a {\n        if e%2 == 0 {\n            r = append(r, e)\n        }\n    }\n    return\n}\n\nfunc reduceToEven(pa *[]int) {\n    a := *pa\n    var last int\n    for _, e := range a {\n        if e%2 == 0 {\n            a[last] = e\n            last++\n        }\n    }\n    *pa = a[:last]\n}\n\n\nOutput:\n[15 1 7 3 4 8 19 0 17 18 14 5 16 9 13 11 12 10 2 6]\n[4 8 0 18 14 16 12 10 2 6]\n[15 1 7 3 4 8 19 0 17 18 14 5 16 9 13 11 12 10 2 6]\n[4 8 0 18 14 16 12 10 2 6]\na len: 10 cap: 20\n\n", "explain": ""}, {"task_name": "Filter", "task_url": "https://rosettacode.org/wiki/Filter", "task_cat": "Iteration", "lang": "ARM_Assembly", "code": "\nWorks with: as version Raspberry Pi  or android 32 bits with application Termux\n/* ARM assembly Raspberry PI  */\n/*  program filterdes.s   */\n\n/************************************/\n/* Constantes                       */\n/************************************/\n/* for constantes see task include a file in arm assembly */\n.include \"../constantes.inc\"\n\n/************************************/\n/* Initialized data                 */\n/************************************/\n.data\nszMessResult:        .asciz \"Start array\u00a0: \"\nszMessResultFil:     .asciz \"Filter array\u00a0: \"\nszMessResultdest:    .asciz \"Same array\u00a0: \"\nszMessStart:         .asciz \"Program 32 bits start.\\n\"\nszCarriageReturn:    .asciz \"\\n\"\n.align 4\narrayNumber:         .int 1,2,3,4,5,6,7,8,9,10\n.equ LGARRAY,   (. - arrayNumber) / 4\n/************************************/\n/* UnInitialized data               */\n/************************************/\n.bss \n.align 4\narrayNumberFil:           .skip 4 * LGARRAY  @ result array\nsZoneConv:                .skip 24\n/************************************/\n/*  code section                    */\n/************************************/\n.text\n.global main \nmain:\n    ldr r0,iAdrszMessStart      @ display start message\n    bl affichageMess\n    ldr r0,iAdrszMessResult     @ display message\n    bl affichageMess\n    ldr r5,iAdrarrayNumber      @ start array address\n    mov r4,#0                   @ index\n    \n1:\n    ldr r0,[r5,r4,lsl #2]       @ load a value\n    ldr r1,iAdrsZoneConv\n    bl conversion10             @ d\u00e9cimal conversion\n    add r1,r1,r0                @ compute address end number\n    add r1,#2                   @ add two characters \n    mov r0,#0                   @ for limit the size of display number\n    strb r0,[r1]                @ to store a final zero\n    ldr r0,iAdrsZoneConv\n    bl affichageMess            @ display value\n    add r4,r4,#1                @ increment index\n    cmp r4,#LGARRAY             @ end array\u00a0?\n    blt 1b                      @ no -> loop\n    ldr r0,iAdrszCarriageReturn\n    bl affichageMess\n    \n    ldr r6,iAdrarrayNumberFil   @ adrress result array\n    mov r4,#0                   @ index\n    mov r3,#0                   @ index result\n2:\n    ldr r0,[r5,r4,lsl #2]       @ load a value\n    tst r0,#1                   @ odd\u00a0?\n    streq r0,[r6,r3,lsl #2]     @ no -> store in result array\n    addeq r3,r3,#1              @ and increment result index\n    add r4,r4,#1                @ increment array index\n    cmp r4,#LGARRAY             @ end\u00a0?\n    blt 2b                      @ no -> loop\n    \n    ldr r0,iAdrszMessResultFil  \n    bl affichageMess\n    mov r4,#0                   @ init index\n    \n3:                              @ display filter result array\n    ldr r0,[r6,r4,lsl #2]\n    ldr r1,iAdrsZoneConv\n    bl conversion10\n    add r1,r1,r0\n    add r1,#2\n    mov r0,#0\n    strb r0,[r1]\n    ldr r0,iAdrsZoneConv\n    bl affichageMess\n    add r4,r4,#1\n    cmp r4,r3\n    blt 3b\n    ldr r0,iAdrszCarriageReturn\n    bl affichageMess\n    \n                                @ array destruction\n    mov r4,#0                   @ index\n    mov r3,#0                   @ index result\n4:\n    ldr r0,[r5,r4,lsl #2]       @ load a value\n    tst r0,#1                   @ even\u00a0?\n    bne 6f\n    cmp r3,r4                   @ index =  no store\n    beq 5f\n    str r0,[r5,r3,lsl #2]       @ store in free item on same array\n5:\n    add r3,r3,#1                @ and increment result index\n6:\n    add r4,r4,#1                @ increment array index\n    cmp r4,#LGARRAY             @ end\u00a0?\n    blt 4b                      @ no -> loop\n    \n    ldr r0,iAdrszMessResultdest  \n    bl affichageMess\n    mov r4,#0                   @ init index\n    \n7:                              @ display array\n    ldr r0,[r5,r4,lsl #2]\n    ldr r1,iAdrsZoneConv\n    bl conversion10\n    add r1,r1,r0\n    add r1,#2\n    mov r0,#0\n    strb r0,[r1]\n    ldr r0,iAdrsZoneConv\n    bl affichageMess\n    add r4,r4,#1\n    cmp r4,r3\n    blt 7b\n    ldr r0,iAdrszCarriageReturn\n    bl affichageMess\n      \n\n100:                             @ standard end of the program\n    mov r0, #0                   @ return code\n    mov r7, #EXIT                @ request to exit program\n    svc 0                        @ perform the system call\niAdrszCarriageReturn:    .int szCarriageReturn\niAdrszMessStart:         .int szMessStart\niAdrarrayNumber:         .int arrayNumber\niAdrszMessResult:        .int szMessResult\niAdrarrayNumberFil:      .int arrayNumberFil\niAdrszMessResultFil:     .int szMessResultFil\niAdrszMessResultdest:    .int szMessResultdest\niAdrsZoneConv:           .int sZoneConv\n/***************************************************/\n/*      ROUTINES INCLUDE                           */\n/***************************************************/\n/* for this file see task include a file in language ARM assembly*/\n.include \"../affichage.inc\"\n\nOutput:\nProgram 32 bits start.\nStart array\u00a0: 1  2  3  4  5  6  7  8  9  10\nFilter array\u00a0: 2  4  6  8  10\nSame array\u00a0: 2  4  6  8  10\n\n", "explain": ""}, {"task_name": "Filter", "task_url": "https://rosettacode.org/wiki/Filter", "task_cat": "Iteration", "lang": "Delphi", "code": "\nHand-coded version[edit]\nprogram FilterEven;\n\n{$APPTYPE CONSOLE}\n\nuses SysUtils, Types;\n\nconst\n  SOURCE_ARRAY: array[0..9] of Integer = (0,1,2,3,4,5,6,7,8,9);\nvar\n  i: Integer;\n  lEvenArray: TIntegerDynArray;\nbegin\n  for i in SOURCE_ARRAY do\n  begin\n    if not Odd(i) then\n    begin\n      SetLength(lEvenArray, Length(lEvenArray) + 1);\n      lEvenArray[Length(lEvenArray) - 1] := i;\n    end;\n  end;\n\n  for i in lEvenArray do\n    Write(i:3);\n  Writeln;\nend.\n\n\nUsing Boost.Int library[edit]\n\nLibrary:  System.SysUtils\nLibrary:  Types\nLibrary:  Boost.Int\nprogram FilterEven;\n\n{$APPTYPE CONSOLE}\n\nuses\n  System.SysUtils,\n  Types,\n  Boost.Int;\n\nvar\n  Source, Destiny: TIntegerDynArray;\n\nbegin\n  Source.Assign([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\n\n  // Non-destructively\n  Destiny := Source.Filter(\n    function(Item: Integer): Boolean\n    begin\n      Result := not odd(Item) and (Item <> 0);\n    end);\n\n  Writeln('[' + Destiny.Comma + ']');\n  Readln;\nend.\n\n  // Destructively\n  Source.Remove(\n    function(Item: Integer): Boolean\n    begin\n      Result := odd(Item) or (Item = 0);\n    end);\n\n  Writeln('[' + Source.Comma + ']');\nEnd.\n\n\nOutput:\n[2,4,6,8]\n[2,4,6,8]\n\n", "explain": "\nAlternative using Boost.Int[1]:\n"}, {"task_name": "Filter", "task_url": "https://rosettacode.org/wiki/Filter", "task_cat": "Iteration", "lang": "Ruby", "code": "\n\n# Enumerable#select returns a new array.\nary = [1, 2, 3, 4, 5, 6]\neven_ary = ary.select {|elem| elem.even?}\np even_ary # => [2, 4, 6]\n\n# Enumerable#select also works with Range.\nrange = 1..6\neven_ary = range.select {|elem| elem.even?}\np even_ary # => [2, 4, 6]\nDestructive[edit]\n\nary = [1, 2, 3, 4, 5, 6]\nary.select! {|elem| elem.even?}\np ary # => [2, 4, 6]\n\nary = [1, 2, 3, 4, 5, 6]\nary.select!(&:even?)\np ary # => [2, 4, 6]\n", "explain": "Enumerable#select is the filter that returns a new Array.\nArray#select! is the destructive version which modifies the original Array.\nShorthand:\n"}, {"task_name": "Filter", "task_url": "https://rosettacode.org/wiki/Filter", "task_cat": "Iteration", "lang": "Rust", "code": "\nfn main() {\n    println!(\"new vec filtered: \");\n    let nums: Vec<i32> = (1..20).collect();\n    let evens: Vec<i32> = nums.iter().cloned().filter(|x| x\u00a0% 2 == 0).collect();\n    println!(\"{:?}\", evens);\n\n    // Filter an already existing vector\n    println!(\"original vec filtered: \");\n    let mut nums: Vec<i32> = (1..20).collect();\n    nums.retain(|x| x\u00a0% 2 == 0);\n    println!(\"{:?}\", nums);\n}\n\nOutput:\nnew vec filtered:\n[2, 4, 6, 8, 10, 12, 14, 16, 18]\noriginal vec filtered:\n[2, 4, 6, 8, 10, 12, 14, 16, 18]\n", "explain": ""}, {"task_name": "Filter", "task_url": "https://rosettacode.org/wiki/Filter", "task_cat": "Iteration", "lang": "Swift", "code": "\nlet numbers = [1,2,3,4,5,6]\nlet even_numbers = numbers.filter { $0\u00a0% 2 == 0 }\nprintln(even_numbers)\n\nOutput:\n[2, 4, 6]\n\n", "explain": ""}, {"task_name": "Filter", "task_url": "https://rosettacode.org/wiki/Filter", "task_cat": "Iteration", "lang": "R", "code": "\na <- 1:100\nevennums <- a[ a%%2 == 0 ]\nprint(evennums)\n", "explain": ""}, {"task_name": "Filter", "task_url": "https://rosettacode.org/wiki/Filter", "task_cat": "Iteration", "lang": "Ada", "code": "\nwith Ada.Integer_Text_Io; use Ada.Integer_Text_Io;\nwith Ada.Text_Io; use Ada.Text_Io;\n\nprocedure Array_Selection is\n   type Array_Type is array (Positive range <>) of Integer;\n   Null_Array : Array_Type(1..0);\n\n   function Evens (Item : Array_Type) return Array_Type is\n   begin\n      if Item'Length > 0 then\n         if Item(Item'First) mod 2 = 0 then\n            return Item(Item'First) & Evens(Item((Item'First + 1)..Item'Last));\n         else\n            return Evens(Item((Item'First + 1)..Item'Last));\n         end if;\n      else\n         return Null_Array;\n      end if;\n   end Evens;\n\n   procedure Print(Item : Array_Type) is\n   begin\n      for I in Item'range loop\n         Put(Item(I));\n         New_Line;\n      end loop;\n   end Print;\n\n   Foo : Array_Type := (1,2,3,4,5,6,7,8,9,10);\nbegin\n   Print(Evens(Foo));\nend Array_Selection;\n\n\nwith Ada.Text_IO;  use Ada.Text_IO;\n\nprocedure Array_Selection is\n   type Array_Type is array (Positive range <>) of Integer;\n\n   function Evens (Item : Array_Type) return Array_Type is\n      Result : Array_Type (1..Item'Length);\n      Index  : Positive := 1;\n   begin\n      for I in Item'Range loop\n         if Item (I) mod 2 = 0 then\n            Result (Index) := Item (I);\n            Index := Index + 1;\n         end if;\n      end loop;\n      return Result (1..Index - 1);\n   end Evens;\n\n   procedure Put (Item : Array_Type) is\n   begin\n      for I in Item'range loop\n         Put (Integer'Image (Item (I)));\n      end loop;\n   end Put;\nbegin\n   Put (Evens ((1,2,3,4,5,6,7,8,9,10)));\n   New_Line;\nend Array_Selection;\n\n", "explain": "Here is a non-recursive solution:\n"}, {"task_name": "Filter", "task_url": "https://rosettacode.org/wiki/Filter", "task_cat": "Iteration", "lang": "Julia", "code": "\nWorks with: Julia version 0.6\n@show filter(iseven, 1:10)\n\n\nOutput:\nfilter(iseven, 1:10) = [2, 4, 6, 8, 10]\n", "explain": ""}, {"task_name": "Filter", "task_url": "https://rosettacode.org/wiki/Filter", "task_cat": "Iteration", "lang": "Kotlin", "code": "\n// version 1.0.5-2\n\nfun main(args: Array<String>) {\n    val array = arrayOf(1, 2, 3, 4, 5, 6, 7, 8, 9)\n    println(array.joinToString(\" \"))\n\n    val filteredArray = array.filter{ it % 2 == 0 }\n    println(filteredArray.joinToString(\" \"))\n\n    val mutableList = array.toMutableList()\n    mutableList.retainAll { it % 2 == 0 }\n    println(mutableList.joinToString(\" \"))\n}\n\n\nOutput:\n1 2 3 4 5 6 7 8 9\n2 4 6 8\n2 4 6 8\n\n", "explain": ""}, {"task_name": "Filter", "task_url": "https://rosettacode.org/wiki/Filter", "task_cat": "Iteration", "lang": "Perl", "code": "\nmy @a = (1, 2, 3, 4, 5, 6);\nmy @even = grep { $_%2 == 0 } @a;\n", "explain": ""}, {"task_name": "Filter", "task_url": "https://rosettacode.org/wiki/Filter", "task_cat": "Iteration", "lang": "Objective-C", "code": "\nWorks with: Cocoa version Mac OS X 10.6+\nNSArray *numbers = [NSArray arrayWithObjects:[NSNumber numberWithInt:1],\n                                             [NSNumber numberWithInt:2],\n                                             [NSNumber numberWithInt:3],\n                                             [NSNumber numberWithInt:4],\n                                             [NSNumber numberWithInt:5], nil];\nNSArray *evens = [numbers objectsAtIndexes:[numbers indexesOfObjectsPassingTest:\n  ^BOOL(id obj, NSUInteger idx, BOOL *stop) { return [obj intValue] % 2 == 0; } ]];\n\nWorks with: Cocoa version Mac OS X 10.5+\nNSArray *numbers = [NSArray arrayWithObjects:[NSNumber numberWithInt:1],\n                                             [NSNumber numberWithInt:2],\n                                             [NSNumber numberWithInt:3],\n                                             [NSNumber numberWithInt:4],\n                                             [NSNumber numberWithInt:5], nil];\nNSPredicate *isEven = [NSPredicate predicateWithFormat:@\"modulus:by:(SELF, 2) == 0\"];\nNSArray *evens = [numbers filteredArrayUsingPredicate:isEven];\nWorks with: GNUstep\n#import <Foundation/Foundation.h>\n\n@interface NSNumber ( ExtFunc )\n-(int) modulo2;\n@end\n\n@implementation NSNumber ( ExtFunc )\n-(int) modulo2\n{\n  return [self intValue]\u00a0% 2;\n}\n@end\n\nint main()\n{\n  NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];\n\n  NSArray *numbers = [NSArray arrayWithObjects:[NSNumber numberWithInt:1],\n                                               [NSNumber numberWithInt:2],\n                                               [NSNumber numberWithInt:3],\n                                               [NSNumber numberWithInt:4],\n                                               [NSNumber numberWithInt:5], nil];\n\n  NSPredicate *isEven = [NSPredicate predicateWithFormat:@\"modulo2 == 0\"];\n  NSArray *evens = [numbers filteredArrayUsingPredicate:isEven];\n\n  NSLog(@\"%@\", evens);\n\n\n  [pool release];\n  return 0;\n}\n", "explain": ""}, {"task_name": "Filter", "task_url": "https://rosettacode.org/wiki/Filter", "task_cat": "Iteration", "lang": "Prolog", "code": "\nfindall[edit]\nevens(D, Es)\u00a0:- findall(E, (member(E, D), E mod 2 =:= 0), Es).\n\n?- evens([1,2,3,4,5,6,7,8,9,10],E).\nE = [2, 4, 6, 8, 10]\nAnonymous functions[edit]\n\n?- use_module(library(lambda)).\ntrue.\n\n?- include((\\X^(X mod 2 =:= 0)), [1,2,3,4,5,6,7,8,9], L).\nL = [2,4,6,8].\nfilter and anonymous functions[edit]\n\n:- use_module(lambda).\n\n%% filter(Pred, LstIn, LstOut)\n%%\nfilter(_Pre, [], []).\n\nfilter(Pred, [H|T], L)\u00a0:-\n\tfilter(Pred, T, L1),\n\t(   call(Pred,H) -> L = [H|L1]; L = L1).\n\n\u00a0?- filter(\\X^(X mod 2 =:= 0), [1,2,3,4,5,6,7,8,9], L).\nL = [2,4,6,8] .\n", "explain": "Usage:\nWorks with SWI-Prolog and module(lambda) written by Ulrich Neumerkel, \"lambda.pl\" can be found there\u00a0: http://www.complang.tuwien.ac.at/ulrich/Prolog-inedit/lambda.pl\nWorks with SWI-Prolog and module(lambda) written by Ulrich Neumerkel, \"lambda.pl\" can be found there\u00a0: http://www.complang.tuwien.ac.at/ulrich/Prolog-inedit/lambda.pl\nUsage\u00a0:\n"}, {"task_name": "Filter", "task_url": "https://rosettacode.org/wiki/Filter", "task_cat": "Iteration", "lang": "Lua", "code": "\nfunction filter(t, func)\n  local ret = {}\n  for i, v in ipairs(t) do\n    ret[#ret+1] = func(v) and v or nil\n  end\n  return ret\nend\n\nfunction even(a) return a % 2 == 0 end\n\nprint(unpack(filter({1, 2, 3, 4 ,5, 6, 7, 8, 9, 10}, even)))\n\n\nfunction filter(t, func)\n  for i, v in ipairs(t) do\n    if not func(v) then table.remove(t, i) end\n  end\nend\n\nfunction even(a) return a % 2 == 0 end\n\nlocal values = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\nfilter(values, even)\nprint(unpack(values))\n\n", "explain": "The destructive version is even simpler, since tables are passed by reference:\n"}, {"task_name": "Filter", "task_url": "https://rosettacode.org/wiki/Filter", "task_cat": "Iteration", "lang": "Scala", "code": "\n(1 to 100).filter(_\u00a0% 2 == 0)\n", "explain": ""}, {"task_name": "Filter", "task_url": "https://rosettacode.org/wiki/Filter", "task_cat": "Iteration", "lang": "D", "code": "\nvoid main() {\n    import std.algorithm: filter, equal;\n\n    immutable data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    auto evens = data.filter!(x => x % 2 == 0); // Lazy.\n    assert(evens.equal([2, 4, 6, 8, 10]));\n}\n\nTango Version[edit]\nLibrary: Tango\nimport tango.core.Array, tango.io.Stdout;\n\nvoid main() {\n    auto array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\n    // removeIf places even elements at the beginnig of the array and returns number of found evens\n    auto evens = array.removeIf( ( typeof(array[0]) i ) { return (i % 2) == 1; } );\n    Stdout(\"Evens - \")( array[0 .. evens] ).newline; // The order of even elements is preserved\n    Stdout(\"Odds - \")( array[evens .. $].sort ).newline; // Unlike odd elements\n}\n\n\nOutput:\n Evens - [ 2, 4, 6, 8, 10 ]\n Odds - [ 1, 3, 5, 7, 9 ]\n", "explain": ""}, {"task_name": "Filter", "task_url": "https://rosettacode.org/wiki/Filter", "task_cat": "Iteration", "lang": "Haskell", "code": "\n\nary = [1..10]\nevens = [x | x <- ary, even x]\n\n\nevens = filter even ary\n\n\nimport Data.Array\n\nary = listArray (1,10) [1..10]\nevens = listArray (1,n) l where\n  n = length l\n  l = [x | x <- elems ary, even x]\n\n\n", "explain": "In Haskell, a list is often more basic than an array:\nor\nTo do the same operation on an array, the simplest way it to convert it lazily into a list:\nNote that the bounds must be known before creating the array, so the temporary list will be fully evaluated before the array is created.\n"}, {"task_name": "Filter", "task_url": "https://rosettacode.org/wiki/Filter", "task_cat": "Iteration", "lang": "VBScript", "code": "\ntest_arr_1 = Array(1,2,3,4,5,6,7,8,9,10)\ntest_arr_2 = Array(1,2,3,4,5,6,7,8,9,10)\n\nWScript.StdOut.Write \"Scenario 1: Create a new array\"\nWScript.StdOut.WriteLine\nWScript.StdOut.Write \"Input: \" & Join(test_arr_1,\",\")\nWScript.StdOut.WriteLine\nWScript.StdOut.Write \"Output: \" & filter_create(test_arr_1)\nWScript.StdOut.WriteBlankLines(2)\n\nWScript.StdOut.Write \"Scenario 2: Destructive approach\"\nWScript.StdOut.WriteLine\nWScript.StdOut.Write \"Input: \" & Join(test_arr_2,\",\")\nWScript.StdOut.WriteLine\nWScript.StdOut.Write \"Output: \" & filter_destruct(test_arr_2)\nWScript.StdOut.WriteBlankLines(2)\n\nFunction filter_create(arr)\n\tReDim arr_new(0)\n\tFor i = 0 To UBound(arr)\n\t\tIf arr(i) Mod 2 = 0 Then\n\t\t\tIf arr_new(0) = \"\" Then\n\t\t\t\tarr_new(0) = arr(i)\n\t\t\tElse\n\t\t\t\tReDim Preserve arr_new(UBound(arr_new)+1)\n\t\t\t\tarr_new(UBound(arr_new)) = arr(i)\n\t\t\tEnd If\n\t\tEnd If\n\tNext\n\tfilter_create = Join(arr_new,\",\")\nEnd Function\n\nFunction filter_destruct(arr)\n\tcount = 0\n\tFor i = 0 To UBound(arr)\n\t\tIf arr(i) Mod 2 <> 0 Then\n\t\t\tcount = count + 1\n\t\t\tFor j = i To UBound(arr)\n\t\t\t\tIf j + 1 <= UBound(arr) Then\n\t\t\t\t\tarr(j) = arr(j+1)\n\t\t\t\tEnd If\n\t\t\tNext\n\t\tEnd If\n\tNext\n\tReDim Preserve arr(UBound(arr)-count)\n\tfilter_destruct = Join(arr,\",\")\nEnd Function\n\nOutput:\nScenario 1: Create a new array\nInput: 1,2,3,4,5,6,7,8,9,10\nOutput: 2,4,6,8,10\n\nScenario 2: Destructive approach\nInput: 1,2,3,4,5,6,7,8,9,10\nOutput: 2,4,6,8,10\n\n", "explain": ""}, {"task_name": "Filter", "task_url": "https://rosettacode.org/wiki/Filter", "task_cat": "Iteration", "lang": "Scheme", "code": "\n\n(define filter\n  (lambda (fn lst)\n    (let iter ((lst lst) (result '()))\n      (if (null? lst)\n         (reverse result)\n         (let ((item (car lst))\n               (rest (cdr lst)))\n           (if (fn item)\n               (iter rest (cons item result))\n               (iter rest result)))))))\n\n> (filter even? '(1 2 3 4 5 6 7 8 9 10))\n(2 4 6 8 10)\n\n(define (select-even lst)\n  (filter even? lst))\n\n(select-even '(1 2 3 4 5 6 7 8 9 10))\n", "explain": "Filter function definition:\nUsage in the interactive prompt:\nOr as a function:\n"}, {"task_name": "Filter", "task_url": "https://rosettacode.org/wiki/Filter", "task_cat": "Iteration", "lang": "Apex", "code": "\nList<Integer> integers = new List<Integer>{1,2,3,4,5};\nSet<Integer> evenIntegers = new Set<Integer>();\nfor(Integer i\u00a0: integers)\n{\n    if(math.mod(i,2) == 0)\n    {\n        evenIntegers.add(i);\n    }\n}\nsystem.assert(evenIntegers.size() == 2, 'We should only have two even numbers in the set');\nsystem.assert(!evenIntegers.contains(1), '1 should not be a number in the set');\nsystem.assert(evenIntegers.contains(2), '2 should be a number in the set');\nsystem.assert(!evenIntegers.contains(3), '3 should not be a number in the set');\nsystem.assert(evenIntegers.contains(4), '4 should be a number in the set');\nsystem.assert(!evenIntegers.contains(5), '5 should not be a number in the set');\n", "explain": ""}, {"task_name": "Filter", "task_url": "https://rosettacode.org/wiki/Filter", "task_cat": "Iteration", "lang": "PowerShell", "code": "\n$array = -15..37\n$array | Where-Object { $_\u00a0% 2 -eq 0 }\n", "explain": ""}, {"task_name": "Filter", "task_url": "https://rosettacode.org/wiki/Filter", "task_cat": "Iteration", "lang": "Logo", "code": "\nto even? :n\n  output equal? 0 modulo :n 2\nend\nshow filter \"even? [1 2 3 4]   \u00a0; [2 4]\n\nshow filter [equal? 0 modulo\u00a0? 2] [1 2 3 4]\n", "explain": ""}, {"task_name": "Filter", "task_url": "https://rosettacode.org/wiki/Filter", "task_cat": "Iteration", "lang": "F#", "code": "\nlet lst = [1;2;3;4;5;6]\nList.filter (fun x -> x % 2 = 0) lst;;\n\nval it : int list = [2; 4; 6]\n\n", "explain": ""}, {"task_name": "Filter", "task_url": "https://rosettacode.org/wiki/Filter", "task_cat": "Iteration", "lang": "Groovy", "code": "\n def evens = [1, 2, 3, 4, 5].findAll{it % 2 == 0}\n\n", "explain": ""}, {"task_name": "Filter", "task_url": "https://rosettacode.org/wiki/Filter", "task_cat": "Iteration", "lang": "AWK", "code": "\n\n$ awk 'BEGIN{split(\"1 2 3 4 5 6 7 8 9\",a);for(i in a)if(!(a[i]%2))r=r\" \"a[i];print r}'\n\n\nOutput:\n4 6 8 2\n\nBEGIN {\n  split(\"1 2 3 4 5 6 7 8 9\",a);\n  for(i in a)  if( !(a[i]%2) )  r = r\" \"a[i];\n  print r\n}\n\n\n", "explain": "In this example, an array is filled with the numbers 1..9.\nIn a loop, even elements are collected into the string r.\nNote that sequence is not necessarily maintained.\nOne-liner:\nRegular script:\nSame output.\n"}]