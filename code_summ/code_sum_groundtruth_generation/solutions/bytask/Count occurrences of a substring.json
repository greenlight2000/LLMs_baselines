[{"task_name": "Count occurrences of a substring", "task_url": "https://rosettacode.org/wiki/Count_occurrences_of_a_substring", "task_cat": "String manipulation", "lang": "Python", "code": "\n>>> \"the three truths\".count(\"th\")\n3\n>>> \"ababababab\".count(\"abab\")\n2\n\n", "explain": ""}, {"task_name": "Count occurrences of a substring", "task_url": "https://rosettacode.org/wiki/Count_occurrences_of_a_substring", "task_cat": "String manipulation", "lang": "C", "code": "\n#include <stdio.h>\n#include <string.h>\n\nint match(const char *s, const char *p, int overlap)\n{\n        int c = 0, l = strlen(p);\n\n        while (*s != '\\0') {\n                if (strncmp(s++, p, l)) continue;\n                if (!overlap) s += l - 1;\n                c++;\n        }\n        return c;\n}\n\nint main()\n{\n        printf(\"%d\\n\", match(\"the three truths\", \"th\", 0));\n        printf(\"overlap:%d\\n\", match(\"abababababa\", \"aba\", 1));\n        printf(\"not:    %d\\n\", match(\"abababababa\", \"aba\", 0));\n        return 0;\n}\n\n\n#include <stdio.h>\n#include <string.h>\n\n// returns count of non-overlapping occurrences of 'sub' in 'str'\nint countSubstring(const char *str, const char *sub)\n{\n    int length = strlen(sub);\n    if (length == 0) return 0;\n    int count = 0;\n    for (str = strstr(str, sub); str; str = strstr(str + length, sub))\n        ++count;\n    return count;\n}\n\nint main()\n{\n    printf(\"%d\\n\", countSubstring(\"the three truths\", \"th\"));\n    printf(\"%d\\n\", countSubstring(\"ababababab\", \"abab\"));\n    printf(\"%d\\n\", countSubstring(\"abaabba*bbaba*bbab\", \"a*b\"));\n\n    return 0;\n}\n\n\nOutput:\n3\n2\n2\n\n", "explain": "Alternate version:\n"}, {"task_name": "Count occurrences of a substring", "task_url": "https://rosettacode.org/wiki/Count_occurrences_of_a_substring", "task_cat": "String manipulation", "lang": "C++", "code": "\n#include <iostream>\n#include <string>\n\n// returns count of non-overlapping occurrences of 'sub' in 'str'\nint countSubstring(const std::string& str, const std::string& sub)\n{\n    if (sub.length() == 0) return 0;\n    int count = 0;\n    for (size_t offset = str.find(sub); offset != std::string::npos;\n\t offset = str.find(sub, offset + sub.length()))\n    {\n        ++count;\n    }\n    return count;\n}\n\nint main()\n{\n    std::cout << countSubstring(\"the three truths\", \"th\")    << '\\n';\n    std::cout << countSubstring(\"ababababab\", \"abab\")        << '\\n';\n    std::cout << countSubstring(\"abaabba*bbaba*bbab\", \"a*b\") << '\\n';\n\n    return 0;\n}\n\n\nOutput:\n3\n2\n2\n\n", "explain": ""}, {"task_name": "Count occurrences of a substring", "task_url": "https://rosettacode.org/wiki/Count_occurrences_of_a_substring", "task_cat": "String manipulation", "lang": "Java", "code": "\n\nint countSubstring(String string, String substring) {\n    substring = Pattern.quote(substring);\n    Pattern pattern = Pattern.compile(substring);\n    Matcher matcher = pattern.matcher(string);\n    int count = 0;\n    while (matcher.find())\n        count++;\n    return count;\n}\n\n\nWorks with: Java version 1.5+\n\npublic class CountSubstring {\n\tpublic static int countSubstring(String subStr, String str){\n\t\treturn (str.length() - str.replace(subStr, \"\").length()) / subStr.length();\n\t}\n\t\n\tpublic static void main(String[] args){\n\t\tSystem.out.println(countSubstring(\"th\", \"the three truths\"));\n\t\tSystem.out.println(countSubstring(\"abab\", \"ababababab\"));\n\t\tSystem.out.println(countSubstring(\"a*b\", \"abaabba*bbaba*bbab\"));\n\t}\n}\n\n\nOutput:\n3\n2\n2\nWorks with: Java version 1.5+\n\nimport java.util.regex.Pattern;\n\npublic class CountSubstring {\n\tpublic static int countSubstring(String subStr, String str){\n\t\t// the result of split() will contain one more element than the delimiter\n\t\t// the \"-1\" second argument makes it not discard trailing empty strings\n\t\treturn str.split(Pattern.quote(subStr), -1).length - 1;\n\t}\n\t\n\tpublic static void main(String[] args){\n\t\tSystem.out.println(countSubstring(\"th\", \"the three truths\"));\n\t\tSystem.out.println(countSubstring(\"abab\", \"ababababab\"));\n\t\tSystem.out.println(countSubstring(\"a*b\", \"abaabba*bbaba*bbab\"));\n\t}\n}\n\n\nOutput:\n3\n2\n2\n\npublic class CountSubstring {\n\tpublic static int countSubstring(String subStr, String str){\n\t\tint count = 0;\n\t\tfor (int loc = str.indexOf(subStr); loc != -1;\n\t\t     loc = str.indexOf(subStr, loc + subStr.length()))\n\t\t\tcount++;\n\t\treturn count;\n\t}\n\t\n\tpublic static void main(String[] args){\n\t\tSystem.out.println(countSubstring(\"th\", \"the three truths\"));\n\t\tSystem.out.println(countSubstring(\"abab\", \"ababababab\"));\n\t\tSystem.out.println(countSubstring(\"a*b\", \"abaabba*bbaba*bbab\"));\n\t}\n}\n\n\nOutput:\n3\n2\n2\n", "explain": "Using regular expression pattern matching\n\nThe \"remove and count the difference\" method:\nThe \"split and count\" method:\nManual looping\n"}, {"task_name": "Count occurrences of a substring", "task_url": "https://rosettacode.org/wiki/Count_occurrences_of_a_substring", "task_cat": "String manipulation", "lang": "C#", "code": "\nusing System;\n\nclass SubStringTestClass\n{\n   public static int CountSubStrings(this string testString, string testSubstring)\n   {\n        int count = 0;\n            \n        if (testString.Contains(testSubstring))\n        {\n            for (int i = 0; i < testString.Length; i++)\n            {\n                if (testString.Substring(i).Length >= testSubstring.Length)\n                {\n                    bool equals = testString.Substring(i, testSubstring.Length).Equals(testSubstring);\n                    if (equals)\n                    {\n                        count++;\n                        i += testSubstring.Length - 1;  // Fix: Don't count overlapping matches\n                    }\n                }\n            }\n        }\n        return count;\n   }\n}\n\nusing System;\nclass SubStringTestClass\n{\n   public static int CountSubStrings(this string testString, string testSubstring) =>\n       testString?.Split(new [] { testSubstring }, StringSplitOptions.None)?.Length - 1\u00a0?? 0;\n}\n", "explain": "Using C# 6.0's expression-bodied member, null-conditional operator, and coalesce operator features:\n"}, {"task_name": "Count occurrences of a substring", "task_url": "https://rosettacode.org/wiki/Count_occurrences_of_a_substring", "task_cat": "String manipulation", "lang": "JavaScript", "code": "\n\nfunction countSubstring(str, subStr) {\n    var matches = str.match(new RegExp(subStr, \"g\"));\n    return matches ? matches.length : 0;\n}\n\n\nconst countSubString = (str, subStr) => str.split(subStr).length - 1;\n\n", "explain": "Using regexes:\nUsing 'split' and ES6 notation:\n"}, {"task_name": "Count occurrences of a substring", "task_url": "https://rosettacode.org/wiki/Count_occurrences_of_a_substring", "task_cat": "String manipulation", "lang": "Visual_Basic_.NET", "code": "\nModule Count_Occurrences_of_a_Substring\n    Sub Main()\n        Console.WriteLine(CountSubstring(\"the three truths\", \"th\"))\n        Console.WriteLine(CountSubstring(\"ababababab\", \"abab\"))\n        Console.WriteLine(CountSubstring(\"abaabba*bbaba*bbab\", \"a*b\"))\n        Console.WriteLine(CountSubstring(\"abc\", \"\"))\n    End Sub\n\n    Function CountSubstring(str As String, substr As String) As Integer\n        Dim count As Integer = 0\n        If (Len(str) > 0) And (Len(substr) > 0) Then\n            Dim p As Integer = InStr(str, substr)\n            Do While p <> 0\n                p = InStr(p + Len(substr), str, substr)\n                count += 1\n            Loop\n        End If\n        Return count\n    End Function\nEnd Module\n\nOutput:\n3\n2\n2\n0\n", "explain": ""}, {"task_name": "Count occurrences of a substring", "task_url": "https://rosettacode.org/wiki/Count_occurrences_of_a_substring", "task_cat": "String manipulation", "lang": "PHP", "code": "\n<?php\necho substr_count(\"the three truths\", \"th\"), PHP_EOL; // prints \"3\"\necho substr_count(\"ababababab\", \"abab\"), PHP_EOL; // prints \"2\"\n\n", "explain": ""}, {"task_name": "Count occurrences of a substring", "task_url": "https://rosettacode.org/wiki/Count_occurrences_of_a_substring", "task_cat": "String manipulation", "lang": "Fortran", "code": "\nWorks with: Fortran version 90 and later\nprogram Example\n  implicit none\n  integer :: n\n  \n  n = countsubstring(\"the three truths\", \"th\")\n  write(*,*) n\n  n = countsubstring(\"ababababab\", \"abab\")\n  write(*,*) n\n  n = countsubstring(\"abaabba*bbaba*bbab\", \"a*b\")\n  write(*,*) n\n \ncontains\n\nfunction countsubstring(s1, s2) result(c)\n  character(*), intent(in) :: s1, s2\n  integer :: c, p, posn\n \n  c = 0\n  if(len(s2) == 0) return\n  p = 1\n  do \n    posn = index(s1(p:), s2)\n    if(posn == 0) return\n    c = c + 1\n    p = p + posn + len(s2) - 1\n  end do\nend function\nend program\n\n\nOutput:\n3\n2\n2\n", "explain": ""}, {"task_name": "Count occurrences of a substring", "task_url": "https://rosettacode.org/wiki/Count_occurrences_of_a_substring", "task_cat": "String manipulation", "lang": "Go", "code": "\n\npackage main\nimport (\n        \"fmt\"\n        \"strings\"\n)\n\nfunc main() {\n        fmt.Println(strings.Count(\"the three truths\", \"th\")) // says: 3\n        fmt.Println(strings.Count(\"ababababab\", \"abab\"))     // says: 2\n}\n\n", "explain": "Using strings.Count() method:\n"}, {"task_name": "Count occurrences of a substring", "task_url": "https://rosettacode.org/wiki/Count_occurrences_of_a_substring", "task_cat": "String manipulation", "lang": "Delphi", "code": "\nprogram OccurrencesOfASubstring;\n\n{$APPTYPE CONSOLE}\n\nuses StrUtils;\n\nfunction CountSubstring(const aString, aSubstring: string): Integer;\nvar\n  lPosition: Integer;\nbegin\n  Result := 0;\n  lPosition := PosEx(aSubstring, aString);\n  while lPosition <> 0 do\n  begin\n    Inc(Result);\n    lPosition := PosEx(aSubstring, aString, lPosition + Length(aSubstring));\n  end;\nend;\n\nbegin\n  Writeln(CountSubstring('the three truths', 'th'));\n  Writeln(CountSubstring('ababababab', 'abab'));\nend.\n\n", "explain": ""}, {"task_name": "Count occurrences of a substring", "task_url": "https://rosettacode.org/wiki/Count_occurrences_of_a_substring", "task_cat": "String manipulation", "lang": "Ruby", "code": "\ndef countSubstrings str, subStr\n  str.scan(subStr).length\nend\n\np countSubstrings \"the three truths\", \"th\"      #=> 3\np countSubstrings \"ababababab\", \"abab\"          #=> 2\n\n\n", "explain": "String#scan returns an array of substrings, and Array#length (or Array#size) counts them.\n"}, {"task_name": "Count occurrences of a substring", "task_url": "https://rosettacode.org/wiki/Count_occurrences_of_a_substring", "task_cat": "String manipulation", "lang": "Rust", "code": "\nfn main() {\n    println!(\"{}\",\"the three truths\".matches(\"th\").count());\n    println!(\"{}\",\"ababababab\".matches(\"abab\").count());\n}\n\n\nOutput:\n3\n2\n\n", "explain": ""}, {"task_name": "Count occurrences of a substring", "task_url": "https://rosettacode.org/wiki/Count_occurrences_of_a_substring", "task_cat": "String manipulation", "lang": "Swift", "code": "\nimport Foundation\n\nfunc countSubstring(str: String, substring: String) -> Int {\n  return str.components(separatedBy: substring).count - 1\n}\n\nprint(countSubstring(str: \"the three truths\", substring: \"th\"))\nprint(countSubstring(str: \"ababababab\", substring: \"abab\"))\n\nOutput:\n3\n2\n", "explain": ""}, {"task_name": "Count occurrences of a substring", "task_url": "https://rosettacode.org/wiki/Count_occurrences_of_a_substring", "task_cat": "String manipulation", "lang": "R", "code": "\n\ncount = function(haystack, needle)\n   {v = attr(gregexpr(needle, haystack, fixed = T)[[1]], \"match.length\")\n    if (identical(v, -1L)) 0 else length(v)}\n\nprint(count(\"hello\", \"l\"))\n\nLibrary: stringr\nlibrary(stringr)\nprint(str_count(\"hello\", fixed(\"l\")))\n\n", "explain": "The fixed parameter (and, in stringr, the function of the same name) is used to specify a search for a fixed string. Otherwise, the search pattern is interpreted as a POSIX regular expression. PCRE is also an option: use the perl parameter or function.\n"}, {"task_name": "Count occurrences of a substring", "task_url": "https://rosettacode.org/wiki/Count_occurrences_of_a_substring", "task_cat": "String manipulation", "lang": "COBOL", "code": "\n\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. testing.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01  occurrences             PIC 99.\n\n       PROCEDURE DIVISION.\n           INSPECT \"the three truths\" TALLYING occurrences FOR ALL \"th\"\n           DISPLAY occurrences\n\n           MOVE 0 TO occurrences\n           INSPECT \"ababababab\" TALLYING occurrences FOR ALL \"abab\"\n           DISPLAY occurrences\n           \n           MOVE 0 TO occurrences\n           INSPECT \"abaabba*bbaba*bbab\" TALLYING occurrences\n               FOR ALL \"a*b\"\n           DISPLAY occurrences\n\n           GOBACK\n           .\n\n\nOutput:\n03\n02\n02\n\n", "explain": "INSPECT can be used for this task without having to create a function.\n"}, {"task_name": "Count occurrences of a substring", "task_url": "https://rosettacode.org/wiki/Count_occurrences_of_a_substring", "task_cat": "String manipulation", "lang": "Ada", "code": "\nwith Ada.Strings.Fixed, Ada.Integer_Text_IO;\n\nprocedure Substrings is\nbegin\n   Ada.Integer_Text_IO.Put (Ada.Strings.Fixed.Count (Source  => \"the three truths\",\n                                                     Pattern => \"th\"));\n   Ada.Integer_Text_IO.Put (Ada.Strings.Fixed.Count (Source  => \"ababababab\",\n                                                     Pattern => \"abab\"));\nend Substrings;\n\n\nOutput:\n          3          2\n", "explain": ""}, {"task_name": "Count occurrences of a substring", "task_url": "https://rosettacode.org/wiki/Count_occurrences_of_a_substring", "task_cat": "String manipulation", "lang": "Julia", "code": "\n\nmatchall(r::Regex, s::String[, overlap::Bool=false]) -> Vector{String}\n\n   Return a vector of the matching substrings from eachmatch.\n\n\nts = [\"the three truths\", \"ababababab\"]\ntsub = [\"th\", \"abab\"]\n\nprintln(\"Test of non-overlapping substring counts.\")\nfor i in 1:length(ts)\n    print(ts[i], \" (\", tsub[i], \") => \")\n    println(length(matchall(Regex(tsub[i]), ts[i])))\nend\nprintln()\nprintln(\"Test of overlapping substring counts.\")\nfor i in 1:length(ts)\n    print(ts[i], \" (\", tsub[i], \") => \")\n    println(length(matchall(Regex(tsub[i]), ts[i], true)))\nend\n\n\nOutput:\nTest of non-overlapping substring counts.\nthe three truths (th) => 3\nababababab (abab) => 2\n\nTest of overlapping substring counts.\nthe three truths (th) => 3\nababababab (abab) => 4\n\n", "explain": "Built-in Function\nMain\n"}, {"task_name": "Count occurrences of a substring", "task_url": "https://rosettacode.org/wiki/Count_occurrences_of_a_substring", "task_cat": "String manipulation", "lang": "Kotlin", "code": "\n// version 1.0.6\n\nfun countSubstring(s: String, sub: String): Int = s.split(sub).size - 1\n\nfun main(args: Array<String>) {\n    println(countSubstring(\"the three truths\",\"th\"))\n    println(countSubstring(\"ababababab\",\"abab\"))\n    println(countSubstring(\"\",\"\"))\n}\n\n\nOutput:\n3\n2\n1\n\n", "explain": ""}, {"task_name": "Count occurrences of a substring", "task_url": "https://rosettacode.org/wiki/Count_occurrences_of_a_substring", "task_cat": "String manipulation", "lang": "Perl", "code": "\nsub countSubstring {\n  my $str = shift;\n  my $sub = quotemeta(shift);\n  my $count = () = $str =~ /$sub/g;\n  return $count;\n#  or return scalar( () = $str =~ /$sub/g );\n}\n  \nprint countSubstring(\"the three truths\",\"th\"), \"\\n\"; # prints \"3\"\nprint countSubstring(\"ababababab\",\"abab\"), \"\\n\"; # prints \"2\"\n\n", "explain": ""}, {"task_name": "Count occurrences of a substring", "task_url": "https://rosettacode.org/wiki/Count_occurrences_of_a_substring", "task_cat": "String manipulation", "lang": "Objective-C", "code": "\n\n@interface NSString (CountSubstrings)\n- (NSUInteger)occurrencesOfSubstring:(NSString *)subStr;\n@end\n\n@implementation NSString (CountSubstrings)\n- (NSUInteger)occurrencesOfSubstring:(NSString *)subStr {\n  return [[self componentsSeparatedByString:subStr] count] - 1;\n}\n@end\n\nint main(int argc, const char *argv[]) {\n  @autoreleasepool {\n\n    NSLog(@\"%lu\", [@\"the three truths\" occurrencesOfSubstring:@\"th\"]);\n    NSLog(@\"%lu\", [@\"ababababab\" occurrencesOfSubstring:@\"abab\"]);\n    NSLog(@\"%lu\", [@\"abaabba*bbaba*bbab\" occurrencesOfSubstring:@\"a*b\"]);\n \n  }\n  return 0;\n}\n\n\nOutput:\n3\n2\n2\n\n@interface NSString (CountSubstrings)\n- (NSUInteger)occurrencesOfSubstring:(NSString *)subStr;\n@end\n\n@implementation NSString (CountSubstrings)\n- (NSUInteger)occurrencesOfSubstring:(NSString *)subStr {\n  return ([self length] - [[self stringByReplacingOccurrencesOfString:subStr withString:@\"\"] length]) / [subStr length];\n}\n@end\n\nint main(int argc, const char *argv[]) {\n  @autoreleasepool {\n\n    NSLog(@\"%lu\", [@\"the three truths\" occurrencesOfSubstring:@\"th\"]);\n    NSLog(@\"%lu\", [@\"ababababab\" occurrencesOfSubstring:@\"abab\"]);\n    NSLog(@\"%lu\", [@\"abaabba*bbaba*bbab\" occurrencesOfSubstring:@\"a*b\"]);\n\n  }\n  return 0;\n}\n\n\nOutput:\n3\n2\n2\n\n@interface NSString (CountSubstrings)\n- (NSUInteger)occurrencesOfSubstring:(NSString *)subStr;\n@end\n\n@implementation NSString (CountSubstrings)\n- (NSUInteger)occurrencesOfSubstring:(NSString *)subStr {\n  NSUInteger count = 0;\n  for (NSRange range = [self rangeOfString:subStr]; range.location != NSNotFound;\n       range.location += range.length,\n       range = [self rangeOfString:subStr options:0\n                             range:NSMakeRange(range.location, [self length] - range.location)])\n    count++;\n  return count;\n}\n@end\n\nint main(int argc, const char *argv[]) {\n  @autoreleasepool {\n\n    NSLog(@\"%lu\", [@\"the three truths\" occurrencesOfSubstring:@\"th\"]);\n    NSLog(@\"%lu\", [@\"ababababab\" occurrencesOfSubstring:@\"abab\"]);\n    NSLog(@\"%lu\", [@\"abaabba*bbaba*bbab\" occurrencesOfSubstring:@\"a*b\"]);\n\n  }\n  return 0;\n}\n\n\nOutput:\n3\n2\n2\n", "explain": "The \"split and count\" method:\n\nThe \"remove and count the difference\" method:\n\nManual looping:\n"}, {"task_name": "Count occurrences of a substring", "task_url": "https://rosettacode.org/wiki/Count_occurrences_of_a_substring", "task_cat": "String manipulation", "lang": "Prolog", "code": "\nWorks with: SWI-Prolog version 7\n\ncount_substring(String, Sub, Total) :-\n    count_substring(String, Sub, 0, Total).\n\ncount_substring(String, Sub, Count, Total) :-\n    ( substring_rest(String, Sub, Rest)\n    ->\n        succ(Count, NextCount),\n        count_substring(Rest, Sub, NextCount, Total)\n    ;\n        Total = Count\n    ).\n\nsubstring_rest(String, Sub, Rest) :-\n    sub_string(String, Before, Length, Remain, Sub),\n    DropN is Before + Length,\n    sub_string(String, DropN, Remain, 0, Rest).\n\n\n?- count_substring(\"the three truths\",\"th\",X).\nX = 3.\n\n?- count_substring(\"ababababab\",\"abab\",X).\nX = 2.\n\nversion using DCG[edit]\nWorks with: SWI-Prolog version 7.6.4\n:- system:set_prolog_flag(double_quotes,chars) .\n\noccurrences(TARGETz0,SUBSTRINGz0,COUNT)\n:-\nprolog:phrase(occurrences(SUBSTRINGz0,0,COUNT),TARGETz0)\n.\n\noccurrences(\"\",_,_)\n-->\n! ,\n{ false }\n.\n\noccurrences(SUBSTRINGz0,COUNT0,COUNT)\n-->\nSUBSTRINGz0 ,\n! ,\n{ COUNT1 is COUNT0 + 1 } ,\noccurrences(SUBSTRINGz0,COUNT1,COUNT)\n.\n\noccurrences(SUBSTRINGz0,COUNT0,COUNT)\n-->\n[_] ,\n! ,\noccurrences(SUBSTRINGz0,COUNT0,COUNT)\n.\n\noccurrences(_SUBSTRINGz0_,COUNT,COUNT)\n-->\n!\n.\n\n\nOutput:\n/*\n?- occurrences(\"the three truths\",\"th\",COUNT) .\nCOUNT = 3.\n\n?- occurrences(\"the three truths\",\"\",COUNT) .\nfalse .\n\n?- occurrences(\"ababababab\",\"abab\",COUNT) .\nCOUNT = 2.\n\n?- occurrences(\"ababababab\",\"\",COUNT) .\nfalse .\n\n?- \n*/\n\n\n", "explain": "Using SWI-Prolog's string facilities (this solution is very similar to the Logtalk solution that uses sub_atom/5):\nUsage:\n"}, {"task_name": "Count occurrences of a substring", "task_url": "https://rosettacode.org/wiki/Count_occurrences_of_a_substring", "task_cat": "String manipulation", "lang": "Lua", "code": "\n\nfunction countSubstring(s1, s2)\n    return select(2, s1:gsub(s2, \"\"))\nend\n\nprint(countSubstring(\"the three truths\", \"th\"))\nprint(countSubstring(\"ababababab\", \"abab\"))\n\n3\n2\n\nfunction countSubstring(s1, s2)\n    local count = 0\n    for eachMatch in s1:gmatch(s2) do \n        count = count + 1 \n    end\n    return count\nend\n\nprint(countSubstring(\"the three truths\", \"th\"))\nprint(countSubstring(\"ababababab\", \"abab\"))\n\n3\n2\n", "explain": "Solution 1:\n\nSolution 2:\n"}, {"task_name": "Count occurrences of a substring", "task_url": "https://rosettacode.org/wiki/Count_occurrences_of_a_substring", "task_cat": "String manipulation", "lang": "Scala", "code": "\nUsing Recursion[edit]\nimport scala.annotation.tailrec\ndef countSubstring(str1:String, str2:String):Int={\n   @tailrec def count(pos:Int, c:Int):Int={\n      val idx=str1 indexOf(str2, pos)\n      if(idx == -1) c else count(idx+str2.size, c+1)\n   }\n   count(0,0)\n}\n\nUsing Sliding[edit]\ndef countSubstring(str: String, sub: String): Int =\n  str.sliding(sub.length).count(_ == sub)\n\nUsing Regular Expressions[edit]\ndef countSubstring( str:String, substr:String ) = substr.r.findAllMatchIn(str).length\n\n\nprintln(countSubstring(\"ababababab\", \"abab\"))\nprintln(countSubstring(\"the three truths\", \"th\"))\n\nOutput:\n2\n3\n", "explain": "\n"}, {"task_name": "Count occurrences of a substring", "task_url": "https://rosettacode.org/wiki/Count_occurrences_of_a_substring", "task_cat": "String manipulation", "lang": "D", "code": "\nvoid main() {\n    import std.stdio, std.algorithm;\n\n    \"the three truths\".count(\"th\").writeln;\n    \"ababababab\".count(\"abab\").writeln;\n}\n\n\nOutput:\n3\n2\n", "explain": ""}, {"task_name": "Count occurrences of a substring", "task_url": "https://rosettacode.org/wiki/Count_occurrences_of_a_substring", "task_cat": "String manipulation", "lang": "Haskell", "code": "\nText-based solution[edit]\nimport Data.Text hiding (length)\n\n-- Return the number of non-overlapping occurrences of sub in str.\ncountSubStrs str sub = length $ breakOnAll (pack sub) (pack str)\n\nmain = do\n  print $ countSubStrs \"the three truths\" \"th\"\n  print $ countSubStrs \"ababababab\" \"abab\"\n\n\nOutput:\n3\n2\n\n\n{-# LANGUAGE OverloadedStrings #-}\n\nimport Data.Text hiding (length)\n\n--------- COUNT OF SUBSTRING INSTANCES IN A STRING -------\n\ncountAll :: Text -> Text -> Int\ncountAll needle haystack =\n  length\n    (breakOnAll needle haystack)\n\n--------------------------- TEST -------------------------\nmain :: IO ()\nmain =\n  print $\n    countAll \"ab\"\n      <$> [ \"ababababab\",\n            \"abelian absurdity\",\n            \"babel kebab\"\n          ]\n\n\nOutput:\n[5,2,2]\nList-based solution[edit]\n\ncount :: Eq a => [a] -> [a] -> Int\ncount []  = error \"empty substring\"\ncount sub = go\n  where\n    go = scan sub . dropWhile (/= head sub)\n    scan _ [] = 0\n    scan [] xs = 1 + go xs\n    scan (x:xs) (y:ys) | x == y    = scan xs ys\n                       | otherwise = go ys\n\n\nOutput:\n\u03bb> count \"th\" \"the three truths\"\n3\n\u03bb> count \"abab\" \"ababababab\"\n2\n\u03bb> count [2,3] [1,2,1,2,3,4,3,2,3,4,3,2]\n2\n\u03bb> count \"123456\" $ foldMap show [1..1000000]\n7\nList-based solution using Data.List[edit]\n\nimport Data.List (tails, stripPrefix)\nimport Data.Maybe (catMaybes)\n\ncount :: Eq a => [a] -> [a] -> Int\ncount sub = length . catMaybes . map (stripPrefix sub) . tails\n\n", "explain": "Alternatively, in a language built around currying, it might make more sense to reverse the suggested order of arguments.\nEven though list-based strings are not \"the right\" way of representing texts, the problem of counting subsequences in a list is generally useful.\nThe following solution is almost two times faster than the previous one.\n"}, {"task_name": "Count occurrences of a substring", "task_url": "https://rosettacode.org/wiki/Count_occurrences_of_a_substring", "task_cat": "String manipulation", "lang": "VBScript", "code": "\n\nFunction CountSubstring(str,substr)\n\tCountSubstring = 0\n\tFor i = 1 To Len(str)\n\t\tIf Len(str) >= Len(substr) Then\n\t\t\tIf InStr(i,str,substr) Then\n\t\t\t\tCountSubstring = CountSubstring + 1\n\t\t\t\ti = InStr(i,str,substr) + Len(substr) - 1\n\t\t\tEnd If\n\t\tElse\n\t\t\tExit For\n\t\tEnd If\n\tNext\nEnd Function\n\nWScript.StdOut.Write CountSubstring(\"the three truths\",\"th\") & vbCrLf\nWScript.StdOut.Write CountSubstring(\"ababababab\",\"abab\") & vbCrLf\n\nfunction CountSubstring(str,substr)\n  with new regexp\n     .pattern=substr\n     .global=true\n     set m=.execute(str)\n  end with\n  CountSubstring =m.count\nend function  \nWScript.StdOut.Writeline CountSubstring(\"the three truths\",\"th\") \nWScript.StdOut.Writeline CountSubstring(\"ababababab\",\"abab\")\n\nOutput:\n3\n2\n\n", "explain": "user created function\nUsing built-in Regexp\nRun it with CScript.\n"}, {"task_name": "Count occurrences of a substring", "task_url": "https://rosettacode.org/wiki/Count_occurrences_of_a_substring", "task_cat": "String manipulation", "lang": "Scheme", "code": "\nWorks with: Gauche Scheme\ngosh> (use gauche.lazy)\n#<undef>\ngosh> (length (lrxmatch \"th\" \"the three truths\"))\n3\ngosh> (length (lrxmatch \"abab\" \"ababababab\"))\n2\n", "explain": ""}, {"task_name": "Count occurrences of a substring", "task_url": "https://rosettacode.org/wiki/Count_occurrences_of_a_substring", "task_cat": "String manipulation", "lang": "Apex", "code": "\n\nString substr = 'ABC';\nString str = 'ABCZZZABCYABCABCXXABC';\nInteger substrLen = substr.length();\nInteger count = 0;\nInteger index = str.indexOf(substr);\nwhile (index >= 0) {\n    count++;\n    str = str.substring(index+substrLen);\n    index = str.indexOf(substr);\n}\nSystem.debug('Count String\u00a0: '+count);\nCount String\u00a0: 5\n\n", "explain": "Apex example for 'Count occurrences of a substring'.\n"}, {"task_name": "Count occurrences of a substring", "task_url": "https://rosettacode.org/wiki/Count_occurrences_of_a_substring", "task_cat": "String manipulation", "lang": "PowerShell", "code": "\nWorks with: PowerShell version 4.0\n[regex]::Matches(\"the three truths\", \"th\").count\n\n\n3\n\n[regex]::Matches(\"ababababab\",\"abab\").count\n\n\n2\n\n", "explain": "Output:\nOutput:\n"}, {"task_name": "Count occurrences of a substring", "task_url": "https://rosettacode.org/wiki/Count_occurrences_of_a_substring", "task_cat": "String manipulation", "lang": "F#", "code": "\n\nopen System\n\nlet countSubstring (where :string) (what : string) =\n    match what with\n    | \"\" -> 0 // just a definition; infinity is not an int\n    | _ -> (where.Length - where.Replace(what, @\"\").Length) / what.Length\n    \n\n[<EntryPoint>]\nlet main argv =\n    let show where what =\n        printfn @\"countSubstring(\"\"%s\"\", \"\"%s\"\") = %d\" where what (countSubstring where what)\n    show \"the three truths\" \"th\"\n    show \"ababababab\" \"abab\"\n    show \"abc\" \"\"\n    0\n\ncountSubstring(\"the three truths\", \"th\") = 3\ncountSubstring(\"ababababab\", \"abab\") = 2\ncountSubstring(\"abc\", \"\") = 0\n", "explain": "\"Remove and count the difference\" method, as shown by J, Java, ...\n"}, {"task_name": "Count occurrences of a substring", "task_url": "https://rosettacode.org/wiki/Count_occurrences_of_a_substring", "task_cat": "String manipulation", "lang": "Groovy", "code": "\n\nprintln (('the three truths' =~ /th/).count)\nprintln (('ababababab' =~ /abab/).count)\nprintln (('abaabba*bbaba*bbab' =~ /a*b/).count)\nprintln (('abaabba*bbaba*bbab' =~ /a\\*b/).count)\n\n\nOutput:\n3\n2\n9\n2\n", "explain": "Solution, uses the Groovy \"find\" operator (=~), and the Groovy-extended Matcher property \"count\":\n"}, {"task_name": "Count occurrences of a substring", "task_url": "https://rosettacode.org/wiki/Count_occurrences_of_a_substring", "task_cat": "String manipulation", "lang": "AWK", "code": "\n#\n# countsubstring(string, pattern)\n#   Returns number of occurrences of pattern in string\n#   Pattern treated as a literal string (regex characters not expanded)\n#\nfunction countsubstring(str, pat,    len, i, c) {\n  c = 0\n  if( ! (len = length(pat) ) ) \n    return 0\n  while(i = index(str, pat)) {\n    str = substr(str, i + len)\n    c++\n  }\n  return c\n}\n#\n# countsubstring_regex(string, regex_pattern)\n#   Returns number of occurrences of pattern in string\n#   Pattern treated as regex       \n#\nfunction countsubstring_regex(str, pat,    c) {\n  c = 0\n  c += gsub(pat, \"\", str)\n  return c\n}\nBEGIN {\n  print countsubstring(\"[do&d~run?d!run&>run&]\", \"run&\")\n  print countsubstring_regex(\"[do&d~run?d!run&>run&]\", \"run[&]\")\n  print countsubstring(\"the three truths\",\"th\")\n}\n\n\nOutput:\n$ awk -f countsubstring.awk\n2\n2\n3\n\n", "explain": ""}]