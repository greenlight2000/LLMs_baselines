[{"task_name": "Active Directory/Connect", "task_url": "https://rosettacode.org/wiki/Active_Directory/Connect", "task_cat": "Programming environment operations", "lang": "Python", "code": "\nWorks with: Python version 2.6\nLibrary: python-ldap\n\nimport ldap\n\nl = ldap.initialize(\"ldap://ldap.example.com\")\ntry:\n    l.protocol_version = ldap.VERSION3\n    l.set_option(ldap.OPT_REFERRALS, 0)\n\n    bind = l.simple_bind_s(\"me@example.com\", \"password\")\nfinally:\n    l.unbind()\n\n", "explain": "python-ldap Documentation\n"}, {"task_name": "Active Directory/Connect", "task_url": "https://rosettacode.org/wiki/Active_Directory/Connect", "task_cat": "Programming environment operations", "lang": "C", "code": "\n\n#include <ldap.h>\n...\nchar *name, *password;\n...\nLDAP *ld = ldap_init(\"ldap.somewhere.com\", 389);\nldap_simple_bind_s(ld, name, password);\n... after done with it...\nldap_unbind(ld);\n\n", "explain": "With OpenLDAP:\n"}, {"task_name": "Active Directory/Connect", "task_url": "https://rosettacode.org/wiki/Active_Directory/Connect", "task_cat": "Programming environment operations", "lang": "Java", "code": "\n\nimport java.io.IOException;\nimport org.apache.directory.api.ldap.model.exception.LdapException;\nimport org.apache.directory.ldap.client.api.LdapConnection;\nimport org.apache.directory.ldap.client.api.LdapNetworkConnection;\n\npublic class LdapConnectionDemo {\n\n    public static void main(String[] args) throws LdapException, IOException {\n        try (LdapConnection connection = new LdapNetworkConnection(\"localhost\", 10389)) {\n            connection.bind();\n            connection.unBind();\n        }\n    }\n}\n\n\n", "explain": "This code uses the Apache Directory third-party library.\n\n"}, {"task_name": "Active Directory/Connect", "task_url": "https://rosettacode.org/wiki/Active_Directory/Connect", "task_cat": "Programming environment operations", "lang": "C#", "code": "\n// Requires adding a reference to System.DirectoryServices \nvar objDE = new System.DirectoryServices.DirectoryEntry(\"LDAP://DC=onecity,DC=corp,DC=fabrikam,DC=com\");\n\n", "explain": ""}, {"task_name": "Active Directory/Connect", "task_url": "https://rosettacode.org/wiki/Active_Directory/Connect", "task_cat": "Programming environment operations", "lang": "PHP", "code": "\n\n<?php\n$ldap = ldap_connect($hostname, $port);\n$success = ldap_bind($ldap, $username, $password);\n\n", "explain": "PHP LDAP Reference\n"}, {"task_name": "Active Directory/Connect", "task_url": "https://rosettacode.org/wiki/Active_Directory/Connect", "task_cat": "Programming environment operations", "lang": "Go", "code": "\nLibrary: go-ldap-client\n\npackage main\n\nimport (\n    \"log\"\n    \"github.com/jtblin/go-ldap-client\"\n)\n\nfunc main() {\n    client := &ldap.LDAPClient{\n        Base:         \"dc=example,dc=com\",\n        Host:         \"ldap.example.com\",\n        Port:         389,\n        UseSSL:       false,\n        BindDN:       \"uid=readonlyuser,ou=People,dc=example,dc=com\",\n        BindPassword: \"readonlypassword\",\n        UserFilter:   \"(uid=%s)\",\n        GroupFilter:  \"(memberUid=%s)\",\n        Attributes:   []string{\"givenName\", \"sn\", \"mail\", \"uid\"},\n    }\n    defer client.Close()\n    err := client.Connect()\n    if err != nil { \n        log.Fatalf(\"Failed to connect\u00a0:\u00a0%+v\", err)\n    }\n    // Do something\n}\n\n", "explain": "\nThere are a large number of third-party LDAP libraries for Go. This uses one of the simpler ones and the code below is largely taken from the example on its main page.\n"}, {"task_name": "Active Directory/Connect", "task_url": "https://rosettacode.org/wiki/Active_Directory/Connect", "task_cat": "Programming environment operations", "lang": "Ruby", "code": "\n\nLibrary: RubyGems\nrequire 'rubygems'\nrequire 'net/ldap'\nldap = Net::LDAP.new(:host => 'ldap.example.com', :base => 'o=companyname')\nldap.authenticate('bind_dn', 'bind_pass')\n\n", "explain": "Similar to Tcl, assume the AD server talks LDAP.  \nThere are many Ruby LDAP packages ([1]) -- this solution uses Net::LDAP (\"Pure Ruby LDAP Tools\" on RubyForge, gem name \"ruby-net-ldap\")\n"}, {"task_name": "Active Directory/Connect", "task_url": "https://rosettacode.org/wiki/Active_Directory/Connect", "task_cat": "Programming environment operations", "lang": "Rust", "code": "\n\nlet conn = ldap3::LdapConn::new(\"ldap://ldap.example.com\")?;\nconn.simple_bind(\"bind_dn\", \"bind_pass\")?.success()?;\n\n", "explain": "This solution uses the popular ldap3 crate.\n"}, {"task_name": "Active Directory/Connect", "task_url": "https://rosettacode.org/wiki/Active_Directory/Connect", "task_cat": "Programming environment operations", "lang": "Julia", "code": "\nusing LDAPClient\n\nconn = LDAPClient.LDAPConnection(\"ldap://localhost:10389\")\nLDAPClient.simple_bind(conn, \"user\", \"password\")\nLDAPClient.unbind(conn)\n\n", "explain": ""}, {"task_name": "Active Directory/Connect", "task_url": "https://rosettacode.org/wiki/Active_Directory/Connect", "task_cat": "Programming environment operations", "lang": "Kotlin", "code": "\nimport org.apache.directory.api.ldap.model.exception.LdapException\nimport org.apache.directory.ldap.client.api.LdapNetworkConnection\nimport java.io.IOException\nimport java.util.logging.Level\nimport java.util.logging.Logger\n\nclass LDAP(map: Map<String, String>) {\n    fun run() {\n        var connection: LdapNetworkConnection? = null\n        try {\n            if (info) log.info(\"LDAP Connection to $hostname on port $port\")\n            connection = LdapNetworkConnection(hostname, port.toInt())\n\n            try {\n                if (info) log.info(\"LDAP bind\")\n                connection.bind()\n            } catch (e: LdapException) {\n                log.severe(e.toString())\n            }\n\n            try {\n                if (info) log.info(\"LDAP unbind\")\n                connection.unBind()\n            } catch (e: LdapException) {\n                log.severe(e.toString())\n            }\n        } finally {\n            try {\n                if (info) log.info(\"LDAP close connection\")\n                connection!!.close()\n            } catch (e: IOException) {\n                log.severe(e.toString())\n            }\n        }\n    }\n\n    private val log = Logger.getLogger(LDAP::class.java.name)\n    private val info = log.isLoggable(Level.INFO)\n    private val hostname: String by map\n    private val port: String by map\n}\n\nfun main(args: Array<String>) = LDAP(mapOf(\"hostname\" to \"localhost\", \"port\"  to \"10389\")).run()\n\n", "explain": ""}, {"task_name": "Active Directory/Connect", "task_url": "https://rosettacode.org/wiki/Active_Directory/Connect", "task_cat": "Programming environment operations", "lang": "Perl", "code": "\n\nuse Net::LDAP;\n\nmy $ldap = Net::LDAP->new('ldap://ldap.example.com') or die $@;\nmy $mesg = $ldap->bind( $bind_dn, password => $bind_pass );\n\n", "explain": "LDAP Modules\n"}, {"task_name": "Active Directory/Connect", "task_url": "https://rosettacode.org/wiki/Active_Directory/Connect", "task_cat": "Programming environment operations", "lang": "Scala", "code": "\nimport java.io.IOException\n\nimport org.apache.directory.api.ldap.model.exception.LdapException\nimport org.apache.directory.ldap.client.api.{LdapConnection, LdapNetworkConnection}\n\nobject LdapConnectionDemo {\n  @throws[LdapException]\n  @throws[IOException]\n  def main(args: Array[String]): Unit = {\n    try {\n      val connection: LdapConnection = new LdapNetworkConnection(\"localhost\", 10389)\n      try {\n        connection.bind()\n        connection.unBind()\n      } finally if (connection != null) connection.close()\n    }\n  }\n}\n\n", "explain": ""}, {"task_name": "Active Directory/Connect", "task_url": "https://rosettacode.org/wiki/Active_Directory/Connect", "task_cat": "Programming environment operations", "lang": "D", "code": "\n\nimport openldap;\nimport std.stdio;\n\nvoid main() {\n  auto ldap = LDAP(\"ldap://localhost\");\n  auto r = ldap.search_s(\"dc=example,dc=com\", LDAP_SCOPE_SUBTREE, \"(uid=%s)\".format(\"test\"));\n  int b = ldap.bind_s(r[0].dn, \"password\");\n  scope(exit) ldap.unbind;\n  if (b)\n  {\n    writeln(\"error on binding\");\n    return;\n  }\n\n  // do something\n  ...\n    \n}\n\n", "explain": "Based on dopenldap.\n"}, {"task_name": "Active Directory/Connect", "task_url": "https://rosettacode.org/wiki/Active_Directory/Connect", "task_cat": "Programming environment operations", "lang": "Haskell", "code": "\n\n{-# LANGUAGE OverloadedStrings #-}\n\nmodule Main (main) where\n\nimport           Data.Foldable (for_)\nimport qualified Data.Text.Encoding as Text (encodeUtf8)\nimport           Ldap.Client (Attr(..), Filter(..))\nimport qualified Ldap.Client as Ldap (Dn(..), Host(..), search, with, typesOnly)\n\nmain :: IO ()\nmain = do\n    entries <- Ldap.with (Ldap.Plain \"localhost\") 389 $ \\ldap ->\n        Ldap.search ldap (Ldap.Dn \"o=example.com\") (Ldap.typesOnly True) (Attr \"uid\" := Text.encodeUtf8 \"user\") []\n    for_ entries $ \\entry ->\n        print entry\n\n", "explain": "Example uses the ldap-client package:\n"}, {"task_name": "Active Directory/Connect", "task_url": "https://rosettacode.org/wiki/Active_Directory/Connect", "task_cat": "Programming environment operations", "lang": "VBScript", "code": "\n\nSet objConn = CreateObject(\"ADODB.Connection\")\nSet objCmd = CreateObject(\"ADODB.Command\")\nobjConn.Provider = \"ADsDSOObject\"\nobjConn.Open\n\n", "explain": "Creating the normal connection to AD\n"}, {"task_name": "Active Directory/Connect", "task_url": "https://rosettacode.org/wiki/Active_Directory/Connect", "task_cat": "Programming environment operations", "lang": "ColdFusion", "code": "\n<cfldap \nserver = \"#someip#\"\naction=\"query\" \nstart=\"somestart#\" \nusername = \"#someusername#\" \npassword = \"#somepassowrd#\" \nname = \"results\" \nscope=\"subtree\" \nattributes = \"#attributeslist#\"\n>\n\n", "explain": ""}, {"task_name": "Active Directory/Connect", "task_url": "https://rosettacode.org/wiki/Active_Directory/Connect", "task_cat": "Programming environment operations", "lang": "F#", "code": "\nTranslation of: C_sharp\n\nlet adObject = new System.DirectoryServices.DirectoryEntry(\"LDAP://DC=onecity,DC=corp,DC=fabrikam,DC=com\")\n\n\nlet ldapServer = new System.DirectoryServices.Protocols.LdapDirectoryIdentifier(\"127.0.0.1\")\nlet connect = new System.DirectoryServices.Protocols.LdapConnection(ldapServer)\nconnect.Bind()\n\n", "explain": "For Active Directory we use the library System.DirectoryServicesFor your average LDAP server we use System.DirectoryServices.ProtocolFor a minimal example we make an anonymous connect to the local machine on the well-known LDAP port 389\n"}]