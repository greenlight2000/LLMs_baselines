[{"task_name": "System time", "task_url": "https://rosettacode.org/wiki/System_time", "task_cat": "Programming environment operations", "lang": "Python", "code": "\nimport time\nprint time.ctime()\n", "explain": ""}, {"task_name": "System time", "task_url": "https://rosettacode.org/wiki/System_time", "task_cat": "Programming environment operations", "lang": "C", "code": "\n\nIt shows system time as \"Www Mmm dd hh:mm:ss yyyy\", where Www is the weekday, Mmm the month in letters, dd the day of the month, hh:mm:ss the time, and yyyy the year.#include<time.h>\n#include<stdio.h>\n#include<stdlib.h>\nint main(){\n  time_t my_time = time(NULL);\n  printf(\"%s\", ctime(&my_time));\n  return 0;\n}\n\n", "explain": "This probably isn't the best way to do this, but it works. \n"}, {"task_name": "System time", "task_url": "https://rosettacode.org/wiki/System_time", "task_cat": "Programming environment operations", "lang": "C++", "code": "\n\n#include <iostream>\n#include <boost/date_time/posix_time/posix_time.hpp>\n\nint main( ) {\n   boost::posix_time::ptime t ( boost::posix_time::second_clock::local_time( ) ) ;\n   std::cout << to_simple_string( t ) << std::endl ;\n   return 0 ;\n}\n\nC++ 11[edit]\n#include <chrono>\n#include <ctime> //for conversion std::ctime()\n#include <iostream>\n\nint main() {\n    auto timenow = std::chrono::system_clock::to_time_t(std::chrono::system_clock::now());\n    std::cout << std::ctime(&timenow) << std::endl;\n}\n\n\nOutput:\n Thu Dec 26 13:51:00 2013\n\n", "explain": "to be compiled under linux with g++ -lboost_date_time systemtime.cpp -o systemtime( or whatever you like)\n"}, {"task_name": "System time", "task_url": "https://rosettacode.org/wiki/System_time", "task_cat": "Programming environment operations", "lang": "Java", "code": "\nWorks with: Java version 1.5+\npublic class SystemTime{\n    public static void main(String[] args){\n        System.out.format(\"%tc%n\", System.currentTimeMillis());\n    }\n}\n\nOutput:\nMon Jun 21 13:02:19 BST 2010\n\nOr using a Date object:import java.util.Date;\n\npublic class SystemTime{\n   public static void main(String[] args){\n      Date now = new Date();\n      System.out.println(now); // string representation\n\n      System.out.println(now.getTime()); // Unix time (# of milliseconds since Jan 1 1970)\n      //System.currentTimeMillis() returns the same value\n   }\n}\n\n\n", "explain": "Alternately, you can use a Calendar object, which allows you to retrieve specific fields of the date.\n"}, {"task_name": "System time", "task_url": "https://rosettacode.org/wiki/System_time", "task_cat": "Programming environment operations", "lang": "C#", "code": "\nConsole.WriteLine(DateTime.Now);\n\n", "explain": ""}, {"task_name": "System time", "task_url": "https://rosettacode.org/wiki/System_time", "task_cat": "Programming environment operations", "lang": "JavaScript", "code": "\nconsole.log(new Date()) // => Sat, 28 May 2011 08:22:53 GMT\nconsole.log(Date.now()) // => 1306571005417 // Unix epoch\n\n", "explain": ""}, {"task_name": "System time", "task_url": "https://rosettacode.org/wiki/System_time", "task_cat": "Programming environment operations", "lang": "PHP", "code": "\nSeconds since the Unix epoch:echo time(), \"\\n\";\n\nMicroseconds since the Unix epoch:echo microtime(), \"\\n\";\nFormatted time:echo date('D M j H:i:s Y'), \"\\n\";  // custom format; see format characters here:\n                                   // http://us3.php.net/manual/en/function.date.php\necho date('c'), \"\\n\";  // ISO 8601 format\necho date('r'), \"\\n\";  // RFC 2822 format\necho date(DATE_RSS), \"\\n\";  // can also use one of the predefined formats here:\n                            // http://us3.php.net/manual/en/class.datetime.php#datetime.constants.types\n\n", "explain": ""}, {"task_name": "System time", "task_url": "https://rosettacode.org/wiki/System_time", "task_cat": "Programming environment operations", "lang": "Fortran", "code": "\nIn ISO Fortran 90 or later, use the SYSTEM_CLOCK intrinsic subroutine:integer :: start, stop, rate\nreal :: result\n      \n! optional 1st integer argument (COUNT) is current raw system clock counter value (not UNIX epoch millis!!)\n! optional 2nd integer argument (COUNT_RATE) is clock cycles per second\n! optional 3rd integer argument (COUNT_MAX) is maximum clock counter value\ncall system_clock( start, rate )\n      \nresult = do_timed_work()\n      \ncall system_clock( stop )\n      \nprint *, \"elapsed time: \", real(stop - start) / real(rate)\nIn ISO Fortran 95 or later, use the CPU_TIME intrinsic subroutine:real :: start, stop\nreal :: result\n      \n! System clock value interpreted as floating point seconds\ncall cpu_time( start )\n      \nresult = do_timed_work()\n      \ncall cpu_time( stop )\n      \nprint *, \"elapsed time: \", stop - start\n\n", "explain": ""}, {"task_name": "System time", "task_url": "https://rosettacode.org/wiki/System_time", "task_cat": "Programming environment operations", "lang": "Go", "code": "\npackage main\n\nimport \"time\"\nimport \"fmt\"\n\nfunc main() {\n    t := time.Now()\n    fmt.Println(t)                                    // default format\n    fmt.Println(t.Format(\"Mon Jan  2 15:04:05 2006\")) // some custom format\n}\n\n", "explain": ""}, {"task_name": "System time", "task_url": "https://rosettacode.org/wiki/System_time", "task_cat": "Programming environment operations", "lang": "ARM_Assembly", "code": "\nWorks with: as version Raspberry Pi\n/* ARM assembly Raspberry PI  */\n/*  program sysTime.s   */\n\n/* REMARK 1\u00a0: this program use routines in a include file \n   see task Include a file language arm assembly \n   for the routine affichageMess conversion10 \n   see at end of this program the instruction include */\n\n/*******************************************/\n/* Constantes                              */\n/*******************************************/\n.equ STDOUT, 1           @ Linux output console\n.equ EXIT,   1           @ Linux syscall\n.equ WRITE,  4           @ Linux syscall\n.equ BRK,    0x2d        @ Linux syscall\n.equ CHARPOS,     '@'\n\n.equ GETTIME,   0x4e     @ call system linux gettimeofday\n\n/*******************************************/\n/* Structures                               */\n/********************************************/\n/* example structure  time  */\n    .struct  0\ntimeval_sec:                     @\n    .struct  timeval_sec + 4 \ntimeval_usec:                     @\n    .struct  timeval_usec + 4 \ntimeval_end:\n    .struct  0\ntimezone_min:                     @\n    .struct  timezone_min + 4 \ntimezone_dsttime:                 @ \n    .struct  timezone_dsttime + 4 \ntimezone_end:\n\n/*********************************/\n/* Initialized data              */\n/*********************************/\n.data\nszMessError:       .asciz \"Error detected\u00a0!!!!. \\n\"\nszMessResult:      .asciz \"GMT: @/@/@  @:@:@  @ms\\n\"  @ message result\n \nszCarriageReturn:  .asciz \"\\n\"\n.align 4\ntbDayMonthYear:    .int  0,  31,  60,  91, 121, 152, 182, 213, 244, 274, 305, 335\n                   .int 366, 397, 425, 456, 486, 517, 547, 578, 609, 639, 670, 700\n                   .int 731, 762, 790, 821, 851, 882, 912, 943, 974,1004,1035,1065\n                   .int 1096,1127,1155,1186,1216,1247,1277,1308,1339,1369,1400,1430\n/*********************************/\n/* UnInitialized data            */\n/*********************************/\n.bss \n.align 4\nstTVal:                .skip timeval_end\nstTZone:               .skip timezone_end\nsZoneConv:             .skip 100\n/*********************************/\n/*  code section                 */\n/*********************************/\n.text\n.global main \nmain:                              @ entry of program \n    ldr r0,iAdrstTVal\n    ldr r1,iAdrstTZone\n    mov r7,#GETTIME\n    svc 0\n    cmp r0,#-1                     @ error\u00a0?\n    beq 99f\n    ldr r0,iAdrstTVal\n    ldr r1,[r0,#timeval_sec]       @ timestemp in second\n    //ldr r1,iTStest1\n    //ldr r1,iTStest2\n    //ldr r1,iTStest3\n    ldr r2,iSecJan2020\n    sub r0,r1,r2                   @ total secondes to 01/01/2020\n    mov r1,#60\n    bl division\n    mov r0,r2\n    mov r6,r3                      @ compute secondes\n    mov r1,#60\n    bl division\n    mov r7,r3                      @ compute minutes\n    mov r0,r2\n    mov r1,#24\n    bl division\n    mov r8,r3                      @ compute hours\n    mov r0,r2\n    mov r11,r0\n    mov r1,#(365 * 4 + 1)\n    bl division\n    lsl r9,r2,#2                   @ multiply by 4 = year1\n    mov r1,#(365 * 4 + 1)\n    mov r0,r11\n    bl division\n    mov r10,r3\n    ldr r1,iAdrtbDayMonthYear\n    mov r2,#3\n    mov r3,#12\n1:\n    mul r11,r3,r2\n    ldr r12,[r1,r11,lsl #2]         @ load days by year\n    cmp r10,r12\n    bge 2f\n    sub r2,r2,#1\n    cmp r2,#0\n    bne 1b\n2:                                 @ r2 = year2\n    mov r5,#11\n    mul r4,r3,r2\n    lsl r4,#2\n    add r4,r1\n3:\n    ldr r12,[r4,r5,lsl #2]         @ load days by month\n    cmp r10,r12\n    bge 4f\n    subs r5,r5,#1\n    bne 3b\n4:                                 @ r5 = month - 1\n    mul r11,r3,r2\n    add r11,r5\n    ldr r1,iAdrtbDayMonthYear\n    ldr r3,[r1,r11,lsl #2]\n    sub r0,r10,r3\n\n    add r0,r0,#1                   @ final compute day\n    ldr r1,iAdrsZoneConv\n    bl conversion10                @ this function do not zero final\n    mov r4,#0                      @ store zero final\n    strb r4,[r1,r0]\n    ldr r0,iAdrszMessResult\n    ldr r1,iAdrsZoneConv\n    bl strInsertAtCharInc          @ insert result at first @ character\n    mov r3,r0\n    add r0,r5,#1                   @ final compute month\n    ldr r1,iAdrsZoneConv\n    bl conversion10\n    mov r4,#0                      @ store zero final\n    strb r4,[r1,r0]\n    mov r0,r3\n    ldr r1,iAdrsZoneConv\n    bl strInsertAtCharInc          @ insert result at next @ character\n    mov r3,r0\n    ldr r11,iYearStart\n    add r0,r9,r11\n    add r0,r0,r2                   @ final compute year = 2020 + year1 + year2\n    ldr r1,iAdrsZoneConv\n    bl conversion10\n    mov r4,#0                      @ store zero final\n    strb r4,[r1,r0]\n    mov r0,r3\n    ldr r1,iAdrsZoneConv\n    bl strInsertAtCharInc          @ insert result at next @ character\n    mov r3,r0\n    mov r0,r8                      @ hours\n    ldr r1,iAdrsZoneConv\n    bl conversion10\n    mov r4,#0                      @ store zero final\n    strb r4,[r1,r0]\n    mov r0,r3\n    ldr r1,iAdrsZoneConv\n    bl strInsertAtCharInc          @ insert result at next @ character\n    mov r3,r0\n    mov r0,r7                      @ minutes\n    ldr r1,iAdrsZoneConv\n    bl conversion10\n    mov r4,#0                      @ store zero final\n    strb r4,[r1,r0]\n    mov r0,r3\n    ldr r1,iAdrsZoneConv\n    bl strInsertAtCharInc          @ insert result at next @ character\n    mov r3,r0\n    mov r0,r6                      @ secondes\n    ldr r1,iAdrsZoneConv\n    bl conversion10\n    mov r4,#0                      @ store zero final\n    strb r4,[r1,r0]\n    mov r0,r3\n    ldr r1,iAdrsZoneConv\n    bl strInsertAtCharInc          @ insert result at next @ character\n    mov r3,r0\n    ldr r1,iAdrstTVal\n    ldr r0,[r1,#timeval_usec]      @ millisecondes\n    ldr r1,iAdrsZoneConv\n    bl conversion10\n    mov r4,#0                      @ store zero final\n    strb r4,[r1,r0]\n    mov r0,r3\n    ldr r1,iAdrsZoneConv\n    bl strInsertAtCharInc          @ insert result at next @ character\n    bl affichageMess \n    b 100f\n99:\n    ldr r0,iAdrszMessError\n    bl affichageMess \n100:                               @ standard end of the program \n    mov r0,#0                      @ return code\n    mov r7,#EXIT                   @ request to exit program\n    svc 0                          @ perform the system call\n\niAdrszMessError:          .int szMessError\niAdrstTVal:               .int stTVal\niAdrstTZone:              .int stTZone\niAdrszMessResult:         .int szMessResult\niAdrszCarriageReturn:     .int szCarriageReturn\niAdrsZoneConv:            .int sZoneConv\niSecJan2020:              .int 1577836800\niAdrtbDayMonthYear:       .int tbDayMonthYear\niYearStart:               .int 2020\niTStest1:                 .int 1609508339    @ 01/01/2021\niTStest2:                 .int 1657805939    @ 14/07/2022\niTStest3:                 .int 1767221999    @ 31/12/2025\n/***************************************************/\n/*      ROUTINES INCLUDE                 */\n/***************************************************/\n.include \"../affichage.inc\"\n\nOutput:\nGMT: 29/3/2020  18:39:13  717877ms\n\n", "explain": ""}, {"task_name": "System time", "task_url": "https://rosettacode.org/wiki/System_time", "task_cat": "Programming environment operations", "lang": "Delphi", "code": "\nlblDateTime.Caption := FormatDateTime('dd mmmm yyyy hh:mm:ss', Now);\nThis populates a label with the date\n", "explain": ""}, {"task_name": "System time", "task_url": "https://rosettacode.org/wiki/System_time", "task_cat": "Programming environment operations", "lang": "Ruby", "code": "\nversion 1.9+t = Time.now\n\n# textual\nputs t        # => 2013-12-27 18:00:23 +0900\n\n# epoch time\nputs t.to_i   # => 1388134823\n\n# epoch time with fractional seconds\nputs t.to_f   # => 1388134823.9801579\n\n# epoch time as a rational (more precision):\nputs Time.now.to_r  # 1424900671883862959/1000000000\n", "explain": ""}, {"task_name": "System time", "task_url": "https://rosettacode.org/wiki/System_time", "task_cat": "Programming environment operations", "lang": "Rust", "code": "\n// 20210210 Rust programming solution\n\nextern crate chrono;\nuse chrono::prelude::*;\n\nfn main() {\n   let utc: DateTime<Utc> = Utc::now();\n   println!(\"{}\", utc.format(\"%d/%m/%Y %T\"));\n}\n\nOutput:\n10/02/2021 16:26:23\n\n", "explain": ""}, {"task_name": "System time", "task_url": "https://rosettacode.org/wiki/System_time", "task_cat": "Programming environment operations", "lang": "Swift", "code": "\nimport Foundation\n\nvar \u231a\ufe0f = NSDate()\nprintln(\u231a\ufe0f)\nOutput:\n2014-06-22 20:43:42 +0000\n\n", "explain": ""}, {"task_name": "System time", "task_url": "https://rosettacode.org/wiki/System_time", "task_cat": "Programming environment operations", "lang": "R", "code": "\nWorks with: R version 2.8.1\nNote that this is output as a standard style string.Sys.time()\nOutput:\n[1] \"2009-07-27 15:27:04 PDT\"\n\n", "explain": ""}, {"task_name": "System time", "task_url": "https://rosettacode.org/wiki/System_time", "task_cat": "Programming environment operations", "lang": "COBOL", "code": "\n       WORKING-STORAGE SECTION.\n       01  WS-CURRENT-DATE-FIELDS.\n           05  WS-CURRENT-DATE.\n               10  WS-CURRENT-YEAR    PIC  9(4).\n               10  WS-CURRENT-MONTH   PIC  9(2).\n               10  WS-CURRENT-DAY     PIC  9(2).\n           05  WS-CURRENT-TIME.\n               10  WS-CURRENT-HOUR    PIC  9(2).\n               10  WS-CURRENT-MINUTE  PIC  9(2).\n               10  WS-CURRENT-SECOND  PIC  9(2).\n               10  WS-CURRENT-MS      PIC  9(2).\n           05  WS-DIFF-FROM-GMT       PIC S9(4).\n \n       PROCEDURE DIVISION.\n           MOVE FUNCTION CURRENT-DATE TO WS-CURRENT-DATE-FIELDS.\n\n", "explain": ""}, {"task_name": "System time", "task_url": "https://rosettacode.org/wiki/System_time", "task_cat": "Programming environment operations", "lang": "Ada", "code": "\nThe following example displays a date-time stamp. The time zone value is the number of minutes offset from the prime meridian.with Ada.Calendar; use Ada.Calendar;\nwith Ada.Calendar.Formatting; use Ada.Calendar.Formatting;\nwith Ada.Calendar.Time_Zones; use Ada.Calendar.Time_Zones;\nwith Ada.Text_Io; use Ada.Text_Io;\n \nprocedure System_Time is\n   Now : Time := Clock;\nbegin\n   Put_line(Image(Date => Now, Time_Zone => -7*60));\nend System_Time;\n\nOutput:\n2008-01-23 19:14:19\n\n", "explain": ""}, {"task_name": "System time", "task_url": "https://rosettacode.org/wiki/System_time", "task_cat": "Programming environment operations", "lang": "Julia", "code": "\nts = time()\n\nprintln(\"The system time is (in ISO 8601 format):\")\nprintln(strftime(\"    %F %T %Z\", ts))\n\n\nOutput:\nThe system time is (in ISO 8601 format):\n    2015-04-08 14:19:38 CDT\n\n", "explain": ""}, {"task_name": "System time", "task_url": "https://rosettacode.org/wiki/System_time", "task_cat": "Programming environment operations", "lang": "Kotlin", "code": "\n// version 1.0.6\n\nfun main(args: Array<String>) {\n    println(\"%tc\".format(System.currentTimeMillis()))\n}\n\n", "explain": ""}, {"task_name": "System time", "task_url": "https://rosettacode.org/wiki/System_time", "task_cat": "Programming environment operations", "lang": "Perl", "code": "\nSimple localtime use in scalar context.print scalar localtime, \"\\n\";\n\nOutput:\nThu Jan 24 11:23:30 2008\n\nlocaltime use in array context.($sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst) = localtime;\nprintf(\"%04d-%02d-%02d %02d:%02d:%02d\\n\", $year + 1900, $mon + 1, $mday, $hour, $min, $sec\n\n\nOutput:\n2008-01-24 11:23:30\n\nThe same using DateTime:use DateTime;\nmy $dt = DateTime->now;\nmy $d = $dt->ymd;\nmy $t = $dt->hms;\nprint \"$d $t\\n\";\n\nOutput:\n2010-03-29 19:46:26\n\nlocaltime use in array context with POSIX strftime:use POSIX qw(strftime);\n\n$now_string = strftime \"%a %b %e %H:%M:%S %Y\", localtime;\nprint \"$now_string\\n\";\nOutput (with cs_CZ.UTF-8 locale):\n\u010ct led 24 11:23:30 2008Using the DateTime module:use DateTime;\nmy $dt = DateTime->now;\nsay $dt->iso8601();\nsay $dt->year_with_christian_era();\nsay $dt->year_with_secular_era();\n# etc.\nUnix epoch:print time;\n\nOutput:\n1280473609\n\n", "explain": ""}, {"task_name": "System time", "task_url": "https://rosettacode.org/wiki/System_time", "task_cat": "Programming environment operations", "lang": "Objective-C", "code": "\nNSLog(@\"%@\", [NSDate date]);\nor (deprecated)NSLog(@\"%@\", [NSCalendarDate calendarDate]);\n\n", "explain": ""}, {"task_name": "System time", "task_url": "https://rosettacode.org/wiki/System_time", "task_cat": "Programming environment operations", "lang": "Prolog", "code": "\nGNU_Prolog[edit]\nWorks with: GNU Prolog\ndate_time(H).\n\n\nOutput:\nH = dt(2022,1,23,21,37,16)\nB-Prolog[edit]\nWorks with: B-Prolog\ntime(H,M,S)\n\n\nOutput:\nH = 21\nM = 37\nS = 16\n\nWorks with: B-Prolog\ndate(Y,M,D)\n\n\nOutput:\nY = 2022\nM = 1\nD = 23\n\n\n", "explain": "\n"}, {"task_name": "System time", "task_url": "https://rosettacode.org/wiki/System_time", "task_cat": "Programming environment operations", "lang": "Lua", "code": "\nprint(os.date())\n\n", "explain": ""}, {"task_name": "System time", "task_url": "https://rosettacode.org/wiki/System_time", "task_cat": "Programming environment operations", "lang": "Scala", "code": "\nLibrary: ScalaAd hoc solution as REPL scripts:\nJDK < 8[edit]\nprintln(new java.util.Date)\nOutput:\nSun Aug 14 22:47:42 EDT 2011\n\nJDK >= 8 (recommended)[edit]\nprintln(java.time.LocalTime.now())\nOutput:\n11:32:39.002\n\n", "explain": ""}, {"task_name": "System time", "task_url": "https://rosettacode.org/wiki/System_time", "task_cat": "Programming environment operations", "lang": "D", "code": "\nWorks with: Tango\n\nStdout(Clock.now.span.days / 365).newline;\n\n", "explain": "Clock.now.span in the example below returnes the time-span since 1 Jan 1 A.D. \nDays are used in the example,\nbut lower units are available, with the lowest being nanoseconds (nanos field).\n"}, {"task_name": "System time", "task_url": "https://rosettacode.org/wiki/System_time", "task_cat": "Programming environment operations", "lang": "Haskell", "code": "\nimport System.Time\n       (getClockTime, toCalendarTime, formatCalendarTime)\n\nimport System.Locale (defaultTimeLocale)\n\nmain :: IO ()\nmain = do\n  ct <- getClockTime\n  print ct -- print default format, or\n  cal <- toCalendarTime ct\n  putStrLn $ formatCalendarTime defaultTimeLocale \"%a %b %e %H:%M:%S %Y\" cal\n\n\nimport Data.Time (getZonedTime, formatTime, defaultTimeLocale)\n\nmain :: IO ()\nmain = do\n  zt <- getZonedTime\n  print zt -- print default format, or\n  putStrLn $ formatTime defaultTimeLocale \"%a %b %e %H:%M:%S %Y\" zt\n\n", "explain": "or with the time library:\n"}, {"task_name": "System time", "task_url": "https://rosettacode.org/wiki/System_time", "task_cat": "Programming environment operations", "lang": "VBScript", "code": "\nWScript.Echo Now\n", "explain": ""}, {"task_name": "System time", "task_url": "https://rosettacode.org/wiki/System_time", "task_cat": "Programming environment operations", "lang": "Scheme", "code": "\nWorks with: Chicken Scheme(use posix)\n(seconds->string (current-seconds))\nOutput:\n\"Sat May 16 21:42:47 2009\"\n\nWorks with: Chez Scheme\n(display (date-and-time)) (newline)\n\nOutput:\nMon Jun 27 19:51:09 2022\n\n", "explain": ""}, {"task_name": "System time", "task_url": "https://rosettacode.org/wiki/System_time", "task_cat": "Programming environment operations", "lang": "PowerShell", "code": "\nUsing a cmdlet:Get-Date\nor using .NET classes and properties:[DateTime]::Now\n\n\n", "explain": "\n"}, {"task_name": "System time", "task_url": "https://rosettacode.org/wiki/System_time", "task_cat": "Programming environment operations", "lang": "Logo", "code": "\nWorks with: UCB Logo\nOther Logo variants might have a built-in command, but UCB Logo must access the Unix shell to get time.to time\n  output first first shell [date +%s]\nend\n\nmake \"start time\nwait 300             \u00a0; 60ths of a second\nprint time - :start  \u00a0; 5\n", "explain": ""}, {"task_name": "System time", "task_url": "https://rosettacode.org/wiki/System_time", "task_cat": "Programming environment operations", "lang": "ColdFusion", "code": "\nScript Based CFML[edit]\n<cfscript>\n  // Date Time\n  currentTime = Now();\n  writeOutput( currentTime );\n\n  // Epoch\n  // Credit for Epoch time should go to Ben Nadel\n  // bennadel.com is his blog\n  utcDate = dateConvert( \"local2utc\", currentTime );\n  writeOutput( utcDate.getTime() );\n</cfscript>\n\n\nOutput:\nCurrent DateTime: {ts '2017-06-06 10:36:28'}\nEpoch: 1496763388434\n\n", "explain": ""}, {"task_name": "System time", "task_url": "https://rosettacode.org/wiki/System_time", "task_cat": "Programming environment operations", "lang": "ABAP", "code": "\nREPORT system_time.\n\nWRITE: sy-uzeit.\n", "explain": ""}, {"task_name": "System time", "task_url": "https://rosettacode.org/wiki/System_time", "task_cat": "Programming environment operations", "lang": "F#", "code": "\nprintfn \"%s\" (System.DateTime.Now.ToString(\"u\"))\n\n\nOutput:\n 2013-09-19 23:56:50Z\n\n", "explain": ""}, {"task_name": "System time", "task_url": "https://rosettacode.org/wiki/System_time", "task_cat": "Programming environment operations", "lang": "Groovy", "code": "\nSolution (based on Java solution).def nowMillis = new Date().time\nprintln 'Milliseconds since the start of the UNIX Epoch (Jan 1, 1970) == ' + nowMillis\n\n\nOutput:\nMilliseconds since the start of the UNIX Epoch (Jan 1, 1970) == 1243395159250\n\n", "explain": ""}, {"task_name": "System time", "task_url": "https://rosettacode.org/wiki/System_time", "task_cat": "Programming environment operations", "lang": "AWK", "code": "\n\nWorks with: Gawk\n$ awk 'BEGIN{print systime(),strftime()}'\n\n\nOutput:\n1242401632 Fri May 15 17:33:52  2009\n\nWorks with: awk\nfunction dos_date(  cmd,d,t,x) { \t# under MS Windows \n#   cmd = \"DATE /T\"\n#   cmd | getline d\t# Format depends on locale, e.g. MM/DD/YYYY or YYYY-MM-DD\n#   close(cmd)        \t# close pipe\n# ##print d\n#   cmd = \"TIME /T\"\n#   cmd | getline t   \t# 13:59\n#   close(cmd) \t\t\n# ##print t\n#   return d t\n\n    cmd = \"echo %DATE% %TIME%\"\t\t# this gives better time-resolution\n    cmd | getline x   \t\t\t# 2014-10-31 20:57:36.84\n    close(cmd)\n    return x\n}\nBEGIN {\n   print \"Date and time:\", dos_date()\n  #print systime(), strftime()\t\t# gawk only\n}\n\n\nOutput:\n2014-10-31 20:57:36.84\n\n\n", "explain": "One-liner:\nSolution for other awk-versions:\nSee also: System_time#Batch, Discordian_date\n"}]