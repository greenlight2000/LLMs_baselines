[{"task_name": "Loops/For with a specified step", "task_url": "https://rosettacode.org/wiki/Loops/For_with_a_specified_step", "task_cat": "Iteration", "lang": "Python", "code": "\nWorks with: Python version 2.x\nfor i in xrange(2, 9, 2):\n    print \"%d,\"\u00a0% i,\nprint \"who do we appreciate?\"\nWorks with: Python version 3.x\nfor i in range(2, 9, 2):\n    print(\"%d, \"\u00a0% i, end=\"\")\nprint(\"who do we appreciate?\")\n\nOutput:\n2, 4, 6, 8, who do we appreciate?\n", "explain": ""}, {"task_name": "Loops/For with a specified step", "task_url": "https://rosettacode.org/wiki/Loops/For_with_a_specified_step", "task_cat": "Iteration", "lang": "C", "code": "\n\nint i;\nfor(i = 1; i < 10; i += 2)\n  printf(\"%d\\n\", i);\n\n", "explain": "This prints all odd digits:\n"}, {"task_name": "Loops/For with a specified step", "task_url": "https://rosettacode.org/wiki/Loops/For_with_a_specified_step", "task_cat": "Iteration", "lang": "C++", "code": "\n\nfor (int i = 1; i < 10; i += 2)\n  std::cout << i << std::endl;\n\n", "explain": "This prints all odd digits:\n"}, {"task_name": "Loops/For with a specified step", "task_url": "https://rosettacode.org/wiki/Loops/For_with_a_specified_step", "task_cat": "Iteration", "lang": "Java", "code": "\nfor(int i = 2; i <= 8;i += 2){\n   System.out.print(i + \", \");\n}\nSystem.out.println(\"who do we appreciate?\");\n\n", "explain": ""}, {"task_name": "Loops/For with a specified step", "task_url": "https://rosettacode.org/wiki/Loops/For_with_a_specified_step", "task_cat": "Iteration", "lang": "C#", "code": "\nusing System;\n \nclass Program {\n    static void Main(string[] args) {    \n        for (int i = 2; i <= 8; i+= 2) {        \n            Console.Write(\"{0}, \", i);\n        }\n\n        Console.WriteLine(\"who do we appreciate?\");\n    }\n}\n\n", "explain": ""}, {"task_name": "Loops/For with a specified step", "task_url": "https://rosettacode.org/wiki/Loops/For_with_a_specified_step", "task_cat": "Iteration", "lang": "JavaScript", "code": "\nvar output = '',\n    i;\nfor (i = 2; i <= 8; i += 2) {\n   output += i + ', ';\n}\noutput += 'who do we appreciate?';\ndocument.write(output);\n\n\n// range(iMax)\n// range(iMin, iMax)\n// range(iMin, iMax, dI)\nfunction range() {\n  var lngArgs = arguments.length,\n    lngMore = lngArgs - 1;\n\n  iMin = lngMore ? arguments[0] : 1;\n  iMax = arguments[lngMore ? 1 : 0];\n  dI = lngMore > 1 ? arguments[2] : 1;\n\n  return lngArgs ? Array.apply(null, Array(\n    Math.floor((iMax - iMin) / dI) + 1\n  )).map(function (_, i) {\n    return iMin + (dI * i);\n  }) : [];\n}\n\nconsole.log(\n  range(2, 8, 2).join(', ') + ', who do we appreciate\u00a0?'\n);\n\n\n2, 4, 6, 8, who do we appreciate\u00a0?\n", "explain": "In a functional idiom of JavaScript, however, we will only be able to compose this computation within the superordinate expressions of our program if it has the the form of an expression returning a value, rather than that of a statement which fires off side-effects but returns no value.\nFollowing the example of languages like Haskell and J on this page, we can begin by generating the stepped series as an expression. In functional JavaScript we will typically replace a state-changing loop with a non-mutating map or fold, writing, for example, something like:\nOutput:\n"}, {"task_name": "Loops/For with a specified step", "task_url": "https://rosettacode.org/wiki/Loops/For_with_a_specified_step", "task_cat": "Iteration", "lang": "PHP", "code": "\n<?php\nforeach (range(2, 8, 2) as $i)\n    echo \"$i, \";\necho \"who do we appreciate?\\n\";\n?>\n\nOutput:\n2, 4, 6, 8, who do we appreciate?\n", "explain": ""}, {"task_name": "Loops/For with a specified step", "task_url": "https://rosettacode.org/wiki/Loops/For_with_a_specified_step", "task_cat": "Iteration", "lang": "Fortran", "code": "\nWorks with: Fortran version 90 and later\ndo i = 1,10,2\n   print *, i\nend do\n\nWorks with: Fortran version 77 and later\n      PROGRAM STEPFOR\n        INTEGER I\n\nC       This will print all even numbers from -10 to +10, inclusive.\n        DO 10 I = -10, 10, 2\n          WRITE (*,*) I\n   10   CONTINUE\n\n        STOP\n      END\n\n", "explain": ""}, {"task_name": "Loops/For with a specified step", "task_url": "https://rosettacode.org/wiki/Loops/For_with_a_specified_step", "task_cat": "Iteration", "lang": "Go", "code": "\n\nfor i := 1; i < 10; i += 2 {\n  fmt.Printf(\"%d\\n\", i)\n}\n\n", "explain": "This prints all odd digits:\n"}, {"task_name": "Loops/For with a specified step", "task_url": "https://rosettacode.org/wiki/Loops/For_with_a_specified_step", "task_cat": "Iteration", "lang": "ARM_Assembly", "code": "\nWorks with: as version Raspberry Pi\n/* ARM assembly Raspberry PI  */\n/*  program loopstep2.s   */\n\n/* Constantes    */\n.equ STDOUT, 1     @ Linux output console\n.equ EXIT,   1     @ Linux syscall\n.equ WRITE,  4     @ Linux syscall\n.equ MAXI,   20\n/*********************************/\n/* Initialized data              */\n/*********************************/\n.data\nszMessResult:  .ascii \"Counter = \"      @ message result\nsMessValeur:   .fill 12, 1, ' '\n                   .asciz \"\\n\"\n/*********************************/\n/* UnInitialized data            */\n/*********************************/\n.bss \n/*********************************/\n/*  code section                 */\n/*********************************/\n.text\n.global main \nmain:                @ entry of program \n    push {fp,lr}      @ saves 2 registers \n    mov r4,#0\n1:    @ begin loop \n    mov r0,r4\n    ldr r1,iAdrsMessValeur     @ display value\n    bl conversion10             @ call function with 2 parameter (r0,r1)\n    ldr r0,iAdrszMessResult\n    bl affichageMess            @ display message\n    add r4,#2                   @ increment counter by 2\n    cmp r4,#MAXI              @\n    ble 1b                @ loop\n\n100:   @ standard end of the program \n    mov r0, #0                  @ return code\n    pop {fp,lr}                 @restaur 2 registers\n    mov r7, #EXIT              @ request to exit program\n    svc #0                       @ perform the system call\n\niAdrsMessValeur:          .int sMessValeur\niAdrszMessResult:         .int szMessResult\n/******************************************************************/\n/*     display text with size calculation                         */ \n/******************************************************************/\n/* r0 contains the address of the message */\naffichageMess:\n    push {r0,r1,r2,r7,lr}      @ save  registres\n    mov r2,#0                  @ counter length \n1:      @ loop length calculation \n    ldrb r1,[r0,r2]           @ read octet start position + index \n    cmp r1,#0                  @ if 0 its over \n    addne r2,r2,#1            @ else add 1 in the length \n    bne 1b                    @ and loop \n                                @ so here r2 contains the length of the message \n    mov r1,r0        \t\t\t@ address message in r1 \n    mov r0,#STDOUT      \t\t@ code to write to the standard output Linux \n    mov r7, #WRITE             @ code call system \"write\" \n    svc #0                      @ call systeme \n    pop {r0,r1,r2,r7,lr}        @ restaur des  2 registres */ \n    bx lr                       @ return  \n/******************************************************************/\n/*     Converting a register to a decimal                                 */ \n/******************************************************************/\n/* r0 contains value and r1 address area   */\nconversion10:\n    push {r1-r4,lr}    @ save registers \n    mov r3,r1\n    mov r2,#10\n\n1:\t   @ start loop\n    bl divisionpar10 @ r0 <- dividende. quotient ->r0 reste -> r1\n    add r1,#48        @ digit\t\n    strb r1,[r3,r2]  @ store digit on area\n    sub r2,#1         @ previous position\n    cmp r0,#0         @ stop if quotient = 0 */\n    bne 1b\t          @ else loop\n    @ and move spaces in first on area\n    mov r1,#' '   @ space\t\n2:\t\n    strb r1,[r3,r2]  @ store space in area\n    subs r2,#1       @ @ previous position\n    bge 2b           @ loop if r2 >= z\u00e9ro \n\n100:\t\n    pop {r1-r4,lr}    @ restaur registres \n    bx lr\t          @return\n/***************************************************/\n/*   division par 10   sign\u00e9                       */\n/* Thanks to http://thinkingeek.com/arm-assembler-raspberry-pi/*  \n/* and   http://www.hackersdelight.org/            */\n/***************************************************/\n/* r0 dividende   */\n/* r0 quotient */\t\n/* r1 remainder  */\ndivisionpar10:\t\n  /* r0 contains the argument to be divided by 10 */\n    push {r2-r4}   /* save registers  */\n    mov r4,r0 \n    mov r3,#0x6667   @ r3 <- magic_number  lower\n    movt r3,#0x6666  @ r3 <- magic_number  upper\n    smull r1, r2, r3, r0   @ r1 <- Lower32Bits(r1*r0). r2 <- Upper32Bits(r1*r0) \n    mov r2, r2, ASR #2     /* r2 <- r2 >> 2 */\n    mov r1, r0, LSR #31    /* r1 <- r0 >> 31 */\n    add r0, r2, r1         /* r0 <- r2 + r1 */\n    add r2,r0,r0, lsl #2   /* r2 <- r0 * 5 */\n    sub r1,r4,r2, lsl #1   /* r1 <- r4 - (r2 * 2)  = r4 - (r0 * 10) */\n    pop {r2-r4}\n    bx lr                  /* leave function */\n/***************************************************/\n/* integer division unsigned                       */\n/***************************************************/\ndivision:\n    /* r0 contains dividend */\n    /* r1 contains divisor */\n    /* r2 returns quotient */\n    /* r3 returns remainder */\n    push {r4, lr}\n    mov r2, #0                @ init quotient\n    mov r3, #0                @ init remainder\n    mov r4, #32               @ init counter bits\n    b 2f\n1:          @ loop \n    movs r0, r0, LSL #1     @ r0 <- r0 << 1 updating cpsr (sets C if 31st bit of r0 was 1)\n    adc r3, r3, r3           @ r3 <- r3 + r3 + C. This is equivalent to r3\u00a0? (r3 << 1) + C \n    cmp r3, r1               @ compute r3 - r1 and update cpsr \n    subhs r3, r3, r1        @ if r3 >= r1 (C=1) then r3\u00a0? r3 - r1 \n    adc r2, r2, r2           @ r2 <- r2 + r2 + C. This is equivalent to r2 <- (r2 << 1) + C \n2:\n    subs r4, r4, #1          @ r4 <- r4 - 1 \n    bpl 1b                  @ if r4 >= 0 (N=0) then loop\n    pop {r4, lr}\n    bx lr\n", "explain": ""}, {"task_name": "Loops/For with a specified step", "task_url": "https://rosettacode.org/wiki/Loops/For_with_a_specified_step", "task_cat": "Iteration", "lang": "Delphi", "code": "\n\nprogram LoopWithStep;\n \n{$APPTYPE CONSOLE}\n \nvar\n  i: Integer;\nbegin\n  i:=2;\n  while i <= 8 do begin\n    WriteLn(i);\n    Inc(i, 2);\n  end;\nend.\n\n\nOutput:\n2\n4\n6\n8\n", "explain": "Delphi's For loop doesn't support a step value.  \nIt would have to be simulated using something like a While loop.\n"}, {"task_name": "Loops/For with a specified step", "task_url": "https://rosettacode.org/wiki/Loops/For_with_a_specified_step", "task_cat": "Iteration", "lang": "Ruby", "code": "\n2.step(8,2) {|n| print \"#{n}, \"}\nputs \"who do we appreciate?\"\n\n(2..8).step(2) {|n| print \"#{n}, \"}\nputs \"who do we appreciate?\"\n\nfor n in (2..8).step(2)\n  print \"#{n}, \"\nend\nputs \"who do we appreciate?\"\n\nfor n in 2.step(by: 2, to: 8)\n  print \"#{n}, \"\nend\nputs \"who do we appreciate?\"\n\nOutput:\n2, 4, 6, 8, who do we appreciate?\n\n", "explain": "or:\nor:\nor:\n"}, {"task_name": "Loops/For with a specified step", "task_url": "https://rosettacode.org/wiki/Loops/For_with_a_specified_step", "task_cat": "Iteration", "lang": "Rust", "code": "\n\nfn main() {\n  for i in (2..=8).step_by(2) {\n    print!(\"{}\", i);\n  }\n  println!(\"who do we appreciate?!\");\n}\n\nfn main() {\n    let mut i = 2;\n    while i <= 8 {\n        print!(\"{}, \", i);\n        i += 2;\n    }\n    println!(\"who do we appreciate?!\");\n}\n", "explain": "For Rust 1.28 and later:\nAn alternative which also works in earlier versions of Rust:\n"}, {"task_name": "Loops/For with a specified step", "task_url": "https://rosettacode.org/wiki/Loops/For_with_a_specified_step", "task_cat": "Iteration", "lang": "Swift", "code": "\n\nfor i in stride(from: 1, to: 10, by: 2) {\n  print(i)\n}\n\nfor var i = 1; i < 10; i += 2 {\n  print(i)\n}\n", "explain": "This prints all odd digits:\nAlternately (removed in Swift 3):\n"}, {"task_name": "Loops/For with a specified step", "task_url": "https://rosettacode.org/wiki/Loops/For_with_a_specified_step", "task_cat": "Iteration", "lang": "R", "code": "\nfor(a in seq(2,8,2)) {\n  cat(a, \", \")\n}\ncat(\"who do we appreciate?\\n\")\n\ncat(paste(c(seq(2, 8, by=2), \"who do we appreciate?\\n\"), collapse=\", \"))\n", "explain": "Here the loop may be done implicitly by first concatenating the string and then printing:\n"}, {"task_name": "Loops/For with a specified step", "task_url": "https://rosettacode.org/wiki/Loops/For_with_a_specified_step", "task_cat": "Iteration", "lang": "COBOL", "code": "\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. Display-Odd-Nums.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01  I PIC 99.\n\n       PROCEDURE DIVISION.\n           PERFORM VARYING I FROM 1 BY 2 UNTIL 10 < I\n               DISPLAY I\n           END-PERFORM\n\n           GOBACK\n           .\n\n", "explain": ""}, {"task_name": "Loops/For with a specified step", "task_url": "https://rosettacode.org/wiki/Loops/For_with_a_specified_step", "task_cat": "Iteration", "lang": "Ada", "code": "\n\nwith Loopers;\nuse Loopers;\n\n\nprocedure For_Main is\nbegin\n        Looper_1;\n        Looper_2;\n        Looper_3;\nend For_Main;\n\n\npackage Loopers is\n        procedure Looper_1;\n        procedure Looper_2;\n        procedure Looper_3;\nend Loopers;\n\nwith Ada.Text_IO, Ada.Integer_Text_IO;\nuse Ada.Text_IO, Ada.Integer_Text_IO;\n\npackage body Loopers is\n        procedure Looper_1 is\n                Values : array(1..5) of Integer := (2,4,6,8,10);\n        begin\n                for I in Values'Range loop\n                        Put(Values(I),0);\n                        if I = Values'Last then\n                                Put_Line(\".\");\n                        else\n                                Put(\",\");\n                        end if;\n                end loop;\n        end Looper_1;\n\n        procedure Looper_2 is\n                E : Integer := 5;\n        begin\n                for I in 1..E loop\n                        Put(I*2,0);\n                        if I = E then\n                                Put_Line(\".\");\n                        else\n                                Put(\",\");\n                        end if;\n                end loop;\n        end Looper_2;\n\n        procedure Looper_3 is\n                Values : array(1..10) of Integer := (1,2,3,4,5,6,7,8,9,10);\n                Indices : array(1..5) of Integer := (2,4,6,8,10);\n        begin\n                for I in Indices'Range loop\n                        Put(Values(Indices(I)),0);\n                        if I = Indices'Last then\n                                Put_Line(\".\");\n                        else\n                                Put(\",\");\n                        end if;\n                end loop;\n        end Looper_3;\n\nend Loopers;\n\n", "explain": "The FOR loop construct in Ada does not give the programmer the ability to directly modify the loop control variable during the execution of the loop.  \nInstead, a valid range must always be provided before entering a loop. \nBecause exact adherence to the task is impossible, we have three versions to approximate a solution. Looper_1 goes through a range of values which are even. \nLooper_2 multiples each value by two. \nLooper_3 most closely adheres to the requirements of this task, and achieves this by using a second range for the indices.\n"}, {"task_name": "Loops/For with a specified step", "task_url": "https://rosettacode.org/wiki/Loops/For_with_a_specified_step", "task_cat": "Iteration", "lang": "Julia", "code": "\nfor i in 2:2:8\n    print(i, \", \")\nend\nprintln(\"whom do we appreciate?\")\n\n", "explain": ""}, {"task_name": "Loops/For with a specified step", "task_url": "https://rosettacode.org/wiki/Loops/For_with_a_specified_step", "task_cat": "Iteration", "lang": "SAS", "code": "\ndata _null_;\ndo i=1 to 10 by 2;\nput i;\nend;\nrun;\n", "explain": ""}, {"task_name": "Loops/For with a specified step", "task_url": "https://rosettacode.org/wiki/Loops/For_with_a_specified_step", "task_cat": "Iteration", "lang": "Kotlin", "code": "\n// version 1.0.6\n\nfun main(args: Array<String>) {\n    for (i in 1 .. 21 step 2) print(\"$i \")\n}\n\n\nOutput:\n1 3 5 7 9 11 13 15 17 19 21\n\n", "explain": ""}, {"task_name": "Loops/For with a specified step", "task_url": "https://rosettacode.org/wiki/Loops/For_with_a_specified_step", "task_cat": "Iteration", "lang": "Perl", "code": "\nfor($i=2; $i <= 8; $i += 2) {\n  print \"$i, \";\n}\nprint \"who do we appreciate?\\n\";\n", "explain": ""}, {"task_name": "Loops/For with a specified step", "task_url": "https://rosettacode.org/wiki/Loops/For_with_a_specified_step", "task_cat": "Iteration", "lang": "Prolog", "code": "\n\nfor(Lo,Hi,Step,Lo) \u00a0:- Step>0, Lo=<Hi.\nfor(Lo,Hi,Step,Val)\u00a0:- Step>0, plus(Lo,Step,V), V=<Hi,\u00a0!, for(V,Hi,Step,Val).\n\nexample\u00a0:- \n  for(0,10,2,Val), write(Val), write(' '), fail.\nexample.\n?- example.\n0 2 4 6 8 10 \ntrue.\n\nfor(Hi,Lo,Step,Hi) \u00a0:- Step<0, Lo=<Hi.\nfor(Hi,Lo,Step,Val)\u00a0:- Step<0, plus(Hi,Step,V), Lo=<V,\u00a0!, for(V,Lo,Step,Val).\n", "explain": "If you need a stepping iterator, write one:\nAdding the following two rules lets you go backwards too:\n"}, {"task_name": "Loops/For with a specified step", "task_url": "https://rosettacode.org/wiki/Loops/For_with_a_specified_step", "task_cat": "Iteration", "lang": "Lua", "code": "\nfor i=2,9,2 do\n  print(i)\nend\n\n\nOutput:\n2\n4\n6\n8\n\n", "explain": ""}, {"task_name": "Loops/For with a specified step", "task_url": "https://rosettacode.org/wiki/Loops/For_with_a_specified_step", "task_cat": "Iteration", "lang": "Scala", "code": "\nfor (i <- 2 to 8 by 2) println(i)\n\n(2 to 8 by 2) foreach println\n", "explain": "Alternatively:\n"}, {"task_name": "Loops/For with a specified step", "task_url": "https://rosettacode.org/wiki/Loops/For_with_a_specified_step", "task_cat": "Iteration", "lang": "Dart", "code": "\nmain() {\n  for (int i = 1; i <= 21; i += 2) print(i);\n}\n\n", "explain": ""}, {"task_name": "Loops/For with a specified step", "task_url": "https://rosettacode.org/wiki/Loops/For_with_a_specified_step", "task_cat": "Iteration", "lang": "D", "code": "\nimport std.stdio, std.range;\n\nvoid main() {\n    // Print odd numbers up to 9.\n    for (int i = 1; i < 10; i += 2)\n        writeln(i);\n\n    // Alternative way.\n    foreach (i; iota(1, 10, 2))\n        writeln(i);\n}\n\n\nOutput:\n1\n3\n5\n7\n9\n1\n3\n5\n7\n9\n", "explain": ""}, {"task_name": "Loops/For with a specified step", "task_url": "https://rosettacode.org/wiki/Loops/For_with_a_specified_step", "task_cat": "Iteration", "lang": "Haskell", "code": "\nimport Control.Monad (forM_)\nmain = do forM_ [2,4..8] (\\x -> putStr (show x ++ \", \"))\n          putStrLn \"who do we appreciate?\"\n\n", "explain": ""}, {"task_name": "Loops/For with a specified step", "task_url": "https://rosettacode.org/wiki/Loops/For_with_a_specified_step", "task_cat": "Iteration", "lang": "VBScript", "code": "\nbuffer = \"\"\nFor i = 2 To 8 Step 2\n    buffer = buffer & i & \" \"\nNext\nWScript.Echo buffer\n\nOutput:\n2 4 6 8\n", "explain": ""}, {"task_name": "Loops/For with a specified step", "task_url": "https://rosettacode.org/wiki/Loops/For_with_a_specified_step", "task_cat": "Iteration", "lang": "Scheme", "code": "\n\n(do ((i 2 (+ i 2))) \u00a0; list of variables, initials and steps -- you can iterate over several at once\n  ((>= i 9))        \u00a0; exit condition\n  (display i)       \u00a0; body\n  (newline))\n\n(let loop ((i 2))           \u00a0; function name, parameters and starting values\n  (cond ((< i 9)\n         (display i)\n         (newline)\n         (loop (+ i 2)))))) \u00a0; tail-recursive call, won't create a new stack frame\n\n(define (for-loop start end step func)\n  (let loop ((i start))\n    (cond ((< i end)\n\t   (func i)\n\t   (loop (+ i step))))))\n\n(for-loop 2 9 2\n  (lambda (i)\n    (display i)\n    (newline)))\n\n(define-syntax for-loop\n  (syntax-rules () \n    ((for-loop index start end step body ...)\n     (let ((evaluated-end end) (evaluated-step step))\n       (let loop ((i start))\n         (if (< i evaluated-end)\n           ((lambda (index) body ... (loop (+ i evaluated-step))) i)))))))\n\n(for-loop i 2 9 2\n  (display i)\n  (newline))\n\nOutput:\n2\n4\n6\n8\n", "explain": "The built-in for-like form in Scheme is the do form:\nSome people prefer to use the recursive-style and more flexible _named let_ form:\nYou can add to the language by wrapping the loop in a function:\n... or in a macro, which allows for making the (lambda) implicit:\n"}, {"task_name": "Loops/For with a specified step", "task_url": "https://rosettacode.org/wiki/Loops/For_with_a_specified_step", "task_cat": "Iteration", "lang": "PowerShell", "code": "\nfor ($i = 0; $i -lt 10; $i += 2) {\n    $i\n}\n", "explain": ""}, {"task_name": "Loops/For with a specified step", "task_url": "https://rosettacode.org/wiki/Loops/For_with_a_specified_step", "task_cat": "Iteration", "lang": "Logo", "code": "\nfor [i 2 8 2] [type :i type \"|, |] print [who do we appreciate?]\n", "explain": ""}, {"task_name": "Loops/For with a specified step", "task_url": "https://rosettacode.org/wiki/Loops/For_with_a_specified_step", "task_cat": "Iteration", "lang": "ColdFusion", "code": "\n<cfloop from=\"0\" to=\"99\" step=\"3\" index=\"i\">\n  <Cfoutput>#i#</Cfoutput>\n</cfloop>\n\n", "explain": ""}, {"task_name": "Loops/For with a specified step", "task_url": "https://rosettacode.org/wiki/Loops/For_with_a_specified_step", "task_cat": "Iteration", "lang": "F#", "code": "\nfor i in 2..2..8 do\n   printf \"%d, \" i\nprintfn \"done\"\n\n\nOutput:\n2, 4, 6, 8, done\n\n", "explain": ""}, {"task_name": "Loops/For with a specified step", "task_url": "https://rosettacode.org/wiki/Loops/For_with_a_specified_step", "task_cat": "Iteration", "lang": "Groovy", "code": "\n\nfor(i in (2..9).step(2)) {\n    print \"${i} \"\n}\nprintln \"Who do we appreciate?\"\n\n\n(2..9).step(2).each {\n    print \"${it} \"\n}\nprintln \"Who do we appreciate?\"\n\n\nOutput:\n2 4 6 8 Who do we appreciate?\n\n", "explain": "\"for\" loop:\n\"each() method:\nThough technically not a loop, most Groovy programmers would use the slightly more terse \"each()\" method on the collection itself, instead of a \"for\" loop.\nGo Team!\n"}, {"task_name": "Loops/For with a specified step", "task_url": "https://rosettacode.org/wiki/Loops/For_with_a_specified_step", "task_cat": "Iteration", "lang": "Zig", "code": "\nconst std = @import(\"std\");\n\npub fn main() !void {\n    const stdout_wr = std.io.getStdOut().writer();\n    var i: u8 = 1;\n    while (i < 10)\u00a0: (i += 2)\n        try stdout_wr.print(\"{d}\\n\", .{i});\n}\n\n\n\n", "explain": ""}, {"task_name": "Loops/For with a specified step", "task_url": "https://rosettacode.org/wiki/Loops/For_with_a_specified_step", "task_cat": "Iteration", "lang": "AWK", "code": "\nBEGIN {\n  for (i= 2; i <= 8; i = i + 2) {\n    print i\n  }\n  print \"Ain't never too late!\"\n}\n\n\n", "explain": "\u2212\t\n"}]