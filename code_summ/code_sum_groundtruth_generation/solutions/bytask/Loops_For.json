[{"task_name": "Loops/For", "task_url": "https://rosettacode.org/wiki/Loops/For", "task_cat": "Iteration", "lang": "Python", "code": "\nimport sys\nfor i in xrange(5):\n    for j in xrange(i+1):\n        sys.stdout.write(\"*\")\n    print\n\nfor i in range(1,6):\n    print '*' * i\n\nprint('\\n'.join('*' * i for i in range(1, 6)))\n", "explain": "Note that we have a constraint to use two for loops, which leads to non-idiomatic Python. If that constraint is dropped we can use the following, more idiomatic Python solution:\nor\n"}, {"task_name": "Loops/For", "task_url": "https://rosettacode.org/wiki/Loops/For", "task_cat": "Iteration", "lang": "C", "code": "\nint i, j;\nfor (i = 1; i <= 5; i++) {\n  for (j = 1; j <= i; j++)\n    putchar('*');\n  puts(\"\");\n}\n\n", "explain": ""}, {"task_name": "Loops/For", "task_url": "https://rosettacode.org/wiki/Loops/For", "task_cat": "Iteration", "lang": "C++", "code": "\nfor(int i = 0; i < 5; ++i) {\n  for(int j = 0; j < i; ++j)\n    std::cout.put('*');\n\n  std::cout.put('\\n');\n}\n\n", "explain": ""}, {"task_name": "Loops/For", "task_url": "https://rosettacode.org/wiki/Loops/For", "task_cat": "Iteration", "lang": "Java", "code": "\nfor (int i = 0; i < 5; i++) {\n   for (int j = 0; j <= i; j++) {\n      System.out.print(\"*\");\n   }\n   System.out.println();\n}\n\n", "explain": ""}, {"task_name": "Loops/For", "task_url": "https://rosettacode.org/wiki/Loops/For", "task_cat": "Iteration", "lang": "C#", "code": "\nusing System;\n\nclass Program {\n    static void Main(string[] args)\n    {\n        for (int i = 0; i < 5; i++)\n        {\n            for (int j = 0; j <= i; j++)\n            {\n                Console.Write(\"*\");\n            }\n            Console.WriteLine();\n        }\n    }\n}\n\n", "explain": ""}, {"task_name": "Loops/For", "task_url": "https://rosettacode.org/wiki/Loops/For", "task_cat": "Iteration", "lang": "JavaScript", "code": "\nvar i, j;\nfor (i = 1; i <= 5; i += 1) {\n  s = '';\n  for (j = 0; j < i; j += 1)\n    s += '*';\n  document.write(s + '<br>');\n}\n\n\nfunction range(i) {\n  return i ? range(i - 1).concat(i) : [];\n}\n\nrange(5) --> [1, 2, 3, 4, 5]\n\n\nvar s = '';\n\nrange(5).forEach(\n  function (line) {\n    range(line).forEach(\n      function () { s += '*'; }\n    );\n    s += '\\n';\n  }\n);\n\nconsole.log(s);\n\n\nconsole.log(\n  range(5).reduce(\n    function (a, n) {\n      return a + Array(n + 1).join('*') + '\\n';\n    }, ''\n  )\n);\n\n\nconsole.log(\n  range(5).map(function(a) {\n    return Array(a + 1).join('*');\n  }).join('\\n')\n);\n\n", "explain": "\nAlternatively, using JavaScript's Array.forEach(), and given an array of indices, \nor a simple range function which generates a range:\nWe could write something like:\nbut it might be more natural in JavaScript, if we are going to use built-in Array functions, to simplify a little with Array.reduce(), writing:\nin which the inner n refers to the Array value visited at the next level out, and the triangle is returned as a single expression, rather than as a series of variable mutations.\nFinally, in contexts where an expression composes better than a statement, the effect of a loop can often be expressed as a map.\n"}, {"task_name": "Loops/For", "task_url": "https://rosettacode.org/wiki/Loops/For", "task_cat": "Iteration", "lang": "PHP", "code": "\nfor ($i = 1; $i <= 5; $i++) {\n  for ($j = 1; $j <= $i; $j++) {\n    echo '*';\n  }\n  echo \"\\n\";\n}\n\nforeach (range(1, 5) as $i) {\n  foreach (range(1, $i) as $j) {\n    echo '*';\n  }\n  echo \"\\n\";\n}\n\nforeach (range(1, 5) as $i)\n  echo str_repeat('*', $i) , PHP_EOL;\n", "explain": "or\nor\n"}, {"task_name": "Loops/For", "task_url": "https://rosettacode.org/wiki/Loops/For", "task_cat": "Iteration", "lang": "Fortran", "code": "\nWorks with: Fortran version 77 and later\nC     WARNING: This program is not valid ANSI FORTRAN 77 code. It uses\nC     one nonstandard character on the line labelled 5001. Many F77\nC     compilers should be okay with it, but it is *not* standard.\n      PROGRAM FORLOOP\n        INTEGER I, J\n\n        DO 20 I = 1, 5\n          DO 10 J = 1, I\nC           Print the asterisk.\n            WRITE (*,5001) '*'\n   10     CONTINUE\nC         Print a newline.\n          WRITE (*,5000) ''\n   20   CONTINUE\n\n        STOP\n\n 5000   FORMAT (A)\nC       Standard FORTRAN 77 is completely incapable of completing a\nC       WRITE statement without printing a newline. If you wanted to\nC       write this program in valid F77, you would have to come up with\nC       a creative way of printing varying numbers of asterisks in a\nC       single write statement.\nC\nC       The dollar sign at the end of the format is a nonstandard\nC       character. It tells the compiler not to print a newline. If you\nC       are actually using FORTRAN 77, you should figure out what your\nC       particular compiler accepts. If you are actually using Fortran\nC       90 or later, you should replace this line with the commented\nC       line that follows it.\n 5001   FORMAT (A, $)\nC5001   FORMAT (A, ADVANCE='NO')\n      END\n\nWorks with: Fortran version 90 and later\nDO i = 1, 5\n  DO j = 1, i\n    WRITE(*, \"(A)\", ADVANCE=\"NO\") \"*\"\n  END DO\n  WRITE(*,*)\nEND DO\n\n\nWorks with: Fortran version 95 and later\ninteger :: i\ninteger, dimension(10) :: v\n\nforall (i=1:size(v)) v(i) = i\n\n\n      DO 1 I = 1,5\n    1 WRITE (6,*) (\"*\", J = 1,I)\n      END\n\n\n      DO 1 I = 1,5\n    1 WRITE (6,2) (666, J = 1,I)\n    2 FORMAT(5I1)\n      END\n\n\n", "explain": "Fortran 95 (and later) has also a loop structure that can be used only when the result is independent from real order of execution of the loop.\nBut if one accepts that a do-loop can be expressed without the actual word \"do\" (or \"for\"), then\nThat is a complete programme, though a more polite source file would have INTEGER I,J. It uses the old-style DO label etc. style of DO-loop to save on having to specify an END DO. The WRITE statement's output list is generated by an \"implied\" DO-loop having much of the form of DO J = 1,I and is indeed a proper loop. The output item is a text literal, which in earlier Fortran was unknown, however the result can still be achieved:\nThis works because if a value cannot be fitted into its output field, the field is filled with asterisks. Which, is what is wanted! Just allow one digit for output (I1), and present a large integer.\n"}, {"task_name": "Loops/For", "task_url": "https://rosettacode.org/wiki/Loops/For", "task_cat": "Iteration", "lang": "Go", "code": "\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    for i := 1; i <= 5; i++ {\n        for j := 1; j <= i; j++ {\n            fmt.Printf(\"*\")\n        }\n        fmt.Printf(\"\\n\")\n    }\n}\n\n\nOutput:\n*\n**\n***\n****\n*****\n\n", "explain": ""}, {"task_name": "Loops/For", "task_url": "https://rosettacode.org/wiki/Loops/For", "task_cat": "Iteration", "lang": "ARM_Assembly", "code": "\nWorks with: as version Raspberry Pi\n/* ARM assembly Raspberry PI  */\n/*  program loop1.s   */\n\n/* Constantes    */\n.equ STDOUT, 1     @ Linux output console\n.equ EXIT,   1     @ Linux syscall\n.equ WRITE,  4     @ Linux syscall\n/* Initialized data */\n.data\nszMessX: .asciz \"X\"\nszCarriageReturn:  .asciz \"\\n\"\n\n/* UnInitialized data */\n.bss \n\n/*  code section */\n.text\n.global main \nmain:                /* entry of program  */\n    push {fp,lr}    /* saves 2 registers */\n\n    mov r2,#0       @ counter loop 1\n1:       @ loop start 1\n    mov r1,#0        @ counter loop 2\n2:       @ loop start 2\n    ldr r0,iAdrszMessX\n    bl affichageMess\n    add r1,#1       @ r1 + 1\n    cmp r1,r2       @ compare r1 r2\n    ble 2b        @ loop label 2 before\n    ldr r0,iAdrszCarriageReturn   \n    bl affichageMess\n    add r2,#1       @ r2 + 1\n    cmp r2,#5       @ for five loop\n    blt 1b         @ loop label 1 before\n\n\n100:   /* standard end of the program */\n    mov r0, #0                  @ return code\n    pop {fp,lr}                 @restaur 2 registers\n    mov r7, #EXIT              @ request to exit program\n    swi 0                       @ perform the system call\n\niAdrszMessX:  .int szMessX\niAdrszCarriageReturn:  .int  szCarriageReturn\n/******************************************************************/\n/*     display text with size calculation                         */ \n/******************************************************************/\n/* r0 contains the address of the message */\naffichageMess:\n    push {fp,lr}    \t\t\t/* save  registres */ \n    push {r0,r1,r2,r7}    \t\t/* save others registers */\n    mov r2,#0   \t\t\t\t/* counter length */\n1:      \t/* loop length calculation */\n    ldrb r1,[r0,r2]  \t\t\t/* read octet start position + index */\n    cmp r1,#0       \t\t\t/* if 0 its over */\n    addne r2,r2,#1   \t\t\t/* else add 1 in the length */\n    bne 1b          \t\t\t/* and loop */\n                                /* so here r2 contains the length of the message */\n    mov r1,r0        \t\t\t/* address message in r1 */\n    mov r0,#STDOUT      \t\t/* code to write to the standard output Linux */\n    mov r7, #WRITE             /* code call system \"write\" */\n    swi #0                      /* call systeme */\n    pop {r0,r1,r2,r7}     \t\t/* restaur others registers */\n    pop {fp,lr}    \t\t\t\t/* restaur des  2 registres */ \n    bx lr\t        \t\t\t/* return  */\n", "explain": ""}, {"task_name": "Loops/For", "task_url": "https://rosettacode.org/wiki/Loops/For", "task_cat": "Iteration", "lang": "MIPS_Assembly", "code": "\n\n.include \"\\SrcAll\\Header.asm\"\n.include \"\\SrcAll\\BasicMacros.asm\"\n.include \"\\SrcPSX\\MemoryMap.asm\"\n.include \"\\SrcN64\\MemoryMap.asm\"\n  \nCursorX equ 0x100 \nCursorY equ 0x101\n  \nmain:\n\tli t3,5+1       ;outer loop counter\n\tli t2,1         ;inner loop counter\n\tmove a2,t2      ;working copy of inner loop counter\nloop:\n\tli a1,'*'\n\tjal PrintChar\n\tnop             ;needed on PlayStation after branches to prevent out-of-order execution.\n\tsubiu a2,1     \n\tbnez a2,loop    \n\tnop\n;overhead\n\tjal NewLine\t;this doesn't use t2 so we don't care about out-of-order execution.\n\taddiu t2,1      ;increment outer loop counter\n\tmove a2,t2      ;next time, we'll print one more * than we did last time.\n\tbne t2,t3,loop  ;are we done yet? If not, loop.\n\tnop\n \nHALT:\n\tj HALT          ;halt the CPU - we're done\n\tnop\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n  \nMyFont:\n.ifdef buildn64\t\t\t\t\n\t.incbin \"\\ResN64\\ChibiAkumas.fnt\"\n.endif\n.ifdef buildPSX\t\t\t\t\n\t.incbin \"\\ResPSX\\ChibiAkumas.fnt\"\n.endif\n\n.include \"\\SrcALL\\graphics.asm\"\n\t\n.include \"..\\\\SrcAll\\monitor.asm\"  \t\n.include \"\\SrcN64\\Footer.asm\"\n\nOutput:\n*\n**\n***\n****\n*****\n\n", "explain": "Thanks to ChibiAliens for the header and footer as well as print routines.\nScreenshot of Nintendo 64 emulator\n"}, {"task_name": "Loops/For", "task_url": "https://rosettacode.org/wiki/Loops/For", "task_cat": "Iteration", "lang": "Delphi", "code": "\nprogram LoopFor;\n\n{$APPTYPE CONSOLE}\n\nvar\n  i, j: Integer;\nbegin\n  for i := 1 to 5 do\n  begin\n    for j := 1 to i do\n      Write('*');\n    Writeln;\n  end;\nend.\n\n", "explain": ""}, {"task_name": "Loops/For", "task_url": "https://rosettacode.org/wiki/Loops/For", "task_cat": "Iteration", "lang": "Ruby", "code": "\n\n\n\nfor\n\nRange#each\n\n\n\nfor i in 1..5\n  for j in 1..i\n    print \"*\"\n  end\n  puts\nend\n\n\n(1..5).each do |i|\n  (1..i).each do |j|\n    print \"*\"\n  end\n  puts\nend\n\n\n\n\nInteger#upto\n\nInteger#times\n\nKernel#loop\n\n\n\n1.upto(5) do |i|\n  1.upto(i) do |j|\n    print \"*\"\n  end\n  puts\nend\n\n\n5.times do |i|\n  # i goes from 0 to 4\n  (i+1).times do\n    print \"*\"\n  end\n  puts\nend\n\n\ni = 1\nloop do\n  j = 1\n  loop do\n    print \"*\"\n    break if (j += 1) > i\n  end\n  puts\n  break if (i += 1) > 5\nend\n\n\nputs (1..5).map { |i| \"*\" * i }\n", "explain": "One can write a for loop as for i in 1..5; ...end or as for i in 1..5 do ... end or as (1..5).each do |i| ... end. All three forms call Range#each to iterate 1..5.\nRuby has other ways to code these loops; Integer#upto is most convenient.\nOr we can use String#* as the inner loop, and Enumerable#map as the outer loop. This shrinks the program to one line.\n"}, {"task_name": "Loops/For", "task_url": "https://rosettacode.org/wiki/Loops/For", "task_cat": "Iteration", "lang": "Rust", "code": "\n\nfn main() {\n    for i in 0..5 {\n        for _ in 0..=i {\n            print!(\"*\");\n        }\n\n        println!();\n    }\n}\n", "explain": "The compiler warns when you create an unused variable; here we use _ to avoid this effect.\n"}, {"task_name": "Loops/For", "task_url": "https://rosettacode.org/wiki/Loops/For", "task_cat": "Iteration", "lang": "Swift", "code": "\nfor i in 1...5 {\n    for _ in 1...i {\n        print(\"*\", terminator: \"\")\n    }\n    print()\n}\n\nOutput:\n*\n**\n***\n****\n*****\n\n", "explain": ""}, {"task_name": "Loops/For", "task_url": "https://rosettacode.org/wiki/Loops/For", "task_cat": "Iteration", "lang": "R", "code": "\nfor(i in 0:4) {\n  s <- \"\"\n  for(j in 0:i) {\n    s <- paste(s, \"*\", sep=\"\")\n  }\n  print(s)\n}\n", "explain": ""}, {"task_name": "Loops/For", "task_url": "https://rosettacode.org/wiki/Loops/For", "task_cat": "Iteration", "lang": "COBOL", "code": "\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. Display-Triangle.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01  Outer-Counter PIC 9.\n       01  Inner-Counter PIC 9. \n\n       PROCEDURE DIVISION.\n       PERFORM VARYING Outer-Counter FROM 1 BY 1 UNTIL 5 < Outer-Counter\n\n           PERFORM VARYING Inner-Counter FROM 1 BY 1\n                   UNTIL Outer-Counter < Inner-Counter\n               DISPLAY \"*\" NO ADVANCING\n           END-PERFORM\n\n           DISPLAY \"\" *> Output a newline\n       END-PERFORM\n\n       GOBACK\n       .\n\n", "explain": ""}, {"task_name": "Loops/For", "task_url": "https://rosettacode.org/wiki/Loops/For", "task_cat": "Iteration", "lang": "Ada", "code": "\nfor I in 1..5 loop\n   for J in 1..I loop\n      Put(\"*\");\n   end loop;\n   New_Line;\nend loop;\n\n", "explain": ""}, {"task_name": "Loops/For", "task_url": "https://rosettacode.org/wiki/Loops/For", "task_cat": "Iteration", "lang": "Julia", "code": "\nfor i in 1:5\n    for j in 1:i\n        print(\"*\")\n    end\n    println()\nend\n\n\nOutput:\n*\n**\n***\n****\n*****\n", "explain": ""}, {"task_name": "Loops/For", "task_url": "https://rosettacode.org/wiki/Loops/For", "task_cat": "Iteration", "lang": "SAS", "code": "\ndata _null_;\nlength a $5;\ndo n=1 to 5;\n  a=\"*\";\n  do i=2 to n;\n    a=trim(a)\u00a0!! \"*\";\n  end;\n  put a;\nend;\nrun;\n\n/* Possible without the inner loop. Notice TRIM is replaced with STRIP,\notherwise there is a blank space on the left */\n\ndata _null_;\nlength a $5;\ndo n=1 to 5;\n  a=strip(a)\u00a0!! \"*\";\n  put a;\nend;\nrun;\n", "explain": ""}, {"task_name": "Loops/For", "task_url": "https://rosettacode.org/wiki/Loops/For", "task_cat": "Iteration", "lang": "Kotlin", "code": "\nfun main(args: Array<String>) {\n    (1..5).forEach {\n        (1..it).forEach { print('*') }\n        println()\n    }\n}\n\n", "explain": ""}, {"task_name": "Loops/For", "task_url": "https://rosettacode.org/wiki/Loops/For", "task_cat": "Iteration", "lang": "Perl", "code": "\nfor(my $x = 1; $x <= 5; $x++) {\n  for(my $y = 1; $y <= $x; $y++) {\n    print \"*\";\n  } \n  print \"\\n\";\n}\nforeach (1..5) {\n  foreach (1..$_) {\n    print '*';\n  }\n  print \"\\n\";\n}\n\nprint ('*' x $_ . \"\\n\") for 1..5;\n\nmap {print '*' x $_ . \"\\n\"} 1..5;\n", "explain": "However, if we lift the constraint of two loops the code will be simpler:\nor equivalently\n"}, {"task_name": "Loops/For", "task_url": "https://rosettacode.org/wiki/Loops/For", "task_cat": "Iteration", "lang": "Prolog", "code": "\n\nexample\u00a0:- \n    between(1,5,I), nl, between(1,I,_J),\n    write('*'), fail.\nexample.\n?- example.\n\n*\n**\n***\n****\n*****\ntrue.\n", "explain": "Prolog has a built in iterator, between(Lo,Hi,I) which binds the value of I to successive values from Lo to Hi.  This is the closest thing Prolog has to a 'for' loop.\n"}, {"task_name": "Loops/For", "task_url": "https://rosettacode.org/wiki/Loops/For", "task_cat": "Iteration", "lang": "Lua", "code": "\nfor i=1,5 do\n  for j=1,i do\n    io.write(\"*\")\n  end\n  io.write(\"\\n\")\nend\n\n\nfor i = 1, 5 do\n  print(string.rep(\"*\", i))\nend\n\nfor i = 1, 5 do\n  print((\"*\"):rep(i))\nend\n", "explain": "single loop\nor\n"}, {"task_name": "Loops/For", "task_url": "https://rosettacode.org/wiki/Loops/For", "task_cat": "Iteration", "lang": "Scala", "code": "\nfor (i <- 1 to 5) {\n    for (j <- 1 to i)\n        print(\"*\")\n    println()\n}\n", "explain": ""}, {"task_name": "Loops/For", "task_url": "https://rosettacode.org/wiki/Loops/For", "task_cat": "Iteration", "lang": "Dart", "code": "\nmain() {\n    for (var i = 0; i < 5; i++)\n        for (var j = 0; j < i + 1; j++)\n            print(\"*\");\n        print(\"\\n\");\n}\n\n", "explain": ""}, {"task_name": "Loops/For", "task_url": "https://rosettacode.org/wiki/Loops/For", "task_cat": "Iteration", "lang": "D", "code": "\nimport std.stdio: write, writeln;\n\nvoid main() {\n    for (int i; i < 5; i++) {\n        for (int j; j <= i; j++)\n            write(\"*\");\n        writeln();\n    }\n    writeln();\n\n    foreach (i; 0 .. 5) {\n        foreach (j; 0 .. i + 1)\n            write(\"*\");\n        writeln();\n    }\n}\n\n\nOutput:\n*\n**\n***\n****\n*****\n\n*\n**\n***\n****\n*****\n", "explain": ""}, {"task_name": "Loops/For", "task_url": "https://rosettacode.org/wiki/Loops/For", "task_cat": "Iteration", "lang": "Haskell", "code": "\nimport Control.Monad\n\nmain = do\n  forM_ [1..5] $ \\i -> do\n    forM_ [1..i] $ \\j -> do\n      putChar '*'\n    putChar '\\n'\n\n\nimport Data.List (inits)\n\nmain = mapM_ putStrLn $ tail $ inits $ replicate 5 '*'\n\n\nputStrLn $ unlines [replicate n '*' | n <- [1..5]]\n\n\nputStrLn . unlines . take 5 $ iterate ('*':) \"*\"\n\n", "explain": "But it's more Haskellish to do this without loops:\nOr, with a list comprehension:\nTaking from an infinite stream of increasing length lines:\n"}, {"task_name": "Loops/For", "task_url": "https://rosettacode.org/wiki/Loops/For", "task_cat": "Iteration", "lang": "VBScript", "code": "\nOption Explicit\nDim i, j, s\nFor i = 1 To 5\n    s = \"\"\n    For j = 1 To i\n        s = s + \"*\"\n    Next\n    WScript.Echo s\nNext\n", "explain": ""}, {"task_name": "Loops/For", "task_url": "https://rosettacode.org/wiki/Loops/For", "task_cat": "Iteration", "lang": "Scheme", "code": "\n(do ((i 1 (+ i 1)))\n    ((> i 5))\n    (do ((j 1 (+ j 1)))\n        ((> j i))\n        (display \"*\"))\n    (newline))\n", "explain": ""}, {"task_name": "Loops/For", "task_url": "https://rosettacode.org/wiki/Loops/For", "task_cat": "Iteration", "lang": "Apex", "code": "\nfor (Integer i = 0; i < 5; i++) {\n    String line = '';\n\n    for (Integer j = 0; j < i; j++) {\n        line += '*';\n    }\n\n    System.debug(line);\n}\n\nList<String> lines = new List<String> {\n    '*',\n    '**',\n    '***',\n    '****',\n    '*****'\n};\n\nfor (String line : lines) {\n    System.debug(line);\n}\n\n", "explain": ""}, {"task_name": "Loops/For", "task_url": "https://rosettacode.org/wiki/Loops/For", "task_cat": "Iteration", "lang": "TypeScript", "code": "\nfor (let i: number = 0; i < 5; ++i) {\n    let line: string = \"\"\n    for(let j: number = 0; j <= i; ++j) {\n        line += \"*\"\n    }\n    console.log(line)\n}\n", "explain": ""}, {"task_name": "Loops/For", "task_url": "https://rosettacode.org/wiki/Loops/For", "task_cat": "Iteration", "lang": "PowerShell", "code": "\nfor ($i = 1; $i -le 5; $i++) {\n    for ($j = 1; $j -le $i; $j++) {\n        Write-Host -NoNewline *\n    }\n    Write-Host\n}\n\n1..5 | ForEach-Object {\n    1..$_ | ForEach-Object {\n        Write-Host -NoNewline *\n    }\n    Write-Host\n}\n\n", "explain": "Alternatively the same can be achieved with a slightly different way by using the range operator along with the ForEach-Object cmdlet:\nwhile the inner loop wouldn't strictly be necessary and can be replaced with simply \"*\" * $_.\n"}, {"task_name": "Loops/For", "task_url": "https://rosettacode.org/wiki/Loops/For", "task_cat": "Iteration", "lang": "Logo", "code": "\nfor [i 1 5] [repeat :i [type \"*] (print)]\nrepeat 5 [repeat repcount [type \"*] (print)]\n", "explain": ""}, {"task_name": "Loops/For", "task_url": "https://rosettacode.org/wiki/Loops/For", "task_cat": "Iteration", "lang": "ColdFusion", "code": "\n\n<cfloop index = \"i\" from = \"1\" to = \"5\">\n  <cfloop index = \"j\" from = \"1\" to = \"#i#\">\n    *\n  </cfloop>\n  < br />\n</cfloop>\n\n\n<cfscript>\n  for( i = 1; i <= 5; i++ )\n  {\n    for( j = 1; j <= i; j++ )\n    {\n      writeOutput( \"*\" );\n    }\n    writeOutput( \"< br />\" );\n  }\n</cfscript>\n\n", "explain": "Remove the leading space from the line break tag. \nWith tags:\nWith script:\n"}, {"task_name": "Loops/For", "task_url": "https://rosettacode.org/wiki/Loops/For", "task_cat": "Iteration", "lang": "F#", "code": "\n#light\n[<EntryPoint>]\nlet main args =\n    for i = 1 to 5 do\n        for j = 1 to i do\n            printf \"*\"\n        printfn \"\"\n    0\n\n", "explain": ""}, {"task_name": "Loops/For", "task_url": "https://rosettacode.org/wiki/Loops/For", "task_cat": "Iteration", "lang": "Groovy", "code": "\n\nfor(i in (1..6)) {\n    for(j in (1..i)) {\n        print '*'\n    }\n    println ()\n}\n\n", "explain": "Solution:\n"}, {"task_name": "Loops/For", "task_url": "https://rosettacode.org/wiki/Loops/For", "task_cat": "Iteration", "lang": "Zig", "code": "\nconst std = @import(\"std\");\n\npub fn main() !void {\n    const stdout_wr = std.io.getStdOut().writer();\n    var i: u8 = 1;\n    while (i < 5)\u00a0: (i += 1) {\n        var j: u8 = 1;\n        while (j <= i)\u00a0: (j += 1)\n            try stdout_wr.writeAll(\"*\");\n        try stdout_wr.writeAll(\"\\n\");\n    }\n}\n\n\n\n", "explain": ""}, {"task_name": "Loops/For", "task_url": "https://rosettacode.org/wiki/Loops/For", "task_cat": "Iteration", "lang": "AWK", "code": "\nBEGIN {\n  for(i=1; i < 6; i++) {\n    for(j=1; j <= i; j++ ) {\n      printf \"*\"\n    }\n    print\n  }\n}\n\n", "explain": ""}]