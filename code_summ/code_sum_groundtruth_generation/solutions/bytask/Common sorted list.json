[{"task_name": "Common sorted list", "task_url": "https://rosettacode.org/wiki/Common_sorted_list", "task_cat": "Sorting", "lang": "Python", "code": "\n'''Common sorted list'''\n\nfrom itertools import chain\n\n\n# ------------------------- TEST -------------------------\n# main\u00a0:: IO ()\ndef main():\n    '''Sorted union of lists'''\n\n    print(\n        sorted(nub(concat([\n            [5, 1, 3, 8, 9, 4, 8, 7],\n            [3, 5, 9, 8, 4],\n            [1, 3, 7, 9]\n        ])))\n    )\n\n\n# ----------------------- GENERIC ------------------------\n\n# concat\u00a0:: [[a]] -> [a]\n# concat\u00a0:: [String] -> String\ndef concat(xs):\n    '''The concatenation of all the elements in a list.\n    '''\n    return list(chain(*xs))\n\n\n# nub\u00a0:: [a] -> [a]\ndef nub(xs):\n    '''A list containing the same elements as xs,\n       without duplicates, in the order of their\n       first occurrence.\n    '''\n    return list(dict.fromkeys(xs))\n\n\n# MAIN ---\nif __name__ == '__main__':\n    main()\n\n\nOutput:\n[1, 3, 4, 5, 7, 8, 9]\n", "explain": ""}, {"task_name": "Common sorted list", "task_url": "https://rosettacode.org/wiki/Common_sorted_list", "task_cat": "Sorting", "lang": "C", "code": "\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define COUNTOF(a) (sizeof(a)/sizeof(a[0]))\n\nvoid fatal(const char* message) {\n    fprintf(stderr, \"%s\\n\", message);\n    exit(1);\n}\n\nvoid* xmalloc(size_t n) {\n    void* ptr = malloc(n);\n    if (ptr == NULL)\n        fatal(\"Out of memory\");\n    return ptr;\n}\n\nint icompare(const void* p1, const void* p2) {\n    const int* ip1 = p1;\n    const int* ip2 = p2;\n    return (*ip1 < *ip2) ? -1 : ((*ip1 > *ip2) ? 1 : 0);\n}\n\nsize_t unique(int* array, size_t len) {\n    size_t out_index = 0;\n    int prev;\n    for (size_t i = 0; i < len; ++i) {\n        if (i == 0 || prev != array[i])\n            array[out_index++] = array[i];\n        prev = array[i];\n    }\n    return out_index;\n}\n\nint* common_sorted_list(const int** arrays, const size_t* lengths, size_t count, size_t* size) {\n    size_t len = 0;\n    for (size_t i = 0; i < count; ++i)\n        len += lengths[i];\n    int* array = xmalloc(len * sizeof(int));\n    for (size_t i = 0, offset = 0; i < count; ++i) {\n        memcpy(array + offset, arrays[i], lengths[i] * sizeof(int));\n        offset += lengths[i];\n    }\n    qsort(array, len, sizeof(int), icompare);\n    *size = unique(array, len);\n    return array;\n}\n\nvoid print(const int* array, size_t len) {\n    printf(\"[\");\n    for (size_t i = 0; i < len; ++i) {\n        if (i > 0)\n            printf(\", \");\n        printf(\"%d\", array[i]);\n    }\n    printf(\"]\\n\");\n}\n\nint main() {\n    const int a[] = {5, 1, 3, 8, 9, 4, 8, 7};\n    const int b[] = {3, 5, 9, 8, 4};\n    const int c[] = {1, 3, 7, 9};\n    size_t len = 0;\n    const int* arrays[] = {a, b, c};\n    size_t lengths[] = {COUNTOF(a), COUNTOF(b), COUNTOF(c)};\n    int* sorted = common_sorted_list(arrays, lengths, COUNTOF(arrays), &len);\n    print(sorted, len);\n    free(sorted);\n    return 0;\n}\n\n\nOutput:\n[1, 3, 4, 5, 7, 8, 9]\n\n", "explain": ""}, {"task_name": "Common sorted list", "task_url": "https://rosettacode.org/wiki/Common_sorted_list", "task_cat": "Sorting", "lang": "C++", "code": "\n#include <iostream>\n#include <vector>\n#include <set>\n#include <algorithm>\n\ntemplate<typename T>\nstd::vector<T> common_sorted_list(const std::vector<std::vector<T>>& ll) {\n    std::set<T> resultset;\n    std::vector<T> result;\n    for (auto& list : ll)\n        for (auto& item : list)\n            resultset.insert(item);\n    for (auto& item : resultset)\n        result.push_back(item);\n    \n    std::sort(result.begin(), result.end());\n    return result;\n}\n\nint main() {\n    std::vector<int> a = {5,1,3,8,9,4,8,7};\n    std::vector<int> b = {3,5,9,8,4};\n    std::vector<int> c = {1,3,7,9};\n    std::vector<std::vector<int>> nums = {a, b, c};\n    \n    auto csl = common_sorted_list(nums);\n    for (auto n : csl) std::cout << n << \" \";\n    std::cout << std::endl;\n    \n    return 0;\n}\n\n\nOutput:\n1 3 4 5 7 8 9\n", "explain": ""}, {"task_name": "Common sorted list", "task_url": "https://rosettacode.org/wiki/Common_sorted_list", "task_cat": "Sorting", "lang": "JavaScript", "code": "\n(() => {\n    \"use strict\";\n\n    // --------------- COMMON SORTED LIST ----------------\n\n    // commonSorted\u00a0:: Ord a => [[a]] -> [a]\n    const commonSorted = xs =>\n        sort(nub(concat(xs)));\n\n\n    // ---------------------- TEST -----------------------\n    const main = () =>\n        commonSorted([\n            [5, 1, 3, 8, 9, 4, 8, 7],\n            [3, 5, 9, 8, 4],\n            [1, 3, 7, 9]\n        ]);\n\n\n    // --------------------- GENERIC ---------------------\n\n    // concat\u00a0:: [[a]] -> [a]\n    const concat = xs =>\n        xs.flat(1);\n\n\n    // nub\u00a0:: Eq a => [a] -> [a]\n    const nub = xs => [...new Set(xs)];\n\n\n    // sort\u00a0:: Ord a => [a] -> [a]\n    const sort = xs =>\n        // An (ascending) sorted copy of xs.\n        xs.slice().sort();\n\n    return main();\n})();\n\n\nOutput:\n[1, 3, 4, 5, 7, 8, 9]\n", "explain": ""}, {"task_name": "Common sorted list", "task_url": "https://rosettacode.org/wiki/Common_sorted_list", "task_cat": "Sorting", "lang": "Go", "code": "\nTranslation of: Wren\npackage main\n\nimport (\n    \"fmt\"\n    \"sort\"\n)\n\nfunc distinctSortedUnion(ll [][]int) []int {\n    var res []int\n    for _, l := range ll {\n        res = append(res, l...)\n    }\n    set := make(map[int]bool)\n    for _, e := range res {\n        set[e] = true\n    }\n    res = res[:0]\n    for key := range set {\n        res = append(res, key)\n    }\n    sort.Ints(res)\n    return res\n}\n\nfunc main() {\n    ll := [][]int{{5, 1, 3, 8, 9, 4, 8, 7}, {3, 5, 9, 8, 4}, {1, 3, 7, 9}}\n    fmt.Println(\"Distinct sorted union of\", ll, \"is:\")\n    fmt.Println(distinctSortedUnion(ll))\n}\n\n\nOutput:\nDistinct sorted union of [[5 1 3 8 9 4 8 7] [3 5 9 8 4] [1 3 7 9]] is:\n[1 3 4 5 7 8 9]\n\n", "explain": ""}, {"task_name": "Common sorted list", "task_url": "https://rosettacode.org/wiki/Common_sorted_list", "task_cat": "Sorting", "lang": "Ruby", "code": "\nnums = [5,1,3,8,9,4,8,7], [3,5,9,8,4], [1,3,7,9]\np nums.inject(:+).sort.uniq\n\n\nOutput:\n[1, 3, 4, 5, 7, 8, 9]\n\n", "explain": ""}, {"task_name": "Common sorted list", "task_url": "https://rosettacode.org/wiki/Common_sorted_list", "task_cat": "Sorting", "lang": "Ada", "code": "\nwith Ada.Text_Io;\nwith Ada.Containers.Vectors;\n\nprocedure Sorted is\n\n   package Integer_Vectors is\n     new Ada.Containers.Vectors (Index_Type   => Positive,\n                                 Element_Type => Integer);\n   use Integer_Vectors;\n\n   package Vector_Sorting is\n     new Integer_Vectors.Generic_Sorting;\n   use Vector_Sorting;\n\n   procedure Unique (Vec : in out Vector) is\n      Res : Vector;\n   begin\n      for E of Vec loop\n         if Res.Is_Empty or else Res.Last_Element /= E then\n            Res.Append (E);\n         end if;\n      end loop;\n      Vec := Res;\n   end Unique;\n\n   procedure Put (Vec : Vector) is\n      use Ada.Text_Io;\n   begin\n      Put (\"[\");\n      for E of Vec loop\n         Put (E'Image);  Put (\" \");\n      end loop;\n      Put (\"]\");\n      New_Line;\n   end Put;\n\n   A : constant Vector := 5 & 1 & 3 & 8 & 9 & 4 & 8 & 7;\n   B : constant Vector := 3 & 5 & 9 & 8 & 4;\n   C : constant Vector := 1 & 3 & 7 & 9;\n   R : Vector          := A & B & C;\nbegin\n   Sort (R);\n   Unique (R);\n   Put (R);\nend Sorted;\n\n\nOutput:\n[ 1  3  4  5  7  8  9 ]\n", "explain": ""}, {"task_name": "Common sorted list", "task_url": "https://rosettacode.org/wiki/Common_sorted_list", "task_cat": "Sorting", "lang": "Julia", "code": "\njulia> sort(union([5,1,3,8,9,4,8,7], [3,5,9,8,4], [1,3,7,9]))\n7-element Array{Int64,1}:\n 1\n 3\n 4\n 5\n 7\n 8\n 9\n\njulia> sort(union([2, 3, 4], split(\"3.14 is not an integer\", r\"\\s+\")), lt=(x, y) -> \"$x\" < \"$y\")\n8-element Array{Any,1}:\n 2\n 3\n  \"3.14\"\n 4\n  \"an\"\n  \"integer\"\n  \"is\"\n  \"not\"\n\n", "explain": ""}, {"task_name": "Common sorted list", "task_url": "https://rosettacode.org/wiki/Common_sorted_list", "task_cat": "Sorting", "lang": "Perl", "code": "\n@c{@$_}++ for [5,1,3,8,9,4,8,7], [3,5,9,8,4], [1,3,7,9];\nprint join ' ', sort keys %c;\n@c{@$_}++ for [qw<not all is integer\u00a0? is not\u00a0! 4.2>];\nprint join ' ', sort keys %c;\n\n\nOutput:\n1 3 4 5 7 8 9\n! 1 3 4 4.2 5 7 8 9\u00a0? all integer is not\n", "explain": ""}, {"task_name": "Common sorted list", "task_url": "https://rosettacode.org/wiki/Common_sorted_list", "task_cat": "Sorting", "lang": "Haskell", "code": "\nimport Data.List (nub, sort)\n\n-------------------- COMMON SORTED LIST ------------------\n\ncommonSorted :: Ord a => [[a]] -> [a]\ncommonSorted = sort . nub . concat\n\n--------------------------- TEST -------------------------\nmain :: IO ()\nmain =\n  print $\n    commonSorted\n      [ [5, 1, 3, 8, 9, 4, 8, 7],\n        [3, 5, 9, 8, 4],\n        [1, 3, 7, 9]\n      ]\n\n\nOutput:\n[1,3,4,5,7,8,9]\n", "explain": ""}, {"task_name": "Common sorted list", "task_url": "https://rosettacode.org/wiki/Common_sorted_list", "task_cat": "Sorting", "lang": "F#", "code": "\n// Common sorted list. Nigel Galloway: February 25th., 2021\nlet nums=[|[5;1;3;8;9;4;8;7];[3;5;9;8;4];[1;3;7;9]|]\nprintfn \"%A\" (nums|>Array.reduce(fun n g->n@g)|>List.distinct|>List.sort)\n\n\nOutput:\n[1; 3; 4; 5; 7; 8; 9]\n\n", "explain": ""}, {"task_name": "Common sorted list", "task_url": "https://rosettacode.org/wiki/Common_sorted_list", "task_cat": "Sorting", "lang": "AWK", "code": "\n# syntax: GAWK -f COMMON_SORTED_LIST.AWK\nBEGIN {\n    PROCINFO[\"sorted_in\"] = \"@ind_num_asc\"\n    nums = \"[5,1,3,8,9,4,8,7],[3,5,9,8,4],[1,3,7,9]\"\n    printf(\"%s\u00a0: \",nums)\n    n = split(nums,arr1,\"],?\") - 1\n    for (i=1; i<=n; i++) {\n      gsub(/[\\[\\]]/,\"\",arr1[i])\n      split(arr1[i],arr2,\",\")\n      for (j in arr2) {\n        arr3[arr2[j]]++\n      }\n    }\n    for (j in arr3) {\n      printf(\"%s \",j)\n    }\n    printf(\"\\n\")\n    exit(0)\n}\n\n\nOutput:\n[5,1,3,8,9,4,8,7],[3,5,9,8,4],[1,3,7,9]\u00a0: 1 3 4 5 7 8 9\n\n", "explain": ""}]