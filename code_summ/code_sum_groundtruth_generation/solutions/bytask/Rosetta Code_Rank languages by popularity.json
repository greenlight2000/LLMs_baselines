[{"task_name": "Rosetta Code/Rank languages by popularity", "task_url": "https://rosettacode.org/wiki/Rosetta_Code/Rank_languages_by_popularity", "task_cat": "Sorting", "lang": "Python", "code": "\nPython: Using web scraping[edit]\n\nimport requests\nimport re\n\nresponse = requests.get(\"http://rosettacode.org/wiki/Category:Programming_Languages\").text\nlanguages = re.findall('title=\"Category:(.*?)\">',response)[:-3] # strip last 3\n\nresponse = requests.get(\"http://rosettacode.org/mw/index.php?title=Special:Categories&limit=5000\").text\nresponse = re.sub('(\\d+),(\\d+)',r'\\1'+r'\\2',response)           # strip ',' from popular languages above 999 members\nmembers  = re.findall('<li><a[^>]+>([^<]+)</a>[^(]*[(](\\\\d+) member[s]*[)]</li>',response) # find language and members\n\nfor cnt, (language, members) in enumerate(sorted(members, key=lambda x: -int(x[1]))[:15]): # show only top 15 languages\n    if language in languages:\n        print(\"{:4d} {:4d} - {}\".format(cnt+1, int(members), language))\n\n\nOutput (as of Dec 21, 2020):\n  1 1306 - Go\n  2 1275 - Phix\n  3 1265 - Julia\n  4 1257 - Raku\n  5 1196 - Python\n  6 1182 - Perl\n  7 1107 - Kotlin\n  8 1080 - C\n  9 1074 - Java\n 10 1061 - Racket\n 11 1022 - REXX\n 12 1012 - Zkl\n 13 1002 - J\n 14  983 - Ruby\n 15  972 - Haskell\n\nPython: Using MediaWiki API method[edit]\nimport requests\nimport operator\nimport re\n\napi_url    = 'http://rosettacode.org/mw/api.php'\nlanguages  = {}\n\nparameters = {\n    'format':       'json',\n    'action':       'query',\n    'generator':    'categorymembers',\n    'gcmtitle':     'Category:Programming Languages',\n    'gcmlimit':     '200',\n    'gcmcontinue':  '',\n    'continue':     '',\n    'prop':         'categoryinfo'\n}\n\nwhile(True):\n    response = requests.get(api_url, params=parameters).json()\n    for k,v in response['query']['pages'].items():\n        if 'title' in v and 'categoryinfo' in v:\n          languages[v['title']]=v['categoryinfo']['size']\n    if 'continue' in response:\n        gcmcontinue = response['continue']['gcmcontinue']\n#        print(gcmcontinue)\n        parameters.update({'gcmcontinue': gcmcontinue})\n    else:\n        break\n\n# report top 15 languages                        \nfor i, (language, size) in enumerate(sorted(languages.items(), key=operator.itemgetter(1), reverse=True)[:15]):\n    print(\"{:4d} {:4d} - {}\".format(i+1, size, re.sub('Category:','',language))) # strip Category: from language\n\n\nOutput (as of Dec 21, 2020):\n  1 1306 - Go\n  2 1275 - Phix\n  3 1265 - Julia\n  4 1257 - Raku\n  5 1196 - Python\n  6 1182 - Perl\n  7 1107 - Kotlin\n  8 1080 - C\n  9 1074 - Java\n 10 1061 - Racket\n 11 1022 - REXX\n 12 1012 - Zkl\n 13 1002 - J\n 14  983 - Ruby\n 15  972 - Haskell\n\n", "explain": "Using requests library.\n"}, {"task_name": "Rosetta Code/Rank languages by popularity", "task_url": "https://rosettacode.org/wiki/Rosetta_Code/Rank_languages_by_popularity", "task_cat": "Sorting", "lang": "C", "code": "\n\n\nThis example is incorrect.  Please fix the code and remove this message.Details: Compiles without error but \"Segmentation fault\" when run. Tested on Cygwin, SuSE Linux and Arch Linux (Manjaro)\n\n\n\n\nThis example is in need of improvement:\nThis solution uses an external program wget for networking, but it could use Library: libcurl (see Web scraping#C) for example. Also this solution scrapes Special:Categories &limit 5000 which will break if the HTML style changes or the number of languages exceeds 5000. It could use the MediWiki API to get the language names and pages in a single call, in blocks of 500 until complete with no upper limit. See the Awk example. If you make an API-based version please retain the web-scrapping version in its own sub-section (following the lead of TCL on this page). \n\nGhetto parser#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nconst char * lang_url = \"http://www.rosettacode.org/w/api.php?action=query&\"\n\t\t\"list=categorymembers&cmtitle=Category:Programming_Languages&\"\n\t\t\"cmlimit=500&format=json\";\nconst char * cat_url = \"http://www.rosettacode.org/w/index.php?title=Special:Categories&limit=5000\";\n\n#define BLOCK 1024\nchar *get_page(const char *url)\n{\n\tchar cmd[1024];\n\tchar *ptr, *buf;\n\tint bytes_read = 1, len = 0;\n\tsprintf(cmd, \"wget -q \\\"%s\\\" -O -\", url);\n\tFILE *fp = popen(cmd, \"r\");\n\tif (!fp) return 0;\n\tfor (ptr = buf = 0; bytes_read > 0; ) {\n\t\tbuf = realloc(buf, 1 + (len += BLOCK));\n\t\tif (!ptr) ptr = buf;\n\t\tbytes_read = fread(ptr, 1, BLOCK, fp);\n\t\tif (bytes_read <= 0) break;\n\t\tptr += bytes_read;\n\t}\n\t*++ptr = '\\0';\n\treturn buf;\n}\n\nchar ** get_langs(char *buf, int *l)\n{\n\tchar **arr = 0;\n\tfor (*l = 0; (buf = strstr(buf, \"Category:\")) && (buf += 9); ++*l)\n\t\tfor (\t(*l)[arr = realloc(arr, sizeof(char*)*(1 + *l))] = buf;\n\t\t\t*buf != '\"' || (*buf++ = 0);\n\t\t\tbuf++);\n\n\treturn arr;\n}\n\ntypedef struct { const char *name; int count; } cnt_t;\ncnt_t * get_cats(char *buf, char ** langs, int len, int *ret_len)\n{\n\tchar str[1024], *found;\n\tcnt_t *list = 0;\n\tint i, llen = 0;\n\tfor (i = 0; i < len; i++) {\n\t\tsprintf(str, \"/wiki/Category:%s\", langs[i]);\n\t\tif (!(found = strstr(buf, str))) continue;\n\t\tbuf = found + strlen(str);\n\n\t\tif (!(found = strstr(buf, \"</a> (\"))) continue;\n\t\tlist = realloc(list, sizeof(cnt_t) * ++llen);\n\t\tlist[llen - 1].name = langs[i];\n\t\tlist[llen - 1].count = strtol(found + 6, 0, 10);\n\t}\n\t*ret_len = llen;\n\treturn list;\n}\n\nint _scmp(const void *a, const void *b)\n{\n\tint x = ((const cnt_t*)a)->count, y = ((const cnt_t*)b)->count;\n\treturn x < y ? -1 : x > y;\n}\n\nint main()\n{\n\tint len, clen;\n\tchar ** langs = get_langs(get_page(lang_url), &len);\n\tcnt_t *cats = get_cats(get_page(cat_url), langs, len, &clen);\n\tqsort(cats, clen, sizeof(cnt_t), _scmp);\n\twhile (--clen >= 0)\n\t\tprintf(\"%4d %s\\n\", cats[clen].count, cats[clen].name);\n\n\treturn 0;\n}\n\n\nOutput:\n 563 Tcl\n 529 PicoLisp\n 522 Python\n 504 C\n 500 J\n 442 Go\n 440 Ruby\n 435 Ada\n 430 PureBasic\n 427 Perl\n...\n\nLibrary: libcurl\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <curl/curl.h>\n#include \"cJSON.h\"\nchar *URL_BASE = \"http://www.rosettacode.org/mw/api.php?format=json&action=query&generator=categorymembers&gcmtitle=Category:Programming%20Languages&gcmlimit=500&prop=categoryinfo&rawcontinue\";\nchar *URL_BASE_CONT = \"http://www.rosettacode.org/mw/api.php?format=json&action=query&generator=categorymembers&gcmtitle=Category:Programming%20Languages&gcmlimit=500&prop=categoryinfo&gcmcontinue=\";\n\ntypedef struct mem {\n\tchar *text;\n\tsize_t size;\n} mem;\n\ntypedef struct page {\n\tchar *name;\n\tint num;\n} page;\n\nsize_t write_callback(void *ptr, size_t size, size_t nmemb, void *userdata);\nvoid curl_request(CURL *curl, char *url, mem *response);\nchar *build_url(char *cont);\nchar *get_cont(cJSON *json);\nvoid sort_arrays(page *pages, int *s);\ncJSON *parse_json(cJSON *json);\npage *fill_arrays(page *pages, int *s, cJSON *json);\n\nint main(int argc, char *argv[]) {\n\tcurl_global_init(CURL_GLOBAL_ALL);\n\tCURL *curl = curl_easy_init();\n\tchar *cont = NULL;\n\tpage *pages = malloc(1);\n\tint till = 10;\n\tint *npag = malloc(sizeof(int));\n\t*npag = 0;\n\tif (argc>1) till = atoi(argv[1]);\n\tdo {\n\t\tmem *response = calloc(1, sizeof(mem));\t\n\t\tchar *url = build_url(cont);\n\t\tif (cont) free(cont);\n\t\tcurl_request(curl, url, response);\n\t\tcJSON *json = cJSON_Parse(response->text);\n\t\tcont = get_cont(json);\n\t\tcJSON *json_pages = parse_json(json);\n\t\tpages = fill_arrays(pages, npag, json_pages);\t\t\t\n\t\tcJSON_Delete(json);\n\t\tfree(url);\n\t\tfree(response->text);\n\t\tfree(response);\n\t} while (cont);\n\tsort_arrays(pages, npag);\n\tif (till>*npag||till<-1) till=10;\n\tif (till==-1) till=*npag;\n\tfor (int i = 0;i<till;i++) {\n\t\tprintf(\"#%d: %s, %d tasks\\n\", i+1, pages[i].name, pages[i].num);\n\t}\n\tfor (int i = 0;i<*npag;i++) {\n\t\tfree(pages[i].name);\n\t}\n\tfree(pages);\n\tfree(npag);\n\tcurl_easy_cleanup(curl);\n\tcurl_global_cleanup();\n\treturn 0;\n}\nsize_t write_callback(void *ptr, size_t size, size_t nmemb, void *userdata) {\n\tmem *response = userdata;\n\tresponse->text = realloc(response->text, response->size+size*nmemb+1);\n\tmemcpy(&(response->text[response->size]), ptr, size*nmemb);\n\tresponse->size += size*nmemb;\n\tresponse->text[response->size] = '\\0';\n\treturn size*nmemb;\n}\nvoid curl_request(CURL *curl, char *url, mem *response) {\n\tcurl_easy_setopt(curl, CURLOPT_URL, url);\n\tcurl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_callback);\n\tcurl_easy_setopt(curl, CURLOPT_WRITEDATA, response);\n\tcurl_easy_perform(curl);\n}\nchar *build_url(char *cont) {\n\tchar *url;\n\tif (cont) {\n\t\tint size = strlen(URL_BASE_CONT)+strlen(cont)+1;\n\t\turl = calloc(1, size);\n\t\tstrncpy(url, URL_BASE_CONT, strlen(URL_BASE_CONT));\n\t\tstrcat(url, cont);\t\t\n\t} else {\n\t\turl = malloc(strlen(URL_BASE)+1);\n\t\tstrcpy(url, URL_BASE);\n\t}\n\treturn url;\n}\ncJSON *parse_json(cJSON *json) {\n\tcJSON *pages;\n\tif (json) {\n\t\tpages = cJSON_GetObjectItem(json, \"query\");\n\t\tpages = cJSON_GetObjectItem(pages, \"pages\");\t\n\t\tpages = pages->child;\n\t}\n\treturn pages;\n}\nchar *get_cont(cJSON *json) {\n\tcJSON *jcont = cJSON_GetObjectItem(json, \"query-continue\");\n\tif (jcont && jcont->child->child) {\n\t\tchar *cont = malloc(strlen(jcont->child->child->valuestring)+1);\n\t\tstrcpy(cont, jcont->child->child->valuestring);\n\t\treturn cont;\n\t} else {\n\t\treturn NULL;\n\t}\n}\npage *fill_arrays(page *pag, int *i, cJSON *json) {\n\tcJSON *cur_page = json;\n\tpage *pages = pag;\n\tdo {\n\t\tpages = realloc(pages, *i*sizeof(page)+sizeof(page));\n\t\tif (json->child) {\n\t\t\tint size = strlen(cur_page->child->next->next->valuestring)-9;\n\t\t\tchar *lang = malloc(size+1);\n\t\t\tstrcpy(lang, cur_page->child->next->next->valuestring+9);\n\t\t\tpages[*i].name = lang;\n\t\t} else {\n\t\t\tpages[*i].name = \"no name\";\n\t\t}\n\t\tint task = cur_page->child->next->next->next?cur_page->child->next->next->next->child->valueint:0;\n\t\tpages[*i].num = task;\n\t\t*i = *i+1;\n\t\tcur_page = cur_page->next;\n\t} while (cur_page->next);\n\treturn pages;\n}\nvoid sort_arrays(page *pages, int *size) {\n\tint sorted = 0;\n\tdo {\n\t\tsorted = 1;\n\t\tfor (int i = 0;i<*size-1;i++) {\n\t\t\tif (pages[i].num<pages[i+1].num) {\n\t\t\t\tsorted = 0;\n\t\t\t\tint a = pages[i+1].num;\n\t\t\t\tpages[i+1].num = pages[i].num;\n\t\t\t\tpages[i].num = a;\n\t\t\t\tchar *s = pages[i+1].name;\n\t\t\t\tpages[i+1].name = pages[i].name;\n\t\t\t\tpages[i].name = s;\n\t\t\t}\n\t\t}\n\t} while (sorted!=1);\n}\n\n\nOutput:\n1. Racket: 907 tasks\n2. Tcl: 899 tasks\n3. Python: 872 tasks\n4. J: 848 tasks\n5. Perl 6: 813 tasks\n6. Ruby: 796 tasks\n7. C: 777 tasks\n8. Java: 764 tasks\n9. Go: 759 tasks\n10. D: 749 tasks\n\n", "explain": "\n\nUsing cJSON.\nCompiled with gcc -lcurl -lm cJSON.c lang_rank.c \nUsage: rank [number]\nOutputs the first [number] languages in the list, default to 10. Use -1 to display all the languages.\n"}, {"task_name": "Rosetta Code/Rank languages by popularity", "task_url": "https://rosettacode.org/wiki/Rosetta_Code/Rank_languages_by_popularity", "task_cat": "Sorting", "lang": "C++", "code": "\nLibrary: Boost\n\n#include <string>\n#include <boost/regex.hpp>\n#include <boost/asio.hpp>\n#include <vector>\n#include <utility>\n#include <iostream>\n#include <sstream>\n#include <cstdlib>\n#include <algorithm>\n#include <iomanip>\n\nstruct Sort { //sorting programming languages according to frequency\n   bool operator( ) ( const std::pair<std::string,int> & a , const std::pair<std::string,int> & b ) \n      const {\n\t return a.second > b.second ;\n      }\n} ;\n\nint main( ) {\n   try {\n      //setting up an io service , with templated subelements for resolver and query\n      boost::asio::io_service io_service ; \n      boost::asio::ip::tcp::resolver resolver ( io_service ) ;\n      boost::asio::ip::tcp::resolver::query query ( \"rosettacode.org\" , \"http\" ) ;\n      boost::asio::ip::tcp::resolver::iterator endpoint_iterator = resolver.resolve( query ) ;\n      boost::asio::ip::tcp::resolver::iterator end ;\n      boost::asio::ip::tcp::socket socket( io_service ) ;\n      boost::system::error_code error = boost::asio::error::host_not_found ;\n      //looking for an endpoint the socket will be able to connect to\n      while ( error && endpoint_iterator != end ) {\n\t socket.close( ) ;\n\t socket.connect( *endpoint_iterator++ , error ) ;\n      }\n      if ( error ) \n\t throw boost::system::system_error ( error ) ;\n      //we send a request\n      boost::asio::streambuf request ;\n      std::ostream request_stream( &request ) ;\n      request_stream << \"GET \" << \"/mw/index.php?title=Special:Categories&limit=5000\" << \" HTTP/1.0\\r\\n\" ;\n      request_stream << \"Host: \" << \"rosettacode.org\" << \"\\r\\n\" ;\n      request_stream << \"Accept: */*\\r\\n\" ;\n      request_stream << \"Connection: close\\r\\n\\r\\n\" ;\n      //send the request\n      boost::asio::write( socket , request ) ;\n      //we receive the response analyzing every line and storing the programming language \n      boost::asio::streambuf response ;\n      std::istream response_stream ( &response ) ;\n      boost::asio::read_until( socket , response , \"\\r\\n\\r\\n\" ) ;\n      boost::regex e( \"<li><a href=\\\"[^<>]+?\\\">([a-zA-Z\\\\+#1-9]+?)</a>\\\\s?\\\\((\\\\d+) members\\\\)</li>\" ) ;\n      //using the wrong regex produces incorrect sorting!!\n      std::ostringstream line ;\n      std::vector<std::pair<std::string , int> > languages ; //holds language and number of examples\n      boost::smatch matches ;\n      while ( boost::asio::read( socket , response , boost::asio::transfer_at_least( 1 ) , error ) ) {\n\t line << &response ;\n\t if ( boost::regex_search( line.str( ) , matches , e ) ) {\n\t    std::string lang( matches[2].first , matches[2].second ) ;\n\t    int zahl = atoi ( lang.c_str( ) ) ;\n\t    languages.push_back( std::make_pair( matches[ 1 ] , zahl ) ) ;\n\t }\n\t line.str( \"\") ;//we have to erase the string buffer for the next read\n      }\n      if ( error != boost::asio::error::eof ) \n\t throw boost::system::system_error( error ) ;\n      //we sort the vector entries , see the struct above\n      std::sort( languages.begin( ) , languages.end( ) , Sort( ) ) ;\n      int n = 1 ;\n      for ( std::vector<std::pair<std::string , int> >::const_iterator spi = languages.begin( ) ;\n\t    spi != languages.end( ) ; ++spi ) {\n\t std::cout << std::setw( 3 ) << std::right << n << '.' << std::setw( 4 ) << std::right <<  \n\t spi->second   << \" - \" << spi->first << '\\n' ;\n\t n++ ;\n      }\n   } catch ( std::exception &ex ) {\n      std::cout << \"Exception: \" << ex.what( ) << '\\n' ;\n   }\n   return 0 ;\n}\n\n\nSample output (just the \"top ten\"):\n 1. 367 - Tcl\n 2. 334 - Python\n 3. 319 - Ruby\n 4. 286 - C\n 5. 277 - Perl\n 6. 272 - OCaml\n 7. 264 - Ada\n 8. 241 - E\n 9. 239 - AutoHotkey\n10. 193 - Forth\n\n", "explain": "using g++ under Linux with g++ -lboost_thread -lboost_system -lboost_regex:\n"}, {"task_name": "Rosetta Code/Rank languages by popularity", "task_url": "https://rosettacode.org/wiki/Rosetta_Code/Rank_languages_by_popularity", "task_cat": "Sorting", "lang": "Java", "code": "\n\nimport  java.net.URL;\nimport  java.net.URLConnection;\nimport  java.io.*;\nimport  java.util.*;\n\npublic class GetRCLanguages\n{\n    // Custom sort Comparator for sorting the language list\n    // assumes the first character is the page count and the rest is the language name\n    private static class LanguageComparator implements Comparator<String>\n    {\n        public int compare( String a, String b )\n        {\n            // as we \"know\" we will be comparaing languages, we will assume the Strings have the appropriate format\n            int result = ( b.charAt( 0 ) - a.charAt( 0 ) );\n            if( result == 0 )\n            {\n                // the counts are the same - compare the names\n                result = a.compareTo( b );\n            } // if result == 0\n        return result;\n        } // compare\n    } // LanguageComparator\n\n    // get the string following marker in text\n    private static String after( String text, int marker )\n    {\n        String result = \"\";\n        int    pos    = text.indexOf( marker );\n        if( pos >= 0 )\n        {\n            // the marker is in the string\n            result = text.substring( pos + 1 );\n        } // if pos >= 0\n    return result;\n    } // after\n\n    // read and parse the content of path\n    // results returned in gcmcontinue and languageList\n    public static void parseContent( String path\n                                   , String[] gcmcontinue\n                                   , ArrayList<String> languageList\n                                   )\n    {\n        try\n        {\n\n            URL            url = new URL( path );\n            URLConnection  rc  = url.openConnection();\n            // Rosetta Code objects to the default Java user agant so use a blank one\n            rc.setRequestProperty( \"User-Agent\", \"\" );\n            BufferedReader bfr = new BufferedReader( new InputStreamReader( rc.getInputStream() ) );\n    \n            gcmcontinue[0]      = \"\";\n            String languageName = \"?\";\n            String line         = bfr.readLine();\n            while( line != null )\n            {\n                line = line.trim();\n                if     ( line.startsWith( \"[title]\" ) )\n                {\n                    // have a programming language - should look like \"[title] => Category:languageName\"\n                    languageName = after( line, ':' ).trim();\n                }\n                else if( line.startsWith( \"[pages]\" ) )\n                {\n                    // number of pages the language has (probably)\n                    String pageCount = after( line, '>' ).trim();\n                    if( pageCount.compareTo( \"Array\" ) != 0 )\n                    {\n                        // haven't got \"[pages] => Array\" - must be a number of pages\n                        languageList.add( ( (char) Integer.parseInt( pageCount ) ) + languageName );\n                        languageName = \"?\";\n                    } // if [pageCount.compareTo( \"Array\" )\u00a0!= 0\n                }\n                else if( line.startsWith( \"[gcmcontinue]\" ) )\n                {\n                    // have an indication of wether there is more data or not\n                    gcmcontinue[0] = after( line, '>' ).trim();\n                } // if various line starts\n                line = bfr.readLine();\n            } // while line\u00a0!= null\n            bfr.close();\n        }\n        catch( Exception e )\n        {\n            e.printStackTrace();\n        } // try-catch\n    } // parseContent\n\n    public static void main( String[] args )\n    {\n        // get the languages\n        ArrayList<String> languageList = new ArrayList<String>( 1000 );\n        String[]          gcmcontinue  = new String[1];\n        gcmcontinue[0]                 = \"\";\n        do\n        {\n            String path = ( \"http://www.rosettacode.org/mw/api.php?action=query\"\n                          + \"&generator=categorymembers\"\n                          + \"&gcmtitle=Category:Programming%20Languages\"\n                          + \"&gcmlimit=500\"\n                          + ( gcmcontinue[0].compareTo( \"\" ) == 0 ? \"\" : ( \"&gcmcontinue=\" + gcmcontinue[0] ) )\n                          + \"&prop=categoryinfo\"\n                          + \"&format=txt\"\n                          );\n            parseContent( path, gcmcontinue, languageList );\n        }\n        while( gcmcontinue[0].compareTo( \"\" ) != 0 );\n        // sort the languages\n        String[] languages = languageList.toArray(new String[]{});\n        Arrays.sort( languages, new LanguageComparator() );\n        // print the languages\n        int    lastTie    = -1;\n        int    lastCount  = -1;\n        for( int lPos = 0; lPos < languages.length; lPos ++ )\n        {\n            int    count = (int) ( languages[ lPos ].charAt( 0 ) );\n            System.out.format( \"%4d: %4d: %s\\n\"\n                             , 1 + ( count == lastCount ? lastTie : lPos )\n                             , count\n                             , languages[ lPos ].substring( 1 )\n                             );\n            if( count != lastCount )\n            {\n                lastTie   = lPos;\n                lastCount = count;\n            } // if count\u00a0!= lastCount\n        } // for lPos\n    } // main\n} // GetRCLanguages\n\n\nOutput:\n\n   1:  883: Tcl\n   2:  875: Racket\n   3:  837: Python\n   4:  799: J\n   5:  772: Ruby\n   6:  763: Perl 6\n   7:  756: C\n   8:  742: Go\n   9:  737: D\n  10:  707: Perl\n  ...\n\n", "explain": "Tested with Java 1.7. Uses the api.\nTop 10 languages as at 27th August 2015\n"}, {"task_name": "Rosetta Code/Rank languages by popularity", "task_url": "https://rosettacode.org/wiki/Rosetta_Code/Rank_languages_by_popularity", "task_cat": "Sorting", "lang": "C#", "code": "\n\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Net;\nusing System.Text.RegularExpressions;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        string get1 = new WebClient().DownloadString(\"http://www.rosettacode.org/w/api.php?action=query&list=categorymembers&cmtitle=Category:Programming_Languages&cmlimit=500&format=json\");\n        string get2 = new WebClient().DownloadString(\"http://www.rosettacode.org/w/index.php?title=Special:Categories&limit=5000\");\n\n        ArrayList langs = new ArrayList();\n        Dictionary<string, int> qtdmbr = new Dictionary<string, int>();\n\n        MatchCollection match1 = new Regex(\"\\\"title\\\":\\\"Category:(.+?)\\\"\").Matches(get1);\n        MatchCollection match2 = new Regex(\"title=\\\"Category:(.+?)\\\">.+?</a>[^(]*\\\\((\\\\d+) members\\\\)\").Matches(get2);\n\n        foreach (Match lang in match1) langs.Add(lang.Groups[1].Value);\n\n        foreach (Match match in match2)\n        {\n            if (langs.Contains(match.Groups[1].Value))\n            {\n                qtdmbr.Add(match.Groups[1].Value, Int32.Parse(match.Groups[2].Value));\n            }\n        }\n\n        string[] test = qtdmbr.OrderByDescending(x => x.Value).Select(x => String.Format(\"{0,3} - {1}\", x.Value, x.Key)).ToArray();\n\n        int count = 1;\n\n        foreach (string i in test)\n        {\n            Console.WriteLine(\"{0,3}. {1}\", count, i);\n            count++;\n        }\n    }\n}\n\n\nOutput (as of May 30, 2010):\n 1. 397 - Tcl\n 2. 368 - Python\n 3. 350 - Ruby\n 4. 333 - J\n 5. 332 - C\n 6. 322 - Haskell\n 7. 322 - OCaml\n 8. 302 - Perl\n 9. 290 - Common Lisp\n10. 289 - AutoHotkey\n    . . .\n\nObject-oriented solution[edit]\nusing System;\nusing System.Net;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing System.Collections.Generic;\n\nclass Category {\n    private string _title;\n    private int _members;\n\n    public Category(string title, int members) {\n        _title = title;\n        _members = members;\n    }\n\n    public string Title {\n        get {\n            return _title;\n        }\n    }\n\n    public int Members {\n        get {\n            return _members;\n        }\n    }\n}\n\nclass Program {\n    static void Main(string[] args) {\n        string get1 = new WebClient().DownloadString(\"http://www.rosettacode.org/w/api.php?action=query&list=categorymembers&cmtitle=Category:Programming_Languages&cmlimit=500&format=json\");\n        string get2 = new WebClient().DownloadString(\"http://www.rosettacode.org/w/index.php?title=Special:Categories&limit=5000\");\n\n        MatchCollection match1 = new Regex(\"\\\"title\\\":\\\"Category:(.+?)\\\"\").Matches(get1);\n        MatchCollection match2 = new Regex(\"title=\\\"Category:(.+?)\\\">.+?</a>[^(]*\\\\((\\\\d+) members\\\\)\").Matches(get2);\n\n        string[] valids = match1.Cast<Match>().Select(x => x.Groups[1].Value).ToArray();\n        List<Category> langs = new List<Category>();\n\n        foreach (Match match in match2) {\n            string category = match.Groups[1].Value;\n            int members = Int32.Parse(match.Groups[2].Value);\n\n            if (valids.Contains(category)) langs.Add(new Category(category, members));\n        }\n\n        langs = langs.OrderByDescending(x => x.Members).ToList();\n        int count = 1;\n\n        foreach (Category i in langs) {\n            Console.WriteLine(\"{0,3}. {1,3} - {2}\", count, i.Members, i.Title);\n            count++;\n        }\n    }\n}\n\n", "explain": "Sorting only programming languages.\n"}, {"task_name": "Rosetta Code/Rank languages by popularity", "task_url": "https://rosettacode.org/wiki/Rosetta_Code/Rank_languages_by_popularity", "task_cat": "Sorting", "lang": "Go", "code": "\npackage main\n\nimport (\n\t\"encoding/xml\"\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"regexp\"\n\t\"sort\"\n\t\"strconv\"\n\t\"strings\"\n)\n\nvar baseQuery = \"http://rosettacode.org/mw/api.php?action=query\" +\n\t\"&format=xml&list=categorymembers&cmlimit=500\"\n\nfunc req(u string, foundCm func(string)) string {\n\tresp, err := http.Get(u)\n\tif err != nil {\n\t\tlog.Fatal(err) // connection or request fail\n\t}\n\tdefer resp.Body.Close()\n\tfor p := xml.NewDecoder(resp.Body); ; {\n\t\tt, err := p.RawToken()\n\t\tswitch s, ok := t.(xml.StartElement); {\n\t\tcase err == io.EOF:\n\t\t\treturn \"\"\n\t\tcase err != nil:\n\t\t\tlog.Fatal(err)\n\t\tcase !ok:\n\t\t\tcontinue\n\t\tcase s.Name.Local == \"cm\":\n\t\t\tfor _, a := range s.Attr {\n\t\t\t\tif a.Name.Local == \"title\" {\n\t\t\t\t\tfoundCm(a.Value)\n\t\t\t\t}\n\t\t\t}\n\t\tcase s.Name.Local == \"categorymembers\" && len(s.Attr) > 0 &&\n\t\t\ts.Attr[0].Name.Local == \"cmcontinue\":\n\t\t\treturn url.QueryEscape(s.Attr[0].Value)\n\t\t}\n\t}\n\treturn \"\"\n}\n\n// satisfy sort interface (reverse sorting)\ntype pop struct {\n\tstring\n\tint\n}\ntype popList []pop\n\nfunc (pl popList) Len() int      { return len(pl) }\nfunc (pl popList) Swap(i, j int) { pl[i], pl[j] = pl[j], pl[i] }\nfunc (pl popList) Less(i, j int) bool {\n\tswitch d := pl[i].int - pl[j].int; {\n\tcase d > 0:\n\t\treturn true\n\tcase d < 0:\n\t\treturn false\n\t}\n\treturn pl[i].string < pl[j].string\n}\n\nfunc main() {\n\t// get languages, store in a map\n\tlangMap := make(map[string]bool)\n\tstoreLang := func(cm string) {\n\t\tif strings.HasPrefix(cm, \"Category:\") {\n\t\t\tcm = cm[9:]\n\t\t}\n\t\tlangMap[cm] = true\n\t}\n\tlanguageQuery := baseQuery + \"&cmtitle=Category:Programming_Languages\"\n\tcontinueAt := req(languageQuery, storeLang)\n\tfor continueAt != \"\" {\n\t\tcontinueAt = req(languageQuery+\"&cmcontinue=\"+continueAt, storeLang)\n\t}\n\t// allocate slice for sorting\n\ts := make(popList, 0, len(langMap))\n\n\t// get big list of categories\n\tresp, err := http.Get(\"http://rosettacode.org/mw/index.php\" +\n\t\t\"?title=Special:Categories&limit=5000\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tpage, err := ioutil.ReadAll(resp.Body)\n\tresp.Body.Close()\n\n\t// split out fields of interest and populate sortable slice\n\trx := regexp.MustCompile(\"<li><a.*>(.*)</a>.*[(]([0-9]+) member\")\n\tfor _, sm := range rx.FindAllSubmatch(page, -1) {\n\t\tls := string(sm[1])\n\t\tif langMap[ls] {\n\t\t\tif n, err := strconv.Atoi(string(sm[2])); err == nil {\n\t\t\t\ts = append(s, pop{ls, n})\n\t\t\t}\n\t\t}\n\t}\n\n\t// output\n\tsort.Sort(s)\n\tlastCnt, lastIdx := -1, 1\n\tfor i, lang := range s {\n\t\tif lang.int != lastCnt {\n\t\t\tlastCnt = lang.int\n\t\t\tlastIdx = i + 1\n\t\t}\n\t\tfmt.Printf(\"%3d. %3d - %s\\n\", lastIdx, lang.int, lang.string)\n\t}\n}\n\n\nOutput on 11 Aug 2014:\n  1. 832 - Tcl\n  2. 783 - Racket\n  3. 774 - Python\n  4. 733 - Perl 6\n  5. 729 - J\n\u2026\n506.   1 - Supernova\n506.   1 - TestML\n506.   1 - Vox\n506.   1 - XPath 2.0\n506.   1 - Xanadu\n\n\n", "explain": "(All the final entries are tied for spot 506, there are 530 lines.)\n"}, {"task_name": "Rosetta Code/Rank languages by popularity", "task_url": "https://rosettacode.org/wiki/Rosetta_Code/Rank_languages_by_popularity", "task_cat": "Sorting", "lang": "Delphi", "code": "\nLibrary:  System.SysUtils\nLibrary:  System.Classes\nLibrary:  IdHttp\nLibrary:  IdBaseComponent\nLibrary:  IdComponent\nLibrary:  IdIOHandler\nLibrary:  IdIOHandlerSocket\nLibrary:  IdIOHandlerStack\nLibrary:  IdSSL\nLibrary:  IdSSLOpenSSL\nLibrary:  System.RegularExpressions\nLibrary:  System.Generics.Collections\nLibrary:  System.Generics.Defaults\n\nprogram Rank_languages_by_popularity;\n\n{$APPTYPE CONSOLE}\n\n{$R *.res}\n\nuses\n  System.SysUtils,\n  System.Classes,\n  IdHttp,\n  IdBaseComponent,\n  IdComponent,\n  IdIOHandler,\n  IdIOHandlerSocket,\n  IdIOHandlerStack,\n  IdSSL,\n  IdSSLOpenSSL,\n  System.RegularExpressions,\n  System.Generics.Collections,\n  System.Generics.Defaults;\n\nconst\n  AURL = 'https://www.rosettacode.org/mw/index.php?title=Special:Categories&limit=5000';\n  UserAgent =\n    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36';\n\ntype\n  TPair = record\n    Language: string;\n    Users: Integer;\n    constructor Create(lang, user: string);\n  end;\n\n  TPairs = TList<TPair>;\n\n\n  { TPair }\n\nconstructor TPair.Create(lang, user: string);\nbegin\n  Language := lang;\n  Users := StrToIntDef(user, 0);\nend;\n\nfunction GetFullCode: string;\nbegin\n  with TIdHttp.create(nil) do\n  begin\n    HandleRedirects := True;\n    Request.UserAgent := UserAgent;\n    IOHandler := TIdSSLIOHandlerSocketOpenSSL.Create(nil);\n    Result := Get(AURL);\n    IOHandler.Free;\n    Free;\n  end;\nend;\n\nfunction GetList(const Code: string): TPairs;\nvar\n  RegularExpression: TRegEx;\n  Match: TMatch;\n  language, users: string;\nbegin\n  Result := TPairs.Create;\n\n  RegularExpression.Create('>(?<LANG>[^<,;]*)<\\/a>.. \\((?<USERS>[,\\d]*)');\n  Match := RegularExpression.Match(Code);\n\n  while Match.Success do\n  begin\n    users := Match.Groups.Item['USERS'].Value.Replace(',', '');\n    language := Match.Groups.Item['LANG'].Value;\n\n    Result.Add(TPair.Create(language, users));\n    Match := Match.NextMatch;\n  end;\nend;\n\nprocedure Sort(List: TPairs);\nbegin\n  List.Sort(TComparer<TPair>.Construct(\n    function(const Left, Right: TPair): Integer\n    begin\n      result := Right.Users - Left.Users;\n      if result = 0 then\n        result := CompareText(Left.Language, Right.Language);\n    end));\nend;\n\nfunction SumUsers(List: TPairs): Cardinal;\nvar\n  p: TPair;\nbegin\n  Result := 0;\n  for p in List do\n  begin\n    Inc(Result, p.Users);\n  end;\nend;\n\nvar\n  Data: TStringList;\n  Code, line: string;\n  List: TPairs;\n  i: Integer;\n\nbegin\n  Data := TStringList.Create;\n  Writeln('Downloading code...');\n\n  Code := GetFullCode;\n  data.Clear;\n\n  List := GetList(Code);\n\n  Sort(List);\n\n  Writeln('Total languages: ', List.Count);\n  Writeln('Total Users: ', SumUsers(List));\n  Writeln('Top 10:'#10);\n\n  for i := 0 to List.Count - 1 do\n  begin\n    line := Format('%5dth %5d %s', [i + 1, List[i].users, List[i].language]);\n    Data.Add(line);\n    if i < 10 then\n      Writeln(line);\n  end;\n\n  Data.SaveToFile('Rank.txt');\n  List.Free;\n  Data.Free;\n\n  Readln;\nend.\n\n\nOutput (as of Jul 27, 2020):\nDownloading code...\nTotal languages: 3267\nTotal Users: 96532\nTop 10:\n\n    1th  1261 Go\n    2th  1228 Phix\n    3th  1221 Julia\n    4th  1210 Raku\n    5th  1148 Python\n    6th  1139 Perl\n    7th  1090 Kotlin\n    8th  1053 C\n    9th  1052 Java\n   10th  1051 Racket\n\n", "explain": "For safe run, download dlls: libeay32.dll & ssleay32.dll, then put in executable path.\n"}, {"task_name": "Rosetta Code/Rank languages by popularity", "task_url": "https://rosettacode.org/wiki/Rosetta_Code/Rank_languages_by_popularity", "task_cat": "Sorting", "lang": "Ruby", "code": "\nBy using the API[edit]\nWorks with: Ruby version 1.8.7\n\nrequire 'rosettacode'\n\nlangs = []\nRosettaCode.category_members(\"Programming Languages\") {|lang| langs << lang}\n\n# API has trouble with long titles= values.\n# To prevent skipping languages, use short slices of 20 titles.\nlangcount = {}\nlangs.each_slice(20) do |sublist|\n  url = RosettaCode.get_api_url({\n    \"action\" => \"query\",\n    \"prop\" => \"categoryinfo\",\n    \"format\" => \"xml\",\n    \"titles\" => sublist.join(\"|\"),\n  })\n\n  doc = REXML::Document.new open(url)\n  REXML::XPath.each(doc, \"//page\") do |page|\n    lang = page.attribute(\"title\").value\n    info = REXML::XPath.first(page, \"categoryinfo\")\n    langcount[lang] = info.nil? ? 0 : info.attribute(\"pages\").value.to_i\n  end\nend\n\nputs Time.now\nputs \"There are #{langcount.length} languages\"\nputs \"the top 25:\"\nlangcount.sort_by {|key,val| val}.reverse[0,25].each_with_index do |(lang, count), i|\n  puts \"#{i+1}. #{count} - #{lang.sub(/Category:/, '')}\"\nend\n\n\nResults:\n2010-07-08 14:52:46 -0500\nThere are 306 languages\nthe top 25:\n1. 399 - Tcl\n2. 370 - Python\n3. 352 - Ruby\n4. 338 - J\n5. 337 - C\n6. 333 - PicoLisp\n7. 322 - OCaml\n8. 322 - Haskell\n9. 299 - Perl\n10. 299 - AutoHotkey\n11. 288 - Common Lisp\n12. 280 - Java\n13. 275 - Ada\n14. 270 - D\n15. 267 - Oz\n16. 253 - R\n17. 252 - PureBasic\n18. 245 - E\n19. 243 - C++\n20. 241 - C sharp\n21. 239 - ALGOL 68\n22. 236 - JavaScript\n23. 221 - Forth\n24. 207 - Clojure\n25. 201 - Fortran\n", "explain": "Now that there are more than 500 categories, the URL given in the task description is insufficient. I use the RC API to grab the categories, and then count the members of each category.\nUses the RosettaCode module from Count programming examples#Ruby\n"}, {"task_name": "Rosetta Code/Rank languages by popularity", "task_url": "https://rosettacode.org/wiki/Rosetta_Code/Rank_languages_by_popularity", "task_cat": "Sorting", "lang": "R", "code": "\nlibrary(rvest)\nlibrary(dplyr)\noptions(stringsAsFactors=FALSE)\n\n# getting the required table from the rosetta website\nlangUrl <- \"https://rosettacode.org/wiki/Rosetta_Code/Rank_languages_by_popularity/Full_list\"\nlangs <- read_html(langUrl) %>%\n  html_nodes(xpath='/html/body/div/div/div[1]/div[3]/main/div[2]/div[3]/div[1]/table') %>%\n  html_table() %>% \n  data.frame() %>%\n  select(c(\"Rank\",\"TaskEntries\",\"Language\"))\n\n\n # changing the columns to required format\nlangs$Rank = paste(\"Rank: \",langs$Rank)\nlangs$TaskEntries = paste0(\"(\", format(langs$TaskEntries, big.mark = \",\")\n                           ,\" entries\", \")\")\n\nnames(langs) <- NULL\n\nlangs[1:10,]\n\n\nOutput (as of October, 24, 2022):\n1   Rank:  1 (1,589 entries)   Phix\n2   Rank:  1 (1,589 entries)   Wren\n3   Rank:  3 (1,552 entries)  Julia\n4   Rank:  4 (1,535 entries)   Raku\n5   Rank:  5 (1,500 entries)     Go\n6   Rank:  6 (1,485 entries)   Perl\n7   Rank:  7 (1,422 entries) Python\n8   Rank:  8 (1,402 entries)    Nim\n9   Rank:  9 (1,293 entries)      J\n10 Rank:  10 (1,213 entries)      C\n\n", "explain": ""}, {"task_name": "Rosetta Code/Rank languages by popularity", "task_url": "https://rosettacode.org/wiki/Rosetta_Code/Rank_languages_by_popularity", "task_cat": "Sorting", "lang": "Ada", "code": "\nLibrary: AWS\nwith Ada.Integer_Text_IO;   use Ada.Integer_Text_IO;\nwith Ada.Strings.Fixed;     use Ada.Strings.Fixed;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Ada.Text_IO;           use Ada.Text_IO;\n\nwith Ada.Containers.Ordered_Sets;\nwith Ada.Strings.Less_Case_Insensitive;\n\nwith AWS.Client;\nwith AWS.Response;\n\nprocedure Test is\n\n   use Ada.Strings;\n\n   function \"+\" (S : String) return Unbounded_String renames To_Unbounded_String;\n\n   type A_Language_Count is\n      record\n         Count    : Integer := 0;\n         Language : Unbounded_String;\n      end record;\n\n   function \"=\" (L, R : A_Language_Count) return Boolean is\n   begin\n      return L.Language = R.Language;\n   end \"=\";\n\n   function \"<\" (L, R : A_Language_Count) return Boolean is\n   begin\n      -- Sort by 'Count' and then by Language name\n      return L.Count < R.Count\n        or else (L.Count = R.Count\n                 and then Less_Case_Insensitive (Left  => To_String (L.Language),\n                                                 Right => To_String (R.Language)));\n   end \"<\";\n\n   package Sets is new Ada.Containers.Ordered_Sets (A_Language_Count);\n   use Sets;\n\n   Counts : Set;\n\n   procedure Find_Counts (S : String) is\n      Title_Str : constant String  := \"title=\"\"Category:\";\n      End_A_Str : constant String  := \"</a> (\";\n\n      Title_At   : constant Natural := Index (S, Title_Str);\n   begin\n      if Title_At /= 0 then\n         declare\n            Bracket_At : constant Natural := Index (S (Title_At   + Title_Str'Length .. S'Last), \">\");\n            End_A_At   : constant Natural := Index (S (Bracket_At + 1                .. S'Last), End_A_Str);\n            Space_At   : constant Natural := Index (S (End_A_At   + End_A_Str'Length .. S'Last), \" \");\n            Count      : constant Natural := Natural'Value (S (End_A_At + End_A_Str'Length .. Space_At - 1));\n            Language   : constant String  :=                S (Title_At + Title_Str'Length .. Bracket_At - 2);\n         begin\n            if Bracket_At /= 0 and then End_A_At /= 0 and then Space_At /= 0 then\n               begin\n                  Counts.Insert (New_Item => (Count, +Language));\n               exception\n                  when Constraint_Error =>\n                     Put_Line (Standard_Error, \"Warning: repeated language: \" & Language);\n                     -- Ignore repeated results.\n                     null;\n               end;\n            end if;\n            -- Recursively parse the string for languages and counts\n            Find_Counts (S (Space_At + 1 .. S'Last));\n         end;\n      end if;\n\n   end Find_Counts;\n\n   Place : Natural := 1;\n\n   procedure Display (C : Cursor) is\n   begin\n      Put (Place, Width => 1);             Put (\". \");\n      Put (Element (C).Count, Width => 1); Put (\" - \");\n      Put_Line (To_String (Element (C).Language));\n      Place := Place + 1;\n   end Display;\n \n   Http_Source : constant AWS.Response.Data :=\n     AWS.Client.Get (\"http://rosettacode.org/mw/index.php?title=Special:Categories&limit=5000\");\nbegin\n   Find_Counts (AWS.Response.Message_Body (Http_Source));\n   Counts.Reverse_Iterate (Display'Access);\nend Test;\n\n", "explain": ""}, {"task_name": "Rosetta Code/Rank languages by popularity", "task_url": "https://rosettacode.org/wiki/Rosetta_Code/Rank_languages_by_popularity", "task_cat": "Sorting", "lang": "Julia", "code": "\n\n\"\"\" Rosetta code task rosettacode.org/wiki/Rosetta_Code/Rank_languages_by_popularity \"\"\"\n\nusing Dates\nusing DataFrames\nusing HTTP\nusing JSON3\n\n\"\"\" Get listing of all tasks and draft tasks with authors and dates created, with the counts as popularity \"\"\"\nfunction rosetta_code_language_example_counts(verbose = false)\n    URL = \"https://rosettacode.org/w/api.php?\"\n    LANGPARAMS = [\"action\" => \"query\", \"format\" => \"json\", \"formatversion\" => \"2\", \"generator\" => \"categorymembers\",\n       \"gcmtitle\" => \"Category:Programming_Languages\", \"gcmlimit\" => \"500\", \"rawcontinue\" => \"\", \"prop\" => \"title\"]\n    queryparams = copy(LANGPARAMS)\n    df = empty!(DataFrame([[\"\"], [0]], [\"ProgrammingLanguage\", \"ExampleCount\"]))\n\n    while true  # get all the languages listed, with curid, eg rosettacode.org/w/index.php?curid=196 for C\n        resp = HTTP.get(URL * join(map(p -> p[1] * (p[2] == \"\" ? \"\" : (\"=\" * p[2])), queryparams), \"&\"))\n        json = JSON3.read(String(resp.body))\n        pages = json.query.pages\n        reg = r\"The following \\d+ pages are in this category, out of ([\\d\\,]+) total\"\n        for p in pages\n            lang = replace(p.title, \"Category:\" => \"\")\n            langpage = String(HTTP.get(\"https://rosettacode.org/w/index.php?curid=\" * string(p.pageid)).body)\n            if !((m = match(reg, langpage)) isa Nothing)\n                push!(df, [lang, parse(Int, replace(m.captures[1], \",\" => \"\"))])\n                verbose && println(\"Language: $lang, count: \", m.captures[1])\n            end\n        end\n        !haskey(json, \"query-continue\") && break  # break if no more pages, else continue to next pages\n        queryparams = vcat(LANGPARAMS, \"gcmcontinue\" => json[\"query-continue\"][\"categorymembers\"][\"gcmcontinue\"])\n    end\n\n    return sort!(df, :ExampleCount, rev = true)\nend\n\nprintln(\"Top 20 Programming Languages on Rosetta Code by Number of Examples, As of: \", now())\nprintln(rosetta_code_language_example_counts()[begin:begin+19, :])\n\nOutput:\nTop 20 Programming Languages on Rosetta Code by Number of Examples, As of: 2022-09-05T14:59:56.316\n20\u00d72 DataFrame\n Row \u2502 ProgrammingLanguage  ExampleCount \n     \u2502 String               Int64        \n\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n   1 \u2502 Wren                         1569 \n   2 \u2502 Phix                         1569 \n   3 \u2502 Julia                        1537 \n   4 \u2502 Raku                         1517 \n   5 \u2502 Go                           1496 \n   6 \u2502 Perl                         1460 \n   7 \u2502 Python                       1404 \n   8 \u2502 Nim                          1402 \n   9 \u2502 J                            1275 \n  10 \u2502 C                            1210 \n  11 \u2502 Mathematica                  1178 \n  12 \u2502 REXX                         1149 \n  13 \u2502 Haskell                      1139 \n  14 \u2502 Java                         1136 \n  15 \u2502 Kotlin                       1133 \n  16 \u2502 C++                          1120 \n  17 \u2502 Ruby                         1103\n  18 \u2502 Racket                       1089\n  19 \u2502 FreeBASIC                    1069\n  20 \u2502 Zkl                          1011\n\n", "explain": "Uses the API for the language list and page scraping for the example counts for each language.\n"}, {"task_name": "Rosetta Code/Rank languages by popularity", "task_url": "https://rosettacode.org/wiki/Rosetta_Code/Rank_languages_by_popularity", "task_cat": "Sorting", "lang": "Kotlin", "code": "\nTranslation of: Java\nimport java.net.URL\nimport java.io.*\n\nobject Popularity {\n    /** Gets language data. */\n    fun ofLanguages(): List<String> {\n        val languages = mutableListOf<String>()\n        var gcm = \"\"\n        do {\n            val path = url + (if (gcm == \"\") \"\" else \"&gcmcontinue=\" + gcm) + \"&prop=categoryinfo\" + \"&format=txt\"\n            try {\n                val rc = URL(path).openConnection() // URL completed, connection opened\n                // Rosetta Code objects to the default Java user agent so use a blank one\n                rc.setRequestProperty(\"User-Agent\", \"\")\n                val bfr = BufferedReader(InputStreamReader(rc.inputStream))\n                try {\n                    gcm = \"\"\n                    var languageName = \"?\"\n                    var line: String? = bfr.readLine()\n                    while (line != null) {\n                        line = line.trim { it <= ' ' }\n                        if (line.startsWith(\"[title]\")) {\n                            // have a programming language - should look like \"[title] => Category:languageName\"\n                            languageName = line[':']\n                        } else if (line.startsWith(\"[pages]\")) {\n                            // number of pages the language has (probably)\n                            val pageCount = line['>']\n                            if (pageCount != \"Array\") {\n                                // haven't got \"[pages] => Array\" - must be a number of pages\n                                languages += pageCount.toInt().toChar() + languageName\n                                languageName = \"?\"\n                            }\n                        } else if (line.startsWith(\"[gcmcontinue]\"))\n                            gcm = line['>']  // have an indication of whether there is more data or not\n                        line = bfr.readLine()\n                    }\n                } finally {\n                    bfr.close()\n                }\n            } catch (e: Exception) {\n                e.printStackTrace()\n            }\n        } while (gcm != \"\")\n\n        return languages.sortedWith(LanguageComparator)\n    }\n\n    /** Custom sort Comparator for sorting the language list.\n     * Assumes the first character is the page count and the rest is the language name. */\n    internal object LanguageComparator : java.util.Comparator<String> {\n        override fun compare(a: String, b: String): Int {\n            // as we \"know\" we will be comparing languages, we will assume the Strings have the appropriate format\n            var r = b.first() - a.first()\n            return if (r == 0) a.compareTo(b) else r\n            // r == 0: the counts are the same - compare the names\n        }\n    }\n\n    /** Gets the string following marker in text. */\n    private operator fun String.get(c: Char) = substringAfter(c).trim { it <= ' ' }\n\n    private val url = \"http://www.rosettacode.org/mw/api.php?action=query\" +\n            \"&generator=categorymembers\" + \"&gcmtitle=Category:Programming%20Languages\" +\n            \"&gcmlimit=500\"\n}\n\nfun main(args: Array<String>) {\n    // read/sort/print the languages (CSV format):\n    var lastTie = -1\n    var lastCount = -1\n    Popularity.ofLanguages().forEachIndexed { i, lang ->\n        val count = lang.first().toInt()\n        if (count == lastCount)\n            println(\"%12s%s\".format(\"\", lang.substring(1)))\n        else {\n            println(\"%4d, %4d, %s\".format(1 + if (count == lastCount) lastTie else i, count, lang.substring(1)))\n            lastTie = i\n            lastCount = count\n        }\n    }\n}\n\n\nOutput:\n   1,  901, Racket\n   2,  893, Tcl\n   3,  851, Python\n   4,  826, J\n   5,  796, Perl 6\n   ...\n 135,   70, Kotlin\n   ...\n", "explain": ""}, {"task_name": "Rosetta Code/Rank languages by popularity", "task_url": "https://rosettacode.org/wiki/Rosetta_Code/Rank_languages_by_popularity", "task_cat": "Sorting", "lang": "Perl", "code": "\nBy using the API[edit]\nuse 5.010;\nuse MediaWiki::API;\n\nmy $api =\n  MediaWiki::API->new( { api_url => 'http://rosettacode.org/w/api.php' } );\n\nmy @languages;\nmy $gcmcontinue;\nwhile (1) {\n    my $apih = $api->api(\n        {\n            action      => 'query',\n            generator   => 'categorymembers',\n            gcmtitle    => 'Category:Programming Languages',\n            gcmlimit    => 250,\n            prop        => 'categoryinfo',\n            gcmcontinue => $gcmcontinue\n        }\n    );\n    push @languages, values %{ $apih->{'query'}{'pages'} };\n\n    last if not $gcmcontinue = $apih->{'continue'}{'gcmcontinue'};\n}\n\nfor (@languages) {\n    $_->{'title'} =~ s/Category://;\n    $_->{'categoryinfo'}{'size'} //= 0;\n}\n\nmy @sorted_languages =\n  reverse sort { $a->{'categoryinfo'}{'size'} <=> $b->{'categoryinfo'}{'size'} }\n  @languages;\n\nbinmode STDOUT, ':encoding(utf8)';\nmy $n = 1;\nfor (@sorted_languages) {\n    printf \"%3d. %20s - %3d\\n\", $n++, $_->{'title'},\n      $_->{'categoryinfo'}{'size'};\n}\n\n\nOutput:\n  1.                 Phix - 1576\n  2.                 Wren - 1569\n  3.                Julia - 1540\n  4.                 Raku - 1520\n  5.                   Go - 1500\n  6.                 Perl - 1468\n  7.               Python - 1422\n  8.                  Nim - 1403\n  9.                    J - 1278\n 10.                    C - 1213\n...\n", "explain": ""}, {"task_name": "Rosetta Code/Rank languages by popularity", "task_url": "https://rosettacode.org/wiki/Rosetta_Code/Rank_languages_by_popularity", "task_cat": "Sorting", "lang": "Scala", "code": "\nParallel internet querying[edit]\n\nimport akka.actor.{Actor, ActorSystem, Props}\nimport scala.collection.immutable.TreeSet\nimport scala.xml.XML\n\n// Reports a list with all languages recorded in the Wiki\n\nprivate object Acquisition {\n  val (endPoint, prefix) = (\"http://rosettacode.org/mw/api.php\", \"Category:\")\n  val (maxPlaces, correction) = (50, 2)\n\n  def convertPathArgsToURL(endPoint: String, pathArgs: Map[String, String]) = {\n    pathArgs.map(argPair => argPair._1 + \"=\" + argPair._2)\n      .mkString(endPoint + (if (pathArgs.nonEmpty) \"?\" else \"\"), \"&\", \"\")\n  }\n\n  /* The categories include a page for the language and a count of the pages\n   * linked therein, this count is the data we need to scrape.\n   * Reports a list with language, count pair recorded in the Wiki\n   * All strings starts with the prefixes \"Category:\"\n   */\n  def mineCatos = {\n    val endPoint = \"http://rosettacode.org/mw/index.php\"\n    Concurrent.logInfo(\"Acquisition of categories started.\")\n    val categories =\n      (XML.load(convertPathArgsToURL(endPoint,\n        Map(\"title\" -> \"Special:Categories\", \"limit\" -> \"5000\"))) \\\\ \"ul\" \\ \"li\")\n        .withFilter(p => (p \\ \"a\" \\ \"@title\").text.startsWith(prefix))\n        .map // Create a tuple pair, eg. (\"Category:Erlang\", 195)\n        { cat =>\n          ((cat \\ \"a\" \\ \"@title\").text, // Takes the sibling of \"a\" and extracts the number\n            \"[0-9]+\".r.findFirstIn(cat.child.drop(1).text).getOrElse(\"0\").toInt)\n        }\n    Concurrent.logInfo(s\"Got ${categories.size} categories..\")\n    categories\n  }\n\n  // The languages\n  // All strings starts with the prefixes \"Category:\"\n  def mineLangs = {\n    Concurrent.logInfo(\"Acquisition of languages started...\")\n    def getLangs(first: Boolean = true, continue: String = \"\"): TreeSet[String] = (first, continue) match {\n      case (false, \"\") => TreeSet[String]()\n      case _ => {\n        val xml = XML.load(convertPathArgsToURL(endPoint, Map(\n            \"action\" -> \"query\",\n            \"list\" -> \"categorymembers\",\n            \"cmtitle\" -> (prefix + \"Programming_Languages\"),\n            \"cmlimit\" -> \"500\",\n            \"rawcontinue\" -> \"\",\n            \"format\" -> \"xml\",\n            \"cmcontinue\" -> continue)))\n        getLangs(false, (xml \\\\ \"query-continue\" \\ \"categorymembers\" \\ \"@cmcontinue\").text) ++ (xml \\\\ \"categorymembers\" \\ \"cm\").map(c => (c \\ \"@title\").text)\n      }\n    }\n    val languages = getLangs()\n    Concurrent.logInfo(s\"Got ${languages.size} languages..\")\n    languages\n  }\n\n  def joinRosettaCodeWithLanguage(catos: Seq[(String, Int)],\n                                  langs: TreeSet[String]) =\n    for {\n      cato <- catos //Clean up the tuple pairs, eg (\"Category:Erlang\", 195) becomes (\"Erlang\", 192)\n      if langs.contains(cato._1)\n    } yield (cato._1.drop(prefix.length), cato._2 - correction max 0) // Correct count\n\n  def printScrape(languages: TreeSet[String], category: Seq[(String, Int)]) {\n\n    val join = joinRosettaCodeWithLanguage(category, languages)\n    val total = join.foldLeft(0)(_ + _._2)\n\n    Concurrent.logInfo(\"Data processed\")\n\n    println(f\"\\nTop$maxPlaces%3d Rosetta Code Languages by Popularity as ${new java.util.Date}%tF:\\n\")\n    (join.groupBy(_._2).toSeq.sortBy(-_._1).take(maxPlaces) :+ (0, Seq((\"...\", 0))))\n      .zipWithIndex // Group the ex aequo\n      .foreach {\n        case ((score, langs), rank) =>\n          println(f\"${rank + 1}%2d. $score%3d - ${langs.map(_._1).mkString(\", \")}\")\n      }\n\n    println(s\"\\nCross section yields ${join.size} languages, total of $total solutions\")\n    println(s\"Resulting average is ${total / join.size} solutions per language\")\n  }\n\n  def printScrape(): Unit = printScrape(mineLangs, mineCatos)\n} // object Acquisition\n\nprivate object Concurrent extends AppCommons {\n  var (category: Option[Seq[(String, Int)]], language: Option[TreeSet[String]]) = (None, None)\n\n  class Worker extends Actor {\n    def receive = {\n      case 'Catalogue => sender ! Acquisition.mineCatos\n      case 'Language => sender ! Acquisition.mineLangs\n    }\n  }\n\n  class Listener extends Actor {\n    // Create and signal the worker actors\n    context.actorOf(Props[Worker], \"worker0\") ! 'Catalogue\n    context.actorOf(Props[Worker], \"worker1\") ! 'Language\n\n    def printCompleteScape() =\n      if (category.isDefined && language.isDefined) {\n        Acquisition.printScrape(language.get, category.get)\n        context.system.shutdown()\n        appEnd()\n      }\n\n    def receive = {\n      case content: TreeSet[String] =>\n        language = Some(content)\n        printCompleteScape()\n      case content: Seq[(String, Int)] =>\n        category = Some(content)\n        printCompleteScape()\n      case whatever => logInfo(whatever.toString)\n    } // def receive\n  }\n} // object Concurrent\n\ntrait AppCommons {\n  val execStart = System.currentTimeMillis()\n  System.setProperty(\"http.agent\", \"*\")\n\n  def logInfo(info: String) {\n    println(f\"[Info][${System.currentTimeMillis() - execStart}%5d ms]\" + info)\n  }\n\n  def appEnd() { logInfo(\"Run succesfully completed\") }\n}\n\n// Main entry for sequential version (slower)\nobject GhettoParserSeq extends App with AppCommons {\n  Concurrent.logInfo(\"Sequential version started\")\n  Acquisition.printScrape()\n  appEnd()\n}\n\n// Entry for parallel version (faster)\nobject GhettoParserPar extends App {\n  Concurrent.logInfo(\"Parallel version started\")\n  ActorSystem(\"Main\").actorOf(Props[Concurrent.Listener])\n}\n\nSequential internet querying[edit]\n\n\nOutput for both solutions: but parallel run chosen. Notice the synchronous start time.\n[Info][    0 ms]Sequential version started\n[Info][    3 ms]Acquisition of languages started...\n[Info][ 1458 ms]Got 642 languages..\n[Info][ 1458 ms]Acquisition of categories started.\n[Info][19385 ms]Got 2647 categories..\n[Info][19389 ms]Data processed\n\nTop 50 Rosetta Code Languages by Popularity as 2016-11-11:\n\n 1. 907 - Racket\n 2. 896 - Python, Tcl\n 3. 859 - J\n 4. 846 - Perl 6\n 5. 810 - Ruby\n 6. 807 - Zkl\n 7. 795 - C\n 8. 774 - Java\n 9. 773 - Go\n10. 754 - Haskell\n11. 753 - Perl\n12. 751 - REXX\n13. 750 - D\n14. 729 - PicoLisp\n15. 689 - Mathematica\n16. 674 - Sidef\n17. 634 - C++\n18. 631 - Ada\n19. 609 - AutoHotkey\n20. 592 - Common Lisp\n21. 583 - Unicon\n22. 569 - Scala\n23. 560 - C sharp\n24. 546 - BBC BASIC\n25. 526 - Icon\n26. 522 - Clojure\n27. 520 - JavaScript\n28. 519 - OCaml\n29. 517 - PureBasic\n30. 513 - PARI/GP\n31. 510 - Lua\n32. 509 - Nim\n33. 497 - ALGOL 68\n34. 491 - Elixir\n35. 488 - Fortran\n36. 474 - Erlang\n37. 430 - PowerShell\n38. 428 - Julia\n39. 414 - Jq\n40. 413 - F Sharp\n41. 409 - Phix\n42. 407 - Pascal\n43. 405 - Forth, Seed7\n44. 398 - PL/I\n45. 383 - R\n46. 382 - PHP\n47. 377 - Groovy\n48. 370 - AWK\n49. 340 - MATLAB\n50. 333 - Liberty BASIC\n51.   0 - ...\n\nCross section yields 619 languages, total of 50835 solutions\nResulting average is 82 solutions per language\n[Info][19413 ms]Run succesfully completed\n", "explain": "Entry point @ object GhettoParserPar\nThe same code above but as entry point object GhettoParserSeq\n"}, {"task_name": "Rosetta Code/Rank languages by popularity", "task_url": "https://rosettacode.org/wiki/Rosetta_Code/Rank_languages_by_popularity", "task_cat": "Sorting", "lang": "D", "code": "\n\nvoid main() {\n    import std.stdio, std.algorithm, std.conv, std.array, std.regex,\n           std.typecons, std.net.curl;\n\n    immutable r1 = `\"title\":\"Category:([^\"]+)\"`;\n    const languages = get(\"www.rosettacode.org/w/api.php?action=query\"~\n                          \"&list=categorymembers&cmtitle=Category:Pro\"~\n                          \"gramming_Languages&cmlimit=500&format=json\")\n                      .matchAll(r1).map!q{ a[1].dup }.array;\n\n    auto pairs = get(\"www.rosettacode.org/w/index.php?\" ~\n                      \"title=Special:Categories&limit=5000\")\n                  .matchAll(`title=\"Category:([^\"]+)\">[^<]+` ~\n                            `</a>[^(]+\\((\\d+) members\\)`)\n                  .filter!(m => languages.canFind(m[1]))\n                  .map!(m => tuple(m[2].to!uint, m[1].dup));\n\n    foreach (i, res; pairs.array.sort!q{a > b}.release)\n        writefln(\"%3d. %3d - %s\", i + 1, res[]);\n}\n\n\nSample output (top twenty as of 2013-01-24):\n  1. 717 - Tcl\n  2. 663 - Python\n  3. 643 - C\n  4. 626 - PicoLisp\n  5. 622 - J\n  6. 587 - Go\n  7. 587 - Ruby\n  8. 585 - D\n  9. 568 - Perl 6\n 10. 564 - Ada\n 11. 554 - Mathematica\n 12. 535 - Perl\n 13. 532 - Haskell\n 14. 514 - BBC BASIC\n 15. 505 - REXX\n 16. 491 - Java\n 17. 478 - OCaml\n 18. 469 - PureBasic\n 19. 462 - Unicon\n 20. 430 - AutoHotkey\n", "explain": "With dmd you need compile like \"dmd rosetta_popularity.d -L-lphobos2 -L-lcurl\".\n"}, {"task_name": "Rosetta Code/Rank languages by popularity", "task_url": "https://rosettacode.org/wiki/Rosetta_Code/Rank_languages_by_popularity", "task_cat": "Sorting", "lang": "Haskell", "code": "\nHaskell: Using the API[edit]\n{-# LANGUAGE OverloadedStrings #-}\n\nimport Data.Aeson \nimport Network.HTTP.Base (urlEncode)\nimport Network.HTTP.Conduit (simpleHttp)\nimport Data.List (sortBy, groupBy)\nimport Data.Function (on)\nimport Data.Map (Map, toList)\n\n-- Record representing a single language.  \ndata Language =\n    Language { \n        name      :: String,\n        quantity  :: Int\n    } deriving (Show)\n\n-- Make Language an instance of FromJSON for parsing of query response.\ninstance FromJSON Language where\n    parseJSON (Object p) = do\n        categoryInfo <- p .:? \"categoryinfo\" \n\n        let quantity = case categoryInfo of\n                           Just ob -> ob .: \"size\"\n                           Nothing -> return 0\n\n            name = p .: \"title\"\n\n        Language <$> name <*> quantity\n\n-- Record representing entire response to query.  \n-- Contains collection of languages and optional continuation string.\ndata Report =\n    Report { \n        continue    :: Maybe String,\n        languages   :: Map String Language\n    } deriving (Show)\n\n-- Make Report an instance of FromJSON for parsing of query response.\ninstance FromJSON Report where\n    parseJSON (Object p) = do\n        querycontinue <- p .:? \"query-continue\"\n\n        let continue \n                = case querycontinue of\n                      Just ob -> fmap Just $ \n                                     (ob .: \"categorymembers\") >>= \n                                     (   .: \"gcmcontinue\")\n                      Nothing -> return Nothing\n\n            languages = (p .: \"query\") >>= (.: \"pages\") \n\n        Report <$> continue <*> languages\n\n-- Pretty print a single language\nshowLanguage :: Int -> Bool -> Language -> IO ()\nshowLanguage rank tie (Language languageName languageQuantity) = \n    let rankStr = show rank\n    in putStrLn $ rankStr ++ \".\" ++ \n                      replicate (4 - length rankStr) ' ' ++\n                      (if tie then \" (tie)\" else \"      \") ++\n                      \" \" ++ drop 9 languageName ++\n                      \" - \" ++ show languageQuantity\n\n-- Pretty print languages with common rank\nshowRanking :: (Int,  [Language]) -> IO ()\nshowRanking (ranking, languages) = \n    mapM_ (showLanguage ranking $ length languages > 1) languages\n\n-- Sort and group languages by rank, then pretty print them.\nshowLanguages :: [Language] -> IO ()\nshowLanguages allLanguages =\n    mapM_ showRanking $ \n          zip [1..] $ \n          groupBy ((==) `on` quantity) $\n          sortBy (flip compare `on` quantity) allLanguages\n\n-- Mediawiki api style query to send to rosettacode.org\nqueryStr = \"http://rosettacode.org/mw/api.php?\" ++ \n           \"format=json\" ++ \n           \"&action=query\" ++ \n           \"&generator=categorymembers\" ++ \n           \"&gcmtitle=Category:Programming%20Languages\" ++ \n           \"&gcmlimit=100\" ++ \n           \"&prop=categoryinfo\" \n\n-- Issue query to get a list of Language descriptions\nrunQuery :: [Language] -> String -> IO ()\nrunQuery ls query = do\n    Just (Report continue langs) <- decode <$> simpleHttp query \n    let accLanguages = ls ++ map snd (toList langs)\n\n    case continue of\n        -- If there is no continue string we are done so display the accumulated languages.\n        Nothing -> showLanguages accLanguages\n\n        -- If there is a continue string, recursively continue the query.\n        Just continueStr -> do\n            let continueQueryStr = queryStr ++ \"&gcmcontinue=\" ++ urlEncode continueStr\n            runQuery accLanguages continueQueryStr\n\nmain :: IO ()\nmain = runQuery [] queryStr\n\n\nOutput:\n\n1.          Tcl - 887\n2.          Racket - 877\n3.          Python - 853\n4.          J - 795\n5.          Ruby - 775\n6.          Perl 6 - 766\n7.          C - 757\n8.          Go - 746\n9.          D - 740\n10.         Perl - 710\n11.         REXX - 697\n12.         PicoLisp - 692\n13.         Haskell - 682\n14.         Mathematica - 675\n15.         Java - 652\n16.         Zkl - 634\n17.         Ada - 623\n18.         AutoHotkey - 591\n19.         Unicon - 581\n20.         C++ - 562\n21.         Common Lisp - 551\n22.         Scala - 548\n23.         BBC BASIC - 532\n24.         Icon - 523\n25.         C sharp - 516\n26.         OCaml - 508\n27.         Nim - 502\n28.   (tie) Clojure - 485\n28.   (tie) PureBasic - 485\n29.         Erlang - 455\n30.         PARI/GP - 441\nHaskell: Using web scraping[edit]\n\nimport Network.Browser\nimport Network.HTTP\nimport Network.URI\nimport Data.List\nimport Data.Maybe\nimport Text.XML.Light\nimport Control.Arrow\nimport Data.Ord\n\ngetRespons url = do\n    rsp <- Network.Browser.browse $ do\n      setAllowRedirects True\n      setOutHandler $ const (return ())     -- quiet\n      request $ getRequest url\n    return $ rspBody $ snd rsp\n\n  \nmostPopLang = do\n  rsp <-getRespons $ \"http://www.rosettacode.org/w/api.php?action=query&list=\" ++ \n\t\t    \"categorymembers&cmtitle=Category:Programming_Languages&cmlimit=500&format=xml\"\n  mbrs <- getRespons \"http://www.rosettacode.org/w/index.php?title=Special:Categories&limit=5000\" \n  let xmls = onlyElems $ parseXML rsp\n      langs = concatMap (map ((\\\\\"Category:\"). fromJust.findAttr (unqual \"title\")). filterElementsName (== unqual \"cm\")) xmls\n\n  let catMbr = second (read.takeWhile(/=' '). drop 6). break (=='<'). drop 1. dropWhile(/='>') . drop 5\n      catNmbs :: [(String, Int)]\n      catNmbs = map catMbr $ filter (isPrefixOf \"<li>\") $ lines mbrs\n      printFmt (n,(l,m)) = putStrLn $ take 6 (show n ++ \".     \") ++ (show m) ++ \"  \" ++ l \n      toMaybe (a,b) =\n\tcase b of\n\t  Just x -> Just (a,x)\n\t  _ -> Nothing\n  \n  mapM_ printFmt $  zip [1..] $ sortBy (flip (comparing snd))\n    $ mapMaybe (toMaybe. (id &&& flip lookup catNmbs)) langs\n\n\nFirst 20:\n*Main> mostPopLang\n1.    421  Tcl\n2.    392  Python\n3.    365  PicoLisp\n4.    363  J\n5.    360  Ruby\n6.    354  C\n7.    344  Haskell\n8.    337  OCaml\n9.    316  Perl\n10.   308  PureBasic\n11.   302  AutoHotkey\n12.   299  Common Lisp\n13.   295  D\n14.   295  Java\n15.   293  Ada\n16.   278  Oz\n17.   260  R\n18.   259  C sharp\n19.   257  C++\n20.   255  ALGOL 68\n", "explain": "(As of 2015-07-29.) Here we show only the top 30.\nScraping the languages and categories pages.  \n"}, {"task_name": "Rosetta Code/Rank languages by popularity", "task_url": "https://rosettacode.org/wiki/Rosetta_Code/Rank_languages_by_popularity", "task_cat": "Sorting", "lang": "VBScript", "code": "\n\n    '''''''''''''''''''''''''''''''''''''''''''''\n    ' Rosetta Code/Rank Languages by Popularity '\n    '          VBScript Implementation          '\n    '...........................................'\n\n'API Links (From C Code)\nURL1 = \"http://www.rosettacode.org/mw/api.php?format=json&action=query&generator=categorymembers&gcmtitle=Category:Programming%20Languages&gcmlimit=500&prop=categoryinfo&rawcontinue\"\nURL2 = \"http://www.rosettacode.org/mw/api.php?format=json&action=query&generator=categorymembers&gcmtitle=Category:Programming%20Languages&gcmlimit=500&prop=categoryinfo&gcmcontinue=\"\n\n'Get Contents of the API from the Web...\nFunction ScrapeGoat(link)\n    On Error Resume Next\n    ScrapeGoat = \"\"\n    Err.Clear\n    Set objHttp = CreateObject(\"Msxml2.ServerXMLHTTP\")\n    objHttp.Open \"GET\", link, False\n    objHttp.Send\n    If objHttp.Status = 200 And Err = 0 Then ScrapeGoat = objHttp.ResponseText\n    Set objHttp = Nothing\nEnd Function\n\n'HACK: Setup HTML for help of my partner/competitor that is better than me, JavaScript...\nSet HTML = CreateObject(\"HtmlFile\")\nSet HTMLWindow = HTML.ParentWindow\n\n\n    ''''''''''''''''''''\n    ' Main code begins '\n    '..................'\n\nOn Error Resume Next\n\nisComplete = 0    ' 1 -> Complete Already\ncntLoop = 0       ' Counts Number of Loops Done\nSet outputData = CreateObject(\"Scripting.Dictionary\")\n\nDo\n    'Scrape Data From API\n    If cntLoop = 0 Then strData = ScrapeGoat(URL1) Else strData = ScrapeGoat(URL2 & gcmCont)\n    If Len(strData) = 0 Then\n        Set HTML = Nothing\n        WScript.StdErr.WriteLine \"Processing of data stopped because API query failed.\"\n        WScript.Quit(1)\n    End If\n\n    'Parse JSON HACK\n    HTMLWindow.ExecScript \"var json = \" & strData, \"JavaScript\"\n    Set ObjJS = HTMLWindow.json\n\n    Err.Clear    'Test if Query is Complete Already\n    batchCompl = ObjJS.BatchComplete\n    If Err.Number = 438 Then\n        'Query not yet complete. Get gcmContinue instead.\n        gcmCont = ObjJS.[Query-Continue].CategoryMembers.gcmContinue\n    Else\n        isComplete = 1    'Yes!\n    End If\n\n    'HACK #2: Put all language page ids into a JS array to be accessed by VBScript\n    HTMLWindow.ExecScript \"var langs=new Array(); for(var lang in json.query.pages){langs.push(lang);}\" & _\n                          \"var nums=langs.length;\", \"JavaScript\"\n    Set arrLangs = HTMLWindow.langs\n    arrLength = HTMLWindow.nums\n\n    For i = 0 to arrLength - 1\n        BuffStr = \"ObjJS.Query.Pages.[\" & Eval(\"arrLangs.[\" & i & \"]\") & \"]\"\n        EachStr = Eval(BuffStr & \".title\")\n\n        Err.Clear\n        CntLang =  Eval(BuffStr & \".CategoryInfo.Pages\")\n        If InStr(EachStr, \"Category:\") = 1 And Err.Number = 0 Then\n            outputData.Add Replace(EachStr, \"Category:\", \"\", 1, 1), CntLang\n        End If\n    Next\n\n    cntLoop = cntLoop + 1\nLoop While isComplete = 0\n'The outputData now contains the data we need. We should now sort and print it!\n\n'Make a 2D array with copy of outputData\narrRelease = Array()\nReDim arrRelease(UBound(outputData.Keys), 1)\n\noutKeys = outputData.Keys\noutItem = outputData.Items\nFor i = 0 To UBound(outKeys)\n    arrRelease(i, 0) = outKeys(i)\n    arrRelease(i, 1) = outItem(i)\nNext\n\n'Bubble Sort (Greatest to Least Number of Examples)\nFor i = 0 to UBound(arrRelease, 1)\n    For j = 0 to UBound(arrRelease, 1) - 1\n        If arrRelease(j, 1) < arrRelease(j + 1, 1) Then\n            temp1 = arrRelease(j + 1, 0)\n            temp2 = arrRelease(j + 1, 1)\n            arrRelease(j + 1, 0) = arrRelease(j, 0)\n            arrRelease(j + 1, 1) = arrRelease(j, 1)\n            arrRelease(j, 0) = temp1\n            arrRelease(j, 1) = temp2\n        End If\n    Next\nNext\n\n'Save contents to file instead to support Unicode Names\nSet objFSO = CreateObject(\"Scripting.FileSystemObject\")\nSet txtOut = objFSO.CreateTextFile(\".\\OutVBRC.txt\", True, True)\n\ntxtOut.WriteLine \"As of \" & Now & \", RC has \" & UBound(arrRelease) + 1 & \" languages.\"\ntxtOut.WriteLine \"\"\nFor i = 0 to UBound(arrRelease)\n    txtOut.WriteLine arrRelease(i, 1) & \" Examples - \" & arrRelease(i, 0)\nNext\n\n'Successfully Done\u00a0:)\nSet HTML = Nothing\nSet objFSO = Nothing\nWScript.Quit(0)\n\n\nSome Parts of Output as of December 31, 2016:\nAs of 12/31/2016 11:52:05 PM, RC has 624 languages.\n\n917 Examples - Racket\n906 Examples - Python\n894 Examples - Tcl\n859 Examples - J\n853 Examples - Perl 6\n819 Examples - Zkl\n813 Examples - Ruby\n796 Examples - C\n776 Examples - Java\n774 Examples - Go\n766 Examples - Haskell\n760 Examples - REXX\n755 Examples - Perl\n750 Examples - D\n\n.\n.\n.\n\n0 Examples - SheerPower 4GL\n0 Examples - Script Basic\n0 Examples - VRML\n0 Examples - Thistle\n0 Examples - UserRPL\n0 Examples - WML\n0 Examples - VAX Assembly\n", "explain": "Uses the API. Instead of displaying it on the command prompt, the records of the languages are saved on a text file \"OutVBRC.txt\" encoded with Unicode.\n"}, {"task_name": "Rosetta Code/Rank languages by popularity", "task_url": "https://rosettacode.org/wiki/Rosetta_Code/Rank_languages_by_popularity", "task_cat": "Sorting", "lang": "PowerShell", "code": "\nTranslation of: C#\n$get1 = (New-Object Net.WebClient).DownloadString(\"http://www.rosettacode.org/w/api.php?action=query&list=categorymembers&cmtitle=Category:Programming_Languages&cmlimit=700&format=json\")\n$get2 = (New-Object Net.WebClient).DownloadString(\"http://www.rosettacode.org/w/index.php?title=Special:Categories&limit=5000\")\n$match1 = [regex]::matches($get1, \"`\"title`\":`\"Category:(.+?)`\"\")\n$match2 = [regex]::matches($get2, \"title=`\"Category:([^`\"]+?)`\">[^<]+?</a>[^\\(]*\\((\\d+) members\\)\")\n$r = 1\n$langs = $match1 | foreach { $_.Groups[1].Value.Replace(\"\\\",\"\") }\n$res = $match2 | sort -Descending {[Int]$($_.Groups[2].Value)} | foreach {\n    if ($langs.Contains($_.Groups[1].Value))\n    {\n        [pscustomobject]@{\n            Rank = \"$r\"\n            Members =  \"$($_.Groups[2].Value)\"\n            Language = \"$($_.Groups[1].Value)\"           \n        }\n        $r++\n    }\n} \n1..30 | foreach{ \n    [pscustomobject]@{\n        \"Rank 1..30\" = \"$($_)\"\n        \"Members 1..30\" =  \"$($res[$_-1].Members)\"\n        \"Language 1..30\" = \"$($res[$_-1].Language)\"\n        \"Rank 31..60\" = \"$($_+30)\"\n        \"Members 31..60\" =  \"$($res[$_+30].Members)\"\n        \"Language 31..60\" = \"$($res[$_+30].Language)\"\n    } \n}| Format-Table -AutoSize\n\n\nRank 1..30 Members 1..30 Language 1..30 Rank 31..60 Members 31..60 Language 31..60\n---------- ------------- -------------- ----------- -------------- ---------------\n1          887           Tcl            31          405            Seed7          \n2          877           Racket         32          397            Julia          \n3          853           Python         33          389            PL/I           \n4          798           J              34          387            Fortran        \n5          775           Ruby           35          386            ALGOL 68       \n6          766           Perl 6         36          376            Lua            \n7          758           C              37          369            Pascal         \n8          746           Go             38          367            R              \n9          740           D              39          364            Groovy         \n10         710           Perl           40          363            F Sharp        \n11         701           REXX           41          363            Forth          \n12         692           PicoLisp       42          358            PHP            \n13         682           Haskell        43          342            AWK            \n14         675           Mathematica    44          340            Sidef          \n15         652           Java           45          335            MATLAB         \n16         623           Ada            46          325            Liberty BASIC  \n17         591           AutoHotkey     47          297            Octave         \n18         562           C++            48          287            Factor         \n19         551           Common Lisp    49          286            Scheme         \n20         548           Scala          50          285            NetRexx        \n21         532           BBC BASIC      51          284            Oforth         \n22         523           Icon           52          280            Oz             \n23         516           C sharp        53          274            Run BASIC      \n24         508           OCaml          54          272            E              \n25         502           Nim            55          271            Bracmat        \n26         488           PureBasic      56          268            PowerShell     \n27         487           Clojure        57          263            Prolog         \n28         455           Erlang         58          260            Lasso          \n29         441           PARI/GP        59          249            Delphi         \n30         434           JavaScript     60          239            Smalltalk  \n\nPowerShell: Using web scraping[edit]\nTranslation of: Python\n$response = (New-Object Net.WebClient).DownloadString(\"http://rosettacode.org/wiki/Category:Programming_Languages\")\n$languages = [regex]::matches($response,'title=\"Category:(.*?)\">') | foreach {$_.Groups[1].Value}\n\n$response = [Net.WebClient]::new().DownloadString(\"http://rosettacode.org/w/index.php?title=Special:Categories&limit=5000\")\n$response = [regex]::Replace($response,'(\\d+),(\\d+)','$1$2') \n\n$members  = [regex]::matches($response,'<li><a[^>]+>([^<]+)</a>[^(]*[(](\\d+) member[s]?[)]</li>') | foreach { [pscustomobject]@{\n            Members =  [Int]($_.Groups[2].Value)\n            Language = [String]($_.Groups[1].Value)          \n        }} | where {$languages.Contains($_.Language)} | sort -Descending Members\n\nGet-Date -UFormat \"Sample output on %d %B %Y at %R %Z\"\n$members | Select-Object -First 10 | foreach -Begin {$r, $rank, $count = 0, 0,-1} {\n    $r++\n    if ($count -ne $_.Members) {$rank = $r}\n    $count = $_.Members\n    $x = $_.Members.ToString(\"N0\",[System.Globalization.CultureInfo]::CreateSpecificCulture('en-US'))\n    $entry = \"($x entries)\"\n    [String]::Format(\"Rank: {0,2} {1,15} {2}\",$rank,$entry,$_.Language)\n}\n\n\nOutput:\nSample output on 13 septembre 2019 at 12:17 +02\nRank:  1 (1,177 entries) Go\nRank:  2 (1,116 entries) Phix\nRank:  3 (1,107 entries) Perl 6\nRank:  4 (1,104 entries) Julia\nRank:  5 (1,080 entries) Python\nRank:  6 (1,053 entries) Kotlin\nRank:  7 (1,048 entries) Perl\nRank:  8 (1,045 entries) Racket\nRank:  9   (970 entries) C\nRank: 10   (960 entries) Zkl\n\nPowerShell: Using MediaWiki API method[edit]\nTranslation of: Python\n$languages  = @{}\n$Body = @{\n     format = 'json'\n     action = 'query'\n     generator = 'categorymembers'\n     gcmtitle = 'Category:Programming Languages'\n     gcmlimit = '200'\n     gcmcontinue = ''\n     continue = ''\n     prop = 'categoryinfo'\n }\n$params = @{\n     Method = 'Get'\n     Uri = 'http://rosettacode.org/mw/api.php'\n     Body = $Body\n }\nwhile ($true) {\n    $response = Invoke-RestMethod @params\n    $response.query.pages.PSObject.Properties | ForEach-Object {\n        if (($_.value.PSObject.Properties.Name -Contains 'title') -and ($_.value.PSObject.Properties.Name -Contains 'categoryinfo')) {\n            $languages[$_.value.title.replace('Category:', '')] = $_.value.categoryinfo.size\n        }\n    }\n    if  ($response.PSObject.Properties.Name -Contains 'continue') {\n        $gcmcontinue = $response.continue.gcmcontinue\n        $params.Body.gcmcontinue = $gcmcontinue\n    } else {\n        break\n    }\n}\n$members = $languages.GetEnumerator()  | sort -Descending value \nGet-Date -UFormat \"Sample output on %d %B %Y at %R %Z\"\n$members | Select-Object -First 10 | foreach -Begin {$r, $rank, $count = 0, 0,-1} {\n    $r++\n    if ($count -ne $_.Members) {$rank = $r}\n    $count = $_.Value\n    $x = $_.Value.ToString(\"N0\",[System.Globalization.CultureInfo]::CreateSpecificCulture('en-US'))\n    $entry = \"($x entries)\"\n    [String]::Format(\"Rank: {0,2} {1,15} {2}\",$rank, $entry, $_.Name)\n}\n\n\nOutput:\nSample output on 05 juillet 2022 at 19:53 +02\nRank:  1 (1,552 entries) Phix\nRank:  2 (1,545 entries) Wren\nRank:  3 (1,521 entries) Julia\nRank:  4 (1,498 entries) Go\nRank:  5 (1,497 entries) Raku\nRank:  6 (1,456 entries) Perl\nRank:  7 (1,402 entries) Nim\nRank:  8 (1,401 entries) Python\nRank:  9 (1,206 entries) C\nRank: 10 (1,180 entries) J\n\n", "explain": "Output: August 04, 2015\n"}, {"task_name": "Rosetta Code/Rank languages by popularity", "task_url": "https://rosettacode.org/wiki/Rosetta_Code/Rank_languages_by_popularity", "task_cat": "Sorting", "lang": "F#", "code": "\nopen System\nopen System.Text.RegularExpressions\n    \n[<EntryPoint>]\nlet main argv =\n    let rosettacodeSpecialCategoriesAddress =\n        \"http://www.rosettacode.org/mw/index.php?title=Special:Categories&limit=5000\"\n    let rosettacodeProgrammingLaguagesAddress =\n        \"http://rosettacode.org/wiki/Category:Programming_Languages\"\n\n    let getWebContent (url :string)  =\n        using (new System.Net.WebClient()) (fun x -> x.DownloadString url)\n\n    let regexForTitleCategoryFollowedOptionallyByMembercount =\n        new Regex(\"\"\"\n            title=\"Category: (?<Name> [^\"]* ) \">    # capture the name of the category\n            (                   # group begin for optional part\n                [^(]*           # ignore up to next open paren (on this line)\n                \\(              # verbatim open paren\n                    (?<Number>\n                        \\d+     # a number (= some digits)\n                    )\n                    \\s+         # whitespace\n                    member(s?)  # verbatim text members (maybe singular)\n                \\)              # verbatim closing paren\n            )?                  # end of optional part\n            \"\"\", // \" <- Make syntax highlighting happy\n            RegexOptions.IgnorePatternWhitespace ||| RegexOptions.ExplicitCapture)\n    let matchesForTitleCategoryFollowedOptionallyByMembercount str =\n        regexForTitleCategoryFollowedOptionallyByMembercount.Matches(str)\n\n    let languages =\n        matchesForTitleCategoryFollowedOptionallyByMembercount\n            (getWebContent rosettacodeProgrammingLaguagesAddress)\n        |> Seq.cast\n        |> Seq.map (fun (m: Match) -> (m.Groups.Item(\"Name\").Value, true))\n        |> Map.ofSeq\n\n    let entriesWithCount =\n        let parse str = match Int32.TryParse(str) with | (true, n) -> n | (false, _) -> -1\n        matchesForTitleCategoryFollowedOptionallyByMembercount\n            (getWebContent rosettacodeSpecialCategoriesAddress)\n        |> Seq.cast\n        |> Seq.map (fun (m: Match) ->\n            (m.Groups.Item(\"Name\").Value, parse (m.Groups.Item(\"Number\").Value)))\n        |> Seq.filter (fun p -> (snd p) > 0 &&  Map.containsKey (fst p) languages)\n        |> Seq.sortBy (fun x -> -(snd x))\n        \n\n    Seq.iter2 (fun i x -> printfn \"%4d. %s\" i x)\n        (seq { 1 .. 20 })\n        (entriesWithCount |> Seq.map (fun x -> sprintf \"%3d - %s\" (snd x) (fst x)))\n    0\n\n\n   1. 721 - Tcl\n   2. 665 - Python\n   3. 647 - C\n   4. 626 - PicoLisp\n   5. 622 - J\n   6. 588 - Go\n   7. 588 - Ruby\n   8. 585 - D\n   9. 569 - Perl 6\n  10. 565 - Ada\n  11. 555 - Mathematica\n  12. 535 - Perl\n  13. 533 - Haskell\n  14. 514 - BBC BASIC\n  15. 505 - REXX\n  16. 491 - Java\n  17. 480 - OCaml\n  18. 469 - PureBasic\n  19. 462 - Unicon\n  20. 430 - AutoHotkey\n", "explain": "Showing top 20 as of 2013-04-02\n"}, {"task_name": "Rosetta Code/Rank languages by popularity", "task_url": "https://rosettacode.org/wiki/Rosetta_Code/Rank_languages_by_popularity", "task_cat": "Sorting", "lang": "Groovy", "code": "\ndef html = new URL('http://rosettacode.org/mw/index.php?title=Special:Categories&limit=5000').getText([\n        connectTimeout:500,\n        readTimeout:15000,\n        requestProperties: [ 'User-Agent': 'Firefox/2.0.0.4']])\ndef count = [:]\n(html =~ '<li><a[^>]+>([^<]+)</a>[^(]*[(](\\\\d+) member[s]*[)]</li>').each { match, language, members ->\n    count[language] = (members as int)\n}\ncount.sort { v1, v2 -> v2.value <=> v1.value }.eachWithIndex { value, index -> println \"${index + 1} $value\" }\n\n\n1 Tcl=766\n2 Racket=726\n3 Python=712\n4 Programming Tasks=695\n5 C=681\n6 Perl 6=649\n...\n48 Groovy=323\n", "explain": "Output:\n"}, {"task_name": "Rosetta Code/Rank languages by popularity", "task_url": "https://rosettacode.org/wiki/Rosetta_Code/Rank_languages_by_popularity", "task_cat": "Sorting", "lang": "AWK", "code": "\nWorks with: Gawk\nBy using the API[edit]\n\nfunction join(array, start, end, sep,    result, i) {\n        result = array[start]\n        for (i = start + 1; i <= end; i++)\n            result = result sep array[i]\n        return result\n}\n\nfunction trim(str) {\n        gsub(/^[[:blank:]]+|[[:blank:]\\n]+$/, \"\", str)\n        return str\n}\n\nfunction http2var(      site,path,server,j,output) {\n\n        RS = ORS = \"\\r\\n\"\n\n        site = \"rosettacode.org\"\n        path = \"/mw/api.php\" \\\n            \"?action=query\" \\\n            \"&generator=categorymembers\" \\\n            \"&gcmtitle=Category:Programming%20Languages\" \\\n            \"&gcmlimit=500\" \\\n            (gcmcontinue \"\" ? \"&gcmcontinue=\" gcmcontinue : \"\") \\\n            \"&prop=categoryinfo\" \\\n            \"&format=txt\"\n\n        server = \"/inet/tcp/0/\" site \"/80\"\n        print \"GET \" path \" HTTP/1.0\" |& server\n        print \"Host: \" site |& server\n        print \"\" |& server\n        while ((server |& getline) > 0) {\n            if($0 != 0) {\n                j++\n                output[j] = $0\n            }\n        }\n        close(server)\n        if(length(output) == 0)\n            return -1\n        else\n            return join(output, 1, j, \"\\n\")\n}\n\nfunction parse(webpage  ,c,a,i,b,e,pages) {\n\n       # Check for API continue code ie. a new page of results available\n        match(webpage, \"gcmcontinue[]] =>[^)]+[^)]\", a)\n        if(a[0] != \"\") {\n            split(a[0], b, \">\")\n            gcmcontinue = trim(b[2])\n        } else gcmcontinue = \"\"\n\n        c = split(webpage, a, \"[[][0-9]{1,7}[]]\")\n\n        while(i++ < c) {\n            if(match(a[i], /[pages]/)) {\n                match(a[i], \"pages[]] =>[^[]+[^[]\", b)\n                split(b[0], e, \">\")\n                pages = trim(e[2]) + 0\n            } else pages = 0\n            if(match(a[i], /[title]/)) {\n                match(a[i], \"title[]] =>[^[]+[^[]\", b)\n                split(b[0], e, \":\")\n                e[2] = trim(e[2])\n                if ( substr(e[2], length(e[2]), 1) == \")\" )\n                    e[2] = trim( substr(e[2], 1, length(e[2]) - 1) )\n                if(length(e[2]) > 0)\n                    G[e[2]] = pages\n            }\n        }\n}\n\nBEGIN {\n\n        parse( http2var() )     # First 500\n        while ( gcmcontinue != \"\" )\n            parse( http2var() ) # Next 500, etc\n\n        # https://www.gnu.org/software/gawk/manual/html_node/Controlling-Scanning.html\n        PROCINFO[\"sorted_in\"] = \"@val_type_desc\"\n        for ( language in G )\n            print ++i \". \" language \" - \" G[language]\n\n}\n\n\nOutput from 26 May 2015:\n1. Tcl - 867\n2. Racket - 863\n3. Python - 828\n4. J - 777\n5. Ruby - 769\n6. Perl 6 - 755\n7. C - 751\n...\n570. NQP - 0\n571. AspectC++ - 0\n572. Cilk - 0\n573. PL/M - 0\n574. Agda2 - 0\n\n", "explain": "This is the third solution. The first solution used web scraping with an external program ns for networking. The second solution used the Rosetta Code API instead of web scraping, but continued use of ns which for unknown reasons didn't work correctly. This solution uses native gawk networking to connect to the API at 500 items per request (\"gmcontinue\").\n"}]