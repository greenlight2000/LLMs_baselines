[{"task_name": "Repeat a string", "task_url": "https://rosettacode.org/wiki/Repeat_a_string", "task_cat": "String manipulation", "lang": "Python", "code": "\n\"ha\" * 5  # ==> \"hahahahaha\"\n\n5 * \"ha\"  # ==> \"hahahahaha\"\nUsing a Function[edit]\ndef repeat(s, times):\n    return s * times\n\nprint(repeat(\"ha\", 5))\n\nOutput:\nhahahahaha\nUsing Lambda[edit]\nx = lambda a: a * 5\nprint(x(\"ha\"))\n\nOutput:\nhahahahaha\n", "explain": "\"Characters\" are just strings of length one.\nthe other way also works:\n"}, {"task_name": "Repeat a string", "task_url": "https://rosettacode.org/wiki/Repeat_a_string", "task_cat": "String manipulation", "lang": "C", "code": "\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar * string_repeat( int n, const char * s ) {\n  size_t slen = strlen(s);\n  char * dest = malloc(n*slen+1);\n\n  int i; char * p;\n  for ( i=0, p = dest; i < n; ++i, p += slen ) {\n    memcpy(p, s, slen);\n  }\n  *p = '\\0';\n  return dest;\n}\n\nint main() {\n  char * result = string_repeat(5, \"ha\");\n  puts(result);\n  free(result);\n  return 0;\n}\n\n\n...\nchar *string_repeat(const char *str, int n)\n{\n   char *pa, *pb;\n   size_t slen = strlen(str);\n   char *dest = malloc(n*slen+1);\n\n   pa = dest + (n-1)*slen;\n   strcpy(pa, str);\n   pb = --pa + slen; \n   while (pa>=dest) *pa-- = *pb--;\n   return dest;\n}\n\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar * char_repeat( int n, char c ) {\n  char * dest = malloc(n+1);\n  memset(dest, c, n);\n  dest[n] = '\\0';\n  return dest;\n}\n\nint main() {\n  char * result = char_repeat(5, '*');\n  puts(result);\n  free(result);\n  return 0;\n}\n\n\n", "explain": "A variation.\nTo repeat a single character\nIf you use GLib, simply use g_strnfill ( gsize length, gchar fill_char ) function.\n"}, {"task_name": "Repeat a string", "task_url": "https://rosettacode.org/wiki/Repeat_a_string", "task_cat": "String manipulation", "lang": "C++", "code": "\n#include <string>\n#include <iostream>\n\nstd::string repeat( const std::string &word, int times ) {\n   std::string result ;\n   result.reserve(times*word.length()); // avoid repeated reallocation\n   for ( int a = 0 ; a < times ; a++ ) \n      result += word ;\n   return result ;\n}\n\nint main( ) {\n   std::cout << repeat( \"Ha\" , 5 ) << std::endl ;\n   return 0 ;\n}\n\n\n#include <string>\n#include <iostream>\n\nint main( ) {\n   std::cout << std::string( 5, '*' ) << std::endl ;\n   return 0 ;\n}\n\nrecursive version[edit]\n#include <string>\n#include <iostream>\n \nstd::string repeat( const std::string &word, uint times ) {\n  return\n    times == 0 ? \"\" :\n    times == 1 ? word :\n    times == 2 ? word + word :\n    repeat(repeat(word, times / 2), 2) +\n    repeat(word, times % 2);\n}\n\nint main( ) {\n   std::cout << repeat( \"Ha\" , 5 ) << std::endl ;\n   return 0 ;\n}\n\n", "explain": "To repeat a single character:\n"}, {"task_name": "Repeat a string", "task_url": "https://rosettacode.org/wiki/Repeat_a_string", "task_cat": "String manipulation", "lang": "Java", "code": "\n\n\"ha\".repeat(5);\n\n\nString[] strings = new String[5];\nArrays.fill(strings, \"ha\");\nStringBuilder repeated = new StringBuilder();\nfor (String string\u00a0: strings)\n    repeated.append(string);\n\nString string = \"ha\";\nStringBuilder repeated = new StringBuilder();\nint count = 5;\nwhile (count-- > 0)\n    repeated.append(string);\n\nWorks with: Java version 1.5+\n\npublic static String repeat(String str, int times) {\n    StringBuilder sb = new StringBuilder(str.length() * times);\n    for (int i = 0; i < times; i++)\n        sb.append(str);\n    return sb.toString();\n}\n\npublic static void main(String[] args) {\n    System.out.println(repeat(\"ha\", 5));\n}\n\npublic static String repeat(String str, int times) {\n   return new String(new char[times]).replace(\"\\0\", str);\n}\n\n", "explain": "There are a few ways to achieve this in Java.\nStarting with Java 11 you can use the String.repeat method.\nWhich, if you view its implementation, is just using the Arrays.fill method.\nAnd if you look at the 'Arrays.fill' implementation, it's just a for-loop, which is likely the most idiomatic approach.\n\nOr\nBefore Java 11 there was no method or operator to do this in Java, so you had to do it yourself.\nOr even shorter:\nIn Apache Commons Lang, there is a StringUtils.repeat() method.\n"}, {"task_name": "Repeat a string", "task_url": "https://rosettacode.org/wiki/Repeat_a_string", "task_cat": "String manipulation", "lang": "C#", "code": "\nstring s = \"\".PadLeft(5, 'X').Replace(\"X\", \"ha\");\n\n\nstring s = new String('X', 5).Replace(\"X\", \"ha\");\n\n\nstring s = String.Join(\"ha\", new string[5 + 1]);\n\n\nstring s = String.Concat(Enumerable.Repeat(\"ha\", 5));\n\n\nstring s = \"\".PadLeft(5, '*');\n\n\nstring s = new String('*', 5);\n\n", "explain": "or (with .NET 2+)\nor (with .NET 2+)\nor (with .NET 4+)\nTo repeat a single character:\nor (with .NET 2+)\n"}, {"task_name": "Repeat a string", "task_url": "https://rosettacode.org/wiki/Repeat_a_string", "task_cat": "String manipulation", "lang": "JavaScript", "code": "\nExtending the String prototype[edit]\n\nString.prototype.repeat = function(n) {\n    return new Array(1 + (n || 0)).join(this);\n}\n\nconsole.log(\"ha\".repeat(5));  // hahahahaha\n\nconsole.log(\"ha\".repeat(5));  // hahahahaha\nRepetition by Egyptian multiplication[edit]\n\n(() => {\n    'use strict';\n\n    // replicate\u00a0:: Int -> String -> String\n    const replicate = (n, s) => {\n        let v = [s],\n            o = [];\n        if (n < 1) return o;\n        while (n > 1) {\n            if (n & 1) o = o + v;\n            n >>= 1;\n            v = v + v;\n        }\n        return o.concat(v);\n    };\n\n\n    return replicate(5000, \"ha\")\n})();\nConcat . replicate[edit]\n\n(() => {\n    'use strict';\n\n    // repeat\u00a0:: Int -> String -> String\n    const repeat = (n, s) => \n        concat(replicate(n, s));\n        \n\n    // GENERIC FUNCTIONS ------------------------------------------------------\n\n    // concat\u00a0:: [[a]] -> [a] | [String] -> String\n    const concat = xs =>\n        xs.length > 0\u00a0? (() => {\n            const unit = typeof xs[0] === 'string'\u00a0? ''\u00a0: [];\n            return unit.concat.apply(unit, xs);\n        })()\u00a0: [];\n\n    // replicate\u00a0:: Int -> a -> [a]\n    const replicate = (n, x) =>\n        Array.from({\n            length: n\n        }, () => x);\n\n\n    // TEST -------------------------------------------------------------------\n    return repeat(5, 'ha');\n})();\n\nOutput:\nhahahahaha\n", "explain": "This solution creates an empty array of length n+1, then uses the array's join method to effectively concatenate the string n times. Note that extending the prototype of built-in objects is not a good idea if the code is to run in a shared workspace.\nAs of ES6, `repeat` is built in, so this can be written as: \nFor larger numbers of repetitions, however, it proves significantly faster to progressively double a copy of the original string (concatenating it with itself). Intermediate stages of doubling are appended to an accumulator wherever required for binary composition of the target number. \nSee the technique of 'Egyptian Multiplication' described in the Rhind Mathematical Papyrus at the British Museum.\nOr, more generically, we could derive repeat as the composition of concat and replicate\n"}, {"task_name": "Repeat a string", "task_url": "https://rosettacode.org/wiki/Repeat_a_string", "task_cat": "String manipulation", "lang": "Visual_Basic_.NET", "code": "\n\nDebug.Print(Replace(Space(5), \" \", \"Ha\"))\n\nOutput:\nHaHaHaHaHa\n\n\nDebug.Print(StrDup(5, \"x\"))\nDebug.Print(\"\".PadRight(5, \"x\"))\nDebug.Print(\"\".PadLeft(5, \"x\"))\n\nOutput:\nxxxxx\nxxxxx\nxxxxx\n\n", "explain": "Repeat a string\nRepeat a character\n"}, {"task_name": "Repeat a string", "task_url": "https://rosettacode.org/wiki/Repeat_a_string", "task_cat": "String manipulation", "lang": "SQL", "code": "\nselect rpad('', 10, 'ha')\n", "explain": ""}, {"task_name": "Repeat a string", "task_url": "https://rosettacode.org/wiki/Repeat_a_string", "task_cat": "String manipulation", "lang": "PHP", "code": "\nstr_repeat(\"ha\", 5)\n", "explain": ""}, {"task_name": "Repeat a string", "task_url": "https://rosettacode.org/wiki/Repeat_a_string", "task_cat": "String manipulation", "lang": "Fortran", "code": "\nWorks with: Fortran version 90 and later\nprogram test_repeat\n\n  write (*, '(a)') repeat ('ha', 5)\n\nend program test_repeat\n\n\nhahahahaha\n\n", "explain": "Output:\n"}, {"task_name": "Repeat a string", "task_url": "https://rosettacode.org/wiki/Repeat_a_string", "task_cat": "String manipulation", "lang": "Scratch", "code": "\n\n", "explain": "This example requires making variables named \"String\", \"Count\", and \"Repeated\" first.\n\n"}, {"task_name": "Repeat a string", "task_url": "https://rosettacode.org/wiki/Repeat_a_string", "task_cat": "String manipulation", "lang": "Go", "code": "\nfmt.Println(strings.Repeat(\"ha\", 5))        // ==> \"hahahahaha\"\n\n\nfmt.Println(strings.Repeat(string('h'), 5)) // prints hhhhh\n\n", "explain": "There is no special way to repeat a single character, other than to convert the character to a string.  The following works:\n"}, {"task_name": "Repeat a string", "task_url": "https://rosettacode.org/wiki/Repeat_a_string", "task_cat": "String manipulation", "lang": "Delphi", "code": "\n\nfunction RepeatString(const s: string; count: cardinal): string;\nvar\n  i: Integer;\nbegin\n  for i := 1 to count do\n    Result := Result + s;\nend;\n\nWriteln(RepeatString('ha',5));\n\n\nWriteln( StringOfChar('a',5) );\n\n\nfunction RepeatStr(const s: string; i: Cardinal): string;\nbegin\n  if i = 0 then\n    result := ''\n  else\n   result := s + RepeatStr(s, i-1)\nend;\n\n\nStrUtils.DupeString\n\n", "explain": "Repeat a string\nRepeat a character\nUsing recursion\nBuilt in RTL function:\n"}, {"task_name": "Repeat a string", "task_url": "https://rosettacode.org/wiki/Repeat_a_string", "task_cat": "String manipulation", "lang": "Ruby", "code": "\n\"ha\" * 5  # ==> \"hahahahaha\"\n", "explain": ""}, {"task_name": "Repeat a string", "task_url": "https://rosettacode.org/wiki/Repeat_a_string", "task_cat": "String manipulation", "lang": "Rust", "code": "\nstd::iter::repeat(\"ha\").take(5).collect::<String>(); // ==> \"hahahahaha\"\n\n\"ha\".repeat(5); // ==> \"hahahahaha\"\n", "explain": "Since 1.16:\n"}, {"task_name": "Repeat a string", "task_url": "https://rosettacode.org/wiki/Repeat_a_string", "task_cat": "String manipulation", "lang": "Swift", "code": "\nThe Builtin Way[edit]\nprint(String(repeating:\"*\", count: 5))\n\nOutput:*****\nFunctions[edit]\nfunc * (left:String, right:Int) -> String {\n     return String(repeating:left, count:right)\n}\n\nprint (\"HA\" * 5)\n\nOutput:\n\nExtensions[edit]\n\nextension String {\n  // Slower version\n  func repeatString(n: Int) -> String {\n    return Array(count: n, repeatedValue: self).joinWithSeparator(\"\")\n  }\n  \n  // Faster version\n  // benchmarked with a 1000 characters and 100 repeats the fast version is approx 500 000 times faster\u00a0:-)\n  func repeatString2(n:Int) -> String {\n    var result = self\n    for _ in 1 ..< n {\n      result.appendContentsOf(self)   // Note that String.appendContentsOf is up to 10 times faster than \"result += self\"\n    }\n    return result\n  }\n}\n\nprint( \"ha\".repeatString(5) )\nprint( \"he\".repeatString2(5) )\n\nOutput:\nhahahahaha\nhehehehehe\n\n\nString(count:5, repeatedValue:\"*\" as Character)\n\nBitwise Iterative Version[edit]\n\nextension String {\n  func repeatBiterative(count: Int) -> String {\n        var reduceCount = count\n        var result = \"\"\n        var doubled = self\n        while reduceCount\u00a0!= 0 {\n            if reduceCount & 1 == 1 {\n                result.appendContentsOf(doubled)\n            }\n            reduceCount >>= 1\n            if reduceCount\u00a0!= 0 {\n                doubled.appendContentsOf(doubled)\n            }\n        }\n        return result\n    }\n} \n\n\"He\".repeatBiterative(5)\n\nOutput:\n\"HeHeHeHeHe\"\n\n", "explain": "HAHAHAHAHA\n\nUsing extensions to do the repetition which makes for an easier syntax when repeating Strings, and using String.extend() to get faster evaluation.\nTo repeat a single character:\nNote that using the String version on a string of 1 Character, or the repeat single Character version is timewise close to the same. No point in using the Character version for efficiency (tested with repeating up to 100 000 times).\nThe following version is an enhanced version of the recursive ActionScript, where we're using bit operation along with iterative doubling of the string to get to the correctly repeated version of the text in the most effective manner without recursion.  When benchmarked against the plain iterative version in previous section, this version is marginally better, but only my a very small percentage. The critical factor for making the repeat function effective when using larger strings (1000 characters) and multiple repeats (1000 repeats\u00a0:-) ) was to to exchange the '+=' with 'String.extend' method.\n"}, {"task_name": "Repeat a string", "task_url": "https://rosettacode.org/wiki/Repeat_a_string", "task_cat": "String manipulation", "lang": "R", "code": "\nstrrep(\"ha\", 5)\n", "explain": ""}, {"task_name": "Repeat a string", "task_url": "https://rosettacode.org/wiki/Repeat_a_string", "task_cat": "String manipulation", "lang": "COBOL", "code": "\n\nIDENTIFICATION DIVISION.\nPROGRAM-ID. REPEAT-PROGRAM.\nDATA DIVISION.\nWORKING-STORAGE SECTION.\n77  HAHA         PIC A(10).\nPROCEDURE DIVISION.\n    MOVE ALL 'ha' TO HAHA.\n    DISPLAY HAHA.\n    STOP RUN.\n\n\nOutput:\nhahahahaha\n", "explain": "Virtually a one-liner.\n"}, {"task_name": "Repeat a string", "task_url": "https://rosettacode.org/wiki/Repeat_a_string", "task_cat": "String manipulation", "lang": "Visual_FoxPro", "code": "\n\n? REPLICATE(\"HO\", 3)\n\nHOHOHO\n", "explain": "Use the built in function REPLICATE(string, number):\nproduces\n"}, {"task_name": "Repeat a string", "task_url": "https://rosettacode.org/wiki/Repeat_a_string", "task_cat": "String manipulation", "lang": "Visual_Basic", "code": "\nWorks with: Visual Basic version VB6 Standard\n\nPublic Function StrRepeat(s As String, n As Integer) As String\n\tDim r As String, i As Integer\n\tr = \"\"\n\tFor i = 1 To n\n\t\tr = r & s\n\tNext i\n\tStrRepeat = r\nEnd Function\n \nDebug.Print StrRepeat(\"ha\", 5)\n\nOutput:\nhahahahaha\n\nPublic Function StrRepeat(sText As String, n As Integer) As String\n\tStrRepeat = Replace(String(n, \"*\"), \"*\", sText)\nEnd Function\n\nDebug.Print String(5, \"x\")\n\nOutput:\nxxxxx\n", "explain": "Repeat a string\nAn alternative method: \nRepeat a character\n"}, {"task_name": "Repeat a string", "task_url": "https://rosettacode.org/wiki/Repeat_a_string", "task_cat": "String manipulation", "lang": "Ada", "code": "\n\nwith Ada.Strings.Fixed;  use Ada.Strings.Fixed;\nwith Ada.Text_IO;        use Ada.Text_IO;\n\nprocedure String_Multiplication is\nbegin\n   Put_Line (5 * \"ha\");\nend String_Multiplication;\n\n\nhahahahaha\n\n", "explain": "In Ada multiplication of an universal integer to string gives the desired result. Here is an example of use:\nSample output:\n"}, {"task_name": "Repeat a string", "task_url": "https://rosettacode.org/wiki/Repeat_a_string", "task_cat": "String manipulation", "lang": "Julia", "code": "\nWorks with: Julia version 1.0\n@show \"ha\" ^ 5\n\n# The ^ operator is really just call to the `repeat` function\n@show repeat(\"ha\", 5)\n", "explain": ""}, {"task_name": "Repeat a string", "task_url": "https://rosettacode.org/wiki/Repeat_a_string", "task_cat": "String manipulation", "lang": "Kotlin", "code": "\nfun main(args: Array<String>) {\n    println(\"ha\".repeat(5))\n}\n\noperator fun String.times(n: Int) = this.repeat(n)\n\nfun main(args: Array<String>) = println(\"ha\" * 5)\n", "explain": "Or more fancy:\n"}, {"task_name": "Repeat a string", "task_url": "https://rosettacode.org/wiki/Repeat_a_string", "task_cat": "String manipulation", "lang": "Perl", "code": "\n\"ha\" x 5\n", "explain": ""}, {"task_name": "Repeat a string", "task_url": "https://rosettacode.org/wiki/Repeat_a_string", "task_cat": "String manipulation", "lang": "Objective-C", "code": "\n\n@interface NSString (RosettaCodeAddition)\n- (NSString *) repeatStringByNumberOfTimes: (NSUInteger) times;\n@end\n\n@implementation NSString (RosettaCodeAddition)\n- (NSString *) repeatStringByNumberOfTimes: (NSUInteger) times {\n    return [@\"\" stringByPaddingToLength:[self length]*times withString:self startingAtIndex:0];\n}\n@end\n\n    // Instantiate an NSString by sending an NSString literal our new\n    // -repeatByNumberOfTimes: selector.\n    NSString *aString = [@\"ha\" repeatStringByNumberOfTimes:5];\n\n    // Display the NSString.\n    NSLog(@\"%@\", aString);\n", "explain": "Objective-C allows developers to extend existing an existing class by adding additional methods to the class without needing to subclass. These extensions are called categories. Category methods are available to all instances of the class, as well as any instances of its subclasses.\nThis task provides us with an opportunity to visit this aspect of the language feature.\nWe will extend NSString, the de facto Objective-C string class in environments that are either compatible with or descend directly from the OPENSTEP specification, such as GNUstep and Mac OS X, respectively, with a method that accomplishes the described task.\nNow, let's put it to use:\n"}, {"task_name": "Repeat a string", "task_url": "https://rosettacode.org/wiki/Repeat_a_string", "task_cat": "String manipulation", "lang": "Prolog", "code": "\n%repeat(Str,Num,Res).\nrepeat(Str,1,Str).\nrepeat(Str,Num,Res):-\n    Num1 is Num-1,\n    repeat(Str,Num1,Res1),\n    string_concat(Str, Res1, Res).\nalternative using DCG strings[edit]\n\nWorks with: SWI-Prolog version 7\n:- system:set_prolog_flag(double_quotes,chars) .\n\nrepeat(SOURCEz0,COUNT0,TARGETz)\n:-\nprolog:phrase(repeat(SOURCEz0,COUNT0),TARGETz)\n.\n\n%! repeat(SOURCEz0,COUNT0)//2\n\nrepeat(_SOURCEz0_,0)\n-->\n! ,\n[]\n.\n\nrepeat(SOURCEz0,COUNT0)\n-->\nSOURCEz0 ,\n{ COUNT is COUNT0 - 1 } ,\nrepeat(SOURCEz0,COUNT)\n.\n\nOutput:\n/*\n?- repeat(\"ha\",5,TARGETz) .\nTARGETz = [h, a, h, a, h, a, h, a, h, a].\n\n?-\n*/\n\n:- begin_tests(basic) .\n\n:- system:set_prolog_flag(double_quotes,chars) .\n\ntest('1',[])\n:-\nrepeat(\"a\",2,\"aa\")\n.\n\ntest('2',[])\n:-\nrepeat(\"ha\",2,\"haha\")\n.\n\ntest('3',[])\n:-\nrepeat(\"ha\",3,\"hahaha\")\n.\n\ntest('4',[])\n:-\nrepeat(\"\",3,\"\")\n.\n\ntest('5',[])\n:-\nrepeat(\"ha\",0,\"\")\n.\n\ntest('6',[])\n:-\nrepeat(\"ha\",1,\"ha\")\n.\n\n:- end_tests(basic) .\n\n", "explain": "This tail-recursive DCG implemention\nis more efficient than anything using lists:append .\n"}, {"task_name": "Repeat a string", "task_url": "https://rosettacode.org/wiki/Repeat_a_string", "task_cat": "String manipulation", "lang": "Lua", "code": "\nfunction repeats(s, n) return n > 0 and s .. repeats(s, n-1) or \"\" end\n\nstring.rep(s,n)\n", "explain": "Or use native string library function\n"}, {"task_name": "Repeat a string", "task_url": "https://rosettacode.org/wiki/Repeat_a_string", "task_cat": "String manipulation", "lang": "Scala", "code": "\n\"ha\" * 5 // ==> \"hahahahaha\"\n", "explain": ""}, {"task_name": "Repeat a string", "task_url": "https://rosettacode.org/wiki/Repeat_a_string", "task_cat": "String manipulation", "lang": "Transact-SQL", "code": "\nselect REPLICATE( 'ha', 5 )\n", "explain": ""}, {"task_name": "Repeat a string", "task_url": "https://rosettacode.org/wiki/Repeat_a_string", "task_cat": "String manipulation", "lang": "D", "code": "\n\nimport std.stdio, std.array;\n\nvoid main() {\n    writeln(\"ha\".replicate(5));\n}\n\n\nimport std.stdio;\n\nvoid main() {\n    char[] chars;     // create the dynamic array\n    chars.length = 5; // set the length\n    chars[] = '*';    // set all characters in the string to '*'\n    writeln(chars);\n}\n\n", "explain": "Repeating a string:\nRepeating a character with vector operations:\n"}, {"task_name": "Repeat a string", "task_url": "https://rosettacode.org/wiki/Repeat_a_string", "task_cat": "String manipulation", "lang": "Haskell", "code": "\n\nconcat $ replicate 5 \"ha\"\n\n\n[1..5] >> \"ha\"\n\n\n[1..5] *> \"ha\"\n\n\ncycle \"ha\"\n\n\nreplicate 5 '*'\n\n\nrepString :: String -> Int -> String\nrepString s n =\n  let rep x = xs\n        where\n          xs = mappend x xs\n  in take (n * length s) (rep s)\n\nmain :: IO ()\nmain = print $ repString \"ha\" 5\n\n\nOutput:\n\"hahahahaha\"\n\nimport Data.Tuple (swap)\nimport Data.List (unfoldr)\nimport Control.Monad (join)\n\n-- BY RHIND PAPYRUS 'EGYPTIAN' OR 'ETHIOPIAN' MULTIPLICATION ------------------\nrepString :: Int -> String -> String\nrepString n s =\n  foldr\n    (\\(d, x) a ->\n        if d > 0 -- Is this power of 2 needed for the binary recomposition\u00a0?\n          then mappend a x\n          else a)\n    mempty $\n  zip\n    (unfoldr\n       (\\h ->\n           if h > 0\n             then Just $ swap (quotRem h 2) -- Binary decomposition of n\n             else Nothing)\n       n)\n    (iterate (join mappend) s) -- Iterative duplication ( mappend to self )\n\n-- TEST -----------------------------------------------------------------------\nmain :: IO ()\nmain = print $ repString 500 \"ha\"\n\n", "explain": "For a string of finite length:\nOr with list-monad (a bit obscure):\nOr with Control.Applicative:\nFor an infinitely long string:\nTo repeat a single character:\nOr, unpacking the mechanism of replicate a little, and using a mappend-based rep in lieu of the cons-based repeat, so that we can skip a subsequent concat:\nAs the number of repetitions grows, however, it may become more efficient to repeat by progressive duplication (mappend to self), mappending to an accumulator only where required for binary composition of the target length. (i.e. Rhind Papyrus 'Egyptian' or 'Ethiopian' multiplication):\n"}, {"task_name": "Repeat a string", "task_url": "https://rosettacode.org/wiki/Repeat_a_string", "task_cat": "String manipulation", "lang": "VBScript", "code": "\nWorks with: Windows Script Host version *\n' VBScript has a String() function that can repeat a character a given number of times\n' but this only works with single characters (or the 1st char of a string):\nWScript.Echo String(10, \"123\")\t' Displays \"1111111111\"\n\n' To repeat a string of chars, you can use either of the following \"hacks\"...\nWScript.Echo Replace(Space(10), \" \", \"Ha\")\nWScript.Echo Replace(String(10, \"X\"), \"X\", \"Ha\")\n", "explain": ""}, {"task_name": "Repeat a string", "task_url": "https://rosettacode.org/wiki/Repeat_a_string", "task_cat": "String manipulation", "lang": "Scheme", "code": "\n(define (string-repeat n str)\n  (apply string-append (vector->list (make-vector n str))))\n\n(define (string-repeat n str)\n\t(fold string-append \"\" (make-list n str)))\n(string-repeat 5 \"ha\") ==> \"hahahahaha\"\n\n(make-string 5 #\\*)\n", "explain": "with SRFI 1:\nTo repeat a single character:\n"}, {"task_name": "Repeat a string", "task_url": "https://rosettacode.org/wiki/Repeat_a_string", "task_cat": "String manipulation", "lang": "PowerShell", "code": "\n\"ha\" * 5  # ==> \"hahahahaha\"\n", "explain": ""}, {"task_name": "Repeat a string", "task_url": "https://rosettacode.org/wiki/Repeat_a_string", "task_cat": "String manipulation", "lang": "Logo", "code": "\nto copies :n :thing [:acc \"||]\n  if :n = 0 [output :acc]\n  output (copies :n-1 :thing combine :acc :thing)\nend\n\nshow cascade 5 [combine \"ha\u00a0?] \"||   \u00a0; hahahahaha\n\nto copies :n :thing :acc\n  if :n = 0 [output :acc]\n  output (copies :n-1 :thing combine :acc :thing)\nend\n\nprint copies 5 \"ha \"||\n", "explain": "or using cascade:\nLhogho doesn't have cascade (yet), nor does it have the initialise a missing parameter capability demonstrated by the [:acc \"||] above.\n"}, {"task_name": "Repeat a string", "task_url": "https://rosettacode.org/wiki/Repeat_a_string", "task_cat": "String manipulation", "lang": "ColdFusion", "code": "\n<cfset word = 'ha'>\n<Cfset n = 5>\n<Cfoutput>\n<Cfloop from=\"1\" to=\"#n#\" index=\"i\">#word#</Cfloop>\n</Cfoutput>\n\n", "explain": ""}, {"task_name": "Repeat a string", "task_url": "https://rosettacode.org/wiki/Repeat_a_string", "task_cat": "String manipulation", "lang": "ABAP", "code": "\n\nreport z_repeat_string.\n\nwrite repeat( val = `ha`  occ = 5 ).\n\n\nOutput:\nhahahahaha\n\n", "explain": "This works for ABAP Version 7.40 and above\n"}, {"task_name": "Repeat a string", "task_url": "https://rosettacode.org/wiki/Repeat_a_string", "task_cat": "String manipulation", "lang": "F#", "code": "\n> String.replicate 5 \"ha\";;\nval it : string = \"hahahahaha\"\n\n\n> String.Concat( Array.create 5 \"ha\" );;\nval it : string = \"hahahahaha\"\n\n", "explain": "Or\n"}, {"task_name": "Repeat a string", "task_url": "https://rosettacode.org/wiki/Repeat_a_string", "task_cat": "String manipulation", "lang": "Groovy", "code": "\n println 'ha' * 5\n\n", "explain": ""}, {"task_name": "Repeat a string", "task_url": "https://rosettacode.org/wiki/Repeat_a_string", "task_cat": "String manipulation", "lang": "AWK", "code": "\nfunction repeat( str, n,    rep, i )\n{\n    for( ; i<n; i++ )\n        rep = rep str   \n    return rep\n}\n\nBEGIN {\n    print repeat( \"ha\", 5 )\n}\n\n", "explain": ""}]