[{"task_name": "Generate lower case ASCII alphabet", "task_url": "https://rosettacode.org/wiki/Generate_lower_case_ASCII_alphabet", "task_cat": "String manipulation", "lang": "Python", "code": "\n# From the standard library:\nfrom string import ascii_lowercase\n\n# Generation:\nlower = [chr(i) for i in range(ord('a'), ord('z') + 1)]\n\nWorks with: Python version 3.7\n'''Enumeration a-z'''\n\nfrom inspect import signature\nimport enum\n\n\n# TEST ----------------------------------------------------\ndef main():\n    '''Testing particular instances of a general pattern:\n    '''\n    print(\n        fTable(__doc__ + ':\\n')(repr)(showList)(\n            uncurry(enumFromTo)\n        )([\n            ('a', 'z'),\n            ('\u03b1', '\u03c9'),\n            ('\u05d0', '\u05ea'),\n            (1, 10),\n            (round((5**(1 / 2) - 1) / 2, 5), 5),\n            ('\ud83c\udf31', '\ud83c\udf42')\n        ])\n    )\n\n\n# GENERIC -------------------------------------------------\n\n# enumFromTo\u00a0:: Enum a => a -> a -> [a]\ndef enumFromTo(m):\n    '''Enumeration of values [m..n]'''\n    def go(x, y):\n        t = type(m)\n        i = fromEnum(x)\n        d = 0 if t\u00a0!= float else (x - i)\n        return list(map(\n            lambda x: toEnum(t)(d + x),\n            range(i, 1 + fromEnum(y))\n        ) if int\u00a0!= t else range(x, 1 + y))\n    return lambda n: go(m, n)\n\n\n# fromEnum\u00a0:: Enum a => a -> Int\ndef fromEnum(x):\n    '''Index integer for enumerable value.'''\n    Enum = enum.Enum\n    return ord(x) if isinstance(x, str) else (\n        x.value if isinstance(x, Enum) else int(x)\n    )\n\n\n# toEnum\u00a0:: Type -> Int -> a\ndef toEnum(t):\n    '''Enumerable value from index integer'''\n    dct = {\n        int: int,\n        float: float,\n        str: chr,\n        bool: bool\n    }\n    return lambda x: dct[t](x) if t in dct else t(x)\n\n\n# uncurry\u00a0:: (a -> b -> c) -> ((a, b) -> c)\ndef uncurry(f):\n    '''A function over a tuple, derived from\n       a vanilla or curried function.\n    '''\n    if 1 < len(signature(f).parameters):\n        return lambda xy: f(*xy)\n    else:\n        return lambda xy: f(xy[0])(xy[1])\n\n\n# FORMATTING -------------------------------------------------\n\n# fTable\u00a0:: String -> (a -> String) ->\n#                     (b -> String) -> (a -> b) -> [a] -> String\ndef fTable(s):\n    '''Heading -> x display function -> fx display function ->\n                     f -> xs -> tabular string.\n    '''\n    def go(xShow, fxShow, f, xs):\n        ys = [xShow(x) for x in xs]\n        w = max(map(len, ys))\n        return s + '\\n' + '\\n'.join(map(\n            lambda x, y: y.rjust(w, ' ') + ' -> ' + fxShow(f(x)),\n            xs, ys\n        ))\n    return lambda xShow: lambda fxShow: lambda f: lambda xs: go(\n        xShow, fxShow, f, xs\n    )\n\n\n# showList\u00a0:: [a] -> String\ndef showList(xs):\n    '''Stringification of a list.'''\n    return '[' + ','.join(str(x) for x in xs) + ']'\n\n\n# MAIN ---\nif __name__ == '__main__':\n    main()\n\nOutput:\nEnumeration a-z:\n\n  ('a', 'z') -> [a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z]\n  ('\u03b1', '\u03c9') -> [\u03b1,\u03b2,\u03b3,\u03b4,\u03b5,\u03b6,\u03b7,\u03b8,\u03b9,\u03ba,\u03bb,\u03bc,\u03bd,\u03be,\u03bf,\u03c0,\u03c1,\u03c2,\u03c3,\u03c4,\u03c5,\u03c6,\u03c7,\u03c8,\u03c9]\n  ('\u05d0', '\u05ea') -> [\u05d0,\u05d1,\u05d2,\u05d3,\u05d4,\u05d5,\u05d6,\u05d7,\u05d8,\u05d9,\u05da,\u05db,\u05dc,\u05dd,\u05de,\u05df,\u05e0,\u05e1,\u05e2,\u05e3,\u05e4,\u05e5,\u05e6,\u05e7,\u05e8,\u05e9,\u05ea]\n     (1, 10) -> [1,2,3,4,5,6,7,8,9,10]\n(0.61803, 5) -> [0.61803,1.61803,2.61803,3.61803,4.61803,5.61803]\n  ('\ud83c\udf31', '\ud83c\udf42') -> [\ud83c\udf31,\ud83c\udf32,\ud83c\udf33,\ud83c\udf34,\ud83c\udf35,\ud83c\udf36,\ud83c\udf37,\ud83c\udf38,\ud83c\udf39,\ud83c\udf3a,\ud83c\udf3b,\ud83c\udf3c,\ud83c\udf3d,\ud83c\udf3e,\ud83c\udf3f,\ud83c\udf40,\ud83c\udf41,\ud83c\udf42]\n", "explain": "Or, as a particular instance of a more general enumeration pattern:\n"}, {"task_name": "Generate lower case ASCII alphabet", "task_url": "https://rosettacode.org/wiki/Generate_lower_case_ASCII_alphabet", "task_cat": "String manipulation", "lang": "C", "code": "\n#include <stdlib.h>\n\n#define N 26\n\nint main() {\n    unsigned char lower[N];\n\n    for (size_t i = 0; i < N; i++) {\n        lower[i] = i + 'a';\n    }\n\n    return EXIT_SUCCESS;\n}\n\n", "explain": ""}, {"task_name": "Generate lower case ASCII alphabet", "task_url": "https://rosettacode.org/wiki/Generate_lower_case_ASCII_alphabet", "task_cat": "String manipulation", "lang": "C++", "code": "\n\nWorks with: C++11\n#include <string>\n#include <numeric>\n\nint main() {\n    std::string lower(26,' ');\n\n    std::iota(lower.begin(), lower.end(), 'a');\n}\n\n", "explain": "C++ can do the task in the identical way as C, or else, it can use a STL function.\n"}, {"task_name": "Generate lower case ASCII alphabet", "task_url": "https://rosettacode.org/wiki/Generate_lower_case_ASCII_alphabet", "task_cat": "String manipulation", "lang": "Java", "code": "\nchar[] lowerAlphabet() {\n    char[] letters = new char[26];\n    for (int code = 97; code < 123; code++)\n        letters[code - 97] = (char) code;\n    return letters;\n}\n\nabcdefghijklmnopqrstuvwxyz\n\n\npublic class LowerAscii {\n\n    public static void main(String[] args) {\n        StringBuilder sb = new StringBuilder(26);\n        for (char ch = 'a'; ch <= 'z'; ch++)\n            sb.append(ch);\n        System.out.printf(\"lower ascii: %s, length: %s\", sb, sb.length());\n    }\n}\n\n\nlower ascii: abcdefghijklmnopqrstuvwxyz, length: 26\n", "explain": "An alternate implementation\nOutput:\n"}, {"task_name": "Generate lower case ASCII alphabet", "task_url": "https://rosettacode.org/wiki/Generate_lower_case_ASCII_alphabet", "task_cat": "String manipulation", "lang": "C#", "code": "\n\nusing System;\nusing System.Linq;\n\ninternal class Program\n{\n    private static void Main()\n    {\n        Console.WriteLine(String.Concat(Enumerable.Range('a', 26).Select(c => (char)c)));\n    }\n}\n\nOutput:abcdefghijklmnopqrstuvwxyz\n\nnamespace RosettaCode.GenerateLowerCaseASCIIAlphabet\n{\n    using System;\n    using System.Collections.Generic;\n\n    internal class Program\n    {\n        private static IEnumerable<char> Alphabet\n        {\n            get\n            {\n                for (var character = 'a'; character <= 'z'; character++)\n                {\n                    yield return character;\n                }\n            }\n        }\n\n        private static void Main()\n        {\n            Console.WriteLine(string.Join(string.Empty, Alphabet));\n        }\n    }\n}\n\nOutput:abcdefghijklmnopqrstuvwxyz\n", "explain": "Simple Linq 1 liner solution\nOld style Property and enumerable based solution \n"}, {"task_name": "Generate lower case ASCII alphabet", "task_url": "https://rosettacode.org/wiki/Generate_lower_case_ASCII_alphabet", "task_cat": "String manipulation", "lang": "JavaScript", "code": "\nES5[edit]\n\n(function (cFrom, cTo) {\n\n  function cRange(cFrom, cTo) {\n    var iStart = cFrom.charCodeAt(0);\n\n    return Array.apply(\n      null, Array(cTo.charCodeAt(0) - iStart + 1)\n    ).map(function (_, i) {\n\n      return String.fromCharCode(iStart + i);\n\n    });\n  }\n\n  return cRange(cFrom, cTo);\n\n})('a', 'z');\n\n\n[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n\nES6[edit]\n\n(function (lstRanges) {\n\n  function cRange(cFrom, cTo) {\n    var iStart = cFrom.codePointAt(0);\n\n    return Array.apply(\n      null, Array(cTo.codePointAt(0) - iStart + 1)\n    ).map(function (_, i) {\n\n      return String.fromCodePoint(iStart + i);\n\n    });\n  }\n\n  return lstRanges.map(function (lst) {\n    return cRange(lst[0], lst[1]);\n  });\n\n})([\n  ['a', 'z'],\n  ['\ud83d\udc10', '\ud83d\udc1f']\n]);\n\n\n[[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"],\n [\"\ud83d\udc10\", \"\ud83d\udc11\", \"\ud83d\udc12\", \"\ud83d\udc13\", \"\ud83d\udc14\", \"\ud83d\udc15\", \"\ud83d\udc16\", \"\ud83d\udc17\", \"\ud83d\udc18\", \"\ud83d\udc19\", \"\ud83d\udc1a\", \"\ud83d\udc1b\", \"\ud83d\udc1c\", \"\ud83d\udc1d\", \"\ud83d\udc1e\", \"\ud83d\udc1f\"]]\n\nWorks with: ECMAScript version 6\nvar letters = []\nfor (var i = 97; i <= 122; i++) {\n    letters.push(String.fromCodePoint(i))\n}\n\n\n(() => {\n    // enumFromTo\u00a0:: Enum a => a -> a -> [a]\n    const enumFromTo = (m, n) => {\n        const [intM, intN] = [m, n].map(fromEnum),\n            f = typeof m === 'string' ? (\n                (_, i) => chr(intM + i)\n            ) : (_, i) => intM + i;\n        return Array.from({\n            length: Math.floor(intN - intM) + 1\n        }, f);\n    };\n\n\n    // GENERIC FUNCTIONS ------------------------------------------------------\n\n    // compose\u00a0:: (b -> c) -> (a -> b) -> (a -> c)\n    const compose = (f, g) => x => f(g(x));\n\n    // chr\u00a0:: Int -> Char\n    const chr = x => String.fromCodePoint(x);\n\n    // ord\u00a0:: Char -> Int\n    const ord = c => c.codePointAt(0);\n\n    // fromEnum\u00a0:: Enum a => a -> Int\n    const fromEnum = x => {\n        const type = typeof x;\n        return type === 'boolean' ? (\n            x ? 1 : 0\n        ) : type === 'string' ? ord(x) : x;\n    };\n\n    // map\u00a0:: (a -> b) -> [a] -> [b]\n    const map = (f, xs) => xs.map(f);\n\n    // show\u00a0:: a -> String\n    const show = x => JSON.stringify(x);\n\n    // uncurry\u00a0:: Function -> Function\n    const uncurry = f => args => f.apply(null, args);\n\n    // unlines\u00a0:: [String] -> String\n    const unlines = xs => xs.join('\\n');\n\n    // unwords\u00a0:: [String] -> String\n    const unwords = xs => xs.join(' ');\n\n    // TEST -------------------------------------------------------------------\n    return unlines(map(compose(unwords, uncurry(enumFromTo)), [\n        ['a', 'z'],\n        ['\u03b1', '\u03c9'],\n        ['\u05d0', '\u05ea'],\n        ['\ud83d\udc10', '\ud83d\udc1f']\n    ]));\n})();\n\n\nOutput:\na b c d e f g h i j k l m n o p q r s t u v w x y z\n\u03b1 \u03b2 \u03b3 \u03b4 \u03b5 \u03b6 \u03b7 \u03b8 \u03b9 \u03ba \u03bb \u03bc \u03bd \u03be \u03bf \u03c0 \u03c1 \u03c2 \u03c3 \u03c4 \u03c5 \u03c6 \u03c7 \u03c8 \u03c9\n\u05d0 \u05d1 \u05d2 \u05d3 \u05d4 \u05d5 \u05d6 \u05d7 \u05d8 \u05d9 \u05da \u05db \u05dc \u05dd \u05de \u05df \u05e0 \u05e1 \u05e2 \u05e3 \u05e4 \u05e5 \u05e6 \u05e7 \u05e8 \u05e9 \u05ea\n\ud83d\udc10 \ud83d\udc11 \ud83d\udc12 \ud83d\udc13 \ud83d\udc14 \ud83d\udc15 \ud83d\udc16 \ud83d\udc17 \ud83d\udc18 \ud83d\udc19 \ud83d\udc1a \ud83d\udc1b \ud83d\udc1c \ud83d\udc1d \ud83d\udc1e \ud83d\udc1f\n", "explain": "In ES5, we can use String.fromCharCode(), which suffices for Unicode characters which can be represented with one 16 bit number.\nFor Unicode characters beyond this range, in ES5 we have to enter a pair of Unicode number escapes.\nReturns:\nIn ES6, the new String.fromCodePoint() method can can return 4-byte characters (such as Emoji, for example) as well as the usual 2-byte characters.\nOutput:\nOr, if we want to write a more general ES6 function:\n"}, {"task_name": "Generate lower case ASCII alphabet", "task_url": "https://rosettacode.org/wiki/Generate_lower_case_ASCII_alphabet", "task_cat": "String manipulation", "lang": "Visual_Basic_.NET", "code": "\nWorks with: Visual Basic .NET version 9.0+\n\nModule LowerASCII\n\n    Sub Main()\n        Dim alphabets As New List(Of Char)\n        For i As Integer = Asc(\"a\") To Asc(\"z\")\n            alphabets.Add(Chr(i))\n        Next\n        Console.WriteLine(String.Join(\"\", alphabets.ToArray))\n    End Sub\n\nEnd Module\n\nOutput:\nabcdefghijklmnopqrstuvwxyz\n\n", "explain": "Used Asc(Char) [returns Integer value of Char passed] and Chr(Integer) [returns Char value of Integer passed] functions. \nString.Join() is used to print the list, converted to array, without looping through it.\n"}, {"task_name": "Generate lower case ASCII alphabet", "task_url": "https://rosettacode.org/wiki/Generate_lower_case_ASCII_alphabet", "task_cat": "String manipulation", "lang": "PHP", "code": "\n<?php\n$lower = range('a', 'z');\nvar_dump($lower);\n?>\n\n", "explain": ""}, {"task_name": "Generate lower case ASCII alphabet", "task_url": "https://rosettacode.org/wiki/Generate_lower_case_ASCII_alphabet", "task_cat": "String manipulation", "lang": "Fortran", "code": "\nWorks with: Fortran version 90 and later\n  character(26) :: alpha\n  integer :: i\n\n  do i = 1, 26\n    alpha(i:i) = achar(iachar('a') + i - 1)\n  end do\n\n", "explain": ""}, {"task_name": "Generate lower case ASCII alphabet", "task_url": "https://rosettacode.org/wiki/Generate_lower_case_ASCII_alphabet", "task_cat": "String manipulation", "lang": "Go", "code": "\nfunc loweralpha() string {\n\tp := make([]byte, 26)\n\tfor i := range p {\n\t\tp[i] = 'a' + byte(i)\n\t}\n\treturn string(p)\n}\n\n", "explain": ""}, {"task_name": "Generate lower case ASCII alphabet", "task_url": "https://rosettacode.org/wiki/Generate_lower_case_ASCII_alphabet", "task_cat": "String manipulation", "lang": "ARM_Assembly", "code": "\nTranslation of: Z80 Assembly\n\nProgramStart:\n\tmov sp,#0x03000000\t\t\t;Init Stack Pointer\n\t\n\tmov r4,#0x04000000  \t\t        ;DISPCNT -LCD Control\n\tmov r2,#0x403    \t\t\t;4= Layer 2 on / 3= ScreenMode 3\n\tstr r2,[r4]         \t                ;hardware specific routine, activates Game Boy's bitmap mode\n\n\tmov r0,#0x61\t\t\t\t;ASCII \"a\"\n\tmov r2,#ramarea\n\tmov r1,#26\t\t\t\t\t\n\t\nrep_inc_stosb:                                  ;repeatedly store a byte into memory, incrementing the destination and the value stored\n                                               \u00a0;    each time.\n\tstrB r0,[r2]\n\tadd r0,r0,#1\n\tadd r2,r2,#1\n\tsubs r1,r1,#1\n\tbne rep_inc_stosb\n\tmov r0,#255\t\t\n\tstrB r0,[r2]\t\t\t\t;store a 255 terminator into r1\n\t\n\tmov r1,#ramarea\n\tbl PrintString                          ;Prints a 255-terminated string using a pre-defined bitmap font. Code omitted for brevity\n\nforever:\n        b forever                               ;halt the cpu\n\nOutput:\n\n", "explain": "Uses VASM syntax. PrintString routine courtesy of Chibiakumas\nHardware: Game Boy Advance (ARM7TDMI)\nThis code generates the lower case ASCII set, stores it in RAM as a string literal, and prints that string to the screen.\nPicture of output\n"}, {"task_name": "Generate lower case ASCII alphabet", "task_url": "https://rosettacode.org/wiki/Generate_lower_case_ASCII_alphabet", "task_cat": "String manipulation", "lang": "MIPS_Assembly", "code": "\nmain:\nli $t0,'a'\nli $t1,26\nloop:\njal PrintChar ;prints the low 8 bits of $t0 as an ascii character (unimplemented routine)\nnop           ;branch delay slot\nsubiu $t1,1\nbne $t1,loop\naddiu $t0,1\n\nend_program:\nj end_program ;halt the cpu - we're done\nnop\n", "explain": ""}, {"task_name": "Generate lower case ASCII alphabet", "task_url": "https://rosettacode.org/wiki/Generate_lower_case_ASCII_alphabet", "task_cat": "String manipulation", "lang": "Delphi", "code": "\nprogram atoz;\n\nvar\n  ch : char;\n\nbegin\n  for ch in ['a'..'z'] do\n  begin\n    write(ch);\n  end;\nend.\n\nOutput:abcdefghijklmnopqrstuvwxyz\n", "explain": ""}, {"task_name": "Generate lower case ASCII alphabet", "task_url": "https://rosettacode.org/wiki/Generate_lower_case_ASCII_alphabet", "task_cat": "String manipulation", "lang": "Ruby", "code": "\np ('a' .. 'z').to_a\np [*'a' .. 'z']\n", "explain": ""}, {"task_name": "Generate lower case ASCII alphabet", "task_url": "https://rosettacode.org/wiki/Generate_lower_case_ASCII_alphabet", "task_cat": "String manipulation", "lang": "Rust", "code": "\nfn main() {\n    // An iterator over the lowercase alpha's\n    let ascii_iter = (0..26)\n        .map(|x| (x + b'a') as char);\n \n    println!(\"{:?}\", ascii_iter.collect::<Vec<char>>());\n}\n\nOutput:\n['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n\n", "explain": ""}, {"task_name": "Generate lower case ASCII alphabet", "task_url": "https://rosettacode.org/wiki/Generate_lower_case_ASCII_alphabet", "task_cat": "String manipulation", "lang": "Swift", "code": "\nvar letters = [Character]()\n\nfor i in 97...122 {\n    let char = Character(UnicodeScalar(i))\n    letters.append(char)\n}\n", "explain": ""}, {"task_name": "Generate lower case ASCII alphabet", "task_url": "https://rosettacode.org/wiki/Generate_lower_case_ASCII_alphabet", "task_cat": "String manipulation", "lang": "R", "code": "\n# From constants built into R:\nletters\n\n# Or generate the same with:\nsapply(97:122, intToUtf8)\n", "explain": ""}, {"task_name": "Generate lower case ASCII alphabet", "task_url": "https://rosettacode.org/wiki/Generate_lower_case_ASCII_alphabet", "task_cat": "String manipulation", "lang": "COBOL", "code": "\n\nidentification division.\nprogram-id. lower-case-alphabet-program.\ndata division.\nworking-storage section.\n01  ascii-lower-case.\n    05 lower-case-alphabet pic a(26).\n    05 character-code      pic 999.\n    05 loop-counter        pic 99.\nprocedure division.\ncontrol-paragraph.\n    perform add-next-letter-paragraph varying loop-counter from 1 by 1\n    until loop-counter is greater than 26.\n    display lower-case-alphabet upon console.\n    stop run.\nadd-next-letter-paragraph.\n    add 97 to loop-counter giving character-code.\n    move function char(character-code) to lower-case-alphabet(loop-counter:1).\n\n\nOutput:\nabcdefghijklmnopqrstuvwxyz\n", "explain": "Strings in COBOL are mutable and can be subscripted: each time we go round the loop, we assign to a one-character-long section of the string we are building.\n"}, {"task_name": "Generate lower case ASCII alphabet", "task_url": "https://rosettacode.org/wiki/Generate_lower_case_ASCII_alphabet", "task_cat": "String manipulation", "lang": "Visual_Basic", "code": "\nWorks with: Visual Basic version 6\n\n", "explain": "The #VBA example works in VB6 as well, without any change.\n"}, {"task_name": "Generate lower case ASCII alphabet", "task_url": "https://rosettacode.org/wiki/Generate_lower_case_ASCII_alphabet", "task_cat": "String manipulation", "lang": "Ada", "code": "\n\n   type Lower_Case is new Character range 'a' .. 'z';\n\n\n   type Arr_Type is array (Integer range <>) of Lower_Case;\n   A : Arr_Type (1 .. 26) := \"abcdefghijklmnopqrstuvwxyz\";\n\n\n   B : Arr_Type (1 .. 26);\nbegin\n   B(B'First) := 'a';\n   for I in B'First .. B'Last-1 loop\n      B(I+1) := Lower_Case'Succ(B(I));\n   end loop; -- now all the B(I) are different\n\n", "explain": "We start with a strong type definition: A character range that can only hold lower-case letters:\nNow we define an array type and initialize the Array A of that type with the 26 letters:\nStrong typing would catch two errors: (1) any upper-case letters or other symbols in the string assigned to A, and (2) too many or too few letters assigned to A. However, a letter might still appear twice (or more) in A, at the cost of one or more other letters. Array B is safe even against such errors:\n"}, {"task_name": "Generate lower case ASCII alphabet", "task_url": "https://rosettacode.org/wiki/Generate_lower_case_ASCII_alphabet", "task_cat": "String manipulation", "lang": "Julia", "code": "\nWorks with: Julia version 0.6\n@show collect('a':'z')\n@show join('a':'z')\n\n\nOutput:\ncollect('a':'z') = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\njoin('a':'z') = \"abcdefghijklmnopqrstuvwxyz\"\n", "explain": ""}, {"task_name": "Generate lower case ASCII alphabet", "task_url": "https://rosettacode.org/wiki/Generate_lower_case_ASCII_alphabet", "task_cat": "String manipulation", "lang": "Kotlin", "code": "\n// version 1.3.72\n\nfun main() {\n    val alphabet = CharArray(26) { (it + 97).toChar() }.joinToString(\"\")\n\n    println(alphabet)\n}\n\n\nOutput:\nabcdefghijklmnopqrstuvwxyz\n\n", "explain": ""}, {"task_name": "Generate lower case ASCII alphabet", "task_url": "https://rosettacode.org/wiki/Generate_lower_case_ASCII_alphabet", "task_cat": "String manipulation", "lang": "Perl", "code": "\nprint 'a'..'z'\n\n", "explain": ""}, {"task_name": "Generate lower case ASCII alphabet", "task_url": "https://rosettacode.org/wiki/Generate_lower_case_ASCII_alphabet", "task_cat": "String manipulation", "lang": "Prolog", "code": "\n\na_to_z(From, To, L)\u00a0:-\n\tmaplist(atom_codes, [From, To], [[C_From], [C_To]]),\n\tbagof([C], between(C_From, C_To, C), L1),\n\tmaplist(atom_codes,L, L1).\n\n\u00a0?- a_to_z(a, z, L).\nL = [a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z].\n\n", "explain": "Works with SWI-Prolog 6.5.3\nOutput\u00a0:\n"}, {"task_name": "Generate lower case ASCII alphabet", "task_url": "https://rosettacode.org/wiki/Generate_lower_case_ASCII_alphabet", "task_cat": "String manipulation", "lang": "Lua", "code": "\nto table[edit]\nfunction getAlphabet ()\n    local letters = {}\n    for ascii = 97, 122 do table.insert(letters, string.char(ascii)) end\n    return letters\nend\n\nlocal alpha = getAlphabet()\nprint(alpha[25] .. alpha[1] .. alpha[25])\n\n\nOutput:\nyay\nto string[edit]\n#!/usr/bin/env luajit\nlocal function ascii(f,t) local tab={} for i=f,t do tab[#tab+1]=string.char(i) end\n\treturn table.concat(tab)\nend\nprint(ascii(97,122))\n\n\nOutput:\n> ./lowercaseascii.lua  \nabcdefghijklmnopqrstuvwxyz\n", "explain": ""}, {"task_name": "Generate lower case ASCII alphabet", "task_url": "https://rosettacode.org/wiki/Generate_lower_case_ASCII_alphabet", "task_cat": "String manipulation", "lang": "Scala", "code": "\nLibrary: Scala\nobject Abc extends App {\n  val lowAlpha = 'a' to 'z' //That's all\n  // Now several tests\n  assert(lowAlpha.toSeq == Seq('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\n    'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'),\n    \"No complete lowercase alphabet.\")\n  assert(lowAlpha.size == 26, \"No 26 characters in alphabet\")\n  assert(lowAlpha.start == 'a', \"Character 'a' not first char!\u00a0???\")\n  assert(lowAlpha.head == 'a', \"Character 'a' not heading!\u00a0???\")\n  assert(lowAlpha.head == lowAlpha(0), \"Heading char is not first char.\")\n  assert(lowAlpha contains 'n', \"Character n not present.\")\n  assert(lowAlpha.indexOf('n') == 13, \"Character n not on the 14th position.\")\n  assert(lowAlpha.last == lowAlpha(25), \"Expected character (z)on the last and 26th pos.\")\n\n  println(s\"Successfully completed without errors. [within ${\n    scala.compat.Platform.currentTime - executionStart\n  } ms]\")\n}\nOutput:\nSuccessfully completed without errors. [within 675 ms]\n\nProcess finished with exit code 0\n\n", "explain": ""}, {"task_name": "Generate lower case ASCII alphabet", "task_url": "https://rosettacode.org/wiki/Generate_lower_case_ASCII_alphabet", "task_cat": "String manipulation", "lang": "D", "code": "\n\nimport std.ascii: lowercase;\n\nvoid main() {}\n\n\nvoid main() {\n    char['z' - 'a' + 1] arr;\n\n    foreach (immutable i, ref c; arr)\n        c = 'a' + i;\n}\n\n\nvoid main() {\n    import std.range, std.algorithm, std.array;\n\n    char[26] arr = 26.iota.map!(i => cast(char)('a' + i)).array;\n}\n\n\nvoid main() {\n    char[] arr;\n\n    foreach (immutable char c; 'a' .. 'z' + 1)\n        arr ~= c;\n\n    assert(arr == \"abcdefghijklmnopqrstuvwxyz\");\n}\n\n", "explain": "The lower case ASCII letters of the Phobos standard library:\nThe generation of the ASCII alphabet array:\nAn alternative version:\nAnother version:\n"}, {"task_name": "Generate lower case ASCII alphabet", "task_url": "https://rosettacode.org/wiki/Generate_lower_case_ASCII_alphabet", "task_cat": "String manipulation", "lang": "Haskell", "code": "\nlower = ['a' .. 'z']\n\nmain = print lower\n\n\nalpha :: String\nalpha = enumFromTo 'a' 'z'\n\nmain :: IO ()\nmain = print alpha\n\n\nOutput:\n\"abcdefghijklmnopqrstuvwxyz\"\n", "explain": "Or, equivalently:\n"}, {"task_name": "Generate lower case ASCII alphabet", "task_url": "https://rosettacode.org/wiki/Generate_lower_case_ASCII_alphabet", "task_cat": "String manipulation", "lang": "PL/SQL", "code": "\nDeclare\n sbAlphabet  varchar2(100);\nBegin\n  For nuI in 97..122 loop\n      if sbAlphabet is null then\n         sbAlphabet:=chr(nuI);\n      Else\n         sbAlphabet:=sbAlphabet||','||chr(nuI);\n      End if;\n  End loop;\n  Dbms_Output.Put_Line(sbAlphabet);\nEnd;\n\nPL/SQL block, executed in 0 ms\n\na,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z\n\nTotal execution time 16 ms\n\n", "explain": "Output:\n"}, {"task_name": "Generate lower case ASCII alphabet", "task_url": "https://rosettacode.org/wiki/Generate_lower_case_ASCII_alphabet", "task_cat": "String manipulation", "lang": "VBScript", "code": "\nFunction ASCII_Sequence(range)\n\tarr = Split(range,\"..\")\n\tFor i = Asc(arr(0)) To Asc(arr(1))\n\t\tASCII_Sequence = ASCII_Sequence & Chr(i) & \" \"\n\tNext\nEnd Function\n\nWScript.StdOut.Write ASCII_Sequence(WScript.Arguments(0))\nWScript.StdOut.WriteLine\n\nOutput:\nC:\\>cscript /nologo ascii_sequence.vbs a..z\na b c d e f g h i j k l m n o p q r s t u v w x y z\n\nC:\\>cscript /nologo ascii_sequence.vbs A..F\nA B C D E F\n", "explain": ""}, {"task_name": "Generate lower case ASCII alphabet", "task_url": "https://rosettacode.org/wiki/Generate_lower_case_ASCII_alphabet", "task_cat": "String manipulation", "lang": "Scheme", "code": "\nWorks with: Gauche Scheme\n(map integer->char (iota 26 (char->integer #\\a)))\n\nOutput:\n(#\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\m\n #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\u #\\v #\\w #\\x #\\y #\\z)\n\n", "explain": ""}, {"task_name": "Generate lower case ASCII alphabet", "task_url": "https://rosettacode.org/wiki/Generate_lower_case_ASCII_alphabet", "task_cat": "String manipulation", "lang": "PowerShell", "code": "\n$asString = 97..122 | ForEach-Object -Begin {$asArray = @()} -Process {$asArray += [char]$_} -End {$asArray -join('')}\n$asString\n\n\nOutput:\nabcdefghijklmnopqrstuvwxyz\n\n$asArray\n\n\nOutput:\na\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv\nw\nx\ny\nz\n\n\n-join [Char[]] (97..122)\n\nOutput:\nabcdefghijklmnopqrstuvwxyz\n\n\n-join ('a'..'z')\n\nOutput:\nabcdefghijklmnopqrstuvwxyz\n\n", "explain": "Alternative:\nAlternative as of PowerShell-v6.0.0rc:\n"}, {"task_name": "Generate lower case ASCII alphabet", "task_url": "https://rosettacode.org/wiki/Generate_lower_case_ASCII_alphabet", "task_cat": "String manipulation", "lang": "Logo", "code": "\n\nshow map \"char iseq 97 122\n\nshow map \"char apply \"iseq map \"ascii [a z]\n\n\nOutput:\n[a b c d e f g h i j k l m n o p q r s t u v w x y z]\n", "explain": "Straightforward, assuming ASCII:\nSlightly less straightforward, but without the magic numbers:\nSame output either way:\n"}, {"task_name": "Generate lower case ASCII alphabet", "task_url": "https://rosettacode.org/wiki/Generate_lower_case_ASCII_alphabet", "task_cat": "String manipulation", "lang": "ABAP", "code": "\nExample with simple write statement[edit]\nREPORT lower_case_ascii.\n\nWRITE: / to_lower( sy-abcde ).\n\nExample with / without space using CL_DEMO_OUTPUT class[edit]\nREPORT lower_case_ascii.\n\ncl_demo_output=>new(\n          )->begin_section( |Generate lower case ASCII alphabet|\n          )->write( REDUCE string( INIT out TYPE string\n                                    FOR char = 1 UNTIL char > strlen( sy-abcde )\n                                   NEXT out = COND #( WHEN out IS INITIAL THEN sy-abcde(1)\n                                                      ELSE |{ out } { COND string( WHEN char <> strlen( sy-abcde ) THEN sy-abcde+char(1) ) }| ) )\n          )->write( |Or use the system field: { sy-abcde }|\n          )->display( ).\n\n", "explain": ""}, {"task_name": "Generate lower case ASCII alphabet", "task_url": "https://rosettacode.org/wiki/Generate_lower_case_ASCII_alphabet", "task_cat": "String manipulation", "lang": "F#", "code": "\nlet lower = ['a'..'z']\n\nprintfn \"%A\" lower\n\n", "explain": ""}, {"task_name": "Generate lower case ASCII alphabet", "task_url": "https://rosettacode.org/wiki/Generate_lower_case_ASCII_alphabet", "task_cat": "String manipulation", "lang": "Groovy", "code": "\ndef lower = ('a'..'z')\n\n\nassert 'abcdefghijklmnopqrstuvwxyz' == lower.join('')\n\n", "explain": "Test\n"}, {"task_name": "Generate lower case ASCII alphabet", "task_url": "https://rosettacode.org/wiki/Generate_lower_case_ASCII_alphabet", "task_cat": "String manipulation", "lang": "Zig", "code": "\nconst std = @import(\"std\");\n\npub fn main() !void {\n    const cnt_lower = 26;\n    var lower: [cnt_lower]u8 = undefined;\n    comptime var i = 0;\n    inline while (i < cnt_lower)\u00a0: (i += 1)\n        lower[i] = i + 'a';\n\n    const stdout_wr = std.io.getStdOut().writer();\n    for (lower) |l|\n        try stdout_wr.print(\"{c} \", .{l});\n    try stdout_wr.writeByte('\\n');\n}\n\n\n\n", "explain": ""}, {"task_name": "Generate lower case ASCII alphabet", "task_url": "https://rosettacode.org/wiki/Generate_lower_case_ASCII_alphabet", "task_cat": "String manipulation", "lang": "AWK", "code": "\nWorks with: gawk\n\n# syntax: GAWK -f GENERATE_LOWER_CASE_ASCII_ALPHABET.AWK\nBEGIN {\n    for (i=0; i<=255; i++) {\n      c = sprintf(\"%c\",i)\n      if (c ~ /[[:lower:]]/) {\n        lower_chars = lower_chars c\n      }\n    }\n    printf(\"%s %d: %s\\n\",ARGV[0],length(lower_chars),lower_chars)\n    exit(0)\n}\n\n\nOutput:\ngawk_3_1_8 26: abcdefghijklmnopqrstuvwxyz\ngawk_4_1_0 65: abcdefghijklmnopqrstuvwxyz\u0192soz\u00aa\u00b5\u00ba\u00df\u00e0\u00e1\u00e2a\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00efd\u00f1\u00f2\u00f3\u00f4o\u00f6o\u00f9\u00fa\u00fb\u00fcy_\u00ff\n\n", "explain": "Generate all character codes, and test each one if it matches \nthe POSIX character class for \"lowercase\".\nNote this is dependent on the locale-setting,\nand options, e.g.  --traditional  and  --posix\n"}]