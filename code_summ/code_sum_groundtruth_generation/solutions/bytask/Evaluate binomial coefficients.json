[{"task_name": "Evaluate binomial coefficients", "task_url": "https://rosettacode.org/wiki/Evaluate_binomial_coefficients", "task_cat": "Mathematical operations", "lang": "Python", "code": "\nImperative[edit]\ndef binomialCoeff(n, k):\n    result = 1\n    for i in range(1, k+1):\n        result = result * (n-i+1) / i\n    return result\n\nif __name__ == \"__main__\":\n    print(binomialCoeff(5, 3))\n\n\nOutput:\n10\nFunctional[edit]\nfrom operator import mul\nfrom functools import reduce\n\n\ndef comb(n,r):\n    ''' calculate nCr - the binomial coefficient\n    >>> comb(3,2)\n    3\n    >>> comb(9,4)\n    126\n    >>> comb(9,6)\n    84\n    >>> comb(20,14)\n    38760\n    '''\n \n    if r > n-r:\n        # r = n-r   for smaller intermediate values during computation\n        return ( reduce( mul, range((n - (n-r) + 1), n + 1), 1)\n                 // reduce( mul, range(1, (n-r) + 1), 1) )\n    else:\n        return ( reduce( mul, range((n - r + 1), n + 1), 1)\n                 // reduce( mul, range(1, r + 1), 1) )\n\n\nWorks with: Python version 3.7\n'''Evaluation of binomial coefficients'''\n\nfrom functools import reduce\n\n\n# binomialCoefficient\u00a0:: Int -> Int -> Int\ndef binomialCoefficient(n):\n    '''n choose k, expressed in terms of\n       product and factorial functions.\n    '''\n    return lambda k: product(\n        enumFromTo(1 + k)(n)\n    ) // factorial(n - k)\n\n\n# TEST ----------------------------------------------------\n# main\u00a0:: IO()\ndef main():\n    '''Tests'''\n\n    print(\n        binomialCoefficient(5)(3)\n    )\n\n    # k=0 to k=5, where n=5\n    print(\n        list(map(\n            binomialCoefficient(5),\n            enumFromTo(0)(5)\n        ))\n    )\n\n\n# GENERIC -------------------------------------------------\n\n# enumFromTo\u00a0:: (Int, Int) -> [Int]\ndef enumFromTo(m):\n    '''Integer enumeration from m to n.'''\n    return lambda n: list(range(m, 1 + n))\n\n\n# factorial\u00a0:: Int -> Int\ndef factorial(x):\n    '''The factorial of x, where\n       x is a positive integer.\n    '''\n    return product(enumFromTo(1)(x))\n\n\n# product\u00a0:: [Num] -> Num\ndef product(xs):\n    '''The product of a list of\n       numeric values.\n    '''\n    return reduce(lambda a, b: a * b, xs, 1)\n\n\n# TESTS ---------------------------------------------------\nif __name__ == '__main__':\n    main()\n\n\nOutput:\n10\n[1, 5, 10, 10, 5, 1]\n\nfrom typing import (Callable, List, Any)\nfrom functools import reduce\nfrom operator import mul\n\n\ndef binomialCoefficient(n: int) -> Callable[[int], int]:\n    return lambda k: product(enumFromTo(1 + k)(n)) // factorial(n - k)\n\n\ndef enumFromTo(m: int) -> Callable[[int], List[Any]]:\n    return lambda n: list(range(m, 1 + n))\n\n\ndef factorial(x: int) -> int:\n    return product(enumFromTo(1)(x))\n\n\ndef product(xs: List[Any]) -> int:\n    return reduce(mul, xs, 1)\n\n\nif __name__ == '__main__':\n    print(binomialCoefficient(5)(3))\n    # k=0 to k=5, where n=5\n    print(list(map(binomialCoefficient(5), enumFromTo(0)(5))))\n\n\nOutput:\n10\n[1, 5, 10, 10, 5, 1]\n", "explain": "\nOr, abstracting a little more for legibility and ease of reuse, while currying for ease of mapping and general composition:\nCompare the use of Python comments, (above); with the use of Python type hints, (below). \n"}, {"task_name": "Evaluate binomial coefficients", "task_url": "https://rosettacode.org/wiki/Evaluate_binomial_coefficients", "task_cat": "Mathematical operations", "lang": "C", "code": "\n#include <stdio.h>\n#include <limits.h>\n\n/* We go to some effort to handle overflow situations */\n\nstatic unsigned long gcd_ui(unsigned long x, unsigned long y) {\n  unsigned long t;\n  if (y < x) { t = x; x = y; y = t; }\n  while (y > 0) {\n    t = y;  y = x % y;  x = t;  /* y1 <- x0\u00a0% y0\u00a0; x1 <- y0 */\n  }\n  return x;\n}\n\nunsigned long binomial(unsigned long n, unsigned long k) {\n  unsigned long d, g, r = 1;\n  if (k == 0) return 1;\n  if (k == 1) return n;\n  if (k >= n) return (k == n);\n  if (k > n/2) k = n-k;\n  for (d = 1; d <= k; d++) {\n    if (r >= ULONG_MAX/n) {  /* Possible overflow */\n      unsigned long nr, dr;  /* reduced numerator / denominator */\n      g = gcd_ui(n, d);  nr = n/g;  dr = d/g;\n      g = gcd_ui(r, dr);  r = r/g;  dr = dr/g;\n      if (r >= ULONG_MAX/nr) return 0;  /* Unavoidable overflow */\n      r *= nr;\n      r /= dr;\n      n--;\n    } else {\n      r *= n--;\n      r /= d;\n    }\n  }\n  return r;\n}\n\nint main() {\n    printf(\"%lu\\n\", binomial(5, 3));\n    printf(\"%lu\\n\", binomial(40, 19));\n    printf(\"%lu\\n\", binomial(67, 31));\n    return 0;\n}\n\n\nOutput:\n10\n131282408400\n11923179284862717872\n", "explain": ""}, {"task_name": "Evaluate binomial coefficients", "task_url": "https://rosettacode.org/wiki/Evaluate_binomial_coefficients", "task_cat": "Mathematical operations", "lang": "C++", "code": "\ndouble Factorial(double nValue)\n   {\n       double result = nValue;\n       double result_next;\n       double pc = nValue;\n       do\n       {\n           result_next = result*(pc-1);\n           result = result_next;\n           pc--;\n       }while(pc>2);\n       nValue = result;\n       return nValue;\n   }\n\ndouble binomialCoefficient(double n, double k)\n   {\n       if (abs(n - k) < 1e-7 || k  < 1e-7) return 1.0;\n       if( abs(k-1.0) < 1e-7 || abs(k - (n-1)) < 1e-7)return n;\n       return Factorial(n) /(Factorial(k)*Factorial((n - k)));\n   }\n\n\nint main()\n{\n    cout<<\"The Binomial Coefficient of 5, and 3, is equal to: \"<< binomialCoefficient(5,3);\n    cin.get();\n}\n\n\nOutput:\nThe Binomial Coefficient of 5, and 3, is equal to: 10\n", "explain": "Implementation:\n"}, {"task_name": "Evaluate binomial coefficients", "task_url": "https://rosettacode.org/wiki/Evaluate_binomial_coefficients", "task_cat": "Mathematical operations", "lang": "Java", "code": "\npublic class Binomial {\n\n    // precise, but may overflow and then produce completely incorrect results\n    private static long binomialInt(int n, int k) {\n        if (k > n - k)\n            k = n - k;\n\n        long binom = 1;\n        for (int i = 1; i <= k; i++)\n            binom = binom * (n + 1 - i) / i;\n        return binom;\n    }\n\n    // same as above, but with overflow check\n    private static Object binomialIntReliable(int n, int k) {\n        if (k > n - k)\n            k = n - k;\n\n        long binom = 1;\n        for (int i = 1; i <= k; i++) {\n            try {\n                binom = Math.multiplyExact(binom, n + 1 - i) / i;\n            } catch (ArithmeticException e) {\n                return \"overflow\";\n            }\n        }\n        return binom;\n    }\n\n    // using floating point arithmetic, larger numbers can be calculated,\n    // but with reduced precision\n    private static double binomialFloat(int n, int k) {\n        if (k > n - k)\n            k = n - k;\n\n        double binom = 1.0;\n        for (int i = 1; i <= k; i++)\n            binom = binom * (n + 1 - i) / i;\n        return binom;\n    }\n\n    // slow, hard to read, but precise\n    private static BigInteger binomialBigInt(int n, int k) {\n        if (k > n - k)\n            k = n - k;\n\n        BigInteger binom = BigInteger.ONE;\n        for (int i = 1; i <= k; i++) {\n            binom = binom.multiply(BigInteger.valueOf(n + 1 - i));\n            binom = binom.divide(BigInteger.valueOf(i));\n        }\n        return binom;\n    }\n\n    private static void demo(int n, int k) {\n        List<Object> data = Arrays.asList(\n                n,\n                k,\n                binomialInt(n, k),\n                binomialIntReliable(n, k),\n                binomialFloat(n, k),\n                binomialBigInt(n, k));\n\n        System.out.println(data.stream().map(Object::toString).collect(Collectors.joining(\"\\t\")));\n    }\n\n    public static void main(String[] args) {\n        demo(5, 3);\n        demo(1000, 300);\n    }\n}\n\n\nOutput:\n5\t3\t10\t10\t10.0\t10\n1000\t300\t-8357011479171942\toverflow\t5.428250046406143E263\t542825004640614064815358503892902599588060075560435179852301016412253602009800031872232761420804306539976220810204913677796961128392686442868524741815732892024613137013599170443939815681313827516308854820419235457578544489551749630302863689773725905288736148678480\n\npublic class Binomial\n{\n    private static long binom(int n, int k)\n    {\n        if (k==0)\n            return 1;\n        else if (k>n-k)\n            return binom(n, n-k);\n        else\n            return binom(n-1, k-1)*n/k;\n    }\n\n    public static void main(String[] args)\n    {\n        System.out.println(binom(5, 3));\n    }\n}\n\n\nOutput:\n10\n", "explain": "Recursive version, without overflow check:\n"}, {"task_name": "Evaluate binomial coefficients", "task_url": "https://rosettacode.org/wiki/Evaluate_binomial_coefficients", "task_cat": "Mathematical operations", "lang": "C#", "code": "\nusing System;\n\nnamespace BinomialCoefficients\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            ulong n = 1000000, k = 3;\n            ulong result = biCoefficient(n, k);\n            Console.WriteLine(\"The Binomial Coefficient of {0}, and {1}, is equal to: {2}\", n, k, result);\n            Console.ReadLine();\n        }\n\n        static int fact(int n)\n        {\n            if (n == 0) return 1;\n            else return n * fact(n - 1);\n        }\n\n        static ulong biCoefficient(ulong n, ulong k)\n        {\n            if (k > n - k)\n            {\n                k = n - k;\n            }\n\n            ulong c = 1;\n            for (uint i = 0; i < k; i++)\n            {\n                c = c * (n - i);\n                c = c / (i + 1);\n            }\n            return c;\n        }\n    }\n}\n\n", "explain": ""}, {"task_name": "Evaluate binomial coefficients", "task_url": "https://rosettacode.org/wiki/Evaluate_binomial_coefficients", "task_cat": "Mathematical operations", "lang": "JavaScript", "code": "\nfunction binom(n, k) {\n    var coeff = 1;\n    var i;\n\n    if (k < 0 || k > n) return 0;\n\n    for (i = 0; i < k; i++) {\n        coeff = coeff * (n - i) / (i + 1);\n    }\n  \n    return coeff;\n}\n\nconsole.log(binom(5, 3));\n\n\nOutput:\n10\n", "explain": ""}, {"task_name": "Evaluate binomial coefficients", "task_url": "https://rosettacode.org/wiki/Evaluate_binomial_coefficients", "task_cat": "Mathematical operations", "lang": "PHP", "code": "\n<?php\n$n=5;\n$k=3;\nfunction factorial($val){\n    for($f=2;$val-1>1;$f*=$val--);\n    return $f;\n}\n$binomial_coefficient=factorial($n)/(factorial($k)*factorial($n-$k));\necho $binomial_coefficient;\n?>\n\n\nfunction binomial_coefficient($n, $k) {\n  if ($k == 0) return 1;\n  $result = 1;\n  foreach (range(0, $k - 1) as $i) {\n    $result *= ($n - $i) / ($i + 1);\n  }\n  return $result;\n}\n\n", "explain": "Alternative version, not based on factorial\n"}, {"task_name": "Evaluate binomial coefficients", "task_url": "https://rosettacode.org/wiki/Evaluate_binomial_coefficients", "task_cat": "Mathematical operations", "lang": "Fortran", "code": "\nDirect Method[edit]\nWorks with: Fortran version 90 and later\nprogram test_choose\n\n  implicit none\n\n  write (*, '(i0)') choose (5, 3)\n\ncontains\n\n  function factorial (n) result (res)\n\n    implicit none\n    integer, intent (in) :: n\n    integer :: res\n    integer :: i\n\n    res = product ((/(i, i = 1, n)/))\n\n  end function factorial\n\n  function choose (n, k) result (res)\n\n    implicit none\n    integer, intent (in) :: n\n    integer, intent (in) :: k\n    integer :: res\n\n    res = factorial (n) / (factorial (k) * factorial (n - k))\n\n  end function choose\n\nend program test_choose\n\n\nOutput:10\nAvoiding Overflow[edit]\n\nprogram binomial\n    integer :: i, j\n    \n    do j=1,20\n        write(*,fmt='(i2,a)',advance='no') j,'Cr = '\n        do i=0,j\n            write(*,fmt='(i0,a)',advance='no') n_C_r(j,i),' '\n        end do\n        write(*,'(a,i0)') ' 60C30 = ',n_C_r(60,30)\n    end do\n    stop\n    \ncontains\n\n    pure function n_C_r(n, r) result(bin)\n        integer(16)         :: bin\n        integer, intent(in) :: n\n        integer, intent(in) :: r\n        \n        integer(16)         :: num\n        integer(16)         :: den\n        integer             :: i\n        integer             :: k\n        integer, parameter  :: primes(*) = [2,3,5,7,11,13,17,19]\n        num = 1\n        den = 1\n        do i=0,r-1\n            num = num*(n-i)\n            den = den*(i+1)\n            if (i > 0) then\n                ! Divide out common prime factors\n                do k=1,size(primes)\n                    if (mod(i,primes(k)) == 0) then\n                        num = num/primes(k)\n                        den = den/primes(k)\n                    end if\n                end do\n            end if\n        end do\n        bin = num/den\n    end function n_C_r        \n\nend program binomial\n\n\nOutput:\n 1Cr = 1 1 \n 2Cr = 1 2 1 \n 3Cr = 1 3 3 1 \n 4Cr = 1 4 6 4 1 \n 5Cr = 1 5 10 10 5 1 \n 6Cr = 1 6 15 20 15 6 1 \n 7Cr = 1 7 21 35 35 21 7 1 \n 8Cr = 1 8 28 56 70 56 28 8 1 \n 9Cr = 1 9 36 84 126 126 84 36 9 1 \n10Cr = 1 10 45 120 210 252 210 120 45 10 1 \n11Cr = 1 11 55 165 330 462 462 330 165 55 11 1 \n12Cr = 1 12 66 220 495 792 924 792 495 220 66 12 1 \n13Cr = 1 13 78 286 715 1287 1716 1716 1287 715 286 78 13 1 \n14Cr = 1 14 91 364 1001 2002 3003 3432 3003 2002 1001 364 91 14 1 \n15Cr = 1 15 105 455 1365 3003 5005 6435 6435 5005 3003 1365 455 105 15 1 \n16Cr = 1 16 120 560 1820 4368 8008 11440 12870 11440 8008 4368 1820 560 120 16 1 \n17Cr = 1 17 136 680 2380 6188 12376 19448 24310 24310 19448 12376 6188 2380 680 136 17 1 \n18Cr = 1 18 153 816 3060 8568 18564 31824 43758 48620 43758 31824 18564 8568 3060 816 153 18 1 \n19Cr = 1 19 171 969 3876 11628 27132 50388 75582 92378 92378 75582 50388 27132 11628 3876 969 171 19 1 \n20Cr = 1 20 190 1140 4845 15504 38760 77520 125970 167960 184756 167960 125970 77520 38760 15504 4845 1140 190 20 1 \n21Cr = 1 21 210 1330 5985 20349 54264 116280 203490 293930 352716 352716 293930 203490 116280 54264 20349 5985 1330 210 21 1 \n22Cr = 1 22 231 1540 7315 26334 74613 170544 319770 497420 646646 705432 646646 497420 319770 170544 74613 26334 7315 1540 231 22 1 \n23Cr = 1 23 253 1771 8855 33649 100947 245157 490314 817190 1144066 1352078 1352078 1144066 817190 490314 245157 100947 33649 8855 1771 253 23 1 \n24Cr = 1 24 276 2024 10626 42504 134596 346104 735471 1307504 1961256 2496144 2704156 2496144 1961256 1307504 735471 346104 134596 42504 10626 2024 276 24 1 \n25Cr = 1 25 300 2300 12650 53130 177100 480700 1081575 2042975 3268760 4457400 5200300 5200300 4457400 3268760 2042975 1081575 480700 177100 53130 12650 2300 300 25 1\n60C30 = 118264581564861424\n\n", "explain": "Of course this method doesn't avoid overflow completely just delays it. It could be extended by adding more entries to the primes array\n"}, {"task_name": "Evaluate binomial coefficients", "task_url": "https://rosettacode.org/wiki/Evaluate_binomial_coefficients", "task_cat": "Mathematical operations", "lang": "Go", "code": "\npackage main\nimport \"fmt\"\nimport \"math/big\"\n\nfunc main() {\n  fmt.Println(new(big.Int).Binomial(5, 3))\n  fmt.Println(new(big.Int).Binomial(60, 30))\n}\n\n\nOutput:\n10\n118264581564861424\n\n", "explain": ""}, {"task_name": "Evaluate binomial coefficients", "task_url": "https://rosettacode.org/wiki/Evaluate_binomial_coefficients", "task_cat": "Mathematical operations", "lang": "Delphi", "code": "\nprogram Binomial;\n\n{$APPTYPE CONSOLE}\n\nfunction BinomialCoff(N, K: Cardinal): Cardinal;\nvar\n  L: Cardinal;\n\nbegin\n  if N < K then\n    Result:= 0      // Error\n  else begin\n    if K > N - K then\n      K:= N - K;    // Optimization\n    Result:= 1;\n    L:= 0;\n    while L < K do begin\n      Result:= Result * (N - L);\n      Inc(L);\n      Result:= Result div L;\n    end;\n  end;\nend;\n\nbegin\n  Writeln('C(5,3) is ', BinomialCoff(5, 3));\n  ReadLn;\nend.\n\n", "explain": ""}, {"task_name": "Evaluate binomial coefficients", "task_url": "https://rosettacode.org/wiki/Evaluate_binomial_coefficients", "task_cat": "Mathematical operations", "lang": "Ruby", "code": "\nTranslation of: Tcl\nWorks with: Ruby version 1.8.7+\nclass Integer\n  # binomial coefficient: n C k\n  def choose(k)\n    # n!/(n-k)!\n    pTop = (self-k+1 .. self).inject(1, &:*) \n    # k!\n    pBottom = (2 .. k).inject(1, &:*)\n    pTop / pBottom\n  end\nend\n\np 5.choose(3)\np 60.choose(30)\n\n\n10\n118264581564861424\n\ndef c n, r\n  (0...r).inject(1) do |m,i| (m * (n - i)) / (i + 1) end\nend\nRuby's Arrays have a combination method which result in a (lazy) enumerator. This Enumerator has a \"size\" method, which returns the size of the enumerator, or nil if it can\u2019t be calculated lazily. (Since Ruby 2.0)\n(1..60).to_a.combination(30).size  #=> 118264581564861424\n\n", "explain": "result\nanother implementation:\n"}, {"task_name": "Evaluate binomial coefficients", "task_url": "https://rosettacode.org/wiki/Evaluate_binomial_coefficients", "task_cat": "Mathematical operations", "lang": "Rust", "code": "\nfn fact(n:u32) -> u64 {\n  let mut f:u64 = n as u64;\n  for i in 2..n {\n    f *= i as u64;\n  }\n  return f;\n}\n\nfn choose(n: u32, k: u32)  -> u64 {\n   let mut num:u64 = n as u64;\n   for i in 1..k {\n     num *= (n-i) as u64;\n   }\n   return num / fact(k);\n}\n\nfn main() {\n  println!(\"{}\", choose(5,3));\n}\n\n\nOutput:\n10\n\nfn choose(n:u64,k:u64)->u64 {\n   let factorial=|x| (1..=x).fold(1, |a, x| a * x);\n   factorial(n) / factorial(k) / factorial(n - k)\n}\n\n", "explain": "Alternative version, using functional style:\n"}, {"task_name": "Evaluate binomial coefficients", "task_url": "https://rosettacode.org/wiki/Evaluate_binomial_coefficients", "task_cat": "Mathematical operations", "lang": "Swift", "code": "\nfunc factorial<T: BinaryInteger>(_ n: T) -> T {\n  guard n\u00a0!= 0 else {\n    return 1\n  }\n\n  return stride(from: n, to: 0, by: -1).reduce(1, *)\n}\n\nfunc binomial<T: BinaryInteger>(_ x: (n: T, k: T)) -> T {\n  let nFac = factorial(x.n)\n  let kFac = factorial(x.k)\n\n  return nFac / (factorial(x.n - x.k) * kFac)\n}\n\nprint(\"binomial(\\(5), \\(3)) = \\(binomial((5, 3)))\")\nprint(\"binomial(\\(20), \\(11)) = \\(binomial((20, 11)))\")\n\nOutput:\nbinomial(5, 3) = 10\nbinomial(20, 11) = 167960\n", "explain": ""}, {"task_name": "Evaluate binomial coefficients", "task_url": "https://rosettacode.org/wiki/Evaluate_binomial_coefficients", "task_cat": "Mathematical operations", "lang": "R", "code": "\n\nchoose(5,3)\n\n\nOutput:\n[1] 10\n", "explain": "R's built-in choose() function evaluates binomial coefficients:\n"}, {"task_name": "Evaluate binomial coefficients", "task_url": "https://rosettacode.org/wiki/Evaluate_binomial_coefficients", "task_cat": "Mathematical operations", "lang": "Ada", "code": "\nwith Ada.Text_IO;  use Ada.Text_IO;\nprocedure Test_Binomial is\n   function Binomial (N, K : Natural) return Natural is\n      Result : Natural := 1;\n      M      : Natural;\n   begin\n      if N < K then\n         raise Constraint_Error;\n      end if;\n      if K > N/2 then -- Use symmetry\n         M := N - K;\n      else\n         M := K;\n      end if;\n      for I in 1..M loop\n         Result := Result * (N - M + I) / I;\n      end loop;\n      return Result;\n   end Binomial;\nbegin\n   for N in 0..17 loop\n      for K in 0..N loop\n         Put (Integer'Image (Binomial (N, K)));\n      end loop;\n      New_Line;\n   end loop;\nend Test_Binomial;\n\n\nOutput:\n 1\n 1 1\n 1 2 1\n 1 3 3 1\n 1 4 6 4 1\n 1 5 10 10 5 1\n 1 6 15 20 15 6 1\n 1 7 21 35 35 21 7 1\n 1 8 28 56 70 56 28 8 1\n 1 9 36 84 126 126 84 36 9 1\n 1 10 45 120 210 252 210 120 45 10 1\n 1 11 55 165 330 462 462 330 165 55 11 1\n 1 12 66 220 495 792 924 792 495 220 66 12 1\n 1 13 78 286 715 1287 1716 1716 1287 715 286 78 13 1\n 1 14 91 364 1001 2002 3003 3432 3003 2002 1001 364 91 14 1\n 1 15 105 455 1365 3003 5005 6435 6435 5005 3003 1365 455 105 15 1\n 1 16 120 560 1820 4368 8008 11440 12870 11440 8008 4368 1820 560 120 16 1\n 1 17 136 680 2380 6188 12376 19448 24310 24310 19448 12376 6188 2380 680 136 17 1\n\n", "explain": ""}, {"task_name": "Evaluate binomial coefficients", "task_url": "https://rosettacode.org/wiki/Evaluate_binomial_coefficients", "task_cat": "Mathematical operations", "lang": "Julia", "code": "\nWorks with: Julia version 1.2\n\n@show binomial(5, 3)\n\n\nfunction binom(n::Integer, k::Integer)\n    n \u2265 k || return 0 # short circuit base cases\n    (n == 1 || k == 0) && return 1\n\n    n * binom(n - 1, k - 1) \u00f7 k\nend\n\n@show binom(5, 3)\n\n\nOutput:\nbinomial(5, 3) = 10\nbinom(5, 3) = 10\n", "explain": "Built-in\nRecursive version:\n"}, {"task_name": "Evaluate binomial coefficients", "task_url": "https://rosettacode.org/wiki/Evaluate_binomial_coefficients", "task_cat": "Mathematical operations", "lang": "Kotlin", "code": "\n// version 2.0\n\nfun binomial(n: Int, k: Int) = when {\n    n < 0 || k < 0 -> throw IllegalArgumentException(\"negative numbers not allowed\")\n    n == k         -> 1L\n    else           -> {\n        val kReduced = min(k, n - k)    // minimize number of steps\n        var result = 1L\n        var numerator = n\n        var denominator = 1\n        while (denominator <= kReduced)\n            result = result * numerator-- / denominator++\n        result\n    }\n}\n\nfun main(args: Array<String>) {\n    for (n in 0..14) {\n        for (k in 0..n)\n            print(\"%4d \".format(binomial(n, k)))\n        println()\n    }\n}\n\n\nOutput:\n   1\n   1    1\n   1    2    1\n   1    3    3    1\n   1    4    6    4    1\n   1    5   10   10    5    1\n   1    6   15   20   15    6    1\n   1    7   21   35   35   21    7    1\n   1    8   28   56   70   56   28    8    1\n   1    9   36   84  126  126   84   36    9    1\n   1   10   45  120  210  252  210  120   45   10    1\n   1   11   55  165  330  462  462  330  165   55   11    1\n   1   12   66  220  495  792  924  792  495  220   66   12    1\n   1   13   78  286  715 1287 1716 1716 1287  715  286   78   13    1\n   1   14   91  364 1001 2002 3003 3432 3003 2002 1001  364   91   14    1\n\n", "explain": ""}, {"task_name": "Evaluate binomial coefficients", "task_url": "https://rosettacode.org/wiki/Evaluate_binomial_coefficients", "task_cat": "Mathematical operations", "lang": "Perl", "code": "\nsub binomial {\n    use bigint;\n    my ($r, $n, $k) = (1, @_);\n    for (1 .. $k) { $r *= $n--; $r /= $_ }\n    $r;\n}\n \nprint binomial(5, 3);\n\n\nOutput:\n10\n\nsub binomial {\n    use bigint;\n    my($n,$k) = @_;\n    (0+$n)->bnok($k);\n}\n\n\nLibrary: ntheory\nuse ntheory qw/binomial/;\nprint length(binomial(100000,50000)), \"\\n\";\n\n\nOutput:\n30101\n\n", "explain": "Since the bigint module already has a binomial method, this could also be written as:\nFor better performance, especially with large inputs, one can also use something like:\nThe Math::Pari module also has binomial, but it needs large amounts of added stack space for large arguments (this is due to using a very old version of the underlying Pari library).\n"}, {"task_name": "Evaluate binomial coefficients", "task_url": "https://rosettacode.org/wiki/Evaluate_binomial_coefficients", "task_cat": "Mathematical operations", "lang": "Lua", "code": "\nfunction Binomial( n, k )\n    if k > n then return nil end\n    if k > n/2 then k = n - k end       --   (n k) = (n n-k)\n    \n    numer, denom = 1, 1\n    for i = 1, k do\n        numer = numer * ( n - i + 1 )\n        denom = denom * i\n    end\n    return numer / denom\nend\n\n\nlocal Binomial = setmetatable({},{\n __call = function(self,n,k)\n   local hash = (n<<32) | (k & 0xffffffff)\n   local ans = self[hash]\n   if not ans then \n    if n<0 or k>n then\n      return 0 -- not save\n    elseif n<=1 or k==0 or k==n then \n      ans = 1\n    else\n      if 2*k > n then \n        ans = self(n, n - k) \n      else\n        local lhs = self(n-1,k)\n        local rhs = self(n-1,k-1)        \n        local sum = lhs + rhs\n        if sum<0 or not math.tointeger(sum)then \n          -- switch to double\n          ans = lhs/1.0 + rhs/1.0 -- approximate\n        else\n          ans = sum\n        end\n      end\n    end\n    rawset(self,hash,ans)\n   end\n   return ans\n end \n})\nprint( Binomial(100,50)) -- 1.0089134454556e+029\n\n", "explain": "Additive recursion with memoization by hashing 2 input integer.\nLua 5.3 support bit-wise operation; assume 64 bit integer implementation here.\n"}, {"task_name": "Evaluate binomial coefficients", "task_url": "https://rosettacode.org/wiki/Evaluate_binomial_coefficients", "task_cat": "Mathematical operations", "lang": "Scala", "code": "\nobject Binomial {\n   def main(args: Array[String]): Unit = {\n      val n=5\n      val k=3\n      val result=binomialCoefficient(n,k)\n      println(\"The Binomial Coefficient of %d and %d equals %d.\".format(n, k, result))\n   }\n\n   def binomialCoefficient(n:Int, k:Int)=fact(n) / (fact(k) * fact(n-k))\n   def fact(n:Int):Int=if (n==0) 1 else n*fact(n-1)\n}\n\n\nOutput:\nThe Binomial Coefficient of 5 and 3 equals 10.\n\nobject Binomial extends App {\n  def binomialCoefficient(n: Int, k: Int) = \n    (BigInt(n - k + 1) to n).product / \n    (BigInt(1) to k).product\n\n  val Array(n, k) = args.map(_.toInt)\n  println(\"The Binomial Coefficient of %d and %d equals\u00a0%,3d.\".format(n, k, binomialCoefficient(n, k)))\n}\n\n\nOutput:\njava Binomial 100 30\nThe Binomial Coefficient of 100 and 30 equals 29,372,339,821,610,944,823,963,760.\n\n  def bico(n: Long, k: Long): Long = (n, k) match {\n    case (n, 0) => 1\n    case (0, k) => 0\n    case (n, k) => bico(n - 1, k - 1) + bico(n - 1, k)\n  }\n  println(\"bico(5,3) = \" + bico(5, 3))\n\n\nOutput:\nbico(5,3) = 10\n", "explain": "Another (more flexible and efficient) implementation. n and k are taken from command line. The use of BigInts allows to compute coefficients of arbitrary size:\nUsing recursive formula C(n,k) = C(n-1,k-1) + C(n-1,k):\n"}, {"task_name": "Evaluate binomial coefficients", "task_url": "https://rosettacode.org/wiki/Evaluate_binomial_coefficients", "task_cat": "Mathematical operations", "lang": "D", "code": "\nT binomial(T)(in T n, T k) pure nothrow {\n    if (k > (n / 2))\n        k = n - k;\n    T bc = 1;\n    foreach (T i; T(2) .. k + 1)\n        bc = (bc * (n - k + i)) / i;\n    return bc;\n}\n\nvoid main() {\n    import std.stdio, std.bigint;\n\n    foreach (const d; [[5, 3], [100, 2], [100, 98]])\n        writefln(\"(%3d %3d) = %s\", d[0], d[1], binomial(d[0], d[1]));\n    writeln(\"(100  50) = \", binomial(100.BigInt, 50.BigInt));\n}\n\n\nOutput:\n(  5   3) = 2\n(100   2) = 50\n(100  98) = 50\n(100  50) = 1976664223067613962806675336\n\nT BinomialCoeff(T)(in T n, in T k)\n{\n    T nn = n, kk = k, c = cast(T)1;\n\n    if (kk > nn - kk) kk = nn - kk;\n\n    for (T i = cast(T)0; i < kk; i++)\n    {\n        c = c * (nn - i);\n        c = c / (i + cast(T)1);\n    }\n\n    return c;\n}\n\nvoid main()\n{\n    import std.stdio, std.bigint;\n\n    BinomialCoeff(10UL, 3UL).writeln;\n    BinomialCoeff(100.BigInt, 50.BigInt).writeln;\n}\n\n\nOutput:\n120\n100891344545564193334812497256\n\n", "explain": "The above wouldn't work for me (100C50 correctly gives 100891344545564193334812497256). This next one is a translation of C#:\n\n\n\n"}, {"task_name": "Evaluate binomial coefficients", "task_url": "https://rosettacode.org/wiki/Evaluate_binomial_coefficients", "task_cat": "Mathematical operations", "lang": "Haskell", "code": "\n\nchoose :: (Integral a) => a -> a -> a\nchoose n k = product [k+1..n] `div` product [1..n-k]\n\n> 5 `choose` 3\n10\n\n\nchoose :: (Integral a) => a -> a -> a\nchoose n k = foldl (\\z i -> (z * (n-i+1)) `div` i) 1 [1..k]\n\n\ncoeffs = iterate next [1] \n  where\n    next ns = zipWith (+) (0:ns) $ ns ++ [0]\n\nmain = print $ coeffs !! 5 !! 3\n\n", "explain": "The only trick here is realizing that everything's going to divide nicely, so we can use div instead of (/).\nOr, generate the binomial coefficients iteratively to avoid computing with big numbers:\nOr using \"caching\":\n"}, {"task_name": "Evaluate binomial coefficients", "task_url": "https://rosettacode.org/wiki/Evaluate_binomial_coefficients", "task_cat": "Mathematical operations", "lang": "VBScript", "code": "\nFunction binomial(n,k)\n\tbinomial = factorial(n)/(factorial(n-k)*factorial(k))\nEnd Function\n\nFunction factorial(n)\n\tIf n = 0 Then\n\t\tfactorial = 1\n\tElse\n\t\tFor i = n To 1 Step -1\n\t\t\tIf i = n Then\n\t\t\t\tfactorial = n\n\t\t\tElse\n\t\t\t\tfactorial = factorial * i\n\t\t\tEnd If\n\t\tNext\n\tEnd If\nEnd Function\n\n'calling the function\nWScript.StdOut.Write \"the binomial coefficient of 5 and 3 = \" & binomial(5,3)\nWScript.StdOut.WriteLine\n\nOutput:\nthe binomial coefficient of 5 and 3 = 10\n", "explain": ""}, {"task_name": "Evaluate binomial coefficients", "task_url": "https://rosettacode.org/wiki/Evaluate_binomial_coefficients", "task_cat": "Mathematical operations", "lang": "Scheme", "code": "\nWorks with: Scheme version R\n\n\n\n\n\n5\n\n\n\n{\\displaystyle ^5}\n\nRS\n(define (factorial n)\n  (define (*factorial n acc)\n    (if (zero? n)\n        acc\n        (*factorial (- n 1) (* acc n))))\n  (*factorial n 1))\n\n(define (choose n k)\n  (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n\n(display (choose 5 3))\n(newline)\n\n\nOutput:\n10\n\n(define (pascal i j)\n  (cond ((= i 0) 1)\n        ((= j 0) 1)\n        (else (+\n               (pascal (- i 1) j)\n               (pascal i (- j 1))))))\n\n(define (choose n k)\n  (pascal (- n k) k)))\n\n(display (choose 5 3))\n(newline)\n\n\nOutput:\n10\n", "explain": "Alternatively a recursive implementation can be constructed from Pascal's Triangle:\n"}, {"task_name": "Evaluate binomial coefficients", "task_url": "https://rosettacode.org/wiki/Evaluate_binomial_coefficients", "task_cat": "Mathematical operations", "lang": "PowerShell", "code": "\nfunction choose($n,$k) {\n    if($k -le $n -and 0 -le $k) {\n        $numerator = $denominator = 1\n        0..($k-1) | foreach{\n            $numerator *= ($n-$_)\n            $denominator *= ($_ + 1)\n        }\n        $numerator/$denominator\n    } else {\n        \"$k is greater than $n or lower than 0\"\n    }\n}\nchoose 5 3\nchoose 2 1\nchoose 10 10\nchoose 10 2\nchoose 10 8\n\n\n10\n2\n1\n45\n45\n\n", "explain": "Output:\n"}, {"task_name": "Evaluate binomial coefficients", "task_url": "https://rosettacode.org/wiki/Evaluate_binomial_coefficients", "task_cat": "Mathematical operations", "lang": "Logo", "code": "\nto choose :n :k\n  if :k = 0 [output 1]\n  output (choose :n :k-1) * (:n - :k + 1) / :k\nend\n\nshow choose 5 3  \u00a0; 10\nshow choose 60 30\u00a0; 1.18264581564861e+17\n", "explain": ""}, {"task_name": "Evaluate binomial coefficients", "task_url": "https://rosettacode.org/wiki/Evaluate_binomial_coefficients", "task_cat": "Mathematical operations", "lang": "ABAP", "code": "\nCLASS lcl_binom DEFINITION CREATE PUBLIC.\n\n  PUBLIC SECTION.\n    CLASS-METHODS:\n      calc\n        IMPORTING n               TYPE i\n                  k               TYPE i\n        RETURNING VALUE(r_result) TYPE f.\n\nENDCLASS.\n\nCLASS lcl_binom IMPLEMENTATION.\n\n  METHOD calc.\n\n    r_result = 1.\n    DATA(i) = 1.\n    DATA(m) = n.\n\n    WHILE i <= k.\n      r_result = r_result * m / i.\n      i = i + 1.\n      m = m - 1.\n    ENDWHILE.\n\n  ENDMETHOD.\n\nENDCLASS.\n\n\nOutput:\nlcl_binom=>calc( n = 5 k = 3 )\n1,0000000000000000E+01\nlcl_binom=>calc( n = 60 k = 30 )\n1,1826458156486142E+17\n\n", "explain": ""}, {"task_name": "Evaluate binomial coefficients", "task_url": "https://rosettacode.org/wiki/Evaluate_binomial_coefficients", "task_cat": "Mathematical operations", "lang": "F#", "code": "\nlet choose n k = List.fold (fun s i -> s * (n-i+1)/i ) 1 [1..k]\n\n", "explain": ""}, {"task_name": "Evaluate binomial coefficients", "task_url": "https://rosettacode.org/wiki/Evaluate_binomial_coefficients", "task_cat": "Mathematical operations", "lang": "Groovy", "code": "\n\ndef factorial = { x ->\n    assert x > -1\n    x == 0 ? 1 : (1..x).inject(1G) { BigInteger product, BigInteger factor -> product *= factor }\n}\n\ndef combinations = { n, k ->\n    assert k >= 0\n    assert n >= k\n    factorial(n).intdiv(factorial(k)*factorial(n-k))\n}\n\n\nassert combinations(20, 0) == combinations(20, 20)\nassert combinations(20, 10) == (combinations(19, 9) + combinations(19, 10))\nassert combinations(5, 3) == 10\nprintln combinations(5, 3)\n\n\nOutput:\n10\n", "explain": "Solution:\nTest:\n"}, {"task_name": "Evaluate binomial coefficients", "task_url": "https://rosettacode.org/wiki/Evaluate_binomial_coefficients", "task_cat": "Mathematical operations", "lang": "Zig", "code": "\n\nconst std = @import(\"std\");\n\npub fn binomial(n: u32)\u00a0?[]const u64 {\n    if (n >= rmax)\n        return null\n    else {\n        const k = n * (n + 1) / 2;\n        return pascal[k .. k + n + 1];\n    }\n}\n\npub fn nCk(n: u32, k: u32) ?u64 {\n    if (n >= rmax)\n        return null\n    else if (k > n)\n        return 0\n    else {\n        const j = n * (n + 1) / 2;\n        return pascal[j + k];\n    }\n}        \n\nconst rmax = 68;\n\nconst pascal = build: {\n    @setEvalBranchQuota(100_000);\n    var coefficients: [(rmax * (rmax + 1)) / 2]u64 = undefined;\n    coefficients[0] = 1;\n    var j: u32 = 0;\n    var k: u32 = 1;\n    var n: u32 = 1;\n    while (n < rmax)\u00a0: (n += 1) {\n        var prev = coefficients[j .. j + n];\n        var next = coefficients[k .. k + n + 1];\n        next[0] = 1;\n        var i: u32 = 1;\n        while (i < n)\u00a0: (i += 1)\n            next[i] = prev[i] + prev[i - 1];\n        next[i] = 1;\n        j = k;\n        k += n + 1;\n    }\n    break :build coefficients;\n};\n\ntest \"n choose k\" {\n    const expect = std.testing.expect;\n    try expect(nCk(10, 5).? == 252);\n    try expect(nCk(10, 11).? == 0);\n    try expect(nCk(10, 10).? == 1);\n    try expect(nCk(67, 33).? == 14226520737620288370); \n    try expect(nCk(68, 34) == null);\n}\n\n\nOutput:\n$ zig test binomial.zig \nAll 1 tests passed.\n\n", "explain": "A reasonable implementation for a fixed word size is to precompute all possible values of nCk, since even on a 64 bit machine there's only 67 rows of Pascal's triangle to consider, or ~18K of data.\nIn Zig it's possible to compute all values of nCk at compile time, so that at runtime it's only necessary to do a table lookup. Zig also supports nullable values, so nCk can return a null value if the programmer requests a value that's out of range.  Finally, since this code uses addition to compute the table, all entries that can fit in 64 bits can be computed, in contrast to some other code examples that may overflow before the maximum representable value (67 choose 33) is reached. For example, the largest value the BCPL version can compute is 61 choose 31.\nRather than write driver code, it's possible to run the unit test for this module.\n"}, {"task_name": "Evaluate binomial coefficients", "task_url": "https://rosettacode.org/wiki/Evaluate_binomial_coefficients", "task_cat": "Mathematical operations", "lang": "AWK", "code": "\n# syntax: GAWK -f EVALUATE_BINOMIAL_COEFFICIENTS.AWK\nBEGIN {\n    main(5,3)\n    main(100,2)\n    main(33,17)\n    exit(0)\n}\nfunction main(n,k,  i,r) {\n    r = 1\n    for (i=1; i<k+1; i++) {\n      r *= (n - i + 1) / i\n    }\n    printf(\"%d %d = %d\\n\",n,k,r)\n}\n\n\nOutput:\n5 3 = 10\n100 2 = 4950\n33 17 = 1166803110\n\n", "explain": ""}]