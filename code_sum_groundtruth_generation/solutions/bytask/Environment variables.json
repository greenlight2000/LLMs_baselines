[{"task_name": "Environment variables", "task_url": "https://rosettacode.org/wiki/Environment_variables", "task_cat": "Initialization", "lang": "Python", "code": "\n\nimport os\nos.environ['HOME']\n\n", "explain": "The os.environ dictionary maps environmental variable names to their values:\n"}, {"task_name": "Environment variables", "task_url": "https://rosettacode.org/wiki/Environment_variables", "task_cat": "Initialization", "lang": "C", "code": "\n#include <stdlib.h>\n#include <stdio.h>\n \nint main() {\n  puts(getenv(\"HOME\"));\n  puts(getenv(\"PATH\"));\n  puts(getenv(\"USER\"));\n  return 0;\n}\n\n", "explain": ""}, {"task_name": "Environment variables", "task_url": "https://rosettacode.org/wiki/Environment_variables", "task_cat": "Initialization", "lang": "C++", "code": "\n#include <cstdlib>\n#include <cstdio>\n\nint main()\n{\n   puts(getenv(\"HOME\"));\n   return 0;\n}\n\n", "explain": ""}, {"task_name": "Environment variables", "task_url": "https://rosettacode.org/wiki/Environment_variables", "task_cat": "Initialization", "lang": "Java", "code": "\nSystem.getenv(\"HOME\") // get env var\nSystem.getenv()       // get the entire environment as a Map of keys to values\n\n", "explain": ""}, {"task_name": "Environment variables", "task_url": "https://rosettacode.org/wiki/Environment_variables", "task_cat": "Initialization", "lang": "C#", "code": "\nusing System;\n\nnamespace RosettaCode {\n    class Program {\n        static void Main() {\n            string temp = Environment.GetEnvironmentVariable(\"TEMP\");\n            Console.WriteLine(\"TEMP is \" + temp);\n        }\n    }\n}\n\n", "explain": ""}, {"task_name": "Environment variables", "task_url": "https://rosettacode.org/wiki/Environment_variables", "task_cat": "Initialization", "lang": "JavaScript", "code": "\n\nWorks with: JScript\nvar shell = new ActiveXObject(\"WScript.Shell\");\nvar env = shell.Environment(\"PROCESS\");\nWScript.echo('SYSTEMROOT=' + env.item('SYSTEMROOT'));\n\n", "explain": "The JavaScript language has no facilities to access the computer: it relies on the host environment to provide it.\n"}, {"task_name": "Environment variables", "task_url": "https://rosettacode.org/wiki/Environment_variables", "task_cat": "Initialization", "lang": "PHP", "code": "\n\n$_ENV['HOME']\n\n", "explain": "The $_ENV associative array maps environmental variable names to their values:\n"}, {"task_name": "Environment variables", "task_url": "https://rosettacode.org/wiki/Environment_variables", "task_cat": "Initialization", "lang": "Fortran", "code": "\nWorks with: any Fortran compiler\nprogram show_home\nimplicit none\ncharacter(len=32) :: home_val  ! The string value of the variable HOME\ninteger           :: home_len  ! The actual length of the value\ninteger           :: stat      ! The status of the value:\n                               !  0 = ok\n                               !  1 = variable does not exist\n                               ! -1 = variable is not long enought to hold the result\ncall get_environment_variable('HOME', home_val, home_len, stat)\nif (stat == 0) then\n    write(*,'(a)') 'HOME = '//trim(home_val)\nelse\n    write(*,'(a)') 'No HOME to go to!'\nend if\nend program show_home\n\n", "explain": ""}, {"task_name": "Environment variables", "task_url": "https://rosettacode.org/wiki/Environment_variables", "task_cat": "Initialization", "lang": "Go", "code": "\nSimply\n\npackage main\n\nimport (\n    \"fmt\"\n    \"os\"\n)\n\nfunc main() {\n    fmt.Println(os.Getenv(\"SHELL\"))\n}\n\n\nOutput:\n/bin/bash\n\nAlternatively\n\n\npackage main\n\nimport (\n    \"fmt\"\n    \"os\"\n    \"strings\"\n)\n\nfunc main() {\n    s := \"SHELL\"\n    se := s + \"=\"\n    for _, v := range os.Environ() {\n        if strings.HasPrefix(v, se) {\n            fmt.Println(s, \"has value\", v[len(se):])\n            return\n        }\n    }\n    fmt.Println(s, \"not found\")\n}\n\n\nOutput:\nSHELL has value /bin/bash\n\n", "explain": "Library function os.Environ returns all environment variables.  \nYou're on your own then to parse out the one you want.  \nExample:\n"}, {"task_name": "Environment variables", "task_url": "https://rosettacode.org/wiki/Environment_variables", "task_cat": "Initialization", "lang": "Ruby", "code": "\n\nENV['HOME']\n\n", "explain": "The ENV hash maps environment variable names to their values:\n"}, {"task_name": "Environment variables", "task_url": "https://rosettacode.org/wiki/Environment_variables", "task_cat": "Initialization", "lang": "Rust", "code": "\nuse std::env;\n\nfn main() {\n    println!(\"{:?}\", env::var(\"HOME\"));\n    println!();\n    for (k, v) in env::vars().filter(|(k, _)| k.starts_with('P')) {\n        println!(\"{}: {}\", k, v);\n    }\n}\n\n\nOutput:\nOk(\"/root\")\n\nPATH: /root/.cargo/bin:/root/.cargo/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nPLAYGROUND_EDITION: 2018\nPLAYGROUND_TIMEOUT: 10\nPWD: /playground\n\n", "explain": "Note that var_os and vars_os are also available, which produce OsString instead of String, offering compatibility with non-utf8 systems.\n"}, {"task_name": "Environment variables", "task_url": "https://rosettacode.org/wiki/Environment_variables", "task_cat": "Initialization", "lang": "Swift", "code": "\nprint(\"USER: \\(ProcessInfo.processInfo.environment[\"USER\"] ?? \"Not set\")\")\nprint(\"PATH: \\(ProcessInfo.processInfo.environment[\"PATH\"] ?? \"Not set\")\")\n\n", "explain": ""}, {"task_name": "Environment variables", "task_url": "https://rosettacode.org/wiki/Environment_variables", "task_cat": "Initialization", "lang": "R", "code": "\nSys.getenv(\"PATH\")\n\n", "explain": ""}, {"task_name": "Environment variables", "task_url": "https://rosettacode.org/wiki/Environment_variables", "task_cat": "Initialization", "lang": "COBOL", "code": "\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. Environment-Vars.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01  home PIC X(75).\n\n       PROCEDURE DIVISION.\n*          *> Method 1.      \n           ACCEPT home FROM ENVIRONMENT \"HOME\"\n           DISPLAY home\n\n*          *> Method 2.\n           DISPLAY \"HOME\" UPON ENVIRONMENT-NAME\n           ACCEPT home FROM ENVIRONMENT-VALUE\n\n           GOBACK\n           .\n\n", "explain": ""}, {"task_name": "Environment variables", "task_url": "https://rosettacode.org/wiki/Environment_variables", "task_cat": "Initialization", "lang": "Visual_Basic", "code": "\nWorks with: Visual Basic version VB6 Standard\nDebug.Print Environ$(\"PATH\")\n", "explain": ""}, {"task_name": "Environment variables", "task_url": "https://rosettacode.org/wiki/Environment_variables", "task_cat": "Initialization", "lang": "Ada", "code": "\n\nwith Ada.Environment_Variables; use Ada.Environment_Variables;\nwith Ada.Text_Io; use Ada.Text_Io;\n\nprocedure Print_Path is\nbegin\n   Put_Line(\"Path\u00a0: \" & Value(\"PATH\"));\nend Print_Path;\n\n\nwith Ada.Environment_Variables; use Ada.Environment_Variables;\nwith Ada.Text_Io; use Ada.Text_Io;\n\nprocedure Env_Vars is\n   procedure Print_Vars(Name, Value : in String) is\n   begin\n      Put_Line(Name & \"\u00a0: \" & Value);\n   end Print_Vars;\nbegin\n   Iterate(Print_Vars'access);\nend Env_Vars;\n\n\nAlternative version using Matreshka[edit]\n\nwith Ada.Wide_Wide_Text_IO;\n\nwith League.Application;\nwith League.Strings;\n\nprocedure Main is\n\n   function \"+\"\n    (Item : Wide_Wide_String) return League.Strings.Universal_String\n       renames League.Strings.To_Universal_String;\n\nbegin\n   Ada.Wide_Wide_Text_IO.Put_Line\n    (League.Application.Environment.Value (+\"HOME\").To_Wide_Wide_String);\nend Main;\n\n", "explain": "Print a single environment variable.\nPrint all environment variable names and values.\n\nUses Matreshka.\n"}, {"task_name": "Environment variables", "task_url": "https://rosettacode.org/wiki/Environment_variables", "task_cat": "Initialization", "lang": "Julia", "code": "\nWorks with: Julia version 0.6\n@show ENV[\"PATH\"]\n@show ENV[\"HOME\"]\n@show ENV[\"USER\"]\n\n", "explain": ""}, {"task_name": "Environment variables", "task_url": "https://rosettacode.org/wiki/Environment_variables", "task_cat": "Initialization", "lang": "Kotlin", "code": "\n// version 1.0.6\n\n// tested on Windows 10\n\nfun main(args: Array<String>) {\n   println(System.getenv(\"SystemRoot\"))\n}\n\n\nOutput:\nC:\\WINDOWS\n\n", "explain": ""}, {"task_name": "Environment variables", "task_url": "https://rosettacode.org/wiki/Environment_variables", "task_cat": "Initialization", "lang": "Perl", "code": "\n\nprint $ENV{HOME}, \"\\n\";\n\n\nuse POSIX 'getenv';\nprint getenv(\"HOME\"),\"\\n\";\n\n", "explain": "The %ENV hash maps environment variables to their values:\nThe POSIXmodule also has getenv() which is the same thing as a function.\n"}, {"task_name": "Environment variables", "task_url": "https://rosettacode.org/wiki/Environment_variables", "task_cat": "Initialization", "lang": "Objective-C", "code": "\n\n[[[NSProcessInfo processInfo] environment] objectForKey:@\"HOME\"]\n\n", "explain": "[[NSProcessInfo processInfo] environment] returns an NSDictionary of the current environment.\n"}, {"task_name": "Environment variables", "task_url": "https://rosettacode.org/wiki/Environment_variables", "task_cat": "Initialization", "lang": "Prolog", "code": "\n\n\u00a0?- getenv('TEMP', Temp).\n\n", "explain": "SWI-Prolog has the built in function getenv.\n"}, {"task_name": "Environment variables", "task_url": "https://rosettacode.org/wiki/Environment_variables", "task_cat": "Initialization", "lang": "Lua", "code": "\nprint( os.getenv( \"PATH\" ) )\n\n", "explain": ""}, {"task_name": "Environment variables", "task_url": "https://rosettacode.org/wiki/Environment_variables", "task_cat": "Initialization", "lang": "Scala", "code": "\nsys.env.get(\"HOME\")\n\n", "explain": ""}, {"task_name": "Environment variables", "task_url": "https://rosettacode.org/wiki/Environment_variables", "task_cat": "Initialization", "lang": "D", "code": "\nLibrary: phobos\nimport std.stdio, std.process;\n\nvoid main() {\n    auto home = getenv(\"HOME\");\n}\n\nLibrary: tango\nimport tango.sys.Environment;\n\nvoid main() {\n    auto home = Environment(\"HOME\");\n}\n\n", "explain": ""}, {"task_name": "Environment variables", "task_url": "https://rosettacode.org/wiki/Environment_variables", "task_cat": "Initialization", "lang": "Haskell", "code": "\nimport System.Environment\nmain = do getEnv \"HOME\" >>= print  -- get env var\n          getEnvironment >>= print -- get the entire environment as a list of (key, value) pairs\n\n", "explain": ""}, {"task_name": "Environment variables", "task_url": "https://rosettacode.org/wiki/Environment_variables", "task_cat": "Initialization", "lang": "PowerShell", "code": "\n\n$Env:Path\n\n\nGet-ChildItem Env:\n\n", "explain": "Environment variables can be found in the Env: drive and are accessed using a special variable syntax:\nTo get a complete listing of all environment variables one can simply query the appropriate drive for its contents:\n"}, {"task_name": "Environment variables", "task_url": "https://rosettacode.org/wiki/Environment_variables", "task_cat": "Initialization", "lang": "F#", "code": "\nopen System\n\n[<EntryPoint>]\nlet main args =\n    printfn \"%A\" (Environment.GetEnvironmentVariable(\"PATH\"))\n    0\n\n", "explain": ""}, {"task_name": "Environment variables", "task_url": "https://rosettacode.org/wiki/Environment_variables", "task_cat": "Initialization", "lang": "Groovy", "code": "\nSystem.getenv().each { property, value -> println \"$property = $value\"}\n\n", "explain": ""}, {"task_name": "Environment variables", "task_url": "https://rosettacode.org/wiki/Environment_variables", "task_cat": "Initialization", "lang": "AWK", "code": "\n\n$ awk 'BEGIN{print \"HOME:\"ENVIRON[\"HOME\"],\"USER:\"ENVIRON[\"USER\"]}'\n\n\nOutput:\nHOME:/home/suchrich USER:SuchRich\n\n$ awk -v h=$HOME -v u=$USER 'BEGIN{print \"HOME:\"h,\"USER:\"u}'\n\n\nOutput:\nHOME:/home/suchrich USER:SuchRich\n\n# http://ideone.com/St5SHF\nBEGIN { print \"# Environment:\"\n        for (e in ENVIRON) { printf( \"%10s = %s\\n\", e, ENVIRON[e] ) }\n}\nEND   { print \"# Done.\" }\n\n\nOutput:\n# Environment:\n   AWKPATH = .:/usr/share/awk\nAWKLIBPATH = /usr/lib/i386-linux-gnu/gawk\n      LANG = en_US.UTF-8\n      PATH = /usr/local/bin:/usr/bin:/bin\n      HOME = /home/guest\n       PWD = /home/guest\n     SHLVL = 0\n    TMPDIR = /home/guest\n# Done.\n\n\n", "explain": "The ENVIRON array contains the values of the current environment:\nEnvironment variables can also be assigned to awk variables before execution, with (-v) options:\nListing all the environment variables:\n"}]