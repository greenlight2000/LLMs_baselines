[{"task_name": "N'th", "task_url": "https://rosettacode.org/wiki/N%27th", "task_cat": "String manipulation", "lang": "Python", "code": "\n_suffix = ['th', 'st', 'nd', 'rd', 'th', 'th', 'th', 'th', 'th', 'th']\n\ndef nth(n):\n    return \"%i'%s\" % (n, _suffix[n%10] if n % 100 <= 10 or n % 100 > 20 else 'th')\n\nif __name__ == '__main__':\n    for j in range(0,1001, 250):\n        print(' '.join(nth(i) for i in list(range(j, j+25))))\n\n\nOutput:\n0'th 1'st 2'nd 3'rd 4'th 5'th 6'th 7'th 8'th 9'th 10'th 11'th 12'th 13'th 14'th 15'th 16'th 17'th 18'th 19'th 20'th 21'st 22'nd 23'rd 24'th\n250'th 251'st 252'nd 253'rd 254'th 255'th 256'th 257'th 258'th 259'th 260'th 261'st 262'nd 263'rd 264'th 265'th 266'th 267'th 268'th 269'th 270'th 271'st 272'nd 273'rd 274'th\n500'th 501'st 502'nd 503'rd 504'th 505'th 506'th 507'th 508'th 509'th 510'th 511'th 512'th 513'th 514'th 515'th 516'th 517'th 518'th 519'th 520'th 521'st 522'nd 523'rd 524'th\n750'th 751'st 752'nd 753'rd 754'th 755'th 756'th 757'th 758'th 759'th 760'th 761'st 762'nd 763'rd 764'th 765'th 766'th 767'th 768'th 769'th 770'th 771'st 772'nd 773'rd 774'th\n1000'th 1001'st 1002'nd 1003'rd 1004'th 1005'th 1006'th 1007'th 1008'th 1009'th 1010'th 1011'th 1012'th 1013'th 1014'th 1015'th 1016'th 1017'th 1018'th 1019'th 1020'th 1021'st 1022'nd 1023'rd 1024'th\n\n#!/usr/bin/env python3\n\ndef ord(n):\n    try:\n        s = ['st', 'nd', 'rd'][(n-1)%10]\n        if (n-10)%100//10:\n            return str(n)+s\n    except IndexError:\n        pass\n    return str(n)+'th'\n\nif __name__ == '__main__':\n    print(*(ord(n) for n in range(26)))\n    print(*(ord(n) for n in range(250,266)))\n    print(*(ord(n) for n in range(1000,1026)))\n\n\nOutput:\n0th 1st 2nd 3rd 4th 5th 6th 7th 8th 9th 10th 11th 12th 13th 14th 15th 16th 17th\n18th 19th 20th 21st 22nd 23rd 24th 25th\n250th 251st 252nd 253rd 254th 255th 256th 257th 258th 259th 260th 261st 262nd \n263rd 264th 265th\n1000th 1001st 1002nd 1003rd 1004th 1005th 1006th 1007th 1008th 1009th 1010th \n1011th 1012th 1013th 1014th 1015th 1016th 1017th 1018th 1019th 1020th 1021st \n1022nd 1023rd 1024th 1025th\n\n", "explain": "Alternate version\n"}, {"task_name": "N'th", "task_url": "https://rosettacode.org/wiki/N%27th", "task_cat": "String manipulation", "lang": "C", "code": "\n#include <stdio.h>\n \nchar* addSuffix(int num, char* buf, size_t len)\n{\n    char *suffixes[4] = { \"th\", \"st\", \"nd\", \"rd\" };\n    int i;\n\n    switch (num % 10)\n    {\n        case 1 : i = (num % 100 == 11) ? 0 : 1;\n\t         break;\n        case 2 : i = (num % 100 == 12) ? 0 : 2;\n                 break;\n        case 3 : i = (num % 100 == 13) ? 0 : 3;\n                 break;\n        default: i = 0;\n    };\n \n    snprintf(buf, len, \"%d%s\", num, suffixes[i]);\n    return buf;\n}\n\nint main(void)\n{\n    int i;\n\n    printf(\"Set [0,25]:\\n\");\n    for (i = 0; i < 26; i++)\n    {\n        char s[5];\n        printf(\"%s \", addSuffix(i, s, 5));\n    }\n    putchar('\\n'); \n\n    printf(\"Set [250,265]:\\n\");\n    for (i = 250; i < 266; i++)\n    {\n        char s[6];\n        printf(\"%s \", addSuffix(i, s, 6));\n    }\n    putchar('\\n'); \n\n    printf(\"Set [1000,1025]:\\n\");\n    for (i = 1000; i < 1026; i++)\n    {\n        char s[7];\n        printf(\"%s \", addSuffix(i, s, 7));\n    }\n    putchar('\\n');\n\n    return 0;\n}\n\n\n#include <stdlib.h>\n#include <stdio.h>\n\nstatic int digits(const int x) {\n    if (x / 10 == 0) return 1;\n    return 1 + digits(x / 10);\n}\n\nstatic char * get_ordinal(const int i) {\n    const int string_size = digits(i) + 3;\n    char * o_number = malloc(string_size);\n    char * ordinal;\n    if(i % 100 >= 11 && i % 100 <= 13) ordinal = \"th\";\n    else ordinal = i/10==1?\"th\":i%10==1?\"st\":i%10==2?\"nd\":i%10==3?\"rd\":\"th\";\n    sprintf_s(o_number, string_size, \"%d%s\", i, ordinal);\n    return o_number;\n}\n\nstatic void print_range(const int begin, const int end) {\n    printf(\"Set [%d,%d]:\\n\", begin, end);\n    for (int i = begin; i <= end; i++) {\n        char * o_number = get_ordinal(i);\n        printf(\"%s \", o_number);\n        free(o_number);\n    }\n    printf(\"\\n\");\n}\n\nint main(void) {\n    print_range(0, 25);\n    print_range(250, 265);\n    print_range(1000, 1025);\n}\n\n\nOutput:\nSet [0,25]\u00a0:\n0th 1st 2nd 3rd 4th 5th 6th 7th 8th 9th 10th 11th 12th 13th 14th 15th 16th 17th 18th 19th 20th 21st 22nd 23rd 24th 25th \nSet [250,265]\u00a0:\n250th 251st 252nd 253rd 254th 255th 256th 257th 258th 259th 260th 261st 262nd 263rd 264th 265th \nSet [1000,1025]\u00a0:\n1000th 1001st 1002nd 1003rd 1004th 1005th 1006th 1007th 1008th 1009th 1010th 1011th 1012th 1013th 1014th 1015th 1016th 1017th 1018th 1019th 1020th 1021st 1022nd 1023rd 1024th 1025th\n", "explain": "Another method with dynamic memory allocation\n"}, {"task_name": "N'th", "task_url": "https://rosettacode.org/wiki/N%27th", "task_cat": "String manipulation", "lang": "C++", "code": "\n#include <string>\n#include <iostream>\n\nusing namespace std;\n\nstring Suffix(int num)\n{\n    switch (num % 10)\n    {\n        case 1 : if(num % 100 != 11) return \"st\";\n           break;\n        case 2 : if(num % 100 != 12) return \"nd\";\n           break;\n        case 3 : if(num % 100 != 13) return \"rd\";\n    }\n\n    return \"th\";\n}\n\nint main()\n{\n    cout << \"Set [0,25]:\" << endl;\n    for (int i = 0; i < 26; i++)\n        cout << i << Suffix(i) << \" \";\n    \n    cout << endl;\n\n    cout << \"Set [250,265]:\" << endl;\n    for (int i = 250; i < 266; i++)\n        cout << i << Suffix(i) << \" \";\n   \n    cout << endl;\n\n    cout << \"Set [1000,1025]:\" << endl;\n    for (int i = 1000; i < 1026; i++)\n        cout << i << Suffix(i) << \" \";\n   \n    cout << endl;\n\n    return 0;\n}\n\n\nOutput:\nSet [0,25]\u00a0:\n0th 1st 2nd 3rd 4th 5th 6th 7th 8th 9th 10th 11th 12th 13th 14th 15th 16th 17th 18th 19th 20th 21st 22nd 23rd 24th 25th \nSet [250,265]\u00a0:\n250th 251st 252nd 253rd 254th 255th 256th 257th 258th 259th 260th 261st 262nd 263rd 264th 265th \nSet [1000,1025]\u00a0:\n1000th 1001st 1002nd 1003rd 1004th 1005th 1006th 1007th 1008th 1009th 1010th 1011th 1012th 1013th 1014th 1015th 1016th 1017th 1018th 1019th 1020th 1021st 1022nd 1023rd 1024th 1025th\n", "explain": ""}, {"task_name": "N'th", "task_url": "https://rosettacode.org/wiki/N%27th", "task_cat": "String manipulation", "lang": "Java", "code": "\npublic class Nth {\n\tpublic static String ordinalAbbrev(int n){\n\t\tString ans = \"th\"; //most of the time it should be \"th\"\n\t\tif(n % 100 / 10 == 1) return ans; //teens are all \"th\"\n\t\tswitch(n % 10){\n\t\t\tcase 1: ans = \"st\"; break;\n\t\t\tcase 2: ans = \"nd\"; break;\n\t\t\tcase 3: ans = \"rd\"; break;\n\t\t}\n\t\treturn ans;\n\t}\n\t\n\tpublic static void main(String[] args){\n\t\tfor(int i = 0; i <= 25;i++){\n\t\t\tSystem.out.print(i + ordinalAbbrev(i) + \" \");\n\t\t}\n\t\tSystem.out.println();\n\t\tfor(int i = 250; i <= 265;i++){\n\t\t\tSystem.out.print(i + ordinalAbbrev(i) + \" \");\n\t\t}\n\t\tSystem.out.println();\n\t\tfor(int i = 1000; i <= 1025;i++){\n\t\t\tSystem.out.print(i + ordinalAbbrev(i) + \" \");\n\t\t}\n\t}\n}\n\nWorks with: Java version 8+\npackage nth;\n\nimport java.util.stream.IntStream;\nimport java.util.stream.Stream;\n\npublic interface Nth {\n  public static String suffix(int n){\n    if(n % 100 / 10 == 1){\n      return \"th\"; //teens are all \"th\"\n    }\n    switch(n % 10){\n      case 1: return \"st\";\n      case 2: return \"nd\";\n      case 3: return \"rd\";\n      default: return \"th\"; //most of the time it should be \"th\"\n    }\n  }\n\n  public static void print(int start, int end) {\n    IntStream.rangeClosed(start, end)\n      .parallel()\n      .mapToObj(i -> i + suffix(i) + \" \")\n      .reduce(String::concat)\n      .ifPresent(System.out::println)\n    ;\n  }\n\n  public static void print(int[] startAndEnd) {\n    print(startAndEnd[0], startAndEnd[1]);\n  }\n\n  public static int[] startAndEnd(int start, int end) {\n    return new int[] {\n      start,\n      end\n    };\n  }\n \n  public static void main(String... arguments){\n    Stream.of(\n      startAndEnd(0, 25),\n      startAndEnd(250, 265),\n      startAndEnd(1000, 1025)\n    )\n      .forEach(Nth::print)\n    ;\n  }\n}\n\n\nOutput:\n0th 1st 2nd 3rd 4th 5th 6th 7th 8th 9th 10th 11th 12th 13th 14th 15th 16th 17th 18th 19th 20th 21st 22nd 23rd 24th 25th \n250th 251st 252nd 253rd 254th 255th 256th 257th 258th 259th 260th 261st 262nd 263rd 264th 265th \n1000th 1001st 1002nd 1003rd 1004th 1005th 1006th 1007th 1008th 1009th 1010th 1011th 1012th 1013th 1014th 1015th 1016th 1017th 1018th 1019th 1020th 1021st 1022nd 1023rd 1024th 1025th \n", "explain": ""}, {"task_name": "N'th", "task_url": "https://rosettacode.org/wiki/N%27th", "task_cat": "String manipulation", "lang": "C#", "code": "\nTranslation of: Ruby\nusing System;\nusing System.Linq;\n\nclass Program\n{\n    private static string Ordinalize(int i)\n    {\n        i = Math.Abs(i);\n\n        if (new[] {11, 12, 13}.Contains(i%100))\n            return i + \"th\";\n\n        switch (i%10)\n        {\n            case 1:\n                return i + \"st\";\n            case 2:\n                return i + \"nd\";\n            case 3:\n                return i + \"rd\";\n            default:\n                return i + \"th\";\n        }\n    }\n\n    static void Main()\n    {\n        Console.WriteLine(string.Join(\" \", Enumerable.Range(0, 26).Select(Ordinalize)));\n        Console.WriteLine(string.Join(\" \", Enumerable.Range(250, 16).Select(Ordinalize)));\n        Console.WriteLine(string.Join(\" \", Enumerable.Range(1000, 26).Select(Ordinalize)));\n    }\n}\n\n\nusing System;\n\nstatic string Ordinalize(int i)\n{\n    return i + (\n        i % 100 is >= 11 and <= 13 ? \"th\" :\n        i % 10 == 1 ? \"st\" :\n        i % 10 == 2 ? \"nd\" :\n        i % 10 == 3 ? \"rd\" :\n        \"th\");\n}\n\nstatic void PrintRange(int begin, int end)\n{\n    for(var i = begin; i <= end; i++)\n        Console.Write(Ordinalize(i) + (i == end ? \"\" : \" \"));\n    Console.WriteLine();\n}\n\nPrintRange(0, 25);\nPrintRange(250, 265);\nPrintRange(1000, 1025);\n\n\nOutput:\n0th 1st 2nd 3rd 4th 5th 6th 7th 8th 9th 10th 11th 12th 13th 14th 15th 16th 17th 18th 19th 20th 21st 22nd 23rd 24th 25th\n250th 251st 252nd 253rd 254th 255th 256th 257th 258th 259th 260th 261st 262nd 263rd 264th 265th\n1000th 1001st 1002nd 1003rd 1004th 1005th 1006th 1007th 1008th 1009th 1010th 1011th 1012th 1013th 1014th 1015th 1016th 1017th 1018th 1019th 1020th 1021st 1022nd 1023rd 1024th 1025th\n", "explain": "Dotnet 5 version without LINQ\n"}, {"task_name": "N'th", "task_url": "https://rosettacode.org/wiki/N%27th", "task_cat": "String manipulation", "lang": "JavaScript", "code": "\nES5[edit]\nconsole.log(function () {\n\n  var lstSuffix = 'th st nd rd th th th th th th'.split(' '),\n\n    fnOrdinalForm = function (n) {\n      return n.toString() + (\n        11 <= n % 100 && 13 >= n % 100 ?\n        \"th\" : lstSuffix[n % 10]\n      );\n    },\n\n    range = function (m, n) {\n      return Array.apply(\n        null, Array(n - m + 1)\n      ).map(function (x, i) {\n        return m + i;\n      });\n    };\n\n  return [[0, 25], [250, 265], [1000, 1025]].map(function (tpl) {\n    return range.apply(null, tpl).map(fnOrdinalForm).join(' ');\n  }).join('\\n\\n');\n  \n}());\n\n\n\nOutput:\n0th 1st 2nd 3rd 4th 5th 6th 7th 8th 9th 10th 11th 12th 13th 14th 15th 16th 17th 18th 19th 20th 21st 22nd 23rd 24th 25th\n\n250th 251st 252nd 253rd 254th 255th 256th 257th 258th 259th 260th 261st 262nd 263rd 264th 265th\n\n1000th 1001st 1002nd 1003rd 1004th 1005th 1006th 1007th 1008th 1009th 1010th 1011th 1012th 1013th 1014th 1015th 1016th 1017th 1018th 1019th 1020th 1021st 1022nd 1023rd 1024th 1025th\n\n\nES6[edit]\n(function (lstTestRanges) {\n    'use strict'\n\n    let lstSuffix = 'th st nd rd th th th th th th'.split(' '),\n\n        // ordinalString\u00a0:: Int -> String\n        ordinalString = n =>\n            n.toString() + (\n                11 <= n % 100 && 13 >= n % 100 ?\n                \"th\" : lstSuffix[n % 10]\n            ),\n    \n        // range\u00a0:: Int -> Int -> [Int]\n        range = (m, n) =>\n            Array.from({\n                length: (n - m) + 1\n            }, (_, i) => m + i);\n            \n\n    return lstTestRanges\n        .map(tpl => range\n            .apply(null, tpl)\n            .map(ordinalString)\n        );\n\n})([[0, 25], [250, 265], [1000, 1025]]);\n\n\n\nOutput:\n[[\"0th\", \"1st\", \"2nd\", \"3rd\", \"4th\", \"5th\", \"6th\", \"7th\", \"8th\", \n\"9th\", \"10th\", \"11th\", \"12th\", \"13th\", \"14th\", \"15th\", \"16th\", \n\"17th\", \"18th\", \"19th\", \"20th\", \"21st\", \"22nd\", \"23rd\", \"24th\", \"25th\"], \n[\"250th\", \"251st\", \"252nd\", \"253rd\", \"254th\", \"255th\", \"256th\", \"257th\", \n\"258th\", \"259th\", \"260th\", \"261st\", \"262nd\", \"263rd\", \"264th\", \"265th\"], \n[\"1000th\", \"1001st\", \"1002nd\", \"1003rd\", \"1004th\", \"1005th\", \"1006th\", \n\"1007th\", \"1008th\", \"1009th\", \"1010th\", \"1011th\", \"1012th\", \"1013th\", \n\"1014th\", \"1015th\", \"1016th\", \"1017th\", \"1018th\", \"1019th\", \"1020th\", \n\"1021st\", \"1022nd\", \"1023rd\", \"1024th\", \"1025th\"]]\n", "explain": "\n\n\n"}, {"task_name": "N'th", "task_url": "https://rosettacode.org/wiki/N%27th", "task_cat": "String manipulation", "lang": "SQL", "code": "\n\nselect level card,\n        to_char(to_date(level,'j'),'fmjth') ord\nfrom dual\nconnect by level <= 15;\n\nselect to_char(to_date(5373485,'j'),'fmjth')\nfrom dual;\n\n      CARD ORD\n---------- ------------------------------\n         1 1st\n         2 2nd\n         3 3rd\n         4 4th\n         5 5th\n         6 6th\n         7 7th\n         8 8th\n         9 9th\n        10 10th\n        11 11th\n        12 12th\n        13 13th\n        14 14th\n        15 15th\n\n15 rows selected.\n\nselect to_char(to_date(5373485,'j'),'fmjth')\n                       *\nERROR at line 1:\nORA-01854: julian date must be between 1 and 5373484\n\n", "explain": "Oracle\n"}, {"task_name": "N'th", "task_url": "https://rosettacode.org/wiki/N%27th", "task_cat": "String manipulation", "lang": "PHP", "code": "\nfunction nth($num) {\n  $os = \"th\";\n  if ($num % 100 <= 10 or $num % 100 > 20) {\n    switch ($num % 10) {\n      case 1:\n        $os = \"st\";\n        break;\n      case 2:\n        $os = \"nd\";\n        break;\n      case 3:\n        $os = \"rd\";\n        break;\n    }\n  } \n  return $num . $os;\n}\n\nforeach ([[0,25], [250,265], [1000,1025]] as $i) {\n  while ($i[0] <= $i[1]) {\n    echo nth($i[0]) . \" \";\n    $i[0]++;\n  }\n  echo \"\\n\";\n}\n\n\nOutput:\n0th 1st 2nd 3rd 4th 5th 6th 7th 8th 9th 10th 11th 12th 13th 14th 15th 16th 17th 18th 19th 20th 21st 22nd 23rd 24th 25th \n250th 251st 252nd 253rd 254th 255th 256th 257th 258th 259th 260th 261st 262nd 263rd 264th 265th \n1000th 1001st 1002nd 1003rd 1004th 1005th 1006th 1007th 1008th 1009th 1010th 1011th 1012th 1013th 1014th 1015th 1016th 1017th 1018th 1019th 1020th 1021st 1022nd 1023rd 1024th 1025th\n\n", "explain": ""}, {"task_name": "N'th", "task_url": "https://rosettacode.org/wiki/N%27th", "task_cat": "String manipulation", "lang": "MATLAB", "code": "\nfunction s = nth(n)\n    tens = mod(n, 100);\n    if tens > 9 && tens < 20\n        suf = 'th';\n    else\n        switch mod(n, 10)\n            case 1\n                suf = 'st';\n            case 2\n                suf = 'nd';\n            case 3\n                suf = 'rd';\n            otherwise\n                suf = 'th';\n        end\n    end\n    s = sprintf('%d%s', n, suf);\nend\n\n\nOutput:\n0th 1st 2nd 3rd 4th 5th 6th 7th 8th 9th 10th 11th 12th 13th 14th 15th 16th 17th 18th 19th 20th 21st 22nd 23rd 24th 25th\n250th 251st 252nd 253rd 254th 255th 256th 257th 258th 259th 260th 261st 262nd 263rd 264th 265th\n1000th 1001st 1002nd 1003rd 1004th 1005th 1006th 1007th 1008th 1009th 1010th 1011th 1012th 1013th 1014th 1015th 1016th 1017th 1018th 1019th 1020th 1021st 1022nd 1023rd 1024th 1025th\n\n", "explain": ""}, {"task_name": "N'th", "task_url": "https://rosettacode.org/wiki/N%27th", "task_cat": "String manipulation", "lang": "Fortran", "code": "\n\n!-*- mode: compilation; default-directory: \"/tmp/\" -*-\n!Compilation started at Fri Jun  6 15:40:18\n!\n!a=./f && make -k $a && echo 0 25 | $a && echo 250 265 | $a && echo 1000 1025 | $a\n!gfortran -std=f2008 -Wall -fopenmp -ffree-form -fall-intrinsics -fimplicit-none -g f.f08 -o f\n!                  0'th                  1'st                  2'nd\n!                  3'rd                  4'th                  5'th\n!                  6'th                  7'th                  8'th\n!                  9'th                 10'th                 11'th\n!                 12'th                 13'th                 14'th\n!                 15'th                 16'th                 17'th\n!                 18'th                 19'th                 20'th\n!                 21'st                 22'nd                 23'rd\n!                 24'th                 25'th\n!                                      250'th                251'st\n!                252'nd                253'rd                254'th\n!                255'th                256'th                257'th\n!                258'th                259'th                260'th\n!                261'st                262'nd                263'rd\n!                264'th                265'th\n!                                     1000th                1001st \n!               1002nd                1003rd                1004th \n!               1005th                1006th                1007th \n!               1008th                1009th                1010th \n!               1011th                1012th                1013th \n!               1014th                1015th                1016th \n!               1017th                1018th                1019th \n!               1020th                1021st                1022nd \n!               1023rd                1024th                1025th \n!\n!Compilation finished at Fri Jun  6 15:40:18\n\nprogram nth\n  implicit none\n  logical :: need\n  integer :: here, there, n, i, iostat\n  read(5,*,iostat=iostat) here, there\n  if (iostat .ne. 0) then\n     write(6,*)'such bad input never before seen.'\n     write(6,*)'I AYE EYE QUIT!'\n     call exit(1)\n  end if\n  need = .false.\n  n = abs(there - here) + 1\n  i = 0\n  do while (0 /= mod(3+mod(here-i, 3), 3))\n     write(6,'(a22)',advance='no') ''\n     i = i+1\n  end do\n  do i = here, there, sign(1, there-here)\n     write(6,'(a22)',advance='no') ordinate(i)\n     if (2 /= mod(i,3)) then\n        need = .true.\n     else\n        write(6,'(a)')''\n        need = .false.\n     end if\n  end do\n  if (need) write(6,'(a)')''\n\ncontains\n\n  character(len=22) function ordinate(n)\n    character(len=19) :: a\n    character(len=20), parameter :: &\n         &a09 =   \"thstndrdthththththth\",&\n         &ateen = \"thththththththththth\"\n    integer :: ones, tens, ones_index\n    integer, intent(in) :: n\n    write(a,'(i19)') n\n    ones = mod(n,10)\n    tens = mod(n,100)\n    ones_index = ones*2+1\n    if (n < 1000) then\n       if ((10 .le. tens) .and. (tens .lt. 20)) then\n          ordinate = a // \"'\" // ateen(ones_index:ones_index+1)\n          !            ^^^^^^  remove these characters to remove the important '\n       else\n          ordinate = a // \"'\" // a09(ones_index:ones_index+1)\n          !            ^^^^^^  remove these characters to remove the important '\n       end if\n    else\n       if ((10 .le. tens) .and. (tens .lt. 20)) then\n          ordinate = a // ateen(ones_index:ones_index+1)\n       else\n          ordinate = a // a09(ones_index:ones_index+1)\n       end if\n    end if\n  end function ordinate\n\nend program nth\n\n", "explain": "THE INSTRUCTIONS!\nWrite a function/method/subroutine/... that when given an integer greater than or equal to zero returns a string of the number followed by an apostrophe then the ordinal suffix. \nExample returns would include 1'st 2'nd 3'rd 11'th 111'th 1001'st 1012'th\n\nPlease find the compilation instructions and examples in comments at the start of the source.\n"}, {"task_name": "N'th", "task_url": "https://rosettacode.org/wiki/N%27th", "task_cat": "String manipulation", "lang": "Go", "code": "\nTranslation of: Raku\npackage main\n\nimport \"fmt\"\n\nfunc ord(n int) string {\n    s := \"th\"\n    switch c := n % 10; c {\n    case 1, 2, 3:\n        if n%100/10 == 1 {\n            break\n        }\n        switch c {\n        case 1:\n            s = \"st\"\n        case 2:\n            s = \"nd\"\n        case 3:\n            s = \"rd\"\n        }\n    }\n    return fmt.Sprintf(\"%d%s\", n, s)\n}\n\nfunc main() {\n    for n := 0; n <= 25; n++ {\n        fmt.Printf(\"%s \", ord(n))\n    }\n    fmt.Println()\n    for n := 250; n <= 265; n++ {\n        fmt.Printf(\"%s \", ord(n))\n    }\n    fmt.Println()\n    for n := 1000; n <= 1025; n++ {\n        fmt.Printf(\"%s \", ord(n))\n    }\n    fmt.Println()\n}\n\n\nOutput:\n0th 1st 2nd 3rd 4th 5th 6th 7th 8th 9th 10th 11th 12th 13th 14th 15th 16th 17th 18th 19th 20th 21st 22nd 23rd 24th 25th \n250th 251st 252nd 253rd 254th 255th 256th 257th 258th 259th 260th 261st 262nd 263rd 264th 265th \n1000th 1001st 1002nd 1003rd 1004th 1005th 1006th 1007th 1008th 1009th 1010th 1011th 1012th 1013th 1014th 1015th 1016th 1017th 1018th 1019th 1020th 1021st 1022nd 1023rd 1024th 1025th \n\n", "explain": ""}, {"task_name": "N'th", "task_url": "https://rosettacode.org/wiki/N%27th", "task_cat": "String manipulation", "lang": "Delphi", "code": "\n\n", "explain": "See Pascal.\n"}, {"task_name": "N'th", "task_url": "https://rosettacode.org/wiki/N%27th", "task_cat": "String manipulation", "lang": "Ruby", "code": "\n\nclass Integer\n  def ordinalize\n    num = self.abs\n    ordinal = if (11..13).include?(num % 100)\n      \"th\"\n    else\n      case num % 10\n        when 1; \"st\"\n        when 2; \"nd\"\n        when 3; \"rd\"\n        else    \"th\"\n      end\n    end\n    \"#{self}#{ordinal}\"\n  end\nend\n\n[(0..25),(250..265),(1000..1025)].each{|r| puts r.map(&:ordinalize).join(\", \"); puts}\n\n\nOutput:\n0th, 1st, 2nd, 3rd, 4th, 5th, 6th, 7th, 8th, 9th, 10th, 11th, 12th, 13th, 14th, 15th, 16th, 17th, 18th, 19th, 20th, 21st, 22nd, 23rd, 24th, 25th\n\n250th, 251st, 252nd, 253rd, 254th, 255th, 256th, 257th, 258th, 259th, 260th, 261st, 262nd, 263rd, 264th, 265th\n\n1000th, 1001st, 1002nd, 1003rd, 1004th, 1005th, 1006th, 1007th, 1008th, 1009th, 1010th, 1011th, 1012th, 1013th, 1014th, 1015th, 1016th, 1017th, 1018th, 1019th, 1020th, 1021st, 1022nd, 1023rd, 1024th, 1025th\n\n", "explain": "Code (slightly adapted) and methodname taken from ActiveSupport (Ruby on Rails).\n"}, {"task_name": "N'th", "task_url": "https://rosettacode.org/wiki/N%27th", "task_cat": "String manipulation", "lang": "Rust", "code": "\nfn nth(num: isize) -> String {\n    format!(\"{}{}\", num, match (num % 10, num % 100) {\n        (1, 11) | (2, 12) | (3, 13) => \"th\",\n        (1, _) => \"st\",\n        (2, _) => \"nd\",\n        (3, _) => \"rd\",\n        _ => \"th\",\n    })\n}\n\nfn main() {\n    let ranges = [(0, 26), (250, 266), (1000, 1026)];\n    for &(s, e) in &ranges {\n        println!(\"[{}, {})\u00a0:\", s, e);\n        for i in s..e {\n            print!(\"{}, \", nth(i));\n        }\n        println!();\n    }\n}\n\n\nOutput:\n[0, 26)\u00a0:\n0th, 1st, 2nd, 3rd, 4th, 5th, 6th, 7th, 8th, 9th, 10th, 11th, 12th, 13th, 14th, 15th, 16th, 17th, 18th, 19th, 20th, 21st, 22nd, 23rd, 24th, 25th, \n[250, 266)\u00a0:\n250th, 251st, 252nd, 253rd, 254th, 255th, 256th, 257th, 258th, 259th, 260th, 261st, 262nd, 263rd, 264th, 265th, \n[1000, 1026)\u00a0:\n1000th, 1001st, 1002nd, 1003rd, 1004th, 1005th, 1006th, 1007th, 1008th, 1009th, 1010th, 1011th, 1012th, 1013th, 1014th, 1015th, 1016th, 1017th, 1018th, 1019th, 1020th, 1021st, 1022nd, 1023rd, 1024th, 1025th,\n", "explain": ""}, {"task_name": "N'th", "task_url": "https://rosettacode.org/wiki/N%27th", "task_cat": "String manipulation", "lang": "Swift", "code": "\nfunc addSuffix(n:Int) -> String {\n    if n % 100 / 10 == 1 {\n        return \"th\"\n    }\n    \n    switch n % 10 {\n    case 1:\n        return \"st\"\n    case 2:\n        return \"nd\"\n    case 3:\n        return \"rd\"\n    default:\n        return \"th\"\n    }\n}\n\nfor i in 0...25 {\n    print(\"\\(i)\\(addSuffix(i)) \")\n}\nprintln()\nfor i in 250...265 {\n    print(\"\\(i)\\(addSuffix(i)) \")\n}\nprintln()\nfor i in 1000...1025 {\n    print(\"\\(i)\\(addSuffix(i)) \")\n}\nprintln()\n\n\nOutput:\n0th 1st 2nd 3rd 4th 5th 6th 7th 8th 9th 10th 11th 12th 13th 14th 15th 16th 17th 18th 19th 20th 21st 22nd 23rd 24th 25th \n250th 251st 252nd 253rd 254th 255th 256th 257th 258th 259th 260th 261st 262nd 263rd 264th 265th \n1000th 1001st 1002nd 1003rd 1004th 1005th 1006th 1007th 1008th 1009th 1010th 1011th 1012th 1013th 1014th 1015th 1016th 1017th 1018th 1019th 1020th 1021st 1022nd 1023rd 1024th 1025th \n\n", "explain": ""}, {"task_name": "N'th", "task_url": "https://rosettacode.org/wiki/N%27th", "task_cat": "String manipulation", "lang": "R", "code": "\nTranslation of: Python\n\nnth <- function(n)\n{\n  if (length(n) > 1) return(sapply(n, nth))\n  \n  mod <- function(m, n) ifelse(!(m%%n), n, m%%n)\n  suffices <- c(\"th\", \"st\", \"nd\", \"rd\", \"th\", \"th\", \"th\", \"th\", \"th\", \"th\")\n  \n  if (n %% 100 <= 10 || n %% 100 > 20) \n    suffix <- suffices[mod(n+1, 10)]\n  else \n    suffix <- 'th'\n  \n  paste(n, \"'\", suffix, sep=\"\")\n}\n\nrange <- list(0:25, 250:275, 500:525, 750:775, 1000:1025)\n\nsapply(range, nth)\n\n\nOutput:\n      [,1]    [,2]     [,3]     [,4]     [,5]     \n [1,] \"0'th\"  \"250'th\" \"500'th\" \"750'th\" \"1000'th\"\n [2,] \"1'st\"  \"251'st\" \"501'st\" \"751'st\" \"1001'st\"\n [3,] \"2'nd\"  \"252'nd\" \"502'nd\" \"752'nd\" \"1002'nd\"\n [4,] \"3'rd\"  \"253'rd\" \"503'rd\" \"753'rd\" \"1003'rd\"\n [5,] \"4'th\"  \"254'th\" \"504'th\" \"754'th\" \"1004'th\"\n [6,] \"5'th\"  \"255'th\" \"505'th\" \"755'th\" \"1005'th\"\n [7,] \"6'th\"  \"256'th\" \"506'th\" \"756'th\" \"1006'th\"\n [8,] \"7'th\"  \"257'th\" \"507'th\" \"757'th\" \"1007'th\"\n [9,] \"8'th\"  \"258'th\" \"508'th\" \"758'th\" \"1008'th\"\n[10,] \"9'th\"  \"259'th\" \"509'th\" \"759'th\" \"1009'th\"\n[11,] \"10'th\" \"260'th\" \"510'th\" \"760'th\" \"1010'th\"\n[12,] \"11'th\" \"261'st\" \"511'th\" \"761'st\" \"1011'th\"\n[13,] \"12'th\" \"262'nd\" \"512'th\" \"762'nd\" \"1012'th\"\n[14,] \"13'th\" \"263'rd\" \"513'th\" \"763'rd\" \"1013'th\"\n[15,] \"14'th\" \"264'th\" \"514'th\" \"764'th\" \"1014'th\"\n[16,] \"15'th\" \"265'th\" \"515'th\" \"765'th\" \"1015'th\"\n[17,] \"16'th\" \"266'th\" \"516'th\" \"766'th\" \"1016'th\"\n[18,] \"17'th\" \"267'th\" \"517'th\" \"767'th\" \"1017'th\"\n[19,] \"18'th\" \"268'th\" \"518'th\" \"768'th\" \"1018'th\"\n[20,] \"19'th\" \"269'th\" \"519'th\" \"769'th\" \"1019'th\"\n[21,] \"20'th\" \"270'th\" \"520'th\" \"770'th\" \"1020'th\"\n[22,] \"21'st\" \"271'st\" \"521'st\" \"771'st\" \"1021'st\"\n[23,] \"22'nd\" \"272'nd\" \"522'nd\" \"772'nd\" \"1022'nd\"\n[24,] \"23'rd\" \"273'rd\" \"523'rd\" \"773'rd\" \"1023'rd\"\n[25,] \"24'th\" \"274'th\" \"524'th\" \"774'th\" \"1024'th\"\n[26,] \"25'th\" \"275'th\" \"525'th\" \"775'th\" \"1025'th\"\n\n", "explain": "Note that R vectors are 1-indexed.\n"}, {"task_name": "N'th", "task_url": "https://rosettacode.org/wiki/N%27th", "task_cat": "String manipulation", "lang": "COBOL", "code": "\n\nIDENTIFICATION DIVISION.\nPROGRAM-ID. NTH-PROGRAM.\nDATA DIVISION.\nWORKING-STORAGE SECTION.\n01  WS-NUMBER.\n    05 N               PIC 9(8).\n    05 LAST-TWO-DIGITS PIC 99.\n    05 LAST-DIGIT      PIC 9.\n    05 N-TO-OUTPUT     PIC Z(7)9.\n    05 SUFFIX          PIC AA.\nPROCEDURE DIVISION.\nTEST-PARAGRAPH.\n    PERFORM NTH-PARAGRAPH VARYING N FROM 0 BY 1 UNTIL N IS GREATER THAN 25.\n    PERFORM NTH-PARAGRAPH VARYING N FROM 250 BY 1 UNTIL N IS GREATER THAN 265.\n    PERFORM NTH-PARAGRAPH VARYING N FROM 1000 BY 1 UNTIL N IS GREATER THAN 1025.\n    STOP RUN.\nNTH-PARAGRAPH.\n    MOVE 'TH' TO SUFFIX.\n    MOVE N (7:2) TO LAST-TWO-DIGITS.\n    IF LAST-TWO-DIGITS IS LESS THAN 4,\n    OR LAST-TWO-DIGITS IS GREATER THAN 20,\n    THEN PERFORM DECISION-PARAGRAPH.\n    MOVE N TO N-TO-OUTPUT.\n    DISPLAY N-TO-OUTPUT WITH NO ADVANCING.\n    DISPLAY SUFFIX WITH NO ADVANCING.\n    DISPLAY SPACE WITH NO ADVANCING.\nDECISION-PARAGRAPH.\n    MOVE N (8:1) TO LAST-DIGIT.\n    IF LAST-DIGIT IS EQUAL TO 1 THEN MOVE 'ST' TO SUFFIX.\n    IF LAST-DIGIT IS EQUAL TO 2 THEN MOVE 'ND' TO SUFFIX.\n    IF LAST-DIGIT IS EQUAL TO 3 THEN MOVE 'RD' TO SUFFIX.\n\n\n       0TH        1ST        2ND        3RD        4TH        5TH        6TH        7TH        8TH        9TH       10TH       11TH       12TH       13TH       14TH       15TH       16TH       17TH       18TH       19TH       20TH       21ST       22ND       23RD       24TH       25TH      250TH      251ST      252ND      253RD      254TH      255TH      256TH      257TH      258TH      259TH      260TH      261ST      262ND      263RD      264TH      265TH     1000TH     1001ST     1002ND     1003RD     1004TH     1005TH     1006TH     1007TH     1008TH     1009TH     1010TH     1011TH     1012TH     1013TH     1014TH     1015TH     1016TH     1017TH     1018TH     1019TH     1020TH     1021ST     1022ND     1023RD     1024TH     1025TH\n", "explain": "COBOL stores numbers in decimal form, so there is no need to use a modulo function: the last digit or the last two digits can be extracted directly.\nOutput:\n"}, {"task_name": "N'th", "task_url": "https://rosettacode.org/wiki/N%27th", "task_cat": "String manipulation", "lang": "Ada", "code": "\nwith Ada.Text_IO;\n\nprocedure Nth is\n   \n   function Suffix(N: Natural) return String is\n   begin\n      if    N mod 10 = 1 and then N mod 100 /= 11 then return \"st\";\n      elsif N mod 10 = 2 and then N mod 100 /= 12 then return \"nd\";\n      elsif N mod 10 = 3 and then N mod 100 /= 13 then return \"rd\";\n      else return \"th\";\n      end if;\n   end Suffix;\n      \n   procedure Print_Images(From, To: Natural) is\n   begin\n      for I in From .. To loop\n\t Ada.Text_IO.Put(Natural'Image(I) & Suffix(I));\n      end loop;\n      Ada.Text_IO.New_Line;\n   end Print_Images;\n   \nbegin\n   Print_Images(   0,   25);\n   Print_Images( 250,  265);\n   Print_Images(1000, 1025);\nend Nth;\n\n\nOutput:\n 0th 1st 2nd 3rd 4th 5th 6th 7th 8th 9th 10th 11th 12th 13th 14th 15th 16th 17th 18th 19th 20th 21st 22nd 23rd 24th 25th\n 250th 251st 252nd 253rd 254th 255th 256th 257th 258th 259th 260th 261st 262nd 263rd 264th 265th\n 1000th 1001st 1002nd 1003rd 1004th 1005th 1006th 1007th 1008th 1009th 1010th 1011th 1012th 1013th 1014th 1015th 1016th 1017th 1018th 1019th 1020th 1021st 1022nd 1023rd 1024th 1025th\n", "explain": ""}, {"task_name": "N'th", "task_url": "https://rosettacode.org/wiki/N%27th", "task_cat": "String manipulation", "lang": "Julia", "code": "\nusing Printf\n\n\nfunction ordinal(n::Integer)\n    n < 0 && throw(DomainError())\n    suffixes = (\"st\", \"nd\", \"rd\")\n    u = n % 10\n    t = n \u00f7 10 % 10\n    if u > 3 || u == 0 || t == 1\n        suf = \"th\"\n    else\n        suf = suffixes[u]\n    end\n    return string(n, suf)\nend\n\n\nprintln(\"Tests of ordinal formatting of integers.\")\nfor (i, n) in enumerate(0:25)\n    (i - 1) % 10 == 0 && println()\n    @printf(\"%7s\", ordinal(n))\nend\n\nprintln()\nfor (i, n) in enumerate(250:265)\n    (i - 1) % 10 == 0 && println()\n    @printf(\"%7s\", ordinal(n))\nend\n\nprintln()\nfor (i, n) in enumerate(1000:1025)\n    (i - 1) % 10 == 0 && println()\n    @printf(\"%7s\", ordinal(n))\nend\n\n\nNth(x::Integer) = if x % 100 \u2208 [11, 12, 13] \"th\" else [\"th\", \"st\", \"nd\", \"rd\", \"th\"][min(x % 10 + 1, 5)] end\nNthA(x::Integer) = \"$(x)'$(Nth(x)) \"\n[0:25..., 250:265..., 1000:1025...] .|> NthA .|> print;\n\n\nOutput:\nTests of ordinal formatting of integers.\n\n    0th    1st    2nd    3rd    4th    5th    6th    7th    8th    9th\n   10th   11th   12th   13th   14th   15th   16th   17th   18th   19th\n   20th   21st   22nd   23rd   24th   25th\n\n  250th  251st  252nd  253rd  254th  255th  256th  257th  258th  259th\n  260th  261st  262nd  263rd  264th  265th\n\n 1000th 1001st 1002nd 1003rd 1004th 1005th 1006th 1007th 1008th 1009th\n 1010th 1011th 1012th 1013th 1014th 1015th 1016th 1017th 1018th 1019th\n 1020th 1021st 1022nd 1023rd 1024th 1025th\n", "explain": "Function:\nMain:\nMain2:\n"}, {"task_name": "N'th", "task_url": "https://rosettacode.org/wiki/N%27th", "task_cat": "String manipulation", "lang": "Kotlin", "code": "\nfun Int.ordinalAbbrev() =\n        if (this % 100 / 10 == 1) \"th\"\n        else when (this % 10) { 1 -> \"st\" 2 -> \"nd\" 3 -> \"rd\" else -> \"th\" }\n\nfun IntRange.ordinalAbbrev() = map { \"$it\" + it.ordinalAbbrev() }.joinToString(\" \")\n\nfun main(args: Array<String>) {\n    listOf((0..25), (250..265), (1000..1025)).forEach { println(it.ordinalAbbrev()) }\n}\n\n", "explain": ""}, {"task_name": "N'th", "task_url": "https://rosettacode.org/wiki/N%27th", "task_cat": "String manipulation", "lang": "Perl", "code": "\nTranslation of: Raku\n\nuse 5.10.0;\nmy %irregulars = ( 1 => 'st',\n                   2 => 'nd',\n                   3 => 'rd',\n                  11 => 'th',\n                  12 => 'th',\n                  13 => 'th');\nsub nth\n{\n    my $n = shift;\n    $n . # q(') . # Uncomment this to add apostrophes to output\n    ($irregulars{$n % 100} // $irregulars{$n % 10} // 'th');\n}\n\nsub range { join ' ', map { nth($_) } @{$_[0]} }\nprint range($_), \"\\n\" for ([0..25], [250..265], [1000..1025]);\n\n\nOutput:\n0th 1st 2nd 3rd 4th 5th 6th 7th 8th 9th 10th 11th 12th 13th 14th 15th 16th 17th 18th 19th 20th 21st 22nd 23rd 24th 25th\n250th 251st 252nd 253rd 254th 255th 256th 257th 258th 259th 260th 261st 262nd 263rd 264th 265th\n1000th 1001st 1002nd 1003rd 1004th 1005th 1006th 1007th 1008th 1009th 1010th 1011th 1012th 1013th 1014th 1015th 1016th 1017th 1018th 1019th 1020th 1021st 1022nd 1023rd 1024th 1025th\n\nLibrary: Lingua::EN::Numbers::Ordinate\nuse Lingua::EN::Numbers::Ordinate 'ordinate';\nforeach my $i (0..25, 250..265, 1000..1025) {\n  print ordinate($i),\"\\n\";\n}\n\n", "explain": "Requires Perl 5.10 or newer for the Defined OR operator (//).\nAlternatively, can use a library.\n"}, {"task_name": "N'th", "task_url": "https://rosettacode.org/wiki/N%27th", "task_cat": "String manipulation", "lang": "Prolog", "code": "\nWorks with: SWI-Prolog version 6\n\nnth(N, N_Th) :-\n    ( tween(N)      -> Th = \"th\"\n    ; 1 is N mod 10 -> Th = \"st\"\n    ; 2 is N mod 10 -> Th = \"nd\"\n    ; 3 is N mod 10 -> Th = \"rd\"\n    ; Th = \"th\" ),\n    string_concat(N, Th, N_Th).\n\ntween(N) :- Tween is N mod 100, between(11, 13, Tween).\n\ntest :-\n    forall( between(0,25, N),     (nth(N, N_Th), format('~w, ', N_Th)) ),\n    nl, nl,\n    forall( between(250,265,N),   (nth(N, N_Th), format('~w, ', N_Th)) ),\n    nl, nl,\n    forall( between(1000,1025,N), (nth(N, N_Th), format('~w, ', N_Th)) ).\n\n\nOutput: of `test/0`\n\n?- test.\n0th, 1st, 2nd, 3rd, 4th, 5th, 6th, 7th, 8th, 9th, 10th, 11th, 12th, 13th, 14th, 15th, 16th, 17th, 18th, 19th, 20th, 21st, 22nd, 23rd, 24th, 25th, \n\n250th, 251st, 252nd, 253rd, 254th, 255th, 256th, 257th, 258th, 259th, 260th, 261st, 262nd, 263rd, 264th, 265th, \n\n1000th, 1001st, 1002nd, 1003rd, 1004th, 1005th, 1006th, 1007th, 1008th, 1009th, 1010th, 1011th, 1012th, 1013th, 1014th, 1015th, 1016th, 1017th, 1018th, 1019th, 1020th, 1021st, 1022nd, 1023rd, 1024th, 1025th, \ntrue.\n\n", "explain": "Following Icon:\n"}, {"task_name": "N'th", "task_url": "https://rosettacode.org/wiki/N%27th", "task_cat": "String manipulation", "lang": "Lua", "code": "\n\nfunction getSuffix (n)\n    local lastTwo, lastOne = n % 100, n % 10\n    if lastTwo > 3 and lastTwo < 21 then return \"th\" end\n    if lastOne == 1 then return \"st\" end\n    if lastOne == 2 then return \"nd\" end\n    if lastOne == 3 then return \"rd\" end\n    return \"th\"\nend\n \nfunction Nth (n) return n .. \"'\" .. getSuffix(n) end\n \nfor i = 0, 25 do print(Nth(i), Nth(i + 250), Nth(i + 1000)) end\n\n\nOutput:\n0'th    250'th  1000'th\n1'st    251'st  1001'st\n2'nd    252'nd  1002'nd\n3'rd    253'rd  1003'rd\n4'th    254'th  1004'th\n5'th    255'th  1005'th\n6'th    256'th  1006'th\n7'th    257'th  1007'th\n8'th    258'th  1008'th\n9'th    259'th  1009'th\n10'th   260'th  1010'th\n11'th   261'st  1011'th\n12'th   262'nd  1012'th\n13'th   263'rd  1013'th\n14'th   264'th  1014'th\n15'th   265'th  1015'th\n16'th   266'th  1016'th\n17'th   267'th  1017'th\n18'th   268'th  1018'th\n19'th   269'th  1019'th\n20'th   270'th  1020'th\n21'st   271'st  1021'st\n22'nd   272'nd  1022'nd\n23'rd   273'rd  1023'rd\n24'th   274'th  1024'th\n25'th   275'th  1025'th\n\n", "explain": "The apostrophe just looks weird if you ask me.  No one did, obviously.\n"}, {"task_name": "N'th", "task_url": "https://rosettacode.org/wiki/N%27th", "task_cat": "String manipulation", "lang": "Scala", "code": "\nLibrary: Scalaobject Nth extends App {\n  def abbrevNumber(i: Int) = print(s\"$i${ordinalAbbrev(i)} \")\n\n  def ordinalAbbrev(n: Int) = {\n    val ans = \"th\" //most of the time it should be \"th\"\n    if (n % 100 / 10 == 1) ans //teens are all \"th\"\n    else (n % 10) match {\n      case 1 => \"st\"\n      case 2 => \"nd\"\n      case 3 => \"rd\"\n      case _ => ans\n    }\n  }\n\n  (0 to 25).foreach(abbrevNumber)\n  println()\n  (250 to 265).foreach(abbrevNumber)\n  println();\n  (1000 to 1025).foreach(abbrevNumber)\n}\n\n", "explain": ""}, {"task_name": "N'th", "task_url": "https://rosettacode.org/wiki/N%27th", "task_cat": "String manipulation", "lang": "D", "code": "\nTranslation of: Python\nimport std.stdio, std.string, std.range, std.algorithm;\n\nstring nth(in uint n) pure {\n    static immutable suffix = \"th st nd rd th th th th th th\".split;\n    return \"%d'%s\".format(n, (n % 100 <= 10 || n % 100 > 20) ?\n                             suffix[n % 10] : \"th\");\n}\n\nvoid main() {\n    foreach (r; [iota(26), iota(250, 266), iota(1000, 1026)])\n        writefln(\"%-(%s\u00a0%)\", r.map!nth);\n}\n\n\nOutput:\n0'th 1'st 2'nd 3'rd 4'th 5'th 6'th 7'th 8'th 9'th 10'th 11'th 12'th 13'th 14'th 15'th 16'th 17'th 18'th 19'th 20'th 21'st 22'nd 23'rd 24'th 25'th\n250'th 251'st 252'nd 253'rd 254'th 255'th 256'th 257'th 258'th 259'th 260'th 261'st 262'nd 263'rd 264'th 265'th\n1000'th 1001'st 1002'nd 1003'rd 1004'th 1005'th 1006'th 1007'th 1008'th 1009'th 1010'th 1011'th 1012'th 1013'th 1014'th 1015'th 1016'th 1017'th 1018'th 1019'th 1020'th 1021'st 1022'nd 1023'rd 1024'th 1025'th\n", "explain": ""}, {"task_name": "N'th", "task_url": "https://rosettacode.org/wiki/N%27th", "task_cat": "String manipulation", "lang": "Haskell", "code": "\nimport Data.Array\n\nordSuffs :: Array Integer String\nordSuffs = listArray (0,9) [\"th\", \"st\", \"nd\", \"rd\", \"th\",\n                            \"th\", \"th\", \"th\", \"th\", \"th\"]\n\nordSuff :: Integer -> String\nordSuff n = show n ++ suff n\n  where suff m | (m `rem` 100) >= 11 && (m `rem` 100) <= 13 = \"th\"\n               | otherwise          = ordSuffs ! (m `rem` 10)\n\nprintOrdSuffs :: [Integer] -> IO ()\nprintOrdSuffs = putStrLn . unwords . map ordSuff\n\nmain :: IO ()\nmain = do\n  printOrdSuffs [   0..  25]\n  printOrdSuffs [ 250.. 265]\n  printOrdSuffs [1000..1025]\n\n\nOutput:\n0th 1st 2nd 3rd 4th 5th 6th 7th 8th 9th 10th 11th 12th 13th 14th 15th 16th 17th 18th 19th 20th 21st 22nd 23rd 24th 25th\n250th 251st 252nd 253rd 254th 255th 256th 257th 258th 259th 260th 261st 262nd 263rd 264th 265th\n1000th 1001st 1002nd 1003rd 1004th 1005th 1006th 1007th 1008th 1009th 1010th 1011th 1012th 1013th 1014th 1015th 1016th 1017th 1018th 1019th 1020th 1021st 1022nd 1023rd 1024th 1025th\n\n", "explain": ""}, {"task_name": "N'th", "task_url": "https://rosettacode.org/wiki/N%27th", "task_cat": "String manipulation", "lang": "TypeScript", "code": "\nTranslation of: Ada\n// N'th\nfunction suffix(n: number): string {\n  var nMod10: number = n % 10; \n  var nMod100: number = n % 100;\n  if (nMod10 == 1 && nMod100 != 11)\n    return \"st\";\n  else if (nMod10 == 2 && nMod100 != 12)\n    return \"nd\";\n  else if (nMod10 == 3 && nMod100 != 13)\n    return \"rd\";\n  else\n    return \"th\";\n}\n\nfunction printImages(loLim: number, hiLim: number) {\n  for (i = loLim; i <= hiLim; i++)\n    process.stdout.write(`${i}` + suffix(i) + \" \");\n  process.stdout.write(\"\\n\");\n}\n \nprintImages(   0,   25);\nprintImages( 250,  265);\nprintImages(1000, 1025);\n\n\nOutput:\n0th 1st 2nd 3rd 4th 5th 6th 7th 8th 9th 10th 11th 12th 13th 14th 15th 16th 17th 18th 19th 20th 21st 22nd 23rd 24th 25th \n250th 251st 252nd 253rd 254th 255th 256th 257th 258th 259th 260th 261st 262nd 263rd 264th 265th \n1000th 1001st 1002nd 1003rd 1004th 1005th 1006th 1007th 1008th 1009th 1010th 1011th 1012th 1013th 1014th 1015th 1016th 1017th 1018th 1019th 1020th 1021st 1022nd 1023rd 1024th 1025th \n\n", "explain": ""}, {"task_name": "N'th", "task_url": "https://rosettacode.org/wiki/N%27th", "task_cat": "String manipulation", "lang": "PowerShell", "code": "\nfunction nth($inp){\n    $suffix = \"th\"\n\n    switch($inp % 100){\n        11{$suffix=\"th\"}\n        12{$suffix=\"th\"}\n        13{$suffix=\"th\"}\n        default{\n            switch($inp % 10){\n                1{$suffix=\"st\"}\n                2{$suffix=\"nd\"}\n                3{$suffix=\"rd\"}\n            }\n        }\n    }\n    return \"$inp$suffix \"\n}\n\n0..25 | %{Write-host -nonewline (nth \"$_\")};\"\"\n250..265 | %{Write-host -nonewline (nth \"$_\")};\"\"\n1000..1025 | %{Write-host -nonewline (nth \"$_\")};\"\"\n\n\nOutput:\n0th 1st 2nd 3rd 4th 5th 6th 7th 8th 9th 10th 11th 12th 13th 14th 15th 16th 17th 18th 19th 20th 21st 22nd 23rd 24th 25th\n250th 251st 252nd 253rd 254th 255th 256th 257th 258th 259th 260th 261st 262nd 263rd 264th 265th\n1000th 1001st 1002nd 1003rd 1004th 1005th 1006th 1007th 1008th 1009th 1010th 1011th 1012th 1013th 1014th 1015th 1016th 1017th 1018th 1019th 1020th 1021st 1022nd 1023rd 1024th 1025th\n\nAn Alternate Version[edit]\n\nfunction Get-Nth ([int]$Number)\n{\n    $suffix = \"th\"\n\n    switch ($Number % 100){\n        11 {$suffix = \"th\"}\n        12 {$suffix = \"th\"}\n        13 {$suffix = \"th\"}\n        default {\n            switch ($Number % 10){\n                1 {$suffix = \"st\"}\n                2 {$suffix = \"nd\"}\n                3 {$suffix = \"rd\"}\n            }\n        }\n    }\n\n    \"$Number$suffix\"\n}\n\n1..25      | ForEach-Object {Get-Nth $_} | Format-Wide {$_} -Column 5 -Force\n251..265   | ForEach-Object {Get-Nth $_} | Format-Wide {$_} -Column 5 -Force\n1001..1025 | ForEach-Object {Get-Nth $_} | Format-Wide {$_} -Column 5 -Force\n\n\nOutput:\n1st                     2nd                     3rd                     4th                     5th\n6th                     7th                     8th                     9th                     10th\n11th                    12th                    13th                    14th                    15th\n16th                    17th                    18th                    19th                    20th\n21st                    22nd                    23rd                    24th                    25th\n\n\n251st                   252nd                   253rd                   254th                   255th\n256th                   257th                   258th                   259th                   260th\n261st                   262nd                   263rd                   264th                   265th\n\n\n1001st                  1002nd                  1003rd                  1004th                  1005th\n1006th                  1007th                  1008th                  1009th                  1010th\n1011th                  1012th                  1013th                  1014th                  1015th\n1016th                  1017th                  1018th                  1019th                  1020th\n1021st                  1022nd                  1023rd                  1024th                  1025th\n\n", "explain": "This is, I think, is a more \"PowerShelly\" way:\n"}, {"task_name": "N'th", "task_url": "https://rosettacode.org/wiki/N%27th", "task_cat": "String manipulation", "lang": "F#", "code": "\nopen System\n\nlet ordinalsuffix n =\n    let suffixstrings = [|\"th\"; \"st\"; \"nd\"; \"rd\"|]\n    let (d, r) = Math.DivRem(n, 10)\n    n.ToString() + suffixstrings.[ if r < 4 && (d &&& 1) = 0 then r else 0 ]\n    \n\n[<EntryPoint>]\nlet main argv =\n    let show = (Seq.iter (ordinalsuffix >> (printf \" %s\"))) >> (Console.WriteLine)\n    [0..25] |> show\n    [250..265] |> show\n    [1000..1025] |> show\n    0\n\n\nOutput:\n 0th 1st 2nd 3rd 4th 5th 6th 7th 8th 9th 10th 11th 12th 13th 14th 15th 16th 17th 18th 19th 20th 21st 22nd 23rd 24th 25th\n 250th 251th 252th 253th 254th 255th 256th 257th 258th 259th 260th 261st 262nd 263rd 264th 265th\n 1000th 1001st 1002nd 1003rd 1004th 1005th 1006th 1007th 1008th 1009th 1010th 1011th 1012th 1013th 1014th 1015th 1016th 1017th 1018th 1019th 1020th 1021st 1022nd 1023rd 1024th 1025th\n", "explain": ""}, {"task_name": "N'th", "task_url": "https://rosettacode.org/wiki/N%27th", "task_cat": "String manipulation", "lang": "AWK", "code": "\n# syntax: GAWK -f NTH.AWK\nBEGIN {\n    prn(0,25)\n    prn(250,265)\n    prn(1000,1025)\n    exit(0)\n}\nfunction prn(start,stop,  i) {\n    printf(\"%d-%d: \",start,stop)\n    for (i=start; i<=stop; i++) {\n      printf(\"%d%s \",i,nth(i))\n    }\n    printf(\"\\n\")\n}\nfunction nth(yearday,  nthday) {\n    if (yearday ~ /1[1-3]$/) {         # 11th,12th,13th\n      nthday = \"th\"\n    }\n    else if (yearday ~ /1$/) {         # 1st,21st,31st,etc.\n      nthday = \"st\"\n    }\n    else if (yearday ~ /2$/) {         # 2nd,22nd,32nd,etc.\n      nthday = \"nd\"\n    }\n    else if (yearday ~ /3$/) {         # 3rd,23rd,33rd,etc.\n      nthday = \"rd\"\n    }\n    else if (yearday ~ /[0456789]$/) { # 4th-10th,20th,24th-30th,etc.\n      nthday = \"th\"\n    }\n    return(nthday)\n}\n\n\nOutput:\n0-25: 0th 1st 2nd 3rd 4th 5th 6th 7th 8th 9th 10th 11th 12th 13th 14th 15th 16th 17th 18th 19th 20th 21st 22nd 23rd 24th 25th\n250-265: 250th 251st 252nd 253rd 254th 255th 256th 257th 258th 259th 260th 261st 262nd 263rd 264th 265th\n1000-1025: 1000th 1001st 1002nd 1003rd 1004th 1005th 1006th 1007th 1008th 1009th 1010th 1011th 1012th 1013th 1014th 1015th 1016th 1017th 1018th 1019th 1020th 1021st 1022nd 1023rd 1024th 1025th\n\n", "explain": ""}]