[{"task_name": "URL decoding", "task_url": "https://rosettacode.org/wiki/URL_decoding", "task_cat": "String manipulation", "lang": "Python", "code": "\n#Python 2.X\nimport urllib\nprint urllib.unquote(\"http%3A%2F%2Ffoo%20bar%2F\")\n#Python 3.5+\nfrom urllib.parse import unquote\nprint(unquote('http%3A%2F%2Ffoo%20bar%2F'))\n\n", "explain": ""}, {"task_name": "URL decoding", "task_url": "https://rosettacode.org/wiki/URL_decoding", "task_cat": "String manipulation", "lang": "C", "code": "\n#include <stdio.h>\n#include <string.h>\n\ninline int ishex(int x)\n{\n\treturn\t(x >= '0' && x <= '9')\t||\n\t\t(x >= 'a' && x <= 'f')\t||\n\t\t(x >= 'A' && x <= 'F');\n}\n\nint decode(const char *s, char *dec)\n{\n\tchar *o;\n\tconst char *end = s + strlen(s);\n\tint c;\n\n\tfor (o = dec; s <= end; o++) {\n\t\tc = *s++;\n\t\tif (c == '+') c = ' ';\n\t\telse if (c == '%' && (\t!ishex(*s++)\t||\n\t\t\t\t\t!ishex(*s++)\t||\n\t\t\t\t\t!sscanf(s - 2, \"%2x\", &c)))\n\t\t\treturn -1;\n\n\t\tif (dec) *o = c;\n\t}\n\n\treturn o - dec;\n}\n\nint main()\n{\n\tconst char *url = \"http%3A%2F%2ffoo+bar%2fabcd\";\n\tchar out[strlen(url) + 1];\n\n\tprintf(\"length: %d\\n\", decode(url, 0));\n\tputs(decode(url, out) < 0 ? \"bad string\" : out);\n\n\treturn 0;\n}\n\n", "explain": ""}, {"task_name": "URL decoding", "task_url": "https://rosettacode.org/wiki/URL_decoding", "task_cat": "String manipulation", "lang": "C++", "code": "\nLibrary: Poco\nWorks with: g++\n#include <string>\n#include \"Poco/URI.h\"\n#include <iostream>\n\nint main( ) {\n   std::string encoded( \"http%3A%2F%2Ffoo%20bar%2F\" ) ;\n   std::string decoded ;\n   Poco::URI::decode ( encoded , decoded ) ;\n   std::cout << encoded << \" is decoded: \" << decoded << \"\u00a0!\" << std::endl ;\n   return 0 ;\n}\n\n\nOutput:\nhttp%3A%2F%2Ffoo%20bar%2F is decoded: http://foo bar/\u00a0!\n", "explain": ""}, {"task_name": "URL decoding", "task_url": "https://rosettacode.org/wiki/URL_decoding", "task_cat": "String manipulation", "lang": "Java", "code": "\n\nimport java.net.URLDecoder;\nimport java.nio.charset.StandardCharsets;\n\nURLDecoder.decode(\"http%3A%2F%2Ffoo%20bar%2F\", StandardCharsets.UTF_8)\n\n\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nString decode(String string) {\n    Pattern pattern = Pattern.compile(\"%([A-Za-z\\\\d]{2})\");\n    Matcher matcher = pattern.matcher(string);\n    StringBuilder decoded = new StringBuilder(string);\n    char character;\n    int start, end, offset = 0;\n    while (matcher.find()) {\n        character = (char) Integer.parseInt(matcher.group(1), 16);\n        /* offset the matched index since were adjusting the string */\n        start = matcher.start() - offset;\n        end = matcher.end() - offset;\n        decoded.replace(start, end, String.valueOf(character));\n        offset += 2;\n    }\n    return decoded.toString();\n}\n\nhttp://foo bar/\ngoogle.com/search?q=`Abdu'l-Bah\u00c3\u00a1\n\n", "explain": "Java offers the URLDecoder and URLEncoder classes for this specific task. \nAlternately, you could use a regular expression capture\n"}, {"task_name": "URL decoding", "task_url": "https://rosettacode.org/wiki/URL_decoding", "task_cat": "String manipulation", "lang": "C#", "code": "\nusing System;\n\nnamespace URLEncode\n{\n    internal class Program\n    {\n        private static void Main(string[] args)\n        {\n            Console.WriteLine(Decode(\"http%3A%2F%2Ffoo%20bar%2F\"));\n        }\n\n        private static string Decode(string uri)\n        {\n            return Uri.UnescapeDataString(uri);\n        }\n    }\n}\n\n\nOutput:\nhttp://foo bar/\n\n", "explain": ""}, {"task_name": "URL decoding", "task_url": "https://rosettacode.org/wiki/URL_decoding", "task_cat": "String manipulation", "lang": "JavaScript", "code": "\ndecodeURIComponent(\"http%3A%2F%2Ffoo%20bar%2F\")\n\n", "explain": ""}, {"task_name": "URL decoding", "task_url": "https://rosettacode.org/wiki/URL_decoding", "task_cat": "String manipulation", "lang": "PHP", "code": "\n<?php\n$encoded = \"http%3A%2F%2Ffoo%20bar%2F\";\n$unencoded = rawurldecode($encoded);\necho \"The unencoded string is $unencoded\u00a0!\\n\";\n?>\n\n", "explain": ""}, {"task_name": "URL decoding", "task_url": "https://rosettacode.org/wiki/URL_decoding", "task_cat": "String manipulation", "lang": "Go", "code": "\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/url\"\n)\n\nfunc main() {\n\tfor _, escaped := range []string{\n\t\t\"http%3A%2F%2Ffoo%20bar%2F\",\n\t\t\"google.com/search?q=%60Abdu%27l-Bah%C3%A1\",\n\t} {\n\t\tu, err := url.QueryUnescape(escaped)\n\t\tif err != nil {\n\t\t\tlog.Println(err)\n\t\t\tcontinue\n\t\t}\n\t\tfmt.Println(u)\n\t}\n}\n\n\nOutput:\nhttp://foo bar/\ngoogle.com/search?q=`Abdu'l-Bah\u00e1\n\n", "explain": ""}, {"task_name": "URL decoding", "task_url": "https://rosettacode.org/wiki/URL_decoding", "task_cat": "String manipulation", "lang": "Delphi", "code": "\nprogram URLEncoding;\n\n{$APPTYPE CONSOLE}\n\nuses IdURI;\n\nbegin\n  Writeln(TIdURI.URLDecode('http%3A%2F%2Ffoo%20bar%2F'));\nend.\n\n", "explain": ""}, {"task_name": "URL decoding", "task_url": "https://rosettacode.org/wiki/URL_decoding", "task_cat": "String manipulation", "lang": "Ruby", "code": "\n\nrequire 'cgi'\nputs CGI.unescape(\"http%3A%2F%2Ffoo%20bar%2F\")\n# => \"http://foo bar/\"\n\nWorks with: Ruby version 1.9.2\nrequire 'uri'\nputs URI.decode_www_form_component(\"http%3A%2F%2Ffoo%20bar%2F\")\n# => \"http://foo bar/\"\n\n\n", "explain": "Use any one of CGI.unescape or URI.decode_www_form_component. These methods also convert \"+\" to \" \".\nURI.unescape (alias URI.unencode) still works. URI.unescape is obsolete since Ruby 1.9.2 because of problems with its sibling URI.escape.\n"}, {"task_name": "URL decoding", "task_url": "https://rosettacode.org/wiki/URL_decoding", "task_cat": "String manipulation", "lang": "Rust", "code": "\nconst INPUT1: &str = \"http%3A%2F%2Ffoo%20bar%2F\";\nconst INPUT2: &str = \"google.com/search?q=%60Abdu%27l-Bah%C3%A1\";\n\nfn append_frag(text: &mut String, frag: &mut String) {\n    if !frag.is_empty() {\n        let encoded = frag.chars()\n            .collect::<Vec<char>>()\n            .chunks(2)\n            .map(|ch| {\n                u8::from_str_radix(&ch.iter().collect::<String>(), 16).unwrap()\n            }).collect::<Vec<u8>>();\n        text.push_str(&std::str::from_utf8(&encoded).unwrap());\n        frag.clear();\n    }\n}\n\nfn decode(text: &str) -> String {\n    let mut output = String::new();\n    let mut encoded_ch = String::new();\n    let mut iter = text.chars();\n    while let Some(ch) = iter.next() {\n        if ch == '%' {\n            encoded_ch.push_str(&format!(\"{}{}\", iter.next().unwrap(), iter.next().unwrap()));\n        } else {\n            append_frag(&mut output, &mut encoded_ch);\n            output.push(ch);\n        }\n    }\n    append_frag(&mut output, &mut encoded_ch);\n    output\n}\n\nfn main() {\n    println!(\"{}\", decode(INPUT1));\n    println!(\"{}\", decode(INPUT2));\n}\n\n\nOutput:\nhttp://foo bar/\ngoogle.com/search?q=`Abdu'l-Bah\u00e1\n\n", "explain": ""}, {"task_name": "URL decoding", "task_url": "https://rosettacode.org/wiki/URL_decoding", "task_cat": "String manipulation", "lang": "Swift", "code": "\nimport Foundation\n\nlet encoded = \"http%3A%2F%2Ffoo%20bar%2F\"\nif let normal = encoded.stringByReplacingPercentEscapesUsingEncoding(NSUTF8StringEncoding) {\n  println(normal)\n}\n\n", "explain": ""}, {"task_name": "URL decoding", "task_url": "https://rosettacode.org/wiki/URL_decoding", "task_cat": "String manipulation", "lang": "R", "code": "\nURLdecode(\"http%3A%2F%2Ffoo%20bar%2F\")\n\n", "explain": ""}, {"task_name": "URL decoding", "task_url": "https://rosettacode.org/wiki/URL_decoding", "task_cat": "String manipulation", "lang": "Ada", "code": "\nLibrary: AWS\nwith AWS.URL;\nwith Ada.Text_IO; use Ada.Text_IO;\nprocedure Decode is\n   Encoded : constant String := \"http%3A%2F%2Ffoo%20bar%2F\";\nbegin\n   Put_Line (AWS.URL.Decode (Encoded));\nend Decode;\n\n\npackage URL is\n   function Decode (URL : in String) return String;\nend URL;\n\npackage body URL is\n   function Decode (URL : in String) return String is\n      Buffer   : String (1 .. URL'Length);\n      Filled   : Natural := 0;\n      Position : Positive := URL'First;\n   begin\n      while Position in URL'Range loop\n         Filled := Filled + 1;\n \n        case URL (Position) is\n            when '+' =>\n               Buffer (Filled) := ' ';\n               Position := Position + 1;\n            when '%' =>\n               Buffer (Filled) :=\n                 Character'Val\n                   (Natural'Value\n                      (\"16#\" & URL (Position + 1 .. Position + 2) & \"#\"));\n               Position := Position + 3;\n            when others =>\n               Buffer (Filled) := URL (Position);\n               Position := Position + 1;\n         end case;\n      end loop;\n\n      return Buffer (1 .. Filled);\n   end Decode;\nend URL;\n\nwith Ada.Command_Line,\n     Ada.Text_IO;\n\nwith URL;\n\nprocedure Test_URL_Decode is\n   use Ada.Command_Line, Ada.Text_IO;\nbegin\n   if Argument_Count = 0 then\n      Put_Line (URL.Decode (\"http%3A%2F%2Ffoo%20bar%2F\"));\n   else\n      for I in 1 .. Argument_Count loop\n         Put_Line (URL.Decode (Argument (I)));\n      end loop;\n   end if;\nend Test_URL_Decode;\n\n", "explain": "Without external libraries:\n"}, {"task_name": "URL decoding", "task_url": "https://rosettacode.org/wiki/URL_decoding", "task_cat": "String manipulation", "lang": "Julia", "code": "\nusing URIParser\n\nenc = \"http%3A%2F%2Ffoo%20bar%2F\"\n\ndcd = unescape(enc)\n\nprintln(enc, \" => \", dcd)\n\n\nOutput:\nhttp%3A%2F%2Ffoo%20bar%2F => http://foo bar/\n\n", "explain": ""}, {"task_name": "URL decoding", "task_url": "https://rosettacode.org/wiki/URL_decoding", "task_cat": "String manipulation", "lang": "Kotlin", "code": "\n// version 1.1.2\n\nimport java.net.URLDecoder\n\nfun main(args: Array<String>) {\n    val encoded = arrayOf(\"http%3A%2F%2Ffoo%20bar%2F\", \"google.com/search?q=%60Abdu%27l-Bah%C3%A1\")\n    for (e in encoded) println(URLDecoder.decode(e, \"UTF-8\"))\n}\n\n\nOutput:\nhttp://foo bar/\ngoogle.com/search?q=`Abdu'l-Bah\u00e1\n\n", "explain": ""}, {"task_name": "URL decoding", "task_url": "https://rosettacode.org/wiki/URL_decoding", "task_cat": "String manipulation", "lang": "Perl", "code": "\nsub urldecode {\n    my $s = shift;\n    $s =~ tr/\\+/ /;\n    $s =~ s/\\%([A-Fa-f0-9]{2})/pack('C', hex($1))/eg;\n    return $s;\n}\n\nprint urldecode('http%3A%2F%2Ffoo+bar%2F').\"\\n\";\n\n#!/usr/bin/perl -w\nuse strict ;\nuse URI::Escape ;\n\nmy $encoded = \"http%3A%2F%2Ffoo%20bar%2F\" ;\nmy $unencoded = uri_unescape( $encoded ) ;\nprint \"The unencoded string is $unencoded\u00a0!\\n\" ;\n\n", "explain": ""}, {"task_name": "URL decoding", "task_url": "https://rosettacode.org/wiki/URL_decoding", "task_cat": "String manipulation", "lang": "Objective-C", "code": "\nNSString *encoded = @\"http%3A%2F%2Ffoo%20bar%2F\";\nNSString *normal = [encoded stringByReplacingPercentEscapesUsingEncoding:NSUTF8StringEncoding];\nNSLog(@\"%@\", normal);\n\nWorks with: Mac OS X version 10.9+Works with: iOS version 7+\nNSString *encoded = @\"http%3A%2F%2Ffoo%20bar%2F\";\nNSString *normal = [encoded stringByRemovingPercentEncoding];\nNSLog(@\"%@\", normal);\n\n", "explain": ""}, {"task_name": "URL decoding", "task_url": "https://rosettacode.org/wiki/URL_decoding", "task_cat": "String manipulation", "lang": "Lua", "code": "\nfunction decodeChar(hex)\n\treturn string.char(tonumber(hex,16))\nend\n\nfunction decodeString(str)\n\tlocal output, t = string.gsub(str,\"%%(%x%x)\",decodeChar)\n\treturn output\nend\n\n-- will print \"http://foo bar/\"\nprint(decodeString(\"http%3A%2F%2Ffoo%20bar%2F\"))\n\n", "explain": ""}, {"task_name": "URL decoding", "task_url": "https://rosettacode.org/wiki/URL_decoding", "task_cat": "String manipulation", "lang": "Scala", "code": "\nLibrary: Scalaimport java.net.{URLDecoder, URLEncoder}\nimport scala.compat.Platform.currentTime\n\nobject UrlCoded extends App {\n  val original = \"\"\"http://foo bar/\"\"\"\n  val encoded: String = URLEncoder.encode(original, \"UTF-8\")\n\n  assert(encoded == \"http%3A%2F%2Ffoo+bar%2F\", s\"Original: $original not properly encoded: $encoded\")\n\n  val percentEncoding = encoded.replace(\"+\", \"%20\")\n  assert(percentEncoding == \"http%3A%2F%2Ffoo%20bar%2F\", s\"Original: $original not properly percent-encoded: $percentEncoding\")\n\n  assert(URLDecoder.decode(encoded, \"UTF-8\") == URLDecoder.decode(percentEncoding, \"UTF-8\"))\n\n  println(s\"Successfully completed without errors. [total ${currentTime - executionStart} ms]\")\n}\n\n", "explain": ""}, {"task_name": "URL decoding", "task_url": "https://rosettacode.org/wiki/URL_decoding", "task_cat": "String manipulation", "lang": "D", "code": "\nimport std.stdio, std.uri;\n\nvoid main() {\n    writeln(decodeComponent(\"http%3A%2F%2Ffoo%20bar%2F\"));\n}\n\nhttp://foo bar/\n", "explain": ""}, {"task_name": "URL decoding", "task_url": "https://rosettacode.org/wiki/URL_decoding", "task_cat": "String manipulation", "lang": "Haskell", "code": "\nimport qualified Data.Char as Char\n\nurlDecode :: String -> Maybe String\nurlDecode [] = Just []\nurlDecode ('%':xs) =\n  case xs of\n    (a:b:xss) ->\n      urlDecode xss\n      >>= return . ((Char.chr . read $ \"0x\" ++ [a,b]) :)\n    _ -> Nothing\nurlDecode ('+':xs) = urlDecode xs >>= return . (' ' :)\nurlDecode (x:xs) = urlDecode xs >>= return . (x :)\n\nmain :: IO ()\nmain = putStrLn . maybe \"Bad decode\" id $ urlDecode \"http%3A%2F%2Ffoo%20bar%2F\"\n\n\nOutput:\nhttp://foo bar/\n\nimport Data.Char (chr)\nimport Data.List.Split (splitOn)\n\ndeCode :: String -> String\ndeCode url =\n  let ps = splitOn \"%\" url\n  in concat $\n     head ps :\n     ((\\(a, b) -> (chr . read) (mappend \"0x\" a) : b) <$> (splitAt 2 <$> tail ps))\n\n-- TEST ------------------------------------------------------------------------\nmain :: IO ()\nmain = putStrLn $ deCode \"http%3A%2F%2Ffoo%20bar%2F\"\n\n\nOutput:\nhttp://foo bar/\n", "explain": "Another approach:\n"}, {"task_name": "URL decoding", "task_url": "https://rosettacode.org/wiki/URL_decoding", "task_cat": "String manipulation", "lang": "VBScript", "code": "\nFunction RegExTest(str,patrn)\n    Dim regEx\n    Set regEx = New RegExp\n    regEx.IgnoreCase = True\n    regEx.Pattern = patrn\n    RegExTest = regEx.Test(str)\nEnd Function\n\nFunction URLDecode(sStr)\n    Dim str,code,a0\n    str=\"\"\n    code=sStr\n    code=Replace(code,\"+\",\" \")\n    While len(code)>0\n        If InStr(code,\"%\")>0 Then\n            str = str & Mid(code,1,InStr(code,\"%\")-1)\n            code = Mid(code,InStr(code,\"%\"))\n            a0 = UCase(Mid(code,2,1))\n            If a0=\"U\" And RegExTest(code,\"^%u[0-9A-F]{4}\") Then\n                str = str & ChrW((Int(\"&H\" & Mid(code,3,4))))\n                code = Mid(code,7)\n            ElseIf a0=\"E\" And RegExTest(code,\"^(%[0-9A-F]{2}){3}\") Then\n                str = str & ChrW((Int(\"&H\" & Mid(code,2,2)) And 15) * 4096 + (Int(\"&H\" & Mid(code,5,2)) And 63) * 64 + (Int(\"&H\" & Mid(code,8,2)) And 63))\n                code = Mid(code,10)\n            ElseIf a0>=\"C\" And a0<=\"D\" And RegExTest(code,\"^(%[0-9A-F]{2}){2}\") Then\n                str = str & ChrW((Int(\"&H\" & Mid(code,2,2)) And 3) * 64 + (Int(\"&H\" & Mid(code,5,2)) And 63))\n                code = Mid(code,7)\n            ElseIf (a0<=\"B\" Or a0=\"F\") And RegExTest(code,\"^%[0-9A-F]{2}\") Then\n                str = str & Chr(Int(\"&H\" & Mid(code,2,2)))\n                code = Mid(code,4)\n            Else\n                str = str & \"%\"\n                code = Mid(code,2)\n            End If\n        Else\n            str = str & code\n            code = \"\"\n        End If\n    Wend\n    URLDecode = str\nEnd Function\n\nurl = \"http%3A%2F%2Ffoo%20bar%C3%A8%2F\"\nWScript.Echo \"Encoded URL: \" & url & vbCrLf &_\n\t\"Decoded URL: \" & UrlDecode(url)\n\n\nOutput:\nEncoded URL: http%3A%2F%2Ffoo%20bar%C3%A8%2F\nDecoded URL: http://foo bar\u00e8/\n", "explain": ""}, {"task_name": "URL decoding", "task_url": "https://rosettacode.org/wiki/URL_decoding", "task_cat": "String manipulation", "lang": "Apex", "code": "\nEncodingUtil.urlDecode('http%3A%2F%2Ffoo%20bar%2F', 'UTF-8');\nEncodingUtil.urlDecode('google.com/search?q=%60Abdu%27l-Bah%C3%A1', 'UTF-8');\nhttp://foo bar/\ngoogle.com/search?q=`Abdu'l-Bah\u00e1\n", "explain": ""}, {"task_name": "URL decoding", "task_url": "https://rosettacode.org/wiki/URL_decoding", "task_cat": "String manipulation", "lang": "PowerShell", "code": "\n[System.Web.HttpUtility]::UrlDecode(\"http%3A%2F%2Ffoo%20bar%2F\")\n\n\nOutput:\nhttp://foo bar/\n\n", "explain": ""}, {"task_name": "URL decoding", "task_url": "https://rosettacode.org/wiki/URL_decoding", "task_cat": "String manipulation", "lang": "ABAP", "code": "\nREPORT Z_DECODE_URL.\n\nDATA: lv_encoded_url TYPE string VALUE 'http%3A%2F%2Ffoo%20bar%2F',\n      lv_decoded_url TYPE string.\n\nCALL METHOD CL_HTTP_UTILITY=>UNESCAPE_URL\n  EXPORTING\n    ESCAPED   = lv_encoded_url\n  RECEIVING\n    UNESCAPED = lv_decoded_url.\n\nWRITE: 'Encoded URL: ', lv_encoded_url, /, 'Decoded URL: ', lv_decoded_url.\n\n", "explain": ""}, {"task_name": "URL decoding", "task_url": "https://rosettacode.org/wiki/URL_decoding", "task_cat": "String manipulation", "lang": "F#", "code": "\nTranslation of: C#\nopen System\n\nlet decode uri = Uri.UnescapeDataString(uri)\n\n[<EntryPoint>]\nlet main argv =\n    printfn \"%s\" (decode \"http%3A%2F%2Ffoo%20bar%2F\")\n    0\n\n", "explain": ""}, {"task_name": "URL decoding", "task_url": "https://rosettacode.org/wiki/URL_decoding", "task_cat": "String manipulation", "lang": "Groovy", "code": "\nassert URLDecoder.decode('http%3A%2F%2Ffoo%20bar%2F') == 'http://foo bar/'\n\n", "explain": ""}, {"task_name": "URL decoding", "task_url": "https://rosettacode.org/wiki/URL_decoding", "task_cat": "String manipulation", "lang": "AWK", "code": "\n# syntax:\nawk ' \nBEGIN {\n    str = \"http%3A%2F%2Ffoo%20bar%2F\" # \"http://foo bar/\"\n    printf(\"%s\\n\",str)\n    len=length(str)\n    for (i=1;i<=len;i++) {\n      if ( substr(str,i,1) == \"%\") {\n        L = substr(str,1,i-1) # chars to left of \"%\"\n        M = substr(str,i+1,2) # 2 chars to right of \"%\"\n        R = substr(str,i+3)   # chars to right of \"%xx\"\n        str = sprintf(\"%s%c%s\",L,hex2dec(M),R)\n      }\n    }\n    printf(\"%s\\n\",str)\n    exit(0)\n}\nfunction hex2dec(s,  num) {\n    num = index(\"0123456789ABCDEF\",toupper(substr(s,length(s)))) - 1\n    sub(/.$/,\"\",s)\n    return num + (length(s)\u00a0? 16*hex2dec(s)\u00a0: 0)\n} '\n\n\nOutput:\nhttp%3A%2F%2Ffoo%20bar%2F\nhttp://foo bar/\n\n\nLC_ALL=C \n  echo \"http%3A%2F%2Ffoo%20bar%2F\" | gawk -vRS='%[[:xdigit:]]{2}' '\n  RT {RT = sprintf(\"%c\",strtonum(\"0x\" substr(RT, 2)))}\n  {gsub(/+/,\" \");printf \"%s\", $0 RT}'\n\n\nOutput:\nhttp://foo bar/\n\n", "explain": "OR:\n"}]