[{"task_name": "Hello world/Newline omission", "task_url": "https://rosettacode.org/wiki/Hello_world/Newline_omission", "task_cat": "Basic language learning", "lang": "Python", "code": "\nimport sys\nsys.stdout.write(\"Goodbye, World!\")\n\nWorks with: Python version 3.x\nprint(\"Goodbye, World!\", end=\"\")\n\n", "explain": ""}, {"task_name": "Hello world/Newline omission", "task_url": "https://rosettacode.org/wiki/Hello_world/Newline_omission", "task_cat": "Basic language learning", "lang": "C", "code": "\n\n#include <stdio.h>\n#include <stdlib.h>\n\nint main(int argc, char *argv[]) {\n  (void) printf(\"Goodbye, World!\");    /* No automatic newline */\n  return EXIT_SUCCESS;\n}\n\n\n", "explain": "In C, we do not get a newline unless we embed one:\nHowever ISO C leaves it up to implementations to define whether or not the last line of a text stream requires a new-line. This means that the C can be targetted to environments where this task is impossible to implement, at least with a direct text stream manipulation like this.\n"}, {"task_name": "Hello world/Newline omission", "task_url": "https://rosettacode.org/wiki/Hello_world/Newline_omission", "task_cat": "Basic language learning", "lang": "C++", "code": "\n#include <iostream>\n\nint main() {\n  std::cout << \"Goodbye, World!\";\n  return 0;\n}\n\n", "explain": ""}, {"task_name": "Hello world/Newline omission", "task_url": "https://rosettacode.org/wiki/Hello_world/Newline_omission", "task_cat": "Basic language learning", "lang": "Java", "code": "\npublic class HelloWorld\n{\n public static void main(String[] args)\n {\n  System.out.print(\"Goodbye, World!\");\n }\n}\n\n", "explain": ""}, {"task_name": "Hello world/Newline omission", "task_url": "https://rosettacode.org/wiki/Hello_world/Newline_omission", "task_cat": "Basic language learning", "lang": "C#", "code": "\nusing System;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        //Using Console.WriteLine() will append a newline\n        Console.WriteLine(\"Goodbye, World!\");\n\n        //Using Console.Write() will not append a newline\n        Console.Write(\"Goodbye, World!\");\n    }\n}\n\n", "explain": ""}, {"task_name": "Hello world/Newline omission", "task_url": "https://rosettacode.org/wiki/Hello_world/Newline_omission", "task_cat": "Basic language learning", "lang": "JavaScript", "code": "\n\nprocess.stdout.write(\"Goodbye, World!\");\n\n", "explain": "Node JS:\n"}, {"task_name": "Hello world/Newline omission", "task_url": "https://rosettacode.org/wiki/Hello_world/Newline_omission", "task_cat": "Basic language learning", "lang": "Visual_Basic_.NET", "code": "\nModule Module1\n\n    Sub Main()\n        Console.Write(\"Goodbye, World!\")\n    End Sub\n\nEnd Module\n", "explain": ""}, {"task_name": "Hello world/Newline omission", "task_url": "https://rosettacode.org/wiki/Hello_world/Newline_omission", "task_cat": "Basic language learning", "lang": "PHP", "code": "\necho \"Goodbye, World\u00a0!\";\n\n", "explain": ""}, {"task_name": "Hello world/Newline omission", "task_url": "https://rosettacode.org/wiki/Hello_world/Newline_omission", "task_cat": "Basic language learning", "lang": "Fortran", "code": "\nprogram bye\n  write (*,'(a)',advance='no') 'Goodbye, World!'\nend program bye\n\n\n      WRITE (6,1) \"Goodbye, World!\"\n    1 FORMAT (A,$)\n      END\n\n\n", "explain": "The \"advance\" facility was introduced with F90, as was the ability to specify format instructions (the '(A)' part) without a separate FORMAT statement. Earlier, there was a common extension:\nIn this, the FORMAT instruction is to accept alphabetic text (the A) from the WRITE statement, followed by the special $ item (of no mnemonic form) which signified that there was not to be any new line action at the end of the output. This sort of thing is useful when writing a prompt to the screen so that the input of the response appears on the same screen line. The text could also have been incorporated into the FORMAT statement, which would be useful if there were many WRITE statements scattered about that were to send forth the same text. \nThese facilities only became of interest when, instead of card decks and lineprinters, I/O involved a keyboard and screen with both input and output appearing on the same screen. Thus, in earlier Fortran usage, the issue would not arise for output to a lineprinter, because it was already the case: a line written to the lineprinter was not followed by a end-of-line/start-new-line sort of action by the lineprinter. It stayed put on the line just written. It was the following output to the lineprinter that would state \"advance one\" (or two, or, no) lines at the start of its output. This was the \"carriage control character\", and a 1 signified \"skip to top-of-form\" which is to say, start a new page.\nIn other words, the Fortran approach for output was <carriage control><output text> rather than the <output text><carriage control> sequence, that now has to be suppressed by the \"advance = 'no'\" facility.\n"}, {"task_name": "Hello world/Newline omission", "task_url": "https://rosettacode.org/wiki/Hello_world/Newline_omission", "task_cat": "Basic language learning", "lang": "Go", "code": "\npackage main\n\nimport \"fmt\"\n\nfunc main() { fmt.Print(\"Goodbye, World!\") }\n\n", "explain": ""}, {"task_name": "Hello world/Newline omission", "task_url": "https://rosettacode.org/wiki/Hello_world/Newline_omission", "task_cat": "Basic language learning", "lang": "Delphi", "code": "\nprogram Project1;\n\n{$APPTYPE CONSOLE}\n\nbegin\n  Write('Goodbye, World!');\nend.\n\n", "explain": ""}, {"task_name": "Hello world/Newline omission", "task_url": "https://rosettacode.org/wiki/Hello_world/Newline_omission", "task_cat": "Basic language learning", "lang": "Ruby", "code": "\nprint \"Goodbye, World!\"\n", "explain": ""}, {"task_name": "Hello world/Newline omission", "task_url": "https://rosettacode.org/wiki/Hello_world/Newline_omission", "task_cat": "Basic language learning", "lang": "Rust", "code": "\nfn main () {\n    print!(\"Goodbye, World!\");\n}\n", "explain": ""}, {"task_name": "Hello world/Newline omission", "task_url": "https://rosettacode.org/wiki/Hello_world/Newline_omission", "task_cat": "Basic language learning", "lang": "Swift", "code": "\nWorks with: Swift version 2.x+\nprint(\"Goodbye, World!\", terminator: \"\")\nWorks with: Swift version 1.x\nprint(\"Goodbye, World!\")\n", "explain": ""}, {"task_name": "Hello world/Newline omission", "task_url": "https://rosettacode.org/wiki/Hello_world/Newline_omission", "task_cat": "Basic language learning", "lang": "R", "code": "\ncat(\"Goodbye, world!\")\n\n", "explain": ""}, {"task_name": "Hello world/Newline omission", "task_url": "https://rosettacode.org/wiki/Hello_world/Newline_omission", "task_cat": "Basic language learning", "lang": "COBOL", "code": "\nIDENTIFICATION DIVISION.\nPROGRAM-ID. GOODBYE-WORLD.\n\nPROCEDURE DIVISION.\nDISPLAY 'Goodbye, World!'\n    WITH NO ADVANCING\nEND-DISPLAY\n.\nSTOP RUN.\n\n", "explain": ""}, {"task_name": "Hello world/Newline omission", "task_url": "https://rosettacode.org/wiki/Hello_world/Newline_omission", "task_cat": "Basic language learning", "lang": "Ada", "code": "\n\nwith Ada.Text_IO;\n\nprocedure Goodbye_World is\nbegin\n   Ada.Text_IO.Put(\"Goodbye, World!\");\nend Goodbye_World;\n\n\nwith Ada.Text_IO;\nwith Ada.Text_IO.Text_Streams;\n\nprocedure Goodbye_World is\n    stdout: Ada.Text_IO.File_Type := Ada.Text_IO.Standard_Output;\nbegin\n    String'Write(Ada.Text_IO.Text_Streams.Stream(stdout), \"Goodbye World\");\nend Goodbye_World;\n\n", "explain": "This example will implicitly include a final, implementation defined, terminator (usually a linefeed) if the output is a file (RM A.10.7-8) such as stdout on UNIX systems.\nUsing Ada.Text_IO.Text_Streams instead allows us to control the termination.\n"}, {"task_name": "Hello world/Newline omission", "task_url": "https://rosettacode.org/wiki/Hello_world/Newline_omission", "task_cat": "Basic language learning", "lang": "Julia", "code": "\n\nprint(\"Goodbye, World!\")\n\n", "explain": "Julia provides a println function which appends a newline, and a print function which doesn't:\n"}, {"task_name": "Hello world/Newline omission", "task_url": "https://rosettacode.org/wiki/Hello_world/Newline_omission", "task_cat": "Basic language learning", "lang": "Kotlin", "code": "\nTranslation of: Java\nfun main(args: Array<String>) = print(\"Goodbye, World!\")\n\n", "explain": ""}, {"task_name": "Hello world/Newline omission", "task_url": "https://rosettacode.org/wiki/Hello_world/Newline_omission", "task_cat": "Basic language learning", "lang": "Perl", "code": "\nprint \"Goodbye, World!\";    # A newline does not occur automatically\n\n", "explain": ""}, {"task_name": "Hello world/Newline omission", "task_url": "https://rosettacode.org/wiki/Hello_world/Newline_omission", "task_cat": "Basic language learning", "lang": "Lua", "code": "\nio.write(\"Goodbye, World!\")\n\n", "explain": ""}, {"task_name": "Hello world/Newline omission", "task_url": "https://rosettacode.org/wiki/Hello_world/Newline_omission", "task_cat": "Basic language learning", "lang": "Scala", "code": "\nLibrary: scala\nAd hoc REPL solution[edit]\n\nprint(\"Goodbye, World!\")\n", "explain": "Ad hoc solution as REPL script. Type this in a REPL session:\n"}, {"task_name": "Hello world/Newline omission", "task_url": "https://rosettacode.org/wiki/Hello_world/Newline_omission", "task_cat": "Basic language learning", "lang": "Dart", "code": "\nimport 'dart:io';\n \nvoid main() {\n  stdout.write(\"Goodbye, World!\");\n}\n\n", "explain": ""}, {"task_name": "Hello world/Newline omission", "task_url": "https://rosettacode.org/wiki/Hello_world/Newline_omission", "task_cat": "Basic language learning", "lang": "Transact-SQL", "code": "\n\n\nThis example is incorrect.  Please fix the code and remove this message.Details: output isn't consistent with the task's requirements: wrong word.\n\n\n PRINT 'Goodbye, World!'\n\n select 'Goodbye, World!'\n", "explain": "As an output statement, PRINT always adds a new line\nor:\nAs a result set\n"}, {"task_name": "Hello world/Newline omission", "task_url": "https://rosettacode.org/wiki/Hello_world/Newline_omission", "task_cat": "Basic language learning", "lang": "D", "code": "\nWorks with: D version 2.0\nimport std.stdio;\n\nvoid main() {\n    write(\"Goodbye, World!\");\n}\n\n", "explain": ""}, {"task_name": "Hello world/Newline omission", "task_url": "https://rosettacode.org/wiki/Hello_world/Newline_omission", "task_cat": "Basic language learning", "lang": "Haskell", "code": "\nmain = putStr \"Goodbye, world\"\n\n", "explain": ""}, {"task_name": "Hello world/Newline omission", "task_url": "https://rosettacode.org/wiki/Hello_world/Newline_omission", "task_cat": "Basic language learning", "lang": "Scheme", "code": "\n(display \"Goodbye, World!\")\n", "explain": ""}, {"task_name": "Hello world/Newline omission", "task_url": "https://rosettacode.org/wiki/Hello_world/Newline_omission", "task_cat": "Basic language learning", "lang": "PowerShell", "code": "\nWrite-Host -NoNewLine \"Goodbye, \"\nWrite-Host -NoNewLine \"World!\"\n\n\nOutput:\nGoodbye, World!PS C:\\>\n", "explain": ""}, {"task_name": "Hello world/Newline omission", "task_url": "https://rosettacode.org/wiki/Hello_world/Newline_omission", "task_cat": "Basic language learning", "lang": "F#", "code": "\n// A program that will run in the interpreter (fsi.exe)\nprintf \"Goodbye, World!\";;\n\n// A compiled program\n[<EntryPoint>]\nlet main args =\n    printf \"Goodbye, World!\"\n    0\n\n", "explain": ""}, {"task_name": "Hello world/Newline omission", "task_url": "https://rosettacode.org/wiki/Hello_world/Newline_omission", "task_cat": "Basic language learning", "lang": "Groovy", "code": "\nprint \"Goodbye, world\"\n\n", "explain": ""}, {"task_name": "Hello world/Newline omission", "task_url": "https://rosettacode.org/wiki/Hello_world/Newline_omission", "task_cat": "Basic language learning", "lang": "Zig", "code": "\nconst std = @import(\"std\");\n\npub fn main() !void {\n    try std.io.getStdOut().writer().writeAll(\"Hello world!\");\n}\n", "explain": ""}, {"task_name": "Hello world/Newline omission", "task_url": "https://rosettacode.org/wiki/Hello_world/Newline_omission", "task_cat": "Basic language learning", "lang": "AWK", "code": "\nBEGIN { printf(\"Goodbye, World!\") }\n\n", "explain": ""}]