[{"task_name": "Bulls and cows", "task_url": "https://rosettacode.org/wiki/Bulls_and_cows", "task_cat": "Puzzles", "lang": "Python", "code": "\n'''\n Bulls and cows. A game pre-dating, and similar to, Mastermind.\n'''\n\nimport random\n\ndigits = '123456789'\nsize = 4\nchosen = ''.join(random.sample(digits,size))\n#print chosen # Debug\nprint '''I have chosen a number from %s unique digits from 1 to 9 arranged in a random order.\nYou need to input a %i digit, unique digit number as a guess at what I have chosen''' % (size, size)\nguesses = 0\nwhile True:\n    guesses += 1\n    while True:\n        # get a good guess\n        guess = raw_input('\\nNext guess [%i]: ' % guesses).strip()\n        if len(guess) == size and \\\n           all(char in digits for char in guess) \\\n           and len(set(guess)) == size:\n            break\n        print \"Problem, try again. You need to enter %i unique digits from 1 to 9\" % size\n    if guess == chosen:\n        print '\\nCongratulations you guessed correctly in',guesses,'attempts'\n        break\n    bulls = cows = 0\n    for i in range(size):\n        if guess[i] == chosen[i]:\n            bulls += 1\n        elif guess[i] in chosen:\n            cows += 1\n    print '  %i Bulls\\n  %i Cows' % (bulls, cows)\n\n\nI have chosen a number from 4 unique digits from 1 to 9 arranged in a random order.\nYou need to input a 4 digit, unique digit number as a guess at what I have chosen\n\nNext guess [1]: 79\nProblem, try again. You need to enter 4 unique digits from 1 to 9\n\nNext guess [1]: 7983\n  2 Bulls\n  2 Cows\n\nNext guess [2]: 7938\n\nCongratulations you guessed correctly in 2 attempts\n", "explain": "Sample output:\n"}, {"task_name": "Bulls and cows", "task_url": "https://rosettacode.org/wiki/Bulls_and_cows", "task_cat": "Puzzles", "lang": "C", "code": "\nLibrary: ncurses\n#include <stdio.h>\n#include <stdarg.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <curses.h>\n#include <string.h>\n\n#define MAX_NUM_TRIES 72\n#define LINE_BEGIN 7\n#define LAST_LINE 18\n\nint yp=LINE_BEGIN, xp=0;\n\nchar number[5];\nchar guess[5];\n\n#define MAX_STR 256\nvoid mvaddstrf(int y, int x, const char *fmt, ...)\n{\n  va_list args;\n  char buf[MAX_STR];\n  \n  va_start(args, fmt);\n  vsprintf(buf, fmt, args);\n  move(y, x);\n  clrtoeol();\n  addstr(buf);\n  va_end(args);\n}\n\nvoid ask_for_a_number()\n{\n  int i=0;\n  char symbols[] = \"123456789\";\n\n  move(5,0); clrtoeol();\n  addstr(\"Enter four digits: \");\n  while(i<4) {\n    int c = getch();\n    if ( (c >= '1') && (c <= '9') && (symbols[c-'1']!=0) ) {\n      addch(c);\n      symbols[c-'1'] = 0;\n      guess[i++] = c;\n    }\n  }\n}\n\nvoid choose_the_number()\n{\n  int i=0, j;\n  char symbols[] = \"123456789\";\n\n  while(i<4) {\n    j = rand() % 9;\n    if ( symbols[j] != 0 ) {\n      number[i++] = symbols[j];\n      symbols[j] = 0;\n    }\n  }\n}\n\n\nbool take_it_or_not()\n{\n  int i;\n  int cows=0, bulls=0;\n\n  for(i=0; i < 4; i++) {\n    if ( number[i] == guess[i] ) {\n      bulls++;\n    } else if ( strchr(number, guess[i]) != NULL ) {\n      cows++;\n    }\n  }\n  move(yp, xp);\n  addstr(guess); addch(' ');\n  if ( bulls == 4 ) { yp++; return true; }\n  if ( (cows==0) && (bulls==0) ) addch('-');\n  while( cows-- > 0 ) addstr(\"O\");\n  while( bulls-- > 0 ) addstr(\"X\");\n  yp++;\n  if ( yp > LAST_LINE ) {\n    yp = LINE_BEGIN;\n    xp += 10;\n  }\n  return false;\n}\n\nbool ask_play_again()\n{\n  int i;\n\n  while(yp-- >= LINE_BEGIN) {\n    move(yp, 0); clrtoeol();\n  }\n  yp = LINE_BEGIN; xp = 0;\n\n  move(21,0); clrtoeol();\n  addstr(\"Do you want to play again? [y/n]\");\n  while(true) {\n    int a = getch();\n    switch(a) {\n    case 'y':\n    case 'Y':\n      return true;\n    case 'n':\n    case 'N':\n      return false;\n    }\n  }\n}\n\n\nint main()\n{\n  bool bingo, again;\n  int tries = 0;\n\n  initscr(); cbreak(); noecho();\n  clear();\n\n  number[4] = guess[4] = 0;\n\n  mvaddstr(0,0, \"I choose a number made of 4 digits (from 1 to 9) without repetitions\\n\"\n                \"You enter a number of 4 digits, and I say you how many of them are\\n\"\n                \"in my secret number but in wrong position (cows or O), and how many\\n\"\n                \"are in the right position (bulls or X)\");\n  do {\n    move(20,0); clrtoeol(); move(21, 0); clrtoeol();\n    srand(time(NULL));\n    choose_the_number();\n    do {\n      ask_for_a_number();\n      bingo = take_it_or_not();\n      tries++;\n    } while(!bingo && (tries < MAX_NUM_TRIES));\n    if ( bingo ) \n      mvaddstrf(20, 0, \"You guessed %s correctly in %d attempts!\", number, tries);\n    else\n      mvaddstrf(20,0, \"Sorry, you had only %d tries...; the number was %s\", \n\t\tMAX_NUM_TRIES, number);\n    again = ask_play_again();\n    tries = 0; \n  } while(again);\n  nocbreak(); echo(); endwin();\n  return EXIT_SUCCESS;\n}\n\n", "explain": "The following function contains the code to check how many bulls and cows there are.\n"}, {"task_name": "Bulls and cows", "task_url": "https://rosettacode.org/wiki/Bulls_and_cows", "task_cat": "Puzzles", "lang": "C++", "code": "\n#include <iostream>\n#include <string>\n#include <algorithm>\n#include <cstdlib>\n\nbool contains_duplicates(std::string s)\n{\n  std::sort(s.begin(), s.end());\n  return std::adjacent_find(s.begin(), s.end()) != s.end();\n}\n\nvoid game()\n{\n  typedef std::string::size_type index;\n\n  std::string symbols = \"0123456789\";\n  unsigned int const selection_length = 4;\n\n  std::random_shuffle(symbols.begin(), symbols.end());\n  std::string selection = symbols.substr(0, selection_length);\n  std::string guess;\n  while (std::cout << \"Your guess? \", std::getline(std::cin, guess))\n  {\n    if (guess.length() != selection_length\n        || guess.find_first_not_of(symbols) != std::string::npos\n        || contains_duplicates(guess))\n    {\n      std::cout << guess << \" is not a valid guess!\";\n      continue;\n    }\n\n    unsigned int bulls = 0;\n    unsigned int cows = 0;\n    for (index i = 0; i != selection_length; ++i)\n    {\n      index pos = selection.find(guess[i]);\n      if (pos == i)\n        ++bulls;\n      else if (pos != std::string::npos)\n        ++cows;\n    }\n    std::cout << bulls << \" bulls, \" << cows << \" cows.\\n\";\n    if (bulls == selection_length)\n    {\n      std::cout << \"Congratulations! You have won!\\n\";\n      return;\n    }\n  }\n  std::cerr << \"Oops! Something went wrong with input, or you've entered end-of-file!\\nExiting ...\\n\";\n  std::exit(EXIT_FAILURE);\n}\n\nint main()\n{\n  std::cout << \"Welcome to bulls and cows!\\nDo you want to play? \";\n  std::string answer;\n  while (true)\n  {\n    while (true)\n    {\n      if (!std::getline(std::cin, answer))\n      {\n        std::cout << \"I can't get an answer. Exiting.\\n\";\n        return EXIT_FAILURE;\n      }\n      if (answer == \"yes\" || answer == \"Yes\" || answer == \"y\" || answer == \"Y\")\n        break;\n      if (answer == \"no\" || answer == \"No\" || answer == \"n\" || answer == \"N\")\n      {\n        std::cout << \"Ok. Goodbye.\\n\";\n        return EXIT_SUCCESS;\n      }\n      std::cout << \"Please answer yes or no: \";\n    }\n    game(); \n    std::cout << \"Another game? \";\n  }\n}\n\n", "explain": ""}, {"task_name": "Bulls and cows", "task_url": "https://rosettacode.org/wiki/Bulls_and_cows", "task_cat": "Puzzles", "lang": "Java", "code": "\nimport java.util.InputMismatchException;\nimport java.util.Random;\nimport java.util.Scanner;\n\npublic class BullsAndCows{\n\tpublic static void main(String[] args){\n\t\tRandom gen= new Random();\n\t\tint target;\n\t\twhile(hasDupes(target= (gen.nextInt(9000) + 1000)));\n\t\tString targetStr = target +\"\";\n\t\tboolean guessed = false;\n\t\tScanner input = new Scanner(System.in);\n\t\tint guesses = 0;\n\t\tdo{\n\t\t\tint bulls = 0;\n\t\t\tint cows = 0;\n\t\t\tSystem.out.print(\"Guess a 4-digit number with no duplicate digits: \");\n\t\t\tint guess;\n\t\t\ttry{\n\t\t\t\tguess = input.nextInt();\n\t\t\t\tif(hasDupes(guess) || guess < 1000) continue;\n\t\t\t}catch(InputMismatchException e){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tguesses++;\n\t\t\tString guessStr = guess + \"\";\n\t\t\tfor(int i= 0;i < 4;i++){\n\t\t\t\tif(guessStr.charAt(i) == targetStr.charAt(i)){\n\t\t\t\t\tbulls++;\n\t\t\t\t}else if(targetStr.contains(guessStr.charAt(i)+\"\")){\n\t\t\t\t\tcows++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(bulls == 4){\n\t\t\t\tguessed = true;\n\t\t\t}else{\n\t\t\t\tSystem.out.println(cows+\" Cows and \"+bulls+\" Bulls.\");\n\t\t\t}\n\t\t}while(!guessed);\n\t\tSystem.out.println(\"You won after \"+guesses+\" guesses!\");\n\t}\n\n\tpublic static boolean hasDupes(int num){\n\t\tboolean[] digs = new boolean[10];\n\t\twhile(num > 0){\n\t\t\tif(digs[num%10]) return true;\n\t\t\tdigs[num%10] = true;\n\t\t\tnum/= 10;\n\t\t}\n\t\treturn false;\n\t}\n}\n\n\nGuess a 4-digit number with no duplicate digits: 5834\n2 Cows and 0 Bulls.\nGuess a 4-digit number with no duplicate digits: 1234\n1 Cows and 0 Bulls.\nGuess a 4-digit number with no duplicate digits: 4321\n1 Cows and 0 Bulls.\nGuess a 4-digit number with no duplicate digits: 3421\n0 Cows and 1 Bulls.\nGuess a 4-digit number with no duplicate digits: 8412\n0 Cows and 0 Bulls.\nGuess a 4-digit number with no duplicate digits: 3560\n1 Cows and 1 Bulls.\nGuess a 4-digit number with no duplicate digits: 3650\n0 Cows and 2 Bulls.\nGuess a 4-digit number with no duplicate digits: 3759\n2 Cows and 2 Bulls.\nGuess a 4-digit number with no duplicate digits: 3975\n2 Cows and 2 Bulls.\nGuess a 4-digit number with no duplicate digits: 3957\nYou won after 10 guesses!\n", "explain": "Output:\n"}, {"task_name": "Bulls and cows", "task_url": "https://rosettacode.org/wiki/Bulls_and_cows", "task_cat": "Puzzles", "lang": "C#", "code": "\nusing System;\n\nnamespace BullsnCows\n{\n    class Program\n    {\n        \n        static void Main(string[] args)\n        {\n            int[] nums = new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 };\n            KnuthShuffle<int>(ref nums);\n            int[] chosenNum = new int[4];\n            Array.Copy(nums, chosenNum, 4);\n\n            Console.WriteLine(\"Your Guess\u00a0?\");\n            while (!game(Console.ReadLine(), chosenNum))\n            {\n                Console.WriteLine(\"Your next Guess\u00a0?\");\n            }\n            \n            Console.ReadKey();\n        }\n\n        public static void KnuthShuffle<T>(ref T[] array)\n        {\n            System.Random random = new System.Random();\n            for (int i = 0; i < array.Length; i++)\n            {\n                int j = random.Next(array.Length);\n                T temp = array[i]; array[i] = array[j]; array[j] = temp;\n            }\n        }\n\n        public static bool game(string guess, int[] num)\n        {\n            char[] guessed = guess.ToCharArray();\n            int bullsCount = 0, cowsCount = 0;\n\n            if (guessed.Length != 4)\n            {\n                Console.WriteLine(\"Not a valid guess.\");\n                return false;\n            }\n\n            for (int i = 0; i < 4; i++)\n            {\n                int curguess = (int) char.GetNumericValue(guessed[i]);\n                if (curguess < 1 || curguess > 9)\n                {\n                    Console.WriteLine(\"Digit must be ge greater 0 and lower 10.\");\n                    return false;\n                }\n                if (curguess == num[i])\n                {\n                    bullsCount++;\n                }\n                else\n                {\n                    for (int j = 0; j < 4; j++)\n                    {\n                        if (curguess == num[j])\n                            cowsCount++;\n                    }\n                }\n            }\n\n            if (bullsCount == 4)\n            {\n                Console.WriteLine(\"Congratulations! You have won!\");\n                return true;\n            }\n            else\n            {\n                Console.WriteLine(\"Your Score is {0} bulls and {1} cows\", bullsCount, cowsCount);\n                return false;\n            }\n        }\n    }\n}\n\n", "explain": ""}, {"task_name": "Bulls and cows", "task_url": "https://rosettacode.org/wiki/Bulls_and_cows", "task_cat": "Puzzles", "lang": "JavaScript", "code": "\nSpidermonkey version[edit]\n#!/usr/bin/env js\n\nfunction main() {\n    var len = 4;\n    playBullsAndCows(len);\n}\n\nfunction playBullsAndCows(len) {\n    var num = pickNum(len);\n    // print('The secret number is:\\n  ' + num.join('\\n  '));\n    showInstructions(len);\n    var nGuesses = 0;\n    while (true) {\n        nGuesses++;\n        var guess = getGuess(nGuesses, len);\n        var census = countBovine(num, guess);\n        showScore(census.bulls, census.cows);\n        if (census.bulls == len) {\n            showFinalResult(nGuesses);\n            return;\n        }\n    }\n}\n\nfunction showScore(nBulls, nCows) {\n    print('    Bulls: ' + nBulls + ', cows: ' + nCows);\n}\n\nfunction showFinalResult(guesses) {\n    print('You win!!! Guesses needed: ' + guesses);\n}\n\nfunction countBovine(num, guess) {\n    var count = {bulls:0, cows:0};\n    var g = guess.join('');\n    for (var i = 0; i < num.length; i++) {\n        var digPresent = g.search(num[i]) != -1;\n        if (num[i] == guess[i]) count.bulls++;\n        else if (digPresent) count.cows++;\n    }\n    return count;\n}\n\nfunction getGuess(nGuesses, len) {\n    while (true) {\n        putstr('Your guess #' + nGuesses + ': ');\n        var guess = readline();\n        guess = String(parseInt(guess)).split('');\n        if (guess.length != len) {\n            print('  You must enter a ' + len + ' digit number.');\n            continue;\n        }\n        if (hasDups(guess)) {\n            print('  No digits can be duplicated.');\n            continue;\n        }    \n        return guess;\n    }\n}\n\nfunction hasDups(ary) {\n    var t = ary.concat().sort();\n    for (var i = 1; i < t.length; i++) {\n        if (t[i] == t[i-1]) return true;\n    }\n    return false;\n}\n\nfunction showInstructions(len) {\n    print();\n    print('Bulls and Cows Game');\n    print('-------------------');\n    print('  You must guess the ' + len + ' digit number I am thinking of.');\n    print('  The number is composed of the digits 1-9.');\n    print('  No digit appears more than once.');\n    print('  After each of your guesses, I will tell you:');\n    print('    The number of bulls (digits in right place)');\n    print('    The number of cows (correct digits, but in the wrong place)');\n    print();\n}\n\nfunction pickNum(len) {\n    var nums = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    nums.sort(function(){return Math.random() - 0.5});\n    return nums.slice(0, len);\n}\n\nmain();\n\n\nBulls and Cows Game\n-------------------\n  You must guess the 4 digit number I am thinking of.\n  The number is composed of the digits 1-9.\n  No digit appears more than once.\n  After each of your guesses, I will tell you:\n    The number of bulls (digits in right place)\n    The number of cows (correct digits, but in wrong place)\n\nYour guess #1: 1234\n    Bulls: 0, cows: 2\nYour guess #2: 5678\n    Bulls: 1, cows: 1\nYour guess #3: 3167\n    Bulls: 0, cows: 3\nYour guess #4: 9123\n    Bulls: 1, cows: 1\nYour guess #5: 5137\n    Bulls: 1, cows: 3\nYour guess #6: 5317\n    Bulls: 2, cows: 2\nYour guess #7: 5731\n    Bulls: 2, cows: 2\nYour guess #8: 5713\n    Bulls: 4, cows: 0\nYou win! Guesses needed: 8\n\n", "explain": "Example game (cheating!):\n"}, {"task_name": "Bulls and cows", "task_url": "https://rosettacode.org/wiki/Bulls_and_cows", "task_cat": "Puzzles", "lang": "Visual_Basic_.NET", "code": "\nImports System\nImports System.Text.RegularExpressions\n\nModule Bulls_and_Cows\n    Function CreateNumber() As String\n        Dim random As New Random()\n        Dim sequence As Char() = {\"1\"c, \"2\"c, \"3\"c, \"4\"c, \"5\"c, \"6\"c, \"7\"c, \"8\"c, \"9\"c}\n\n        For i As Integer = 0 To sequence.Length - 1\n            Dim j As Integer = random.Next(sequence.Length)\n            Dim temp As Char = sequence(i) : sequence(i) = sequence(j) : sequence(j) = temp\n        Next\n\n        Return New String(sequence, 0, 4)\n    End Function\n\n    Function IsFourDigitNumber(ByVal number As String) As Boolean\n        Return Regex.IsMatch(number, \"^[1-9]{4}$\")\n    End Function\n\n    Sub Main()\n        Dim chosenNumber As String = CreateNumber()\n        Dim attempt As Integer = 0\n        Console.WriteLine(\"Number is chosen\")\n        Dim gameOver As Boolean = False\n        Do\n            attempt += 1\n            Console.WriteLine(\"Attempt #{0}. Enter four digit number: \", attempt)\n            Dim number As String = Console.ReadLine()\n            Do While Not IsFourDigitNumber(number)\n                Console.WriteLine(\"Invalid number: type four characters. Every character must digit be between '1' and '9'.\")\n                number = Console.ReadLine()\n            Loop\n\n            Dim bulls As Integer = 0\n            Dim cows As Integer = 0\n\n            For i As Integer = 0 To number.Length - 1\n                Dim j As Integer = chosenNumber.IndexOf(number(i))\n                If i = j Then\n                    bulls += 1\n                ElseIf j >= 0 Then\n                    cows += 1\n                End If\n            Next\n\n            If bulls < chosenNumber.Length Then\n                Console.WriteLine(\"The number '{0}' has {1} bulls and {2} cows\", _\n                    number, bulls, cows)\n            Else\n                gameOver = True\n            End If\n        Loop Until gameOver\n        Console.WriteLine(\"The number was guessed in {0} attempts. Congratulations!\", attempt)\n    End Sub\nEnd Module\n\n", "explain": ""}, {"task_name": "Bulls and cows", "task_url": "https://rosettacode.org/wiki/Bulls_and_cows", "task_cat": "Puzzles", "lang": "PHP", "code": "\n<?php\n$size = 4;\n\n$chosen = implode(array_rand(array_flip(range(1,9)), $size));\n\necho \"I've chosen a number from $size unique digits from 1 to 9; you need\nto input $size unique digits to guess my number\\n\";\n\nfor ($guesses = 1; ; $guesses++) {\n    while (true) {\n        echo \"\\nNext guess [$guesses]: \";\n        $guess = rtrim(fgets(STDIN));\n        if (!checkguess($guess))\n            echo \"$size digits, no repetition, no 0... retry\\n\";\n        else\n            break;\n    }\n    if ($guess == $chosen) {\n        echo \"You did it in $guesses attempts!\\n\";\n        break;\n    } else {\n        $bulls = 0;\n        $cows = 0;\n        foreach (range(0, $size-1) as $i) {\n            if ($guess[$i] == $chosen[$i])\n                $bulls++;\n            else if (strpos($chosen, $guess[$i]) !== FALSE)\n                $cows++;\n        }\n        echo \"$cows cows, $bulls bulls\\n\";\n    }\n}\n\nfunction checkguess($g)\n{\n  global $size;\n  return count(array_unique(str_split($g))) == $size &&\n    preg_match(\"/^[1-9]{{$size}}$/\", $g);\n}\n?>\n\n", "explain": ""}, {"task_name": "Bulls and cows", "task_url": "https://rosettacode.org/wiki/Bulls_and_cows", "task_cat": "Puzzles", "lang": "MATLAB", "code": "\nfunction BullsAndCows\n% Plays the game Bulls and Cows as the \"game master\"\n    \n    % Create a secret number\n    nDigits = 4;\n    lowVal = 1;\n    highVal = 9;\n    digitList = lowVal:highVal;\n    secret = zeros(1, 4);\n    for k = 1:nDigits\n        idx = randi(length(digitList));\n        secret(k) = digitList(idx);\n        digitList(idx) = [];\n    end\n    \n    % Give game information\n    fprintf('Welcome to Bulls and Cows!\\n')\n    fprintf('Try to guess the %d-digit number (no repeated digits).\\n', nDigits)\n    fprintf('Digits are between %d and %d (inclusive).\\n', lowVal, highVal)\n    fprintf('Score: 1 Bull per correct digit in correct place.\\n')\n    fprintf('       1 Cow per correct digit in incorrect place.\\n')\n    fprintf('The number has been chosen. Now it''s your moooooove!\\n')\n    gs = input('Guess: ', 's');\n    \n    % Loop until user guesses right or quits (no guess)\n    nGuesses = 1;\n    while gs\n        gn = str2double(gs);\n        if isnan(gn) || length(gn) > 1  % Not a scalar\n            fprintf('Malformed guess. Keep to valid scalars.\\n')\n            gs = input('Try again: ', 's');\n        else\n            g = sprintf('%d', gn) - '0';\n            if length(g) ~= nDigits || any(g < lowVal) || any(g > highVal) || ...\n                    length(unique(g)) ~= nDigits    % Invalid number for game\n                fprintf('Malformed guess. Remember:\\n')\n                fprintf('  %d digits\\n', nDigits)\n                fprintf('  Between %d and %d inclusive\\n', lowVal, highVal)\n                fprintf('  No repeated digits\\n')\n                gs = input('Try again: ', 's');\n            else\n                score = CountBullsCows(g, secret);\n                if score(1) == nDigits\n                    fprintf('You win! Bully for you! Only %d guesses.\\n', nGuesses)\n                    gs = '';\n                else\n                    fprintf('Score: %d Bulls, %d Cows\\n', score)\n                    gs = input('Guess: ', 's');\n                end\n            end\n        end\n        nGuesses = nGuesses+1;  % Counts malformed guesses\n    end\nend\n\nfunction score = CountBullsCows(guess, correct)\n% Checks the guessed array of digits against the correct array to find the score\n% Assumes arrays of same length and valid numbers\n    bulls = guess == correct;\n    cows = ismember(guess(~bulls), correct);\n    score = [sum(bulls) sum(cows)];\nend\n\n\nOutput:\nWelcome to Bulls and Cows!\nTry to guess the 4-digit number (no repeated digits).\nDigits are between 1 and 9 (inclusive).\nScore: 1 Bull per correct digit in correct place.\n       1 Cow per correct digit in incorrect place.\nThe number has been chosen. Now it's your moooooove!\nGuess: 1234\nScore: 0 Bulls, 2 Cows\nGuess: 2156\nScore: 0 Bulls, 1 Cows\nGuess: 7819\nScore: 0 Bulls, 1 Cows\nGuess: 3457\nScore: 0 Bulls, 2 Cows\nGuess: hello\nMalformed guess. Keep to valid scalars.\nTry again: 1123\nMalformed guess. Remember:\n  4 digits\n  Between 1 and 9 inclusive\n  No repeated digits\nTry again: 34567\nMalformed guess. Remember:\n  4 digits\n  Between 1 and 9 inclusive\n  No repeated digits\nTry again: 4368\nYou win! Bully for you! Only 8 guesses.\n", "explain": ""}, {"task_name": "Bulls and cows", "task_url": "https://rosettacode.org/wiki/Bulls_and_cows", "task_cat": "Puzzles", "lang": "Fortran", "code": "\nWorks with: Fortran version 90 and later\nmodule bac\n  implicit none\n\ncontains\n\n  subroutine Gennum(n)\n    integer, intent(out) :: n(4)\n    integer :: i, j\n    real :: r\n      \n    call random_number(r)\n    n(1) = int(r * 9.0) + 1\n    i = 2\n    \nouter: do while (i <= 4)\n         call random_number(r)\n         n(i) = int(r * 9.0) + 1\ninner:   do j = i-1 , 1, -1\n           if (n(j) == n(i)) cycle outer\n         end do inner\n         i = i + 1\n       end do outer\n \n  end subroutine Gennum\n\n  subroutine Score(n, guess, b, c) \n    character(*), intent(in) :: guess\n    integer, intent(in) :: n(0:3)\n    integer, intent(out) :: b, c\n    integer :: digit, i, j, ind\n   \n    b = 0; c = 0\n    do i = 1, 4\n      read(guess(i:i), \"(i1)\") digit\n      if (digit == n(i-1)) then\n        b = b + 1\n      else\n        do j = i, i+2\n          ind = mod(j, 4)\n          if (digit == n(ind)) then\n            c = c + 1\n            exit\n          end if\n        end do    \n      end if\n    end do  \n\n end subroutine Score  \n\nend module bac\n\nprogram Bulls_and_Cows\n   use bac\n   implicit none\n   \n   integer :: n(4)\n   integer :: bulls=0, cows=0, tries=0\n   character(4) :: guess\n\n   call random_seed\n   call Gennum(n)\n   \n   write(*,*) \"I have selected a number made up of 4 digits (1-9) without repetitions.\"\n   write(*,*) \"You attempt to guess this number.\"\n   write(*,*) \"Every digit in your guess that is in the correct position scores 1 Bull\"\n   write(*,*) \"Every digit in your guess that is in an incorrect position scores 1 Cow\"\n   write(*,*)\n\n   do while (bulls /= 4)\n     write(*,*) \"Enter a 4 digit number\"\n     read*, guess\n     if (verify(guess, \"123456789\") /= 0) then\n       write(*,*) \"That is an invalid entry. Please try again.\"\n       cycle\n     end if\n     tries = tries + 1\n     call Score (n, guess, bulls, cows)\n     write(*, \"(a, i1, a, i1, a)\") \"You scored \", bulls, \" bulls and \", cows, \" cows\"\n     write(*,*)\n   end do\n\n   write(*,\"(a,i0,a)\") \"Congratulations! You correctly guessed the correct number in \", tries, \" attempts\"\n\nend program Bulls_and_Cows\n\n", "explain": ""}, {"task_name": "Bulls and cows", "task_url": "https://rosettacode.org/wiki/Bulls_and_cows", "task_cat": "Puzzles", "lang": "Scratch", "code": "\n\nGuess is longer or shorter than 4 characters\nGuess contains character other than the digits 1 - 9\nGuess contains a digit more than once (i.e. 3484 - this would be rejected because \"4\" appears in the guess two times)\n\n", "explain": "Scratch is a graphical programming language. Follow the link to see an example solution for Bulls and Cows\nScratch - Bulls and Cows\n\nThe program \"says\" the score of the current guess and uses a list to display previous guesses.\nMalformed guesses are rejected for the following reasons:\n\nSince Scratch is an educational language, I've included comments in the code to explain what the program is doing.\n"}, {"task_name": "Bulls and cows", "task_url": "https://rosettacode.org/wiki/Bulls_and_cows", "task_cat": "Puzzles", "lang": "Go", "code": "\npackage main\n\nimport (\n    \"bufio\"\n    \"bytes\"\n    \"fmt\"\n    \"math/rand\"\n    \"os\"\n    \"strings\"\n    \"time\"\n)\n\nfunc main() {\n    fmt.Println(`Cows and Bulls\nGuess four digit number of unique digits in the range 1 to 9.\nA correct digit but not in the correct place is a cow.\nA correct digit in the correct place is a bull.`)\n    // generate pattern\n    pat := make([]byte, 4)\n    rand.Seed(time.Now().Unix())\n    r := rand.Perm(9)\n    for i := range pat {\n        pat[i] = '1' + byte(r[i])\n    }\n\n    // accept and score guesses\n    valid := []byte(\"123456789\")\nguess:\n    for in := bufio.NewReader(os.Stdin); ; {\n        fmt.Print(\"Guess: \")\n        guess, err := in.ReadString('\\n')\n        if err != nil {\n            fmt.Println(\"\\nSo, bye.\")\n            return\n        }\n        guess = strings.TrimSpace(guess)\n        if len(guess) != 4 {\n            // malformed:  not four characters\n            fmt.Println(\"Please guess a four digit number.\")\n            continue\n        }\n        var cows, bulls int\n        for ig, cg := range guess {\n            if strings.IndexRune(guess[:ig], cg) >= 0 {\n                // malformed:  repeated digit\n                fmt.Printf(\"Repeated digit: %c\\n\", cg)\n                continue guess\n            }\n            switch bytes.IndexByte(pat, byte(cg)) {\n            case -1:\n                if bytes.IndexByte(valid, byte(cg)) == -1 {\n                    // malformed:  not a digit\n                    fmt.Printf(\"Invalid digit: %c\\n\", cg)\n                    continue guess\n                }\n            default: // I just think cows should go first\n                cows++\n            case ig:\n                bulls++\n            }\n        }\n        fmt.Printf(\"Cows: %d, bulls: %d\\n\", cows, bulls)\n        if bulls == 4 {\n            fmt.Println(\"You got it.\")\n            return\n        }\n    }\n}\n\n", "explain": ""}, {"task_name": "Bulls and cows", "task_url": "https://rosettacode.org/wiki/Bulls_and_cows", "task_cat": "Puzzles", "lang": "Delphi", "code": "\n\n", "explain": "See #Pascal.\n"}, {"task_name": "Bulls and cows", "task_url": "https://rosettacode.org/wiki/Bulls_and_cows", "task_cat": "Puzzles", "lang": "Ruby", "code": "\n\nWorks with: Ruby version 1.8.7+\ndef generate_word(len)\n  [*\"1\"..\"9\"].shuffle.first(len)        # [*\"1\"..\"9\"].sample(len)  ver 1.9+\nend\n\ndef get_guess(len)\n  loop do\n    print \"Enter a guess: \"\n    guess = gets.strip\n    err = case\n          when guess.match(/[^1-9]/)             ; \"digits only\"\n          when guess.length != len               ; \"exactly #{len} digits\"\n          when guess.split(\"\").uniq.length != len; \"digits must be unique\"\n          else return guess.split(\"\")\n          end\n    puts \"the word must be #{len} unique digits between 1 and 9 (#{err}). Try again.\"\n  end\nend\n\ndef score(word, guess)\n  bulls = cows = 0\n  guess.each_with_index do |num, idx|\n    if word[idx] == num\n      bulls += 1\n    elsif word.include? num\n      cows += 1\n    end\n  end \n  [bulls, cows]\nend\n\nword_length = 4\nputs \"I have chosen a number with #{word_length} unique digits from 1 to 9.\"\nword = generate_word(word_length)\ncount = 0\nloop do\n  guess = get_guess(word_length)\n  count += 1\n  break if word == guess\n  puts \"that guess has %d bulls and %d cows\" % score(word, guess)\nend\nputs \"you guessed correctly in #{count} tries.\"\n\n\nWorks with: Ruby version 2.0+\nsize = 4\nsecret = [*'1' .. '9'].sample(size)\nguess = nil\n\ni=0\nloop do\n  i+=1\n  loop do\n    print \"Guess #{i}: \"\n    guess = gets.chomp.chars\n    exit if guess.empty?\n    \n    break if guess.size == size and \n             guess.all? { |x| ('1'..'9').include? x } and\n             guess.uniq.size == size\n    \n    puts \"Problem, try again. You need to enter #{size} unique digits from 1 to 9\"\n  end\n  \n  if guess == secret\n    puts \"Congratulations you guessed correctly in #{i} attempts\"\n    break\n  end\n  \n  bulls = cows = 0\n  size.times do |j|\n    if guess[j] == secret[j]\n      bulls += 1\n    elsif secret.include? guess[j]\n      cows += 1\n    end\n  end\n  \n  puts \"Bulls: #{bulls}; Cows: #{cows}\"\nend\n\n", "explain": "Inspired by Tcl\nInspired by Python\n"}, {"task_name": "Bulls and cows", "task_url": "https://rosettacode.org/wiki/Bulls_and_cows", "task_cat": "Puzzles", "lang": "Rust", "code": "\nLibrary: rand\nuse std::io;\nuse rand::{Rng,thread_rng};\n\nextern crate rand;\n\nconst NUMBER_OF_DIGITS: usize = 4;\n\nstatic DIGITS: [char; 9] = ['1', '2', '3', '4', '5', '6', '7', '8', '9'];\n\nfn generate_digits() -> Vec<char> {\n    let mut temp_digits: Vec<_> = (&DIGITS[..]).into();\n    thread_rng().shuffle(&mut temp_digits);\n    return temp_digits.iter().take(NUMBER_OF_DIGITS).map(|&a| a).collect();\n}\n\nfn parse_guess_string(guess: &str) -> Result<Vec<char>, String> {\n    let chars: Vec<char> = (&guess).chars().collect();\n\n    if !chars.iter().all(|c| DIGITS.contains(c)) {\n        return Err(\"only digits, please\".to_string());\n    }\n\n    if chars.len() != NUMBER_OF_DIGITS {\n        return Err(format!(\"you need to guess with {} digits\", NUMBER_OF_DIGITS));\n    }\n\n    let mut uniques: Vec<char> = chars.clone();\n    uniques.dedup();\n    if uniques.len() != chars.len() {\n        return Err(\"no duplicates, please\".to_string());\n    }\n\n    return Ok(chars);\n}\n\nfn calculate_score(given_digits: &[char], guessed_digits: &[char]) -> (usize, usize) {\n    let mut bulls = 0;\n    let mut cows = 0;\n    for i in 0..NUMBER_OF_DIGITS {\n        let pos: Option<usize> = guessed_digits.iter().position(|&a| -> bool {a == given_digits[i]});\n        match pos {\n            None              => (),\n            Some(p) if p == i => bulls += 1,\n            Some(_)           => cows += 1\n        }\n    }\n    return (bulls, cows);\n}\n\nfn main() {\n    let reader = io::stdin();\n\n    loop {\n        let given_digits = generate_digits();\n        println!(\"I have chosen my {} digits. Please guess what they are\", NUMBER_OF_DIGITS);\n\n        loop {\n            let guess_string: String = {\n                let mut buf = String::new();\n                reader.read_line(&mut buf).unwrap();\n                buf.trim().into()\n            };\n\n            let digits_maybe = parse_guess_string(&guess_string);\n            match digits_maybe {\n                Err(msg) => {\n                    println!(\"{}\", msg);\n                    continue;\n                },\n                Ok(guess_digits) => {\n                    match calculate_score(&given_digits, &guess_digits) {\n                        (NUMBER_OF_DIGITS, _) => {\n                            println!(\"you win!\");\n                            break;\n                        },\n                        (bulls, cows) => println!(\"bulls: {}, cows: {}\", bulls, cows)\n                    }\n                }\n            }\n        }\n    }\n}\n\n", "explain": ""}, {"task_name": "Bulls and cows", "task_url": "https://rosettacode.org/wiki/Bulls_and_cows", "task_cat": "Puzzles", "lang": "Swift", "code": "\nWorks with: Swift version 5.7\n\nfunc generateRandomNumArray(numDigits: Int = 4) -> [Character]\n{\n\tguard (1 ... 9).contains(numDigits) else { fatalError(\"number out of range\") }\n\n\treturn Array(\"123456789\".shuffled()[0 ..< numDigits])\n}\n\nfunc parseGuess(_ guess: String, numDigits: Int = 4) -> String?\n{\n\tguard guess.count == numDigits else { return nil }\n    // Only digits 0 to 9 allowed, no Unicode fractions or numbers from other languages\n\tlet guessArray = guess.filter{ $0.isASCII && $0.isWholeNumber }\n\n  \tguard Set(guessArray).count == numDigits else { return nil }\n\n  \treturn guessArray\n}\n\nfunc pluralIfNeeded(_ count: Int, _ units: String) -> String\n{\n\treturn \"\\(count) \" + units + (count == 1 ? \"\" : \"s\")\n}\n\nvar guessAgain = \"y\"\nwhile guessAgain == \"y\"\n{\n  \tlet num = generateRandomNumArray()\n  \tvar bulls = 0\n  \tvar cows = 0\n\n  \tprint(\"Please enter a 4 digit number with digits between 1-9, no repetitions: \")\n\n  \tif let guessStr = readLine(strippingNewline: true), let guess = parseGuess(guessStr)\n\t{\n\t\tfor (guess, actual) in zip(guess, num)\n\t\t{\n\t\t\tif guess == actual\n\t\t\t{\n\t  \t\t\tbulls += 1\n\t\t\t}\n\t\t\telse if num.contains(guess)\n\t\t\t{\n\t  \t\t\tcows += 1\n\t\t\t}\n  \t\t}\n\n\t\tprint(\"Actual number: \" + num)\n\t\tprint(\"Your score: \\(pluralIfNeeded(bulls, \"bull\")) and \\(pluralIfNeeded(cows, \"cow\"))\\n\")\n\t\tprint(\"Would you like to play again? (y): \")\n\n\t\tguessAgain = readLine(strippingNewline: true)?.lowercased() ?? \"n\"\n\t}\n\telse\n\t{\n\t\tprint(\"Invalid input\")\n  \t}\n}\n\nimport Foundation\n\nfunc generateRandomNumArray(numDigits: Int = 4) -> [Int] {\n  guard numDigits > 0 else {\n    return []\n  }\n\n  let needed =  min(9, numDigits)\n  var nums = Set<Int>()\n\n  repeat {\n    nums.insert(.random(in: 1...9))\n  } while nums.count != needed\n\n  return Array(nums)\n}\n\nfunc parseGuess(_ guess: String) -> [Int]? {\n  guard guess.count == 4 else {\n    return nil\n  }\n\n  let guessArray = guess.map(String.init).map(Int.init).compactMap({ $0 })\n\n  guard Set(guessArray).count == 4 else {\n    return nil\n  }\n\n  return guessArray\n}\n\nwhile true {\n  let num = generateRandomNumArray()\n  var bulls = 0\n  var cows = 0\n\n  print(\"Please enter a 4 digit number with digits between 1-9, no repetitions: \")\n\n  guard let guessStr = readLine(strippingNewline: true), let guess = parseGuess(guessStr) else {\n    print(\"Invalid input\")\n    continue\n  }\n\n  for (guess, actual) in zip(guess, num) {\n    if guess == actual {\n      bulls += 1\n    } else if num.contains(guess) {\n      cows += 1\n    }\n  }\n\n  print(\"Actual number: \\(num.map(String.init).joined())\")\n  print(\"Your score: \\(bulls) bulls and \\(cows) cows\\n\")\n  print(\"Would you like to play again? (y): \")\n\n  guard readLine(strippingNewline: true)!.lowercased() == \"y\" else {\n    exit(0)\n  }\n}\n\n\nOutput:\nPlease enter a 4 digit number with digits between 1-9, no repetitions: \n8496\nActual number: 6475\nYour score: 1 bulls and 1 cows\n\nWould you like to play again? (y): \ny\nPlease enter a 4 digit number with digits between 1-9, no repetitions: \n5983\nActual number: 7846\nYour score: 0 bulls and 1 cows\n\n", "explain": "This is the same as the original solution but takes advantage of Swift 5's richer standard library to clean things up a bit.\n"}, {"task_name": "Bulls and cows", "task_url": "https://rosettacode.org/wiki/Bulls_and_cows", "task_cat": "Puzzles", "lang": "R", "code": "\nWorks with: R version 2.8.1\ntarget <- sample(1:9,4)\nbulls <- 0\ncows <- 0\nattempts <- 0\nwhile (bulls != 4)\n  {\n  input <- readline(\"Guess a 4-digit number with no duplicate digits or 0s: \")\n  if (nchar(input) == 4)\n    {\n    input <- as.integer(strsplit(input,\"\")[[1]])\n    if ((sum(is.na(input)+sum(input==0))>=1) | (length(table(input)) != 4)) {print(\"Malformed input!\")} else {\n      bulls <- sum(input == target)\n      cows <- sum(input %in% target)-bulls\n      cat(\"\\n\",bulls,\" Bull(s) and \",cows, \" Cow(s)\\n\")\n      attempts <- attempts + 1\n      }\n    } else {print(\"Malformed input!\")}\n  }\nprint(paste(\"You won in\",attempts,\"attempt(s)!\"))\n\n", "explain": ""}, {"task_name": "Bulls and cows", "task_url": "https://rosettacode.org/wiki/Bulls_and_cows", "task_cat": "Puzzles", "lang": "Ada", "code": "\nwith Ada.Text_IO;  use Ada.Text_IO;\nwith Ada.Numerics.Discrete_Random;\n\nprocedure Bulls_And_Cows is\n   package Random_Natural is new Ada.Numerics.Discrete_Random (Natural);\n   Number : String (1..4);\nbegin\n   declare -- Generation of number\n      use Random_Natural;\n      Digit    : String   := \"123456789\";\n      Size     : Positive := 9;\n      Dice     : Generator;\n      Position : Natural;\n   begin\n      Reset (Dice);\n      for I in Number'Range loop\n         Position := Random (Dice) mod Size + 1;\n         Number (I) := Digit (Position);\n         Digit (Position..Size - 1) := Digit (Position + 1..Size);\n         Size := Size - 1;\n      end loop;\n   end;\n   loop -- Guessing loop\n      Put (\"Enter four digits:\");\n      declare\n         Guess : String  := Get_Line;\n         Bulls : Natural := 0;\n         Cows  : Natural := 0;\n      begin\n         if Guess'Length /= 4 then\n            raise Data_Error;\n         end if;\n         for I in Guess'Range loop\n            for J in Number'Range loop                  \n               if Guess (I) not in '1'..'9' or else (I < J and then Guess (I) = Guess (J)) then\n                  raise Data_Error;\n               end if;\n               if Number (I) = Guess (J) then\n                  if I = J then\n                     Bulls := Bulls + 1;\n                  else\n                     Cows := Cows + 1;\n                  end if;\n               end if;\n            end loop;\n         end loop;\n         exit when Bulls = 4;\n         Put_Line (Integer'Image (Bulls) & \" bulls,\" & Integer'Image (Cows) & \" cows\");\n      exception\n         when Data_Error => Put_Line (\"You should enter four different digits 1..9\");\n      end;\n   end loop;\nend Bulls_And_Cows;\n\n", "explain": ""}, {"task_name": "Bulls and cows", "task_url": "https://rosettacode.org/wiki/Bulls_and_cows", "task_cat": "Puzzles", "lang": "Julia", "code": "\nfunction cowsbulls()\n\tprint(\"Welcome to Cows & Bulls! I've picked a number with unique digits between 1 and 9, go ahead and type your guess.\\n\n\t\tYou get one bull for every right number in the right position.\\n\n\t\tYou get one cow for every right number, but in the wrong position.\\n\n\t\tEnter 'n' to pick a new number and 'q' to quit.\\n>\")\n\tfunction new_number() \n\t\ts = [1:9]\n\t\tn = \"\"\n\t\tfor i = 9:-1:6\n\t\t\tn *= string(delete!(s,rand(1:i)))\n\t\tend\n\t\treturn n\n\tend\n\tanswer = new_number()\n\twhile true\n\t\tinput = chomp(readline(STDIN))\n\t\tinput == \"q\" && break\n\t\tif input == \"n\" \n\t\t\tanswer = new_number()\n\t\t\tprint(\"\\nI've picked a new number, go ahead and guess\\n>\")\n\t\t\tcontinue\n\t\tend\n\t\t!ismatch(r\"^[1-9]{4}$\",input) && (print(\"Invalid guess: Please enter a 4-digit number\\n>\"); continue)\n\t\tif input == answer \n\t\t\tprint(\"\\nYou're right! Good guessing!\\nEnter 'n' for a new number or 'q' to quit\\n>\")\n\t\telse\n\t\t\tbulls = sum(answer.data .== input.data)\n\t\t\tcows = sum([answer[x] != input[x] && contains(input.data,answer[x]) for x = 1:4])\n\t\t\tprint(\"\\nNot quite! Your guess is worth:\\n$bulls Bulls\\n$cows Cows\\nPlease guess again\\n\\n>\")\n\t\tend\n\tend\nend\n\n\nfunction bullsandcows ()\n    bulls = cows = turns = 0\n    result = (s = [] ; while length(unique(s))<4 push!(s,rand('1':'9')) end; unique(s))\n    println(\"A game of bulls and cows!\")\n    while (bulls != 4)\n      print(\"Your guess? \")\n      guess = collect(chomp(readline(STDIN)))\n      if ! (length(unique(guess)) == length(guess) == 4 && all(isdigit,guess))\n         println(\"please, enter four distincts digits\") \n         continue \n      end\n      bulls = sum(map(==, guess, result))\n      cows = length(intersect(guess,result)) - bulls\n      println(\"$bulls bulls and $cows cows!\") ; turns += 1\n    end\n    println(\"You win! You succeeded in $turns guesses.\")\n  end\n\n\nOutput:\njulia> bullsandcows()\nA game of bulls and cows!\nYour guess? 1234\n0 bulls and 2 cows!\nYour guess? 12334\nplease, enter four distincts digits\nYour guess? 5678\n1 bulls and 1 cows!\nYour guess? 1111\nplease, enter four distincts digits\nYour guess? grr\nplease, enter four distincts digits\nYour guess? ...\nplease, enter four distincts digits\nYour guess? \n", "explain": "The following version checks thoroughly that the input of the player is constituted of four distincts digits.\n"}, {"task_name": "Bulls and cows", "task_url": "https://rosettacode.org/wiki/Bulls_and_cows", "task_cat": "Puzzles", "lang": "Kotlin", "code": "\n// version 1.1.2\n\nimport java.util.Random\n\nconst val MAX_GUESSES = 20  // say\n\nfun main(args: Array<String>) {\n    val r = Random()\n    var num: String\n    // generate a 4 digit random number from 1234 to 9876 with no zeros or repeated digits\n    do {\n        num = (1234 + r.nextInt(8643)).toString()\n    } while ('0' in num || num.toSet().size < 4)\n\n    println(\"All guesses should have exactly 4 distinct digits excluding zero.\")\n    println(\"Keep guessing until you guess the chosen number (maximum $MAX_GUESSES valid guesses).\\n\")\n    var guesses = 0\n    while (true) {\n        print(\"Enter your guess\u00a0: \")\n        val guess = readLine()!!\n        if (guess == num) {\n            println(\"You've won with ${++guesses} valid guesses!\")\n            return\n        } \n        val n = guess.toIntOrNull()\n        if (n == null) \n            println(\"Not a valid number\")\n        else if ('-' in guess || '+' in guess)\n            println(\"Can't contain a sign\")\n        else if ('0' in guess)\n            println(\"Can't contain zero\")\n        else if (guess.length != 4)\n            println(\"Must have exactly 4 digits\")\n        else if (guess.toSet().size < 4)\n            println(\"All digits must be distinct\")\n        else {            \n            var bulls = 0\n            var cows  = 0\n            for ((i, c) in guess.withIndex()) {\n                if (num[i] == c) bulls++\n                else if (c in num) cows++\n            }\n            println(\"Your score for this guess:  Bulls = $bulls  Cows = $cows\")\n            guesses++\n            if (guesses == MAX_GUESSES) \n                println(\"You've now had $guesses valid guesses, the maximum allowed\") \n        }\n    }\n}\n\n\n\nOutput:\nEnter your guess\u00a0: 1234\nYour score for this guess:  Bulls = 0  Cows = 2\nEnter your guess\u00a0: 1256\nYour score for this guess:  Bulls = 0  Cows = 2\nEnter your guess\u00a0: 2178\nYour score for this guess:  Bulls = 1  Cows = 0\nEnter your guess\u00a0: 2519\nYour score for this guess:  Bulls = 3  Cows = 0\nEnter your guess\u00a0: 2569\nYour score for this guess:  Bulls = 3  Cows = 0\nEnter your guess\u00a0: 2579\nYour score for this guess:  Bulls = 3  Cows = 0\nEnter your guess\u00a0: 2589\nYour score for this guess:  Bulls = 3  Cows = 0\nEnter your guess\u00a0: 2539\nYour score for this guess:  Bulls = 3  Cows = 0\nEnter your guess\u00a0: 2549\nYou've won with 9 valid guesses!\n\n", "explain": "Sample input/output:\n"}, {"task_name": "Bulls and cows", "task_url": "https://rosettacode.org/wiki/Bulls_and_cows", "task_cat": "Puzzles", "lang": "Perl", "code": "\nuse Data::Random qw(rand_set);\nuse List::MoreUtils qw(uniq);\n\nmy $size = 4;\nmy $chosen = join \"\", rand_set set => [\"1\"..\"9\"], size => $size;\n\nprint \"I've chosen a number from $size unique digits from 1 to 9; you need\nto input $size unique digits to guess my number\\n\";\n\nfor ( my $guesses = 1; ; $guesses++ ) {\n    my $guess;\n    while (1) {\n        print \"\\nNext guess [$guesses]: \";\n        $guess = <STDIN>;\n        chomp $guess;\n        checkguess($guess) and last;\n        print \"$size digits, no repetition, no 0... retry\\n\";\n    }\n    if ( $guess eq $chosen ) {\n        print \"You did it in $guesses attempts!\\n\";\n        last;\n    }\n    my $bulls = 0;\n    my $cows = 0;\n    for my $i (0 .. $size-1) {\n        if ( substr($guess, $i, 1) eq substr($chosen, $i, 1) ) {\n            $bulls++;\n        } elsif ( index($chosen, substr($guess, $i, 1)) >= 0 ) {\n            $cows++;\n        }\n    }\n    print \"$cows cows, $bulls bulls\\n\";\n}\n\nsub checkguess\n{\n    my $g = shift;\n    return uniq(split //, $g) == $size && $g =~ /^[1-9]{$size}$/;\n}\n\n", "explain": ""}, {"task_name": "Bulls and cows", "task_url": "https://rosettacode.org/wiki/Bulls_and_cows", "task_cat": "Puzzles", "lang": "Prolog", "code": "\n\n:- use_module(library(lambda)).\n:- use_module(library(clpfd)).\n\n% Parameters of the server\n\n% length of the guess\nproposition(4).\n\n% Numbers of digits\n% 0 -> 8\ndigits(8).\n\n\nbulls_and_cows_server :-\n\tproposition(LenGuess),\n\tlength(Solution, LenGuess),\n\tchoose(Solution),\n\trepeat,\n\twrite('Your guess\u00a0: '),\n\tread(Guess),\n\t(   study(Solution, Guess, Bulls, Cows)\n\t->  format('Bulls\u00a0: ~w Cows\u00a0: ~w~n', [Bulls, Cows]),\n\t    Bulls = LenGuess\n\t;   digits(Digits), Max is Digits + 1,\n\t    format('Guess must be of ~w digits between 1 and ~w~n',\n\t\t   [LenGuess, Max]),\n\t    fail).\n\nchoose(Solution) :-\n\tdigits(Digits),\n\tMax is Digits + 1,\n\trepeat,\n\tmaplist(\\X^(X is random(Max) + 1), Solution),\n\tall_distinct(Solution),\n\t!.\n\nstudy(Solution, Guess, Bulls, Cows) :-\n\tproposition(LenGuess),\n\tdigits(Digits),\n\t\n\t% compute the transformation 1234 => [1,2,3,4]\n\tatom_chars(Guess, Chars),\n\tmaplist(\\X^Y^(atom_number(X, Y)), Chars, Ms),\n\t\n\t% check that the guess is well formed\n\tlength(Ms, LenGuess),\n\tmaplist(\\X^(X > 0, X =< Digits+1), Ms),\n\n\t% compute the digit in good place\n\tfoldl(\\X^Y^V0^V1^((X = Y->V1 is V0+1; V1 = V0)),Solution, Ms, 0, Bulls),\n\t\n\t% compute the digits in bad place\n\tfoldl(\\Y1^V2^V3^(foldl(\\X2^Z2^Z3^(X2 = Y1 -> Z3 is Z2+1; Z3 = Z2), Ms, 0, TT1),\n\t\t\t V3 is V2+ TT1),\n\t      Solution, 0, TT),\n\tCows is TT - Bulls.\n\n", "explain": "Works with SWI-Prolog 6.1.8 (for predicate foldl), module lambda, written by Ulrich Neumerkel found there http://www.complang.tuwien.ac.at/ulrich/Prolog-inedit/lambda.pl and module clpfd written by Markus Triska.\n"}, {"task_name": "Bulls and cows", "task_url": "https://rosettacode.org/wiki/Bulls_and_cows", "task_cat": "Puzzles", "lang": "Lua", "code": "\nfunction ShuffleArray(array)\n   for i=1,#array-1 do\n      local t = math.random(i, #array)\n      array[i], array[t] = array[t], array[i]\n   end\nend\n\nfunction GenerateNumber()\n   local digits = {1,2,3,4,5,6,7,8,9}\n\n   ShuffleArray(digits)\n\n   return digits[1] * 1000 +\n          digits[2] *  100 +\n          digits[3] *   10 +\n          digits[4]\nend\n\nfunction IsMalformed(input)\n   local malformed = false\n\n   if #input == 4 then\n      local already_used = {}\n      for i=1,4 do\n         local digit = input:byte(i) - string.byte('0')\n         if digit < 1 or digit > 9 or already_used[digit] then\n            malformed = true\n            break\n         end\n         already_used[digit] = true\n      end\n   else\n      malformed = true\n   end\n\n   return malformed\nend\n\nmath.randomseed(os.time())\nmath.randomseed(math.random(2^31-1)) -- since os.time() only returns seconds\n\nprint(\"\\nWelcome to Bulls and Cows!\")\nprint(\"\")\nprint(\"The object of this game is to guess the random 4-digit number that the\")\nprint(\"computer has chosen. The number is generated using only the digits 1-9,\")\nprint(\"with no repeated digits. Each time you enter a guess, you will score one\")\nprint(\"\\\"bull\\\" for each digit in your guess that matches the corresponding digit\")\nprint(\"in the computer-generated number, and you will score one \\\"cow\\\" for each\")\nprint(\"digit in your guess that appears in the computer-generated number, but is\")\nprint(\"in the wrong position. Use this information to refine your guesses. When\")\nprint(\"you guess the correct number, you win.\");\nprint(\"\")\n\nquit = false\n\nrepeat\n   magic_number = GenerateNumber()\n   magic_string = tostring(magic_number) -- Easier to do scoring with a string\n   repeat\n      io.write(\"\\nEnter your guess (or 'Q' to quit): \")\n      user_input = io.read()\n      if user_input == 'Q' or user_input == 'q' then\n         quit = true\n         break\n      end\n\n      if not IsMalformed(user_input) then\n         if user_input == magic_string then\n            print(\"YOU WIN!!!\")\n         else\n            local bulls, cows = 0, 0\n            for i=1,#user_input do\n               local find_result = magic_string:find(user_input:sub(i,i))\n\n               if find_result and find_result == i then\n                  bulls = bulls + 1\n               elseif find_result then\n                  cows = cows + 1\n               end\n            end\n            print(string.format(\"You scored %d bulls, %d cows\", bulls, cows))\n         end\n      else\n         print(\"Malformed input. You must enter a 4-digit number with\")\n         print(\"no repeated digits, using only the digits 1-9.\")\n      end\n\n   until user_input == magic_string\n\n   if not quit then\n      io.write(\"\\nPress <Enter> to play again or 'Q' to quit: \")\n      user_input = io.read()\n      if user_input == 'Q' or user_input == 'q' then\n         quit = true\n      end\n   end\n\n   if quit then\n      print(\"\\nGoodbye!\")\n   end\nuntil quit\n\n\nfunction createNewNumber ()\n\tmath.randomseed(os.time())\n\tlocal numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9}\n\tlocal tNumb = {} -- list of numbers\n\tfor i = 1, 4 do\n\t\ttable.insert(tNumb, math.random(#tNumb+1), table.remove(numbers, math.random(#numbers)))\n\tend\n\treturn tNumb\nend\n\nTNumber = createNewNumber ()\nprint ('(right number: ' .. table.concat (TNumber) .. ')')\n\nfunction isValueInList (value, list)\n\tfor i, v in ipairs (list) do\n\t\tif v == value then return true end\n\tend\n\treturn false\nend\n\nlocal nGuesses = 0\n\nwhile not GameOver do\n\tnGuesses = nGuesses + 1\n\tprint(\"Enter your guess (or 'q' to quit): \")\n\tlocal input\n\twhile not input do\n\t\tinput = io.read()\n\tend\n\tif input == \"q\" then\n\t\tGameOver = true\n\t\treturn\n\tend\n\tlocal tInput = {}\n\tfor i=1, string.len(input) do\n\t\tlocal number = tonumber(string.sub(input,i,i))\n\t\tif number and not isValueInList (number, tInput) then\n\t\t\ttable.insert (tInput, number)\n\t\tend\n\tend\n\tlocal malformed = false\n\tif not (string.len(input) == 4) or not (#tInput == 4) then \n\t\tprint (nGuesses, 'bad input: too short or too long')\n\t\tmalformed = true \n\tend\n\t\n\tif not malformed then\n\t\tprint (nGuesses, 'parsed input:', table.concat(tInput, ', '))\n\t\tlocal nBulls, nCows = 0, 0\n\t\tfor i, number in ipairs (tInput) do\n\t\t\tif TNumber[i] == number then\n\t\t\t\tnBulls = nBulls + 1\n\t\t\telseif isValueInList (number, TNumber) then\n\t\t\t\tnCows = nCows + 1\n\t\t\tend\n\t\tend\n\t\tprint (nGuesses, 'Bulls: '.. nBulls .. ' Cows: ' .. nCows)\n\t\tif nBulls == 4 then\n\t\t\tprint (nGuesses, 'Win!')\n\t\t\tGameOver = true\n\t\tend\n\tend\nend\n\n", "explain": "\nAnother version:\n"}, {"task_name": "Bulls and cows", "task_url": "https://rosettacode.org/wiki/Bulls_and_cows", "task_cat": "Puzzles", "lang": "Scala", "code": "\nimport scala.util.Random\n\nobject BullCow {\n   def main(args: Array[String]): Unit = {\n      val number=chooseNumber\n      var guessed=false\n      var guesses=0\n\n      while(!guessed){\n         Console.print(\"Guess a 4-digit number with no duplicate digits: \")\n         val input=Console.readInt\n         val digits=input.toString.map(_.asDigit).toList\n         if(input>=1111 && input<=9999 && !hasDups(digits)){\n            guesses+=1\n            var bulls, cows=0\n            for(i <- 0 to 3)\n               if(number(i)==digits(i))\n                  bulls+=1\n               else if(number.contains(digits(i)))\n                  cows+=1\n\n            if(bulls==4)\n               guessed=true\n            else\n               println(\"%d Cows and %d Bulls.\".format(cows, bulls))\n         }\n      }\n      println(\"You won after \"+guesses+\" guesses!\");\n   }\n\n   def chooseNumber={\n      var digits=List[Int]()\n      while(digits.size<4){\n         val d=Random.nextInt(9)+1\n         if (!digits.contains(d))\n            digits=digits:+d\n      }\n      digits\n   }\n\n   def hasDups(input:List[Int])=input.size!=input.distinct.size\n}\n\n", "explain": ""}, {"task_name": "Bulls and cows", "task_url": "https://rosettacode.org/wiki/Bulls_and_cows", "task_cat": "Puzzles", "lang": "D", "code": "\nvoid main() {\n    import std.stdio, std.random, std.string, std.algorithm,\n           std.range, std.ascii;\n\n    immutable hidden = \"123456789\"d.randomCover.take(4).array;\n    while (true) {\n        \"Next guess: \".write;\n        const d = readln.strip.array.sort().release;\n        if (d.count == 4 && d.all!isDigit && d.uniq.count == 4) {\n            immutable bulls = d.zip(hidden).count!q{ a[0] == a[1] },\n                      cows = d.count!(g => hidden.canFind(g)) - bulls;\n            if (bulls == 4)\n                return \" You guessed it!\".writeln;\n            writefln(\"bulls %d, cows %d\", bulls, cows);\n        }\n        \" Bad guess! (4 unique digits, 1-9)\".writeln;\n    }\n}\n\n\nOutput:\nNext guess: 6548\nbulls 0, cows 3\n Bad guess! (4 unique digits, 1-9)\nNext guess: 5284\nbulls 2, cows 1\n Bad guess! (4 unique digits, 1-9)\nNext guess: 4386\nbulls 0, cows 2\n Bad guess! (4 unique digits, 1-9)\nNext guess: -\n Bad guess! (4 unique digits, 1-9)\nNext guess: 5894\nbulls 3, cows 0\n Bad guess! (4 unique digits, 1-9)\nNext guess: 5874\nbulls 3, cows 0\n Bad guess! (4 unique digits, 1-9)\nNext guess: 5814\n You guessed it!\n", "explain": ""}, {"task_name": "Bulls and cows", "task_url": "https://rosettacode.org/wiki/Bulls_and_cows", "task_cat": "Puzzles", "lang": "Haskell", "code": "\nimport Data.List (partition, intersect, nub)\nimport Control.Monad\nimport System.Random (StdGen, getStdRandom, randomR)\nimport Text.Printf\n\nnumberOfDigits = 4 :: Int\n\nmain = bullsAndCows\n\nbullsAndCows :: IO ()\nbullsAndCows = do\n    digits <- getStdRandom $ pick numberOfDigits ['1' .. '9']\n    putStrLn \"Guess away!\"\n    loop digits\n\n  where loop digits = do\n            input <- getLine\n            if okay input\n              then\n                  let (bulls, cows) = score digits input in\n                  if bulls == numberOfDigits then\n                      putStrLn \"You win!\"\n                  else do\n                      printf \"%d bulls, %d cows.\\n\" bulls cows\n                      loop digits\n              else do\n                  putStrLn \"Malformed guess; try again.\"\n                  loop digits\n\n        okay :: String -> Bool\n        okay input =\n            length input == numberOfDigits && \n            input == nub input &&\n            all legalchar input\n          where legalchar c = '1' <= c && c <= '9'\n\n        score :: String -> String -> (Int, Int)\n        score secret guess = (length bulls, cows)\n          where (bulls, nonbulls) = partition (uncurry (==)) $\n                    zip secret guess\n                cows = length $ uncurry intersect $ unzip nonbulls\n\npick :: Int -> [a] -> StdGen -> ([a], StdGen)\n{- Randomly selects items from a list without replacement. -}\npick n l g = f n l g (length l - 1) []\n  where  f 0 _ g _   ps = (ps, g)\n         f n l g max ps =\n             f (n - 1) (left ++ right) g' (max - 1) (picked : ps)\n          where (i, g') = randomR (0, max) g\n                (left, picked : right) = splitAt i l\n\n", "explain": ""}, {"task_name": "Bulls and cows", "task_url": "https://rosettacode.org/wiki/Bulls_and_cows", "task_cat": "Puzzles", "lang": "VBScript", "code": "\n\nrandomize timer\nfail=array(\"Wrong number of chars\",\"Only figures 0 to 9 allowed\",\"Two or more figures are the same\") \np=dopuzzle()\nwscript.echo \"Bulls and Cows. Guess my 4 figure number!\"\ndo\n do\n  wscript.stdout.write vbcrlf & \"your move \": s=trim(wscript.stdin.readline)\n  c=checkinput(s)\n  if not isarray (c) then wscript.stdout.write fail(c) :exit do\n  bu=c(0)\n  wscript.stdout.write \"bulls: \" & c(0) & \" | cows: \" & c(1)\n loop while 0\nloop until bu=4  \nwscript.stdout.write vbcrlf & \"You won! \"\n\n\nfunction dopuzzle()\n  dim b(10)\n  for i=1 to 4\n    do\n      r=fix(rnd*10)\n    loop until b(r)=0\n    b(r)=1:dopuzzle=dopuzzle+chr(r+48)\n  next  \nend function\n\nfunction checkinput(s)\n  dim c(10)\n  bu=0:co=0\n  if len(s)<>4 then checkinput=0:exit function\n  for i=1 to 4\n    b=mid(s,i,1)\n    if instr(\"0123456789\",b)=0 then checkinput=1 :exit function\n\t\tif c(asc(b)-48)<>0 then checkinput=2 :exit function\n    c(asc(b)-48)=1\n    for j=1 to 4\n      if asc(b)=asc(mid(p,j,1)) then\n        if i=j then bu=bu+1 else co=co+1\n      end if\n    next\n  next\n  checkinput=array(bu,co)\nend function\n\n", "explain": "VBS functions return variants. I use t to return a single error value or a pair bulls, cows on result\nVBS does'nt have a continue so i used the classic do loop inside do loop in the main program\n"}, {"task_name": "Bulls and cows", "task_url": "https://rosettacode.org/wiki/Bulls_and_cows", "task_cat": "Puzzles", "lang": "Scheme", "code": "\nWorks with: any R6RS Scheme\n;generate a random non-repeating list of 4 digits, 1-9 inclusive\n(define (get-num)\n  (define (gen lst)\n    (if (= (length lst) 4) lst\n        (let ((digit (+ (random 9) 1)))\n          (if (member digit lst) ;make sure the new digit isn't in the\n                                 ;list\n              (gen lst)\n              (gen (cons digit lst))))))\n  (string->list (apply string-append (map number->string (gen '())))))\n\n;is g a valid guess (that is, non-repeating, four digits 1-9\n;inclusive?)\n(define (valid-guess? g)\n  (let ((g-num (string->number (apply string g))))\n    ;does the same digit appear twice in lst?\n    (define (repeats? lst)\n      (cond ((null? lst) #f)\n            ((member (car lst) (cdr lst)) #t)\n            (else (repeats? (cdr lst)))))\n    (and g-num\n         (> g-num 1233)\n         (< g-num 9877)\n         (not (repeats? g)))))\n\n;return '(cows bulls) for the given guess\n(define (score answer guess)\n  ;total cows + bulls\n  (define (cows&bulls a g)\n    (cond ((null? a) 0)\n          ((member (car a) g) (+ 1 (cows&bulls (cdr a) g)))\n          (else (cows&bulls (cdr a) g))))\n  ;bulls only\n  (define (bulls a g)\n    (cond ((null? a) 0)\n          ((equal? (car a) (car g)) (+ 1 (bulls (cdr a) (cdr g))))\n          (else (bulls (cdr a) (cdr g)))))\n  (list (- (cows&bulls answer guess) (bulls answer guess)) (bulls answer guess)))\n\n;play the game\n(define (bull-cow answer)\n  ;get the user's guess as a list\n  (define (get-guess)\n    (let ((e (read)))\n      (if (number? e)\n          (string->list (number->string e))\n          (string->list (symbol->string e)))))\n  (display \"Enter a guess: \")\n  (let ((guess (get-guess)))\n    (if (valid-guess? guess)\n        (let ((bulls (cadr (score answer guess)))\n              (cows (car (score answer guess))))\n          (if (= bulls 4)\n              (display \"You win!\\n\")\n              (begin\n                (display bulls)\n                (display \" bulls, \")\n                (display cows)\n                (display \" cows.\\n\")\n                (bull-cow answer))))\n        (begin\n          (display \"Invalid guess.\\n\")\n          (bull-cow answer)))))\n\n(bull-cow (get-num))\n\nSample game play[edit]\nEnter a guess: 1234\n0 bulls, 1 cows.\nEnter a guess: 2345\n1 bulls, 0 cows.\nEnter a guess: 2346\n1 bulls, 1 cows.\nEnter a guess: 2367\n0 bulls, 1 cows.\nEnter a guess: 2647\n1 bulls, 1 cows.\nEnter a guess: 2648\n2 bulls, 1 cows.\nEnter a guess: 2468\n1 bulls, 2 cows.\nEnter a guess: 1468\n1 bulls, 2 cows.\nEnter a guess: 2684\n0 bulls, 3 cows.\nEnter a guess: 6248\n3 bulls, 0 cows.\nEnter a guess: 6948\nYou win!\n\n", "explain": ""}, {"task_name": "Bulls and cows", "task_url": "https://rosettacode.org/wiki/Bulls_and_cows", "task_cat": "Puzzles", "lang": "PowerShell", "code": "\n[int]$guesses = $bulls = $cows = 0\n[string]$guess = \"none\"\n[string]$digits = \"\"\n\nwhile ($digits.Length -lt 4)\n{\n    $character = [char](49..57 | Get-Random)\n\n    if ($digits.IndexOf($character) -eq -1) {$digits += $character}\n}\n\nWrite-Host \"`nGuess four digits (1-9) using no digit twice.`n\" -ForegroundColor Cyan\n\nwhile ($bulls -lt 4)\n{\n    do\n    {\n        $prompt = \"Guesses={0:0#}, Last='{1,4}', Bulls={2}, Cows={3}; Enter your guess\" -f $guesses, $guess, $bulls, $cows\n        $guess = Read-Host $prompt\n\n        if ($guess.Length -ne 4)                     {Write-Host \"`nMust be a four-digit number`n\" -ForegroundColor Red}\n        if ($guess -notmatch \"[1-9][1-9][1-9][1-9]\") {Write-Host \"`nMust be numbers 1-9`n\"         -ForegroundColor Red}\n    }\n    until ($guess.Length -eq 4)\n\n    $guesses += 1\n    $bulls = $cows = 0\n\n    for ($i = 0; $i -lt 4; $i++)\n    { \n        $character = $digits.Substring($i,1)\n\n        if ($guess.Substring($i,1) -eq $character)\n        {\n            $bulls += 1\n        }\n        else\n        {\n            if ($guess.IndexOf($character) -ge 0)\n            {\n                $cows += 1\n            }\n        }\n    }\n}\n\nWrite-Host \"`nYou won after $($guesses - 1) guesses.\" -ForegroundColor Cyan\n\n\nOutput:\nGuess four digits (1-9) using no digit twice.\n\nGuesses=00, Last='none', Bulls=0, Cows=0; Enter your guess: 1234\nGuesses=01, Last='1234', Bulls=0, Cows=3; Enter your guess: 2345\nGuesses=02, Last='2345', Bulls=1, Cows=2; Enter your guess: 2346\nGuesses=03, Last='2346', Bulls=1, Cows=1; Enter your guess: 2341\nGuesses=04, Last='2341', Bulls=1, Cows=2; Enter your guess: 3241\nGuesses=05, Last='3241', Bulls=0, Cows=3; Enter your guess: 4321\nGuesses=06, Last='4321', Bulls=1, Cows=2; Enter your guess: 5321\nGuesses=07, Last='5321', Bulls=2, Cows=2; Enter your guess: 5312\n\nYou won after 7 guesses.\n\n", "explain": ""}, {"task_name": "Bulls and cows", "task_url": "https://rosettacode.org/wiki/Bulls_and_cows", "task_cat": "Puzzles", "lang": "Logo", "code": "\nWorks with: UCB Logo\nto ok? :n\n  output (and [number? :n] [4 = count :n] [4 = count remdup :n] [not member? 0 :n])\nend\n\nto init\n  do.until [make \"hidden random 10000] [ok? :hidden]\nend\n\nto guess :n\n  if not ok? :n [print [Bad guess! (4 unique digits, 1-9)]  stop]\n  localmake \"bulls 0\n  localmake \"cows  0\n  foreach :n [cond [\n    [[? = item # :hidden] make \"bulls 1 + :bulls]\n    [[member? \u00a0? :hidden] make \"cows  1 + :cows ]\n  ]]\n  (print :bulls \"bulls, :cows \"cows)\n  if :bulls = 4 [print [You guessed it!]]\nend\n", "explain": ""}, {"task_name": "Bulls and cows", "task_url": "https://rosettacode.org/wiki/Bulls_and_cows", "task_cat": "Puzzles", "lang": "F#", "code": "\nopen System\n\nlet generate_number targetSize =\n    let rnd = Random()\n    let initial = Seq.initInfinite (fun _ -> rnd.Next(1,9))\n    initial |> Seq.distinct |> Seq.take(targetSize) |> Seq.toList\n\nlet countBulls guess target =\n    let hits = List.map2 (fun g t -> if g = t then true else false) guess target\n    List.filter (fun x -> x = true) hits |> List.length\n\nlet countCows guess target =\n    let mutable score = 0\n    for g in guess do\n        for t in target do\n            if g = t then\n                score <- score + 1\n            else\n                score <- score\n    score\n\nlet countScore guess target =\n    let bulls = countBulls guess target\n    let cows = countCows guess target\n    (bulls, cows)\n\nlet playRound guess target =\n    countScore guess target\n\nlet inline ctoi c : int =\n    int c - int '0'\n\nlet lineToList (line: string) =\n    let listc = Seq.map(fun c -> c |> string) line |> Seq.toList\n    let conv = List.map(fun x -> Int32.Parse x) listc\n    conv\n\nlet readLine() =\n    let line = Console.ReadLine()\n    if line <> null then\n        if line.Length = 4 then\n            Ok (lineToList line)\n        else\n            Error(\"Input guess must be 4 characters!\")\n    else\n        Error(\"Input guess cannot be empty!\")\n\nlet rec handleInput() =\n    let line = readLine()\n    match line with\n    | Ok x -> x\n    | Error s ->\n        printfn \"%A\" s\n        handleInput()\n\n[<EntryPoint>]\nlet main argv =\n    let target = generate_number 4\n    let mutable shouldEnd = false\n    while shouldEnd = false do\n        let guess = handleInput()\n        let (b, c) = playRound guess target\n        printfn \"Bulls: %i | Cows: %i\" b c\n        if b = 4 then\n            shouldEnd <- true\n        else\n            shouldEnd <- false\n    0\n\n", "explain": ""}, {"task_name": "Bulls and cows", "task_url": "https://rosettacode.org/wiki/Bulls_and_cows", "task_cat": "Puzzles", "lang": "Groovy", "code": "\nclass BullsAndCows {\n    static void main(args) {\n        def inputReader = System.in.newReader()\n        def numberGenerator = new Random()\n        def targetValue\n        while (targetValueIsInvalid(targetValue = numberGenerator.nextInt(9000) + 1000)) continue\n        def targetStr = targetValue.toString()\n        def guessed = false\n        def guesses = 0\n        while (!guessed) {\n            def bulls = 0, cows = 0\n            print 'Guess a 4-digit number with no duplicate digits: '\n            def guess = inputReader.readLine()\n            if (guess.length() != 4 || !guess.isInteger() || targetValueIsInvalid(guess.toInteger())) {\n                continue\n            }\n            guesses++\n            4.times {\n                if (targetStr[it] == guess[it]) {\n                    bulls++\n                } else if (targetStr.contains(guess[it])) {\n                    cows++\n                }\n            }\n            if (bulls == 4) {\n                guessed = true\n            } else {\n                println \"$cows Cows and $bulls Bulls.\"\n            }\n        }\n        println \"You won after $guesses guesses!\"\n    }\n\n    static targetValueIsInvalid(value) {\n        def digitList = []\n        while (value > 0) {\n            if (digitList[value % 10] == 0 || digitList[value % 10]) {\n                return true\n            }\n            digitList[value % 10] = true\n            value = value.intdiv(10)\n        }\n        false\n    }\n}\n\n", "explain": ""}, {"task_name": "Bulls and cows", "task_url": "https://rosettacode.org/wiki/Bulls_and_cows", "task_cat": "Puzzles", "lang": "AWK", "code": "\n# Usage: GAWK -f BULLS_AND_COWS.AWK\nBEGIN {\n    srand()\n    secret = \"\"\n    for (i = 1; i <= 4; ) {\n        digit = int(9 * rand()) + 1\n        if (index(secret, digit) == 0) {\n            secret = secret digit\n            i++\n        }\n    }\n    print \"Welcome to 'Bulls and Cows'!\"\n    print \"I thought of a 4-digit number.\"\n    print \"Please enter your guess.\"\n}\niswellformed($0) {\n    if (calcscore($0, secret)) {\n        exit\n    }\n}\nfunction iswellformed(number,    i, digit) {\n    if (number !~ /[1-9][1-9][1-9][1-9]/) {\n        print \"Your guess should contain 4 digits, each from 1 to 9. Try again!\"\n        return 0\n    }\n    for (i = 1; i <= 3; i++) {\n        digit = substr(number, 1, 1)\n        number = substr(number, 2)\n        if (index(number, digit) != 0) {\n            print \"Your guess contains a digit twice. Try again!\"\n            return 0\n        }\n    }\n    return 1\n}\nfunction calcscore(guess, secret,    bulls, cows, i, idx) {\n    # Bulls = correct digits at the right position\n    # Cows = correct digits at the wrong position\n    for (i = 1; i <= 4; i++) {\n        idx = index(secret, substr(guess, i, 1))\n        if (idx == i) {\n            bulls++\n        } else if (idx > 0) {\n            cows++\n        }\n    }\n    printf(\"Your score for this guess: Bulls = %d, Cows = %d.\", bulls, cows)\n    if (bulls < 4) {\n        printf(\" Try again!\\n\")\n    } else {\n        printf(\"\\nCongratulations, you win!\\n\")\n    }\n    return bulls == 4\n}\n\n\nOutput:\nWelcome to 'Bulls and Cows'!\nI thought of a 4-digit number.\nPlease enter your guess.\n1234\nYour score for this guess: Bulls = 0, Cows = 1. Try again!\n5678\nYour score for this guess: Bulls = 1, Cows = 1. Try again!\n9651\nYour score for this guess: Bulls = 1, Cows = 1. Try again!\n5729\nYour score for this guess: Bulls = 0, Cows = 3. Try again!\n2695\nYour score for this guess: Bulls = 2, Cows = 1. Try again!\n2697\nYour score for this guess: Bulls = 2, Cows = 2. Try again!\n7692\nYour score for this guess: Bulls = 4, Cows = 0.\nCongratulations, you win!\n\n", "explain": ""}]