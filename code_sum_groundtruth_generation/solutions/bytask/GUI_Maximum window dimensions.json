[{"task_name": "GUI/Maximum window dimensions", "task_url": "https://rosettacode.org/wiki/GUI/Maximum_window_dimensions", "task_cat": "Initialization", "lang": "Python", "code": "\n#!/usr/bin/env python3\n\nimport tkinter as tk # import the module.\n\nroot = tk.Tk() # Create an instance of the class.\nroot.state('zoomed') # Maximized the window.\nroot.update_idletasks() # Update the display.\ntk.Label(root, text=(str(root.winfo_width())+ \" x \" +str(root.winfo_height())),\n         font=(\"Helvetica\", 25)).pack() # add a label and set the size to text.\nroot.mainloop()\n\n\n1366 x 706\n", "explain": "Sample output for 1366 x 768 screen:\n"}, {"task_name": "GUI/Maximum window dimensions", "task_url": "https://rosettacode.org/wiki/GUI/Maximum_window_dimensions", "task_cat": "Initialization", "lang": "C", "code": "\nWindows[edit]\n\n#include<windows.h>\n#include<stdio.h>\n\nint main()\n{\n\tprintf(\"Dimensions of the screen are (w x h)\u00a0: %d x %d pixels\",GetSystemMetrics(SM_CXSCREEN),GetSystemMetrics(SM_CYSCREEN));\n\treturn 0;\n}\n\n\nDimensions of the screen are (w x h)\u00a0: 1536 x 864 pixels\n\n", "explain": "The following implementation has been tested on Windows 8.1, may not work on Linux systems.\nOutput\u00a0:\n"}, {"task_name": "GUI/Maximum window dimensions", "task_url": "https://rosettacode.org/wiki/GUI/Maximum_window_dimensions", "task_cat": "Initialization", "lang": "Java", "code": "\nimport java.awt.*;\nimport javax.swing.JFrame;\n\npublic class Test extends JFrame {\n\n    public static void main(String[] args) {\n        new Test();\n    }\n\n    Test() {\n        Toolkit toolkit = Toolkit.getDefaultToolkit();\n\n        Dimension screenSize = toolkit.getScreenSize();\n        System.out.println(\"Physical screen size: \" + screenSize);\n\n        Insets insets = toolkit.getScreenInsets(getGraphicsConfiguration());\n        System.out.println(\"Insets: \" + insets);\n\n        screenSize.width -= (insets.left + insets.right);\n        screenSize.height -= (insets.top + insets.bottom);\n        System.out.println(\"Max available: \" + screenSize);\n    }\n}\n\n\nPhysical screen size: java.awt.Dimension[width=1920,height=1080]\nInsets: java.awt.Insets[top=0,left=0,bottom=30,right=0]\nMax available: java.awt.Dimension[width=1920,height=1050]\n", "explain": "Output:\n"}, {"task_name": "GUI/Maximum window dimensions", "task_url": "https://rosettacode.org/wiki/GUI/Maximum_window_dimensions", "task_cat": "Initialization", "lang": "C#", "code": "\nTranslation of: Visual Basic .NET\n\nWorks with: .NET Framework version 4.7.2 (simple enough that it should probably work on every Framework version--.NET Core 3.0 will support Windows Forms on Windows only)\n\nLibrary: GDI+ (managed interface) [System.Drawing]\nLibrary: Windows Forms [System.Windows.Forms]\n\nusing System;\nusing System.Drawing;\nusing System.Windows.Forms;\n\nstatic class Program\n{\n    static void Main()\n    {\n        Rectangle bounds = Screen.PrimaryScreen.Bounds;\n        Console.WriteLine($\"Primary screen bounds:  {bounds.Width}x{bounds.Height}\");\n\n        Rectangle workingArea = Screen.PrimaryScreen.WorkingArea;\n        Console.WriteLine($\"Primary screen working area:  {workingArea.Width}x{workingArea.Height}\");\n    }\n}\n\n\nOutput:\nPrimary screen bounds:  1714x1143\nPrimary screen working area:  1714x1103\n\nusing System;\nusing System.Drawing;\nusing System.Windows.Forms;\n\nstatic class Program\n{\n    static void Main()\n    {\n        using (var f = new Form() { FormBorderStyle = FormBorderStyle.None, WindowState = FormWindowState.Maximized })\n        {\n            f.Show();\n            Console.WriteLine($\"Size of maximized borderless form:  {f.Width}x{f.Height}\");\n        }\n    }\n}\n\n\nOutput:\nSize of maximized borderless form:  1714x1143\n", "explain": "Compiler: Roslyn C# (language version >= 6)\nMust be referenced:\nBounds are the screen's dimensions; working area is the is the region that excludes \"taskbars, docked windows, and docked tool bars\" (from Framework documentation).\nAlternatively, use the dimensions of a borderless form with WindowState set to FormWindowState.Maximized (i.e. a full-screen window that is shown above the taskbar).\n"}, {"task_name": "GUI/Maximum window dimensions", "task_url": "https://rosettacode.org/wiki/GUI/Maximum_window_dimensions", "task_cat": "Initialization", "lang": "Visual_Basic_.NET", "code": "\n\nWorks with: .NET Framework version 4.7.2 (simple enough that it should probably work on every Framework version--.NET Core 3.0 will support Windows Forms on Windows only)\n\nLibrary: GDI+ (managed interface) [System.Drawing]\nLibrary: Windows Forms [System.Windows.Forms]\n\nImports System.Drawing\nImports System.Windows.Forms\n\nModule Program\n    Sub Main()\n        Dim bounds As Rectangle = Screen.PrimaryScreen.Bounds\n        Console.WriteLine($\"Primary screen bounds:  {bounds.Width}x{bounds.Height}\")\n\n        Dim workingArea As Rectangle = Screen.PrimaryScreen.WorkingArea\n        Console.WriteLine($\"Primary screen working area:  {workingArea.Width}x{workingArea.Height}\")\n    End Sub\nEnd Module\n\n\nOutput:\nPrimary screen bounds:  1714x1143\nPrimary screen working area:  1714x1103\n\nImports System.Drawing\nImports System.Windows.Forms\n\nModule Program\n    Sub Main()\n        Using f As New Form() With {\n            .WindowState = FormWindowState.Maximized,\n            .FormBorderStyle = FormBorderStyle.None\n            }\n\n            f.Show()\n            Console.WriteLine($\"Size of maximized borderless form:  {f.Width}x{f.Height}\")\n        End Using\n    End Sub\nEnd Module\n\n\nOutput:\nSize of maximized borderless form:  1714x1143\n", "explain": "Compiler: Roslyn Visual Basic (language version >= 14, e.g. with Visual Studio 2015)\nMust be referenced:\nBounds are the screen's dimensions; working area is the is the region that excludes \"taskbars, docked windows, and docked tool bars\" (from Framework documentation).\nAlternatively, use the dimensions of a borderless form with WindowState set to FormWindowState.Maximized (i.e. a full-screen window that is shown above the taskbar).\n"}, {"task_name": "GUI/Maximum window dimensions", "task_url": "https://rosettacode.org/wiki/GUI/Maximum_window_dimensions", "task_cat": "Initialization", "lang": "Go", "code": "\nLibrary: RobotGo\npackage main\n\nimport (\n    \"fmt\"\n    \"github.com/go-vgo/robotgo\"\n)\n\nfunc main() {\n    w, h := robotgo.GetScreenSize()\n    fmt.Printf(\"Screen size: %d x %d\\n\", w, h)\n    fpid, err := robotgo.FindIds(\"firefox\")\n    if err == nil && len(fpid) > 0 {\n        pid := fpid[0]\n        robotgo.ActivePID(pid)\n        robotgo.MaxWindow(pid)\n        _, _, w, h = robotgo.GetBounds(pid)\n        fmt.Printf(\"Max usable\u00a0: %d x %d\\n\", w, h)\n    }\n}\n\n\nScreen size: 1366 x 768\nMax usable\u00a0: 1301 x 744\n\n", "explain": "On my machine the figures are:\n"}, {"task_name": "GUI/Maximum window dimensions", "task_url": "https://rosettacode.org/wiki/GUI/Maximum_window_dimensions", "task_cat": "Initialization", "lang": "Delphi", "code": "\nLibrary:  Winapi.Windows\nLibrary:  System.SysUtils\nLibrary:  Vcl.Forms\nunit Main;\n\ninterface\n\nuses\n  Winapi.Windows, System.SysUtils, Vcl.Forms;\n\ntype\n  TForm1 = class(TForm)\n    procedure FormCreate(Sender: TObject);\n  end;\n\nvar\n  Form1: TForm1;\n\nimplementation\n\n{$R *.dfm}\n\nprocedure TForm1.FormCreate(Sender: TObject);\nvar\n w,h:Integer;\nbegin\n  w := Screen.Monitors[0].WorkareaRect.Width;\n  h := Screen.Monitors[0].WorkareaRect.Height;\n  Caption:= format('%d x %d',[w,h]);\n  SetBounds(0,0,w,h);\nend;\n\nend.\n\n\nobject Form1: TForm1\n  OnCreate = FormCreate\nend\n\n", "explain": "Resources from form:\n"}, {"task_name": "GUI/Maximum window dimensions", "task_url": "https://rosettacode.org/wiki/GUI/Maximum_window_dimensions", "task_cat": "Initialization", "lang": "Visual_Basic", "code": "\nMethod 1[edit]\n\nTYPE syswindowstru\n  screenheight AS INTEGER\n  screenwidth AS INTEGER\n  maxheight AS INTEGER\n  maxwidth AS INTEGER\nEND TYPE\n\nDIM syswindow AS syswindowstru\n\n' Determine the height and width of the screen\n\nsyswindow.screenwidth = Screen.Width / Screen.TwipsPerPixelX\nsyswindow.screenheight=Screen.Height / Screen.TwipsPerPixelY\n\n' Make adjustments for window decorations and menubars\n\nMethod 2[edit]\n\n", "explain": "The first method involves querying the screen dimensions and then subtracting pixels used by the frame and desktop bars:\nThe alternative method is to create a form that is maximized and then query its dimensions (similar to the method used in gambas).\n"}, {"task_name": "GUI/Maximum window dimensions", "task_url": "https://rosettacode.org/wiki/GUI/Maximum_window_dimensions", "task_cat": "Initialization", "lang": "Ada", "code": "\nLibrary: GTK\nLibrary: GtkAda\nwith Gtk.Main;\nwith Glib;\nwith Gtk.Window;  use Gtk.Window;\nwith Gtk.Enums;   use Gtk.Enums;\nwith Ada.Text_IO; use Ada.Text_IO;\n\nprocedure Max_Size is\n\n   Win          : Gtk_Window;\n   Win_W, Win_H : Glib.Gint;\n   package Int_Io is new Integer_IO (Glib.Gint);\n   Hid : Gtk.Main.Quit_Handler_Id;\n\nbegin\n   Gtk.Main.Init;\n   Gtk_New (Win);\n   Initialize (Win, Window_Toplevel);\n   Maximize (Win);\n   Show (Win);\n   Get_Size (Win, Win_W, Win_H);\n   Put (\"Maximum dimensions of window\u00a0: W \");\n   Int_Io.Put (Win_W, Width => 4);\n   Put (\" x H \");\n   Int_Io.Put (Win_H, Width => 4);\n   New_Line;\n   Hid := Gtk.Main.Quit_Add_Destroy (0, Win);\nend Max_Size;\n\n\nMaximum dimensions of window\u00a0: W 1280 x H  734\n\n", "explain": "Output (on a 1280 x 800 screen with Windows XP):\n"}, {"task_name": "GUI/Maximum window dimensions", "task_url": "https://rosettacode.org/wiki/GUI/Maximum_window_dimensions", "task_cat": "Initialization", "lang": "Julia", "code": "\n\nwin = GtkWindow(\"hello\", 100, 100)\nfullscreen(win)\nsleep(10)\nprintln(width(win), \" \", height(win))\ndestroy(win)\n\n\nOutput: \n\n1920 1080\n\n\n", "explain": "Uses the Gtk library.\n"}, {"task_name": "GUI/Maximum window dimensions", "task_url": "https://rosettacode.org/wiki/GUI/Maximum_window_dimensions", "task_cat": "Initialization", "lang": "Kotlin", "code": "\nTranslation of: Java\n// version 1.1\n\nimport java.awt.Toolkit\nimport javax.swing.JFrame\n\nclass Test : JFrame() {\n    init {\n        val r = Regex(\"\"\"\\[.*\\]\"\"\")\n        val toolkit = Toolkit.getDefaultToolkit()\n        val screenSize = toolkit.screenSize\n        println(\"Physical screen size\u00a0: ${formatOutput(screenSize, r)}\")\n        val insets = toolkit.getScreenInsets(graphicsConfiguration)\n        println(\"Insets              \u00a0: ${formatOutput(insets, r)}\")\n        screenSize.width  -= (insets.left + insets.right)\n        screenSize.height -= (insets.top + insets.bottom)\n        println(\"Max available       \u00a0: ${formatOutput(screenSize, r)}\")\n    }\n\n    private fun formatOutput(output: Any, r: Regex) = r.find(output.toString())!!.value.replace(\",\", \", \")\n}\n\nfun main(args: Array<String>) {\n    Test()\n}\n\n\n\nOutput:\nPhysical screen size\u00a0: [width=1366, height=768]\nInsets              \u00a0: [top=0, left=0, bottom=40, right=0]\nMax available       \u00a0: [width=1366, height=728]\n\n", "explain": "Sample output:\n"}, {"task_name": "GUI/Maximum window dimensions", "task_url": "https://rosettacode.org/wiki/GUI/Maximum_window_dimensions", "task_cat": "Initialization", "lang": "Perl", "code": "\nLibrary: Perl/Tk[edit]\nuse strict;\nuse warnings;\nuse Tk;\n\nsub get_size {\n\tmy $mw = MainWindow->new();\n\treturn ($mw->maxsize);\n}\n\n\n", "explain": "get_size returns (1425,870) here.\n"}, {"task_name": "GUI/Maximum window dimensions", "task_url": "https://rosettacode.org/wiki/GUI/Maximum_window_dimensions", "task_cat": "Initialization", "lang": "Lua", "code": "\nnw = require(\"nw\")\nwin = nw:app():window(320, 240)\nwin:show()\nwin:maximize()\ncw, ch = win:client_size()\nprint(cw .. \" x \" .. ch)\n\n\n\nOutput:\n1920 x 1017\n", "explain": "On a 1920 x 1080 screen..\n"}, {"task_name": "GUI/Maximum window dimensions", "task_url": "https://rosettacode.org/wiki/GUI/Maximum_window_dimensions", "task_cat": "Initialization", "lang": "Scala", "code": "\nimport java.awt.{Dimension, Insets, Toolkit}\n\nimport javax.swing.JFrame\n\nclass MaxWindowDims() extends JFrame {\n  val toolkit: Toolkit = Toolkit.getDefaultToolkit\n  val (insets0, screenSize) = (toolkit.getScreenInsets(getGraphicsConfiguration),  toolkit.getScreenSize)\n\n  println(\"Physical screen size: \" + screenSize)\n  System.out.println(\"Insets: \" + insets0)\n  screenSize.width -= (insets0.left + insets0.right)\n  screenSize.height -= (insets0.top + insets0.bottom)\n  System.out.println(\"Max available: \" + screenSize)\n}\n\nobject MaxWindowDims {\n  def main(args: Array[String]): Unit = {\n    new MaxWindowDims\n  }\n}\n\n", "explain": ""}, {"task_name": "GUI/Maximum window dimensions", "task_url": "https://rosettacode.org/wiki/GUI/Maximum_window_dimensions", "task_cat": "Initialization", "lang": "Haskell", "code": "\nimport Graphics.UI.Gtk\nimport Control.Monad (when)\nimport Control.Monad.Trans (liftIO)\n\nmaximumWindowDimensions :: IO ()\nmaximumWindowDimensions = do\n    -- initialize the internal state of the GTK toolkit\n    initGUI\n    -- create a window\n    window <- windowNew\n    -- quit the application when the window is closed\n    on window objectDestroy mainQuit\n    -- query the size of the window when its dimensions change\n    on window configureEvent printSize\n    -- get the screen the window will be drawn upon\n    screen <- windowGetScreen window\n    -- get the size of the screen\n    x <- screenGetWidth screen\n    y <- screenGetHeight screen\n    -- print the dimensions of the screen\n    putStrLn (\"The screen is \" ++ show x ++ \" pixels wide and \" ++\n        show y ++ \" pixels tall for an undecorated fullscreen window.\")\n    -- maximize the window and show it. printSize will then be called\n    windowMaximize window\n    widgetShowAll window\n    -- run the main GTK loop.\n    -- close the window manually.\n    mainGUI\n\n-- On my Xfce4 desktop, the configure_event is called three times when a\n-- top level window is maximized. The first time, the window size\n-- returned is the size prior to maximizing, and the last two times\n-- it is the size after maximizing.\n-- If the window is (un)maximized manually, the size returned is always\n-- the size of the unmaximized window.\n-- That means: either GTK or Xfce4 does not handle window maximization\n-- correctly, or the GTK bindings for Haskell are buggy, or there is an\n-- error in this program.\n\nprintSize :: EventM EConfigure Bool\nprintSize = do\n    -- get the window that has been resized\n    w <- eventWindow\n    -- is the window maximized?\n    s <- liftIO $ drawWindowGetState w\n    when (WindowStateMaximized `elem` s) $ do\n        -- get the size of the window that has been resized\n        (x, y) <- eventSize\n        -- print the dimensions out\n        liftIO $ putStrLn (\"The inner window region is now \" ++ show x ++\n            \" pixels wide and \" ++ show y ++ \" pixels tall.\")\n    return True\n\n", "explain": ""}, {"task_name": "GUI/Maximum window dimensions", "task_url": "https://rosettacode.org/wiki/GUI/Maximum_window_dimensions", "task_cat": "Initialization", "lang": "Groovy", "code": "\ndef window = java.awt.GraphicsEnvironment.localGraphicsEnvironment.maximumWindowBounds\n\nprintln \"width: $window.width, height: $window.height\"\n\n", "explain": ""}]