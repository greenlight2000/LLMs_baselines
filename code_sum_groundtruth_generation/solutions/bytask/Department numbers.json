[{"task_name": "Department numbers", "task_url": "https://rosettacode.org/wiki/Department_numbers", "task_cat": "Puzzles", "lang": "Python", "code": "\nProcedural[edit]\nfrom itertools import permutations\n \ndef solve():\n    c, p, f, s = \"\\\\,Police,Fire,Sanitation\".split(',')\n    print(f\"{c:>3}  {p:^6} {f:^4} {s:^10}\")\n    c = 1\n    for p, f, s in permutations(range(1, 8), r=3):\n        if p + s + f == 12 and p % 2 == 0:\n            print(f\"{c:>3}: {p:^6} {f:^4} {s:^10}\")\n            c += 1\n \nif __name__ == '__main__':\n    solve()\n\n\nOutput:\n  \\  Police Fire Sanitation\n  1:   2     3       7     \n  2:   2     4       6     \n  3:   2     6       4     \n  4:   2     7       3     \n  5:   4     1       7     \n  6:   4     2       6     \n  7:   4     3       5     \n  8:   4     5       3     \n  9:   4     6       2     \n 10:   4     7       1     \n 11:   6     1       5     \n 12:   6     2       4     \n 13:   6     4       2     \n 14:   6     5       1     \nComposition of pure functions[edit]\n\nWorks with: Python version 3\n'''Department numbers'''\n\nfrom itertools import (chain)\nfrom operator import (ne)\n\n\n# options\u00a0:: Int -> Int -> Int -> [(Int, Int, Int)]\ndef options(lo, hi, total):\n    '''Eligible integer triples.'''\n    ds = enumFromTo(lo)(hi)\n    return bind(filter(even, ds))(\n        lambda x: bind(filter(curry(ne)(x), ds))(\n            lambda y: bind([total - (x + y)])(\n                lambda z: [(x, y, z)] if (\n                    z != y and lo <= z <= hi\n                ) else []\n            )\n        )\n    )\n\n\n# TEST ----------------------------------------------------\n# main\u00a0:: IO ()\ndef main():\n    '''Test'''\n\n    xs = options(1, 7, 12)\n    print(('Police', 'Sanitation', 'Fire'))\n    for tpl in xs:\n        print(tpl)\n    print('\\nNo. of options: ' + str(len(xs)))\n\n\n# GENERIC ABSTRACTIONS ------------------------------------\n\n# bind (>>=)\u00a0:: [a] -> (a -> [b]) -> [b]\ndef bind(xs):\n    '''List monad injection operator.\n       Two computations sequentially composed,\n       with any value produced by the first\n       passed as an argument to the second.'''\n    return lambda f: list(\n        chain.from_iterable(\n            map(f, xs)\n        )\n    )\n\n\n# curry\u00a0:: ((a, b) -> c) -> a -> b -> c\ndef curry(f):\n    '''A curried function derived\n       from an uncurried function.'''\n    return lambda a: lambda b: f(a, b)\n\n\n# enumFromTo\u00a0:: (Int, Int) -> [Int]\ndef enumFromTo(m):\n    '''Integer enumeration from m to n.'''\n    return lambda n: list(range(m, 1 + n))\n\n\n# even\u00a0:: Int -> Bool\ndef even(x):\n    '''True if x is an integer\n       multiple of two.'''\n    return 0 == x % 2\n\n\nif __name__ == '__main__':\n    main()\n\n\nOutput:\n('Police', 'Sanitation', 'Fire')\n(2, 3, 7)\n(2, 4, 6)\n(2, 6, 4)\n(2, 7, 3)\n(4, 1, 7)\n(4, 2, 6)\n(4, 3, 5)\n(4, 5, 3)\n(4, 6, 2)\n(4, 7, 1)\n(6, 1, 5)\n(6, 2, 4)\n(6, 4, 2)\n(6, 5, 1)\n\nNo. of options: 14\nList comprehension[edit]\n\nWorks with: Python version 3.7\n'''Department numbers'''\n\nfrom operator import ne\n\n\n# options\u00a0:: Int -> Int -> Int -> [(Int, Int, Int)]\ndef options(lo, hi, total):\n    '''Eligible triples.'''\n    ds = enumFromTo(lo)(hi)\n    return [\n        (x, y, z)\n        for x in filter(even, ds)\n        for y in filter(curry(ne)(x), ds)\n        for z in [total - (x + y)]\n        if y != z and lo <= z <= hi\n    ]\n\n\n# Or with less tightly-constrained generation,\n# and more winnowing work downstream:\n\n# options2\u00a0:: Int -> Int -> Int -> [(Int, Int, Int)]\ndef options2(lo, hi, total):\n    '''Eligible triples.'''\n    ds = enumFromTo(lo)(hi)\n    return [\n        (x, y, z)\n        for x in ds\n        for y in ds\n        for z in [total - (x + y)]\n        if even(x) and y not in [x, z] and lo <= z <= hi\n    ]\n\n\n# GENERIC -------------------------------------------------\n\n\n# curry\u00a0:: ((a, b) -> c) -> a -> b -> c\ndef curry(f):\n    '''A curried function derived\n       from an uncurried function.'''\n    return lambda a: lambda b: f(a, b)\n\n\n# enumFromTo\u00a0:: (Int, Int) -> [Int]\ndef enumFromTo(m):\n    '''Integer enumeration from m to n.'''\n    return lambda n: list(range(m, 1 + n))\n\n\n# even\u00a0:: Int -> Bool\ndef even(x):\n    '''True if x is an integer\n       multiple of two.'''\n    return 0 == x % 2\n\n\n# unlines\u00a0:: [String] -> String\ndef unlines(xs):\n    '''A single string derived by the intercalation\n       of a list of strings with the newline character.'''\n    return '\\n'.join(xs)\n\n\n# TEST ----------------------------------------------------\n# main\u00a0:: IO ()\ndef main():\n    '''Test'''\n\n    xs = options(1, 7, 12)\n    print(('Police', 'Sanitation', 'Fire'))\n    print(unlines(map(str, xs)))\n    print('\\nNo. of options: ' + str(len(xs)))\n\n\nif __name__ == '__main__':\n    main()\n\n\nOutput:\n('Police', 'Sanitation', 'Fire')\n(2, 3, 7)\n(2, 4, 6)\n(2, 6, 4)\n(2, 7, 3)\n(4, 1, 7)\n(4, 2, 6)\n(4, 3, 5)\n(4, 5, 3)\n(4, 6, 2)\n(4, 7, 1)\n(6, 1, 5)\n(6, 2, 4)\n(6, 4, 2)\n(6, 5, 1)\n\nNo. of options: 14 \nAdapted from C# Example[edit]\n# We start with the Police Department.\n# Range is the start, stop, and step. This returns only even numbers.\nfor p in range(2, 7, 2):\n    #Next, the Sanitation Department. A simple range.\n    for s in range(1, 7):\n        # And now the Fire Department. After determining the Police and Fire\n        # numbers we just have to subtract those from 12 to get the FD number.\n        f = 12 - p -s\n        if s >= f: \n            break\n        elif f > 7:\n            continue\n        print(\"Police: \", p, \" Sanitation:\", s, \" Fire: \", f)\n        print(\"Police: \", p, \" Sanitation:\", f, \" Fire: \", s)\n\n\nOutput:\nPolice:  2  Sanitation: 3  Fire:  7\nPolice:  2  Sanitation: 7  Fire:  3\nPolice:  2  Sanitation: 4  Fire:  6\nPolice:  2  Sanitation: 6  Fire:  4\nPolice:  4  Sanitation: 1  Fire:  7\nPolice:  4  Sanitation: 7  Fire:  1\nPolice:  4  Sanitation: 2  Fire:  6\nPolice:  4  Sanitation: 6  Fire:  2\nPolice:  4  Sanitation: 3  Fire:  5\nPolice:  4  Sanitation: 5  Fire:  3\nPolice:  6  Sanitation: 1  Fire:  5\nPolice:  6  Sanitation: 5  Fire:  1\nPolice:  6  Sanitation: 2  Fire:  4\nPolice:  6  Sanitation: 4  Fire:  2\n\n\nUsing a constraint solver[edit]\n\nLibrary: python-constraint\nimport constraint\n\ndepts = ( 'police', 'sanitation', 'fire' )\n\np = constraint.Problem()\n\nfor var in depts:\n    p.addVariable(var, range(1,8))\n\np.addConstraint(constraint.AllDifferentConstraint())\np.addConstraint(lambda *vars: sum(vars)==12, depts)\np.addConstraint(lambda p: p%2==0, ('police',))\n\nfor s in p.getSolutions():\n    print(s)\n\n\nOutput:\n{'police': 6, 'fire': 5, 'sanitation': 1}\n{'police': 6, 'fire': 4, 'sanitation': 2}\n{'police': 6, 'fire': 2, 'sanitation': 4}\n{'police': 6, 'fire': 1, 'sanitation': 5}\n{'police': 4, 'fire': 6, 'sanitation': 2}\n{'police': 4, 'fire': 7, 'sanitation': 1}\n{'police': 4, 'fire': 5, 'sanitation': 3}\n{'police': 4, 'fire': 3, 'sanitation': 5}\n{'police': 4, 'fire': 2, 'sanitation': 6}\n{'police': 4, 'fire': 1, 'sanitation': 7}\n{'police': 2, 'fire': 4, 'sanitation': 6}\n{'police': 2, 'fire': 6, 'sanitation': 4}\n{'police': 2, 'fire': 7, 'sanitation': 3}\n{'police': 2, 'fire': 3, 'sanitation': 7}\n", "explain": "Expressing the options directly and declaratively in terms of a bind operator, without importing permutations:\nNested bind (or concatMap) expressions (like those above) can also be translated into list comprehension notation:\n\nA problem this trivial is amenable to brute-force solutions such as the above, but it is a good example of the type of problem for which a constraint solver can be useful. This is how one could solve it using the `python-constraint` library:\n"}, {"task_name": "Department numbers", "task_url": "https://rosettacode.org/wiki/Department_numbers", "task_cat": "Puzzles", "lang": "C", "code": "\n\n#include<stdio.h>\n\nint main()\n{\n\tint police,sanitation,fire;\n\t\n\tprintf(\"Police     Sanitation         Fire\\n\");\n\tprintf(\"----------------------------------\");\n\t\n\tfor(police=2;police<=6;police+=2){\n\t\tfor(sanitation=1;sanitation<=7;sanitation++){\n\t\t\tfor(fire=1;fire<=7;fire++){\n\t\t\t\tif(police!=sanitation && sanitation!=fire && fire!=police && police+fire+sanitation==12){\n\t\t\t\t\tprintf(\"\\n%d\\t\\t%d\\t\\t%d\",police,sanitation,fire);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn 0;\n}\n\n\nPolice     Sanitation         Fire\n----------------------------------\n2               3               7\n2               4               6\n2               6               4\n2               7               3\n4               1               7\n4               2               6\n4               3               5\n4               5               3\n4               6               2\n4               7               1\n6               1               5\n6               2               4\n6               4               2\n6               5               1\n\n", "explain": "Weird that such a simple task was still not implemented in C, would be great to see some really creative ( obfuscated ) solutions for this one.\nOutput:\n"}, {"task_name": "Department numbers", "task_url": "https://rosettacode.org/wiki/Department_numbers", "task_cat": "Puzzles", "lang": "C++", "code": "\n#include <iostream>\n#include <iomanip>\n\nint main( int argc, char* argv[] ) {\n    int sol = 1;\n    std::cout << \"\\t\\tFIRE\\t\\tPOLICE\\t\\tSANITATION\\n\";\n    for( int f = 1; f < 8; f++ ) {\n        for( int p = 1; p < 8; p++ ) {\n            for( int s = 1; s < 8; s++ ) {\n                if( f != p && f != s && p != s && !( p & 1 ) && ( f + s + p == 12 ) ) {\n                std::cout << \"SOLUTION #\" << std::setw( 2 ) << sol++ << std::setw( 2 ) \n                << \":\\t\" << std::setw( 2 ) << f << \"\\t\\t \" << std::setw( 3 ) << p \n                << \"\\t\\t\" << std::setw( 6 ) << s << \"\\n\";\n                }\n            }\n        }\n    }\n    return 0;\n}\n\n\nOutput:\n                FIRE            POLICE          SANITATION\nSOLUTION # 1:    1                 4                 7\nSOLUTION # 2:    1                 6                 5\nSOLUTION # 3:    2                 4                 6\nSOLUTION # 4:    2                 6                 4\nSOLUTION # 5:    3                 2                 7\nSOLUTION # 6:    3                 4                 5\nSOLUTION # 7:    4                 2                 6\nSOLUTION # 8:    4                 6                 2\nSOLUTION # 9:    5                 4                 3\nSOLUTION #10:    5                 6                 1\nSOLUTION #11:    6                 2                 4\nSOLUTION #12:    6                 4                 2\nSOLUTION #13:    7                 2                 3\nSOLUTION #14:    7                 4                 1\n\n", "explain": ""}, {"task_name": "Department numbers", "task_url": "https://rosettacode.org/wiki/Department_numbers", "task_cat": "Puzzles", "lang": "Java", "code": "\nTranslation of: Kotlin\npublic class DepartmentNumbers {\n    public static void main(String[] args) {\n        System.out.println(\"Police  Sanitation  Fire\");\n        System.out.println(\"------  ----------  ----\");\n        int count = 0;\n        for (int i = 2; i <= 6; i += 2) {\n            for (int j = 1; j <= 7; ++j) {\n                if (j == i) continue;\n                for (int k = 1; k <= 7; ++k) {\n                    if (k == i || k == j) continue;\n                    if (i + j + k != 12) continue;\n                    System.out.printf(\"  %d         %d         %d\\n\", i, j, k);\n                    count++;\n                }\n            }\n        }\n        System.out.printf(\"\\n%d valid combinations\", count);\n    }\n}\n\n\nOutput:\nPolice  Sanitation  Fire\n------  ----------  ----\n  2         3         7\n  2         4         6\n  2         6         4\n  2         7         3\n  4         1         7\n  4         2         6\n  4         3         5\n  4         5         3\n  4         6         2\n  4         7         1\n  6         1         5\n  6         2         4\n  6         4         2\n  6         5         1\n", "explain": ""}, {"task_name": "Department numbers", "task_url": "https://rosettacode.org/wiki/Department_numbers", "task_cat": "Puzzles", "lang": "C#", "code": "\nusing System;\npublic class Program\n{\n    public static void Main() {\n        for (int p = 2; p <= 7; p+=2) {\n            for (int s = 1; s <= 7; s++) {\n                int f = 12 - p - s;\n                if (s >= f) break;\n                if (f > 7) continue;\n                if (s == p || f == p) continue; //not even necessary\n                Console.WriteLine($\"Police:{p}, Sanitation:{s}, Fire:{f}\");\n                Console.WriteLine($\"Police:{p}, Sanitation:{f}, Fire:{s}\");\n            }\n        }\n    }\n}\n\n\nOutput:\nPolice:2, Sanitation:3, Fire:7\nPolice:2, Sanitation:7, Fire:3\nPolice:2, Sanitation:4, Fire:6\nPolice:2, Sanitation:6, Fire:4\nPolice:4, Sanitation:1, Fire:7\nPolice:4, Sanitation:7, Fire:1\nPolice:4, Sanitation:2, Fire:6\nPolice:4, Sanitation:6, Fire:2\nPolice:4, Sanitation:3, Fire:5\nPolice:4, Sanitation:5, Fire:3\nPolice:6, Sanitation:1, Fire:5\nPolice:6, Sanitation:5, Fire:1\nPolice:6, Sanitation:2, Fire:4\nPolice:6, Sanitation:4, Fire:2\n\n", "explain": ""}, {"task_name": "Department numbers", "task_url": "https://rosettacode.org/wiki/Department_numbers", "task_cat": "Puzzles", "lang": "JavaScript", "code": "\nES5[edit]\n\n(function () {\n    'use strict';\n\n    // concatMap\u00a0:: (a -> [b]) -> [a] -> [b]\n    function concatMap(f, xs) {\n        return [].concat.apply([], xs.map(f));\n    };\n\n    return '(Police, Sanitation, Fire)\\n' +\n        concatMap(function (x) {\n            return concatMap(function (y) {\n                return concatMap(function (z) {\n                    return z !== y && 1 <= z && z <= 7 ? [\n                        [x, y, z]\n                    ] : [];\n                }, [12 - (x + y)]);\n            }, [1, 2, 3, 4, 5, 6, 7]);\n        }, [2, 4, 6])\n        .map(JSON.stringify)\n        .join('\\n');\n})();\n\n\nOutput:\n(Police, Sanitation, Fire)\n[2,3,7]\n[2,4,6]\n[2,6,4]\n[2,7,3]\n[4,1,7]\n[4,2,6]\n[4,3,5]\n[4,5,3]\n[4,6,2]\n[4,7,1]\n[6,1,5]\n[6,2,4]\n[6,4,2]\n[6,5,1]\n\nTranslation of: Haskell\n(function () {\n    'use strict';\n\n    // NUMBERING CONSTRAINTS --------------------------------------------------\n\n    // options\u00a0:: Int -> Int -> Int -> [(Int, Int, Int)]\n    function options(lo, hi, total) {\n        var bind = flip(concatMap),\n            ds = enumFromTo(lo, hi);\n\n        return bind(filter(even, ds),\n            function (x) { // X is even,\n                return bind(filter(function (d) { return d !== x; }, ds),\n            function (y) { // Y is distinct from X,\n                return bind([total - (x + y)],\n            function (z) { // Z sums with x and y to total, and is in ds.\n                return z !== y && lo <= z && z <= hi ? [\n                    [x, y, z]\n                ] : [];\n            })})})};\n\n    // GENERIC FUNCTIONS ------------------------------------------------------\n\n    // concatMap\u00a0:: (a -> [b]) -> [a] -> [b]\n    function concatMap(f, xs) {\n        return [].concat.apply([], xs.map(f));\n    };\n\n    // enumFromTo\u00a0:: Int -> Int -> [Int]\n    function enumFromTo(m, n) {\n        return Array.from({\n            length: Math.floor(n - m) + 1\n        }, function (_, i) {\n            return m + i;\n        });\n    };\n\n    // even\u00a0:: Integral a => a -> Bool\n    function even(n) {\n        return n % 2 === 0;\n    };\n\n    // filter\u00a0:: (a -> Bool) -> [a] -> [a]\n    function filter(f, xs) {\n        return xs.filter(f);\n    };\n\n    // flip\u00a0:: (a -> b -> c) -> b -> a -> c\n    function flip(f) {\n        return function (a, b) {\n            return f.apply(null, [b, a]);\n        };\n    };\n\n    // length\u00a0:: [a] -> Int\n    function length(xs) {\n        return xs.length;\n    };\n\n    // map\u00a0:: (a -> b) -> [a] -> [b]\n    function map(f, xs) {\n        return xs.map(f);\n    };\n\n    // show\u00a0:: a -> String\n    function show(x) {\n        return JSON.stringify(x);\n    }; //, null, 2);\n\n    // unlines\u00a0:: [String] -> String\n    function unlines(xs) {\n        return xs.join('\\n');\n    };\n\n    // TEST -------------------------------------------------------------------\n    var xs = options(1, 7, 12);\n    return '(Police, Sanitation, Fire)\\n\\n' +\n        unlines(map(show, xs)) + '\\n\\nNumber of options: ' + length(xs);\n})();\n\n\nOutput:\n(Police, Sanitation, Fire)\n\n[2,3,7]\n[2,4,6]\n[2,6,4]\n[2,7,3]\n[4,1,7]\n[4,2,6]\n[4,3,5]\n[4,5,3]\n[4,6,2]\n[4,7,1]\n[6,1,5]\n[6,2,4]\n[6,4,2]\n[6,5,1]\n\nNumber of options: 14\nES6[edit]\n\n(() => {\n    \"use strict\";\n\n    const\n        label = \"(Police, Sanitation, Fire)\",\n        solutions = [2, 4, 6]\n        .flatMap(\n            x => [1, 2, 3, 4, 5, 6, 7]\n            .flatMap(\n                y => [12 - (x + y)]\n                .flatMap(\n                    z => z !== y && 1 <= z && z <= 7 ? [\n                        [x, y, z]\n                    ] : []\n                )\n            )\n        )\n        .map(JSON.stringify)\n        .join(\"\\n\");\n\n    return `${label}\\n${solutions}`;\n})();\n\n\nOutput:\n(Police, Sanitation, Fire)\n[2,3,7]\n[2,4,6]\n[2,6,4]\n[2,7,3]\n[4,1,7]\n[4,2,6]\n[4,3,5]\n[4,5,3]\n[4,6,2]\n[4,7,1]\n[6,1,5]\n[6,2,4]\n[6,4,2]\n[6,5,1]\n\nTranslation of: Haskell\n(() => {\n    \"use strict\";\n\n    // -------------- NUMBERING CONSTRAINTS --------------\n\n    // options\u00a0:: Int -> Int -> Int -> [(Int, Int, Int)]\n    const options = lo => hi => total => {\n        const\n            bind = xs => f => xs.flatMap(f),\n            ds = enumFromTo(lo)(hi);\n\n        return bind(ds.filter(even))(\n            x => bind(ds.filter(d => d !== x))(\n                y => bind([total - (x + y)])(\n                    z => (z !== y && lo <= z && z <= hi) ? [\n                        [x, y, z]\n                    ] : []\n                )\n            )\n        );\n    };\n\n    // ---------------------- TEST -----------------------\n    const main = () => {\n        const\n            label = \"(Police, Sanitation, Fire)\",\n            solutions = options(1)(7)(12),\n            n = solutions.length,\n            list = solutions\n            .map(JSON.stringify)\n            .join(\"\\n\");\n\n        return (\n            `${label}\\n\\n${list}\\n\\nNumber of options: ${n}`\n        );\n    };\n\n    // ---------------- GENERIC FUNCTIONS ----------------\n\n    // enumFromTo\u00a0:: Int -> Int -> [Int]\n    const enumFromTo = m =>\n        n => Array.from({\n            length: 1 + n - m\n        }, (_, i) => m + i);\n\n    // even\u00a0:: Integral a => a -> Bool\n    const even = n => n % 2 === 0;\n\n    // MAIN ---\n    return main();\n})();\n\n\nOutput:\n(Police, Sanitation, Fire)\n\n[2,3,7]\n[2,4,6]\n[2,6,4]\n[2,7,3]\n[4,1,7]\n[4,2,6]\n[4,3,5]\n[4,5,3]\n[4,6,2]\n[4,7,1]\n[6,1,5]\n[6,2,4]\n[6,4,2]\n[6,5,1]\n\nNumber of options: 14\n", "explain": "Briefly:\nOr, more generally:\nBriefly:\nOr, more generally, by composition of generic functions:\n"}, {"task_name": "Department numbers", "task_url": "https://rosettacode.org/wiki/Department_numbers", "task_cat": "Puzzles", "lang": "Visual_Basic_.NET", "code": "\nTranslation of: C#\nModule Module1\n\n    Sub Main()\n        For p = 2 To 7 Step 2\n            For s = 1 To 7\n                Dim f = 12 - p - s\n                If s >= f Then\n                    Exit For\n                End If\n                If f > 7 Then\n                    Continue For\n                End If\n                If s = p OrElse f = p Then\n                    Continue For 'not even necessary\n                End If\n                Console.WriteLine($\"Police:{p}, Sanitation:{s}, Fire:{f}\")\n                Console.WriteLine($\"Police:{p}, Sanitation:{f}, Fire:{s}\")\n            Next\n        Next\n    End Sub\n\nEnd Module\n\n\nOutput:\nPolice:2, Sanitation:3, Fire:7\nPolice:2, Sanitation:7, Fire:3\nPolice:2, Sanitation:4, Fire:6\nPolice:2, Sanitation:6, Fire:4\nPolice:4, Sanitation:1, Fire:7\nPolice:4, Sanitation:7, Fire:1\nPolice:4, Sanitation:2, Fire:6\nPolice:4, Sanitation:6, Fire:2\nPolice:4, Sanitation:3, Fire:5\nPolice:4, Sanitation:5, Fire:3\nPolice:6, Sanitation:1, Fire:5\nPolice:6, Sanitation:5, Fire:1\nPolice:6, Sanitation:2, Fire:4\nPolice:6, Sanitation:4, Fire:2\n", "explain": ""}, {"task_name": "Department numbers", "task_url": "https://rosettacode.org/wiki/Department_numbers", "task_cat": "Puzzles", "lang": "PHP", "code": "\n<?php\n\n$valid = 0;\nfor ($police = 2 ; $police <= 6 ; $police += 2) {\n    for ($sanitation = 1 ; $sanitation <= 7 ; $sanitation++) {\n        $fire = 12 - $police - $sanitation;\n        if ((1 <= $fire) and ($fire <= 7) and ($police != $sanitation) and ($sanitation != $fire)) {\n            echo 'Police: ', $police, ', Sanitation: ', $sanitation, ', Fire: ', $fire, PHP_EOL;\n            $valid++;\n        }\n    }\n}\necho $valid, ' valid combinations found.', PHP_EOL;\n\n\nOutput:\nPolice: 2, Sanitation: 3, Fire: 7\nPolice: 2, Sanitation: 4, Fire: 6\nPolice: 2, Sanitation: 6, Fire: 4\nPolice: 2, Sanitation: 7, Fire: 3\nPolice: 4, Sanitation: 1, Fire: 7\nPolice: 4, Sanitation: 2, Fire: 6\nPolice: 4, Sanitation: 3, Fire: 5\nPolice: 4, Sanitation: 5, Fire: 3\nPolice: 4, Sanitation: 6, Fire: 2\nPolice: 4, Sanitation: 7, Fire: 1\nPolice: 6, Sanitation: 1, Fire: 5\nPolice: 6, Sanitation: 2, Fire: 4\nPolice: 6, Sanitation: 4, Fire: 2\nPolice: 6, Sanitation: 5, Fire: 1\n14 valid combinations found.\n", "explain": ""}, {"task_name": "Department numbers", "task_url": "https://rosettacode.org/wiki/Department_numbers", "task_cat": "Puzzles", "lang": "Fortran", "code": "\n\nNote that the syntax enables two classes of labels: the old-style numerical label in columns one to five, and the special label-like prefix of a DO-loop that is not in columns one to five. And yes, a line can have both.       INTEGER P,S,F\t!Department codes for Police, Sanitation, and Fire. Values 1 to 7 only.\n    1  PP:DO P = 2,7,2\t!The police demand an even number. They're special and use violence.\n    2   SS:DO S = 1,7\t\t!The sanitation department accepts any value.\n    3        IF (P.EQ.S) CYCLE SS\t!But it must differ from the others.\n    4        F = 12 - (P + S)\t\t!The fire department accepts any number, but the sum must be twelve.\n    5        IF (F.LE.0 .OR. F.GT.7) CYCLE SS\t!Ensure that the only option is within range.\n    6        IF ((F - S)*(F - P)) 7,8,7\t\t!And F is to differ from S and from P\n    7        WRITE (6,\"(3I2)\") P,S,F\t\t!If we get here, we have a possible set.\n    8      END DO SS\t\t!Next S\n    9    END DO PP\t!Next P.\n      END\t!Well, that was straightforward.\n\n\n 2 3 7\n 2 4 6\n 2 6 4\n 2 7 3\n 4 1 7\n 4 2 6\n 4 3 5\n 4 5 3\n 4 6 2\n 4 7 1\n 6 1 5\n 6 2 4\n 6 4 2\n 6 5 1\n\n", "explain": "This uses the ability standardised in F90 of labelling a DO-loop so that its start and end are linked by usage of the same name, with this checked by the compiler. Further, in avoiding the use of the dreaded GO TO statement, the CYCLE statement can be employed instead with the same effect, and it too can bear the same name so that it is clear which loop is involved. These names prefix the DO-loop, and so, force some additional indentation. They are not statement labels and must be unique themselves. Notably, they cannot be the same text as the name of the index variable for their DO-loop, unlike the lead given by BASIC with its FOR I ... NEXT I arrangement.\nThe method is just to generate all the possibilities, discarding those that fail the specified tests. However, the requirement that the codes add up to twelve means that after the first two are chosen the third is determined, and blandly looping through all the possibilities is too much brute force and ignorance, though other collections of rules could make that bearable.\nSince the modernisers of Fortran made a point of specifying that it does not specify the manner of evaluation of compound boolean expressions, specifically, that there is to be no reliance on Short-circuit_evaluation, both parts of the compound expression of the line labelled 5 \"may\" be evaluated even though the first may have determined the result. Prior to the introduction of LOGICAL variables with F66, one employed integer arithmetic as is demonstrated in the arithmetic-IF test of the line labelled 6. On the B6700, this usage ran faster than the corresponding boolean expression - possibly because there was no test for short-circuiting the expression when the first part of a multiply was zero...\nOutput:\n"}, {"task_name": "Department numbers", "task_url": "https://rosettacode.org/wiki/Department_numbers", "task_cat": "Puzzles", "lang": "Go", "code": "\nTranslation of: Kotlin\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Police  Sanitation  Fire\")\n    fmt.Println(\"------  ----------  ----\")\n    count := 0\n    for i := 2; i < 7; i += 2 {\n        for j := 1; j < 8; j++ {\n            if j == i { continue }\n            for k := 1; k < 8; k++ {\n                if k == i || k == j { continue }\n                if i + j + k != 12 { continue }\n                fmt.Printf(\"  %d         %d         %d\\n\", i, j, k)\n                count++\n            }\n        }\n    }\n    fmt.Printf(\"\\n%d valid combinations\\n\", count)\n}\n\n\nOutput:\nPolice  Sanitation  Fire\n------  ----------  ----\n  2         3         7\n  2         4         6\n  2         6         4\n  2         7         3\n  4         1         7\n  4         2         6\n  4         3         5\n  4         5         3\n  4         6         2\n  4         7         1\n  6         1         5\n  6         2         4\n  6         4         2\n  6         5         1\n\n14 valid combinations\n\n", "explain": ""}, {"task_name": "Department numbers", "task_url": "https://rosettacode.org/wiki/Department_numbers", "task_cat": "Puzzles", "lang": "Delphi", "code": "\nLibrary:  System.SysUtils\nTranslation of: Go\nprogram Department_numbers;\n\n{$APPTYPE CONSOLE}\n\nuses\n  System.SysUtils;\n\nvar\n  i, j, k, count: Integer;\n\nbegin\n  writeln('Police  Sanitation  Fire');\n  writeln('------  ----------  ----');\n  count := 0;\n  i := 2;\n  while i < 7 do\n  begin\n    for j := 1 to 7 do\n    begin\n      if j = i then\n        Continue;\n      for k := 1 to 7 do\n      begin\n        if (k = i) or (k = j) then\n          Continue;\n        if i + j + k <> 12 then\n          Continue;\n        writeln(format('  %d         %d         %d', [i, j, k]));\n        inc(count);\n      end;\n    end;\n    inc(i, 2);\n  end;\n  writeln(#10, count, ' valid combinations');\n  readln;\nend.\n\n", "explain": ""}, {"task_name": "Department numbers", "task_url": "https://rosettacode.org/wiki/Department_numbers", "task_cat": "Puzzles", "lang": "Ruby", "code": "\n(1..7).to_a.permutation(3){|p| puts p.join if p.first.even? && p.sum == 12 }\n\n\nOutput:\n237\n246\n264\n273\n417\n426\n435\n453\n462\n471\n615\n624\n642\n651\n\n", "explain": ""}, {"task_name": "Department numbers", "task_url": "https://rosettacode.org/wiki/Department_numbers", "task_cat": "Puzzles", "lang": "Rust", "code": "\nTranslation of: C\nextern crate num_iter;\nfn main() {\n    println!(\"Police Sanitation Fire\");\n    println!(\"----------------------\");\n\n    for police in num_iter::range_step(2, 7, 2) {\n        for sanitation in 1..8 {\n            for fire in 1..8 {\n                if police != sanitation\n                    && sanitation != fire\n                    && fire != police\n                    && police + fire + sanitation == 12\n                {\n                    println!(\"{:6}{:11}{:4}\", police, sanitation, fire);\n                }\n            }\n        }\n    }\n}\n\n", "explain": ""}, {"task_name": "Department numbers", "task_url": "https://rosettacode.org/wiki/Department_numbers", "task_cat": "Puzzles", "lang": "Swift", "code": "\n\nlet res = [2, 4, 6].map({x in\n  return (1...7)\n      .filter({ $0 != x })\n      .map({y -> (Int, Int, Int)? in\n        let z = 12 - (x + y)\n\n        guard y != z && 1 <= z && z <= 7 else {\n          return nil\n        }\n\n        return (x, y, z)\n      }).compactMap({ $0 })\n}).flatMap({ $0 })\n\nfor result in res {\n  print(result)\n}\n\n\nvar res = [(Int, Int, Int)]()\n\nfor x in [2, 4, 6] {\n  for y in 1...7 where x != y {\n    let z = 12 - (x + y)\n\n    guard y != z && 1 <= z && z <= 7 else {\n      continue\n    }\n\n    res.append((x, y, z))\n  }\n}\n\nfor result in res {\n  print(result)\n}\n\n\nOutput:\n(2, 3, 7)\n(2, 4, 6)\n(2, 6, 4)\n(2, 7, 3)\n(4, 1, 7)\n(4, 2, 6)\n(4, 3, 5)\n(4, 5, 3)\n(4, 6, 2)\n(4, 7, 1)\n(6, 1, 5)\n(6, 2, 4)\n(6, 4, 2)\n(6, 5, 1)\n", "explain": "Functional approach:\nIterative approach:\n"}, {"task_name": "Department numbers", "task_url": "https://rosettacode.org/wiki/Department_numbers", "task_cat": "Puzzles", "lang": "R", "code": "\n\nallPermutations <- setNames(expand.grid(seq(2, 7, by = 2), 1:7, 1:7), c(\"Police\", \"Sanitation\", \"Fire\"))\nsolution <- allPermutations[which(rowSums(allPermutations)==12 & apply(allPermutations, 1, function(x) !any(duplicated(x)))),]\nsolution <- solution[order(solution$Police, solution$Sanitation),]\nrow.names(solution) <- paste0(\"Solution #\", seq_len(nrow(solution)), \":\")\nprint(solution)\n\n\nOutput:\n              Police Sanitation Fire\nSolution #1:       2          3    7\nSolution #2:       2          4    6\nSolution #3:       2          6    4\nSolution #4:       2          7    3\nSolution #5:       4          1    7\nSolution #6:       4          2    6\nSolution #7:       4          3    5\nSolution #8:       4          5    3\nSolution #9:       4          6    2\nSolution #10:      4          7    1\nSolution #11:      6          1    5\nSolution #12:      6          2    4\nSolution #13:      6          4    2\nSolution #14:      6          5    1\n", "explain": "We solve this task in two lines. The rest of the code is to make the result look nice.\n"}, {"task_name": "Department numbers", "task_url": "https://rosettacode.org/wiki/Department_numbers", "task_cat": "Puzzles", "lang": "COBOL", "code": "\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DEPARTMENT-NUMBERS.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.       \n       01 BANNER        PIC X(24) VALUE \"POLICE  SANITATION  FIRE\".\n       01 COMBINATION.\n          03 FILLER     PIC X(5)  VALUE SPACES.\n          03 POLICE     PIC 9.\n          03 FILLER     PIC X(11) VALUE SPACES.\n          03 SANITATION PIC 9.\n          03 FILLER     PIC X(5)  VALUE SPACES.\n          03 FIRE       PIC 9.\n       01 TOTAL         PIC 99.\n\n       PROCEDURE DIVISION.\n       BEGIN. \n           DISPLAY BANNER.\n           PERFORM POLICE-LOOP VARYING POLICE FROM 2 BY 2\n           UNTIL POLICE IS GREATER THAN 6.\n           STOP RUN.\n \n       POLICE-LOOP. \n           PERFORM SANITATION-LOOP VARYING SANITATION FROM 1 BY 1\n           UNTIL SANITATION IS GREATER THAN 7.\n  \n       SANITATION-LOOP.\n           PERFORM FIRE-LOOP VARYING FIRE FROM 1 BY 1\n           UNTIL FIRE IS GREATER THAN 7.\n \n       FIRE-LOOP.\n           ADD POLICE, SANITATION, FIRE GIVING TOTAL.\n           IF POLICE IS NOT EQUAL TO SANITATION\n               AND POLICE IS NOT EQUAL TO FIRE\n               AND SANITATION IS NOT EQUAL TO FIRE\n               AND TOTAL IS EQUAL TO 12,\n               DISPLAY COMBINATION.\n\n\nOutput:\nPOLICE  SANITATION  FIRE\n     2           3     7\n     2           4     6\n     2           6     4\n     2           7     3\n     4           1     7\n     4           2     6\n     4           3     5\n     4           5     3\n     4           6     2\n     4           7     1\n     6           1     5\n     6           2     4\n     6           4     2\n     6           5     1\n", "explain": ""}, {"task_name": "Department numbers", "task_url": "https://rosettacode.org/wiki/Department_numbers", "task_cat": "Puzzles", "lang": "Ada", "code": "\nwith Ada.Text_IO;\n\nprocedure Department_Numbers is\n   use Ada.Text_IO;\nbegin\n   Put_Line (\" P S F\");\n   for Police in 2 .. 6 loop\n      for Sanitation in 1 .. 7 loop\n         for Fire in 1 .. 7 loop\n            if\n              Police mod 2 = 0                and\n              Police + Sanitation + Fire = 12 and\n              Sanitation /= Police            and\n              Sanitation /= Fire              and\n              Police     /= Fire\n            then\n               Put_Line (Police'Image & Sanitation'Image & Fire'Image);\n            end if;\n         end loop;\n      end loop;\n   end loop;\nend Department_Numbers;\n\n\nOutput:\n P S F\n 2 3 7\n 2 4 6\n 2 6 4\n 2 7 3\n 4 1 7\n 4 2 6\n 4 3 5\n 4 5 3\n 4 6 2\n 4 7 1\n 6 1 5\n 6 2 4\n 6 4 2\n 6 5 1\n\n", "explain": ""}, {"task_name": "Department numbers", "task_url": "https://rosettacode.org/wiki/Department_numbers", "task_cat": "Puzzles", "lang": "Julia", "code": "\nusing Printf\n\nfunction findsolution(rng=1:7)\n    rst = Matrix{Int}(0, 3)\n    for p in rng, f in rng, s in rng\n        if p != s != f != p && p + s + f == 12 && iseven(p)\n            rst = [rst; p s f]\n        end\n    end\n    return rst\nend\n\nfunction printsolutions(sol::Matrix{Int})\n    println(\"      Pol.   Fire   San.\")\n    println(\"      ----   ----   ----\")\n    for row in 1:size(sol, 1)\n        @printf(\"%2i | %4i%7i%7i\\n\", row, sol[row, :]...)\n    end\nend\n\nprintsolutions(findsolution())\n\n\nOutput:\n      Pol.   Fire   San.\n      ----   ----   ----\n 1 |    2      7      3\n 2 |    2      6      4\n 3 |    2      4      6\n 4 |    2      3      7\n 5 |    4      7      1\n 6 |    4      6      2\n 7 |    4      5      3\n 8 |    4      3      5\n 9 |    4      2      6\n10 |    4      1      7\n11 |    6      5      1\n12 |    6      4      2\n13 |    6      2      4\n14 |    6      1      5\n", "explain": ""}, {"task_name": "Department numbers", "task_url": "https://rosettacode.org/wiki/Department_numbers", "task_cat": "Puzzles", "lang": "Kotlin", "code": "\n// version 1.1.2\n\nfun main(args: Array<String>) {\n    println(\"Police  Sanitation  Fire\")\n    println(\"------  ----------  ----\")\n    var count = 0\n    for (i in 2..6 step 2) {\n        for (j in 1..7) {\n            if (j == i) continue\n            for (k in 1..7) {\n                if (k == i || k == j) continue\n                if (i + j + k != 12) continue\n                println(\"  $i         $j         $k\")\n                count++\n            }\n        }\n    }\n    println(\"\\n$count valid combinations\")\n}\n\n\nOutput:\nPolice  Sanitation  Fire\n------  ----------  ----\n  2         3         7\n  2         4         6\n  2         6         4\n  2         7         3\n  4         1         7\n  4         2         6\n  4         3         5\n  4         5         3\n  4         6         2\n  4         7         1\n  6         1         5\n  6         2         4\n  6         4         2\n  6         5         1\n\n14 valid combinations\n\n", "explain": ""}, {"task_name": "Department numbers", "task_url": "https://rosettacode.org/wiki/Department_numbers", "task_cat": "Puzzles", "lang": "Perl", "code": "\n#!/usr/bin/perl\n\nmy @even_numbers;\n\nfor (1..7)\n{\n  if ( $_ % 2 == 0)\n  {\n    push @even_numbers, $_;\n  }\n}\n\t\nprint \"Police\\tFire\\tSanitation\\n\";\n\nforeach my $police_number (@even_numbers)\n{\n  for my $fire_number (1..7)\n  {\n    for my $sanitation_number (1..7)\n    {\n      if ( $police_number + $fire_number + $sanitation_number == 12 && \n           $police_number != $fire_number && \n           $fire_number != $sanitation_number && \n           $sanitation_number != $police_number)\n      {\n        print \"$police_number\\t$fire_number\\t$sanitation_number\\n\";\n      }\n    }\n  }\t\n}\n\n\n#!/usr/bin/perl\n\nuse strict;   # Not necessary but considered good perl style\nuse warnings; # this one too\n\nprint \"Police\\t-\\tFire\\t-\\tSanitation\\n\";\nfor my $p ( 1..7 )  # Police Department\n{\n  for my $f ( 1..7) # Fire Department\n  {\n    for my $s ( 1..7 ) # Sanitation Department\n    {\n      if ( $p % 2 == 0 && $p + $f + $s == 12 && $p != $f && $f != $s  && $s != $p && $f != $s) # Check if the combination of numbers is valid\n      {\n        print \"$p\\t-\\t$f\\t-\\t$s\\n\";\n      }\n    }\n  }\n}\n\n\nPolice  -       Fire    -       Sanitation\n2       -       3       -       7\n2       -       4       -       6\n2       -       6       -       4\n2       -       7       -       3\n4       -       1       -       7\n4       -       2       -       6\n4       -       3       -       5\n4       -       5       -       3\n4       -       6       -       2\n4       -       7       -       1\n6       -       1       -       5\n6       -       2       -       4\n6       -       4       -       2\n6       -       5       -       1\n\nAlternate with Regex[edit]\n#!/usr/bin/perl\n\nuse strict; # https://rosettacode.org/wiki/Department_numbers\nuse warnings;\n\nprint \"P S F\\n\\n\";\n\n'246 1234567 1234567' =~\n  /(.).* \\s .*?(?!\\1)(.).* \\s .*(?!\\1)(?!\\2)(.)\n  (??{$1+$2+$3!=12})\n  (?{ print \"@{^CAPTURE}\\n\" })(*FAIL)/x;\n\n\nOutput:\nP S F\n\n2 3 7\n2 4 6\n2 6 4\n2 7 3\n4 1 7\n4 2 6\n4 3 5\n4 5 3\n4 6 2\n4 7 1\n6 1 5\n6 2 4\n6 4 2\n6 5 1\n\nAlternate with Glob[edit]\n#!/usr/bin/perl\n\nuse strict; # https://rosettacode.org/wiki/Department_numbers\nuse warnings;\n\nprint \"P S F\\n\\n\";\n\nprint tr/+/ /r, \"\\n\" for\n  grep  !/(\\d).*\\1/ && 12 == eval,\n  glob '{2,4,6}' . '+{1,2,3,4,5,6,7}' x 2;\n\n\n", "explain": "\nAbove Code cleaned up and shortened\nOutput:\nOutput same as with Regex\n"}, {"task_name": "Department numbers", "task_url": "https://rosettacode.org/wiki/Department_numbers", "task_cat": "Puzzles", "lang": "Prolog", "code": "\ndept(X) :- between(1, 7, X).\n\npolice(X) :- member(X, [2, 4, 6]).\nfire(X)   :- dept(X).\nsan(X)    :- dept(X).\n\nassign(A, B, C) :-\n    police(A), fire(B), san(C),\n    A =\\= B, A =\\= C, B =\\= C,\n    12 is A + B + C.\n\nmain :-\n    write(\"P F S\"), nl,\n    forall(assign(Police, Fire, Sanitation), format(\"~w ~w ~w~n\", [Police, Fire, Sanitation])),\n    halt.\n\n?- main.\n\n\nOutput:\nP F S\n2 3 7\n2 4 6\n2 6 4\n2 7 3\n4 1 7\n4 2 6\n4 3 5\n4 5 3\n4 6 2\n4 7 1\n6 1 5\n6 2 4\n6 4 2\n6 5 1\n\n", "explain": ""}, {"task_name": "Department numbers", "task_url": "https://rosettacode.org/wiki/Department_numbers", "task_cat": "Puzzles", "lang": "Lua", "code": "\nprint( \"Fire\", \"Police\", \"Sanitation\" )\nsol = 0\nfor f = 1, 7 do\n    for p = 1, 7 do\n        for s = 1, 7 do\n            if s + p + f == 12 and p % 2 == 0 and f ~= p and f ~= s and p ~= s then\n                print( f, p, s ); sol = sol + 1\n            end\n        end\n    end\nend\nprint( string.format( \"\\n%d solutions found\", sol ) )\n\n\nOutput:\nFire    Police  Sanitation\n1       4       7\n1       6       5\n2       4       6\n2       6       4\n3       2       7\n3       4       5\n4       2       6\n4       6       2\n5       4       3\n5       6       1\n6       2       4\n6       4       2\n7       2       3\n7       4       1\n\n14 solutions found\n\n", "explain": ""}, {"task_name": "Department numbers", "task_url": "https://rosettacode.org/wiki/Department_numbers", "task_cat": "Puzzles", "lang": "Scala", "code": "\nval depts = {\n  (1 to 7).permutations.map{ n => (n(0),n(1),n(2)) }.toList.distinct  // All permutations of possible department numbers\n  .filter{ n => n._1 % 2 == 0 }                                       // Keep only even numbers favored by Police Chief\n  .filter{ n => n._1 + n._2 + n._3 == 12 }                            // Keep only numbers that add to 12\n}\n\n{\nprintln( \"(Police, Sanitation, Fire)\")\nprintln( depts.mkString(\"\\n\") )\n}\n\n\nOutput:\n(Police, Sanitation, Fire)\n(2,3,7)\n(2,4,6)\n(2,6,4)\n(2,7,3)\n(4,1,7)\n(4,2,6)\n(4,3,5)\n(4,5,3)\n(4,6,2)\n(4,7,1)\n(6,1,5)\n(6,2,4)\n(6,4,2)\n(6,5,1)\n\n", "explain": ""}, {"task_name": "Department numbers", "task_url": "https://rosettacode.org/wiki/Department_numbers", "task_cat": "Puzzles", "lang": "D", "code": "\nTranslation of: C++\nimport std.stdio, std.range;\n\nvoid main() {\n    int sol = 1;\n    writeln(\"\\t\\tFIRE\\t\\tPOLICE\\t\\tSANITATION\");\n    foreach( f; iota(1,8) ) {\n        foreach( p; iota(1,8) ) {\n            foreach( s; iota(1,8) ) {\n                if( f != p && f != s && p != s && !( p & 1 ) && ( f + s + p == 12 ) ) {\n                    writefln(\"SOLUTION #%2d:\\t%2d\\t\\t%3d\\t\\t%6d\", sol++, f, p, s);\n                }\n            }\n        }\n    }\n}\n\n\n\t\tFIRE\t\tPOLICE\t\tSANITATION\nSOLUTION # 1:\t 1\t\t  4\t\t     7\nSOLUTION # 2:\t 1\t\t  6\t\t     5\nSOLUTION # 3:\t 2\t\t  4\t\t     6\nSOLUTION # 4:\t 2\t\t  6\t\t     4\nSOLUTION # 5:\t 3\t\t  2\t\t     7\nSOLUTION # 6:\t 3\t\t  4\t\t     5\nSOLUTION # 7:\t 4\t\t  2\t\t     6\nSOLUTION # 8:\t 4\t\t  6\t\t     2\nSOLUTION # 9:\t 5\t\t  4\t\t     3\nSOLUTION #10:\t 5\t\t  6\t\t     1\nSOLUTION #11:\t 6\t\t  2\t\t     4\nSOLUTION #12:\t 6\t\t  4\t\t     2\nSOLUTION #13:\t 7\t\t  2\t\t     3\nSOLUTION #14:\t 7\t\t  4\t\t     1  \n\n", "explain": "Output:\n"}, {"task_name": "Department numbers", "task_url": "https://rosettacode.org/wiki/Department_numbers", "task_cat": "Puzzles", "lang": "Haskell", "code": "\n\nmain :: IO ()\nmain =\n  mapM_ print $\n  [2, 4, 6] >>=\n  \\x ->\n     [1 .. 7] >>=\n     \\y ->\n        [12 - (x + y)] >>=\n        \\z ->\n           case y /= z && 1 <= z && z <= 7 of\n             True -> [(x, y, z)]\n             _ -> []\n\n\nmain :: IO ()\nmain =\n  mapM_\n    print\n    [ (x, y, z)\n    | x <- [2, 4, 6] \n    , y <- [1 .. 7] \n    , z <- [12 - (x + y)] \n    , y /= z && 1 <= z && z <= 7 ]\n\n\nmain :: IO ()\nmain =\n  mapM_ print $\n  do x <- [2, 4, 6]\n     y <- [1 .. 7]\n     z <- [12 - (x + y)]\n     if y /= z && 1 <= z && z <= 7\n       then [(x, y, z)]\n       else []\n\n\nimport Data.List (nub)\n\nmain :: IO ()\nmain =\n  let xs = [1 .. 7]\n  in mapM_ print $\n     xs >>=\n     \\x ->\n        xs >>=\n        \\y ->\n           xs >>=\n           \\z ->\n              [ (x, y, z)\n              | even x && 3 == length (nub [x, y, z]) && 12 == sum [x, y, z] ]\n\n\nOutput:\n(2,3,7)\n(2,4,6)\n(2,6,4)\n(2,7,3)\n(4,1,7)\n(4,2,6)\n(4,3,5)\n(4,5,3)\n(4,6,2)\n(4,7,1)\n(6,1,5)\n(6,2,4)\n(6,4,2)\n(6,5,1)\n\n-------------------- DEPARTMENT NUMBERS ------------------\n\noptions :: Int -> Int -> Int -> [(Int, Int, Int)]\noptions lo hi total =\n  ( \\ds ->\n      filter even ds\n        >>= \\x ->\n          filter (/= x) ds\n            >>= \\y ->\n              [total - (x + y)]\n                >>= \\z ->\n                  [ (x, y, z)\n                    | y /= z && lo <= z && z <= hi\n                  ]\n  )\n    [lo .. hi]\n\n--------------------------- TEST -------------------------\nmain :: IO ()\nmain =\n  let xs = options 1 7 12\n   in putStrLn \"(Police, Sanitation, Fire)\\n\"\n        >> mapM_ print xs\n        >> mapM_\n          putStrLn\n          [ \"\\nNumber of options: \",\n            show (length xs)\n          ]\n\n\noptions :: Int -> Int -> Int -> [(Int, Int, Int)]\noptions lo hi total =\n  let ds = [lo .. hi]\n  in [ (x, y, z)\n     | x <- filter even ds \n     , y <- filter (/= x) ds \n     , let z = total - (x + y) \n     , y /= z && lo <= z && z <= hi ]\n\n\nimport Control.Monad (guard)\n\noptions :: Int -> Int -> Int -> [(Int, Int, Int)]\noptions lo hi total =\n  let ds = [lo .. hi]\n  in do x <- filter even ds\n        y <- filter (/= x) ds\n        let z = total - (x + y)\n        guard $ y /= z && lo <= z && z <= hi\n        return (x, y, z)\n\n\nOutput:\n(Police, Sanitation, Fire)\n\n(2,3,7)\n(2,4,6)\n(2,6,4)\n(2,7,3)\n(4,1,7)\n(4,2,6)\n(4,3,5)\n(4,5,3)\n(4,6,2)\n(4,7,1)\n(6,1,5)\n(6,2,4)\n(6,4,2)\n(6,5,1)\n\nNumber of options: \n14\n", "explain": "Bare minimum:\nor, resugaring this into list comprehension format:\nDo notation:\nUnadorned brute force \u2013 more than enough at this small scale:\nOr, more generally:\nReaching again for a little more syntactic sugar, the options function above could also be re-written either as a list comprehension,\nor in Do notation:\n"}, {"task_name": "Department numbers", "task_url": "https://rosettacode.org/wiki/Department_numbers", "task_cat": "Puzzles", "lang": "TypeScript", "code": "\nTranslation of: Sinclair ZX81 BASIC\n// Department numbers\nconsole.log(`POLICE SANITATION FIRE`);\nlet f: number;\nfor (var p = 2; p <= 7; p += 2) {\n  for (var s = 1; s <= 7; s++) {\n    if (s != p) {      \n      f = (12 - p) - s;\n      if ((f > 0) && (f <= 7) && (f != s) && (f != p))\n        console.log(`   ${p}       ${s}       ${f}`);\n    }\n  }\n}\n\n\nOutput:\nPOLICE SANITATION FIRE\n   2       3       7\n   2       4       6\n   2       6       4\n   2       7       3\n   4       1       7\n   4       2       6\n   4       3       5\n   4       5       3\n   4       6       2\n   4       7       1\n   6       1       5\n   6       2       4\n   6       4       2\n   6       5       1\n\n", "explain": ""}, {"task_name": "Department numbers", "task_url": "https://rosettacode.org/wiki/Department_numbers", "task_cat": "Puzzles", "lang": "F#", "code": "\n// A function to generate department numbers. Nigel Galloway: May 2nd., 2018\ntype dNum = {Police:int; Fire:int; Sanitation:int}\nlet fN n=n.Police%2=0&&n.Police+n.Fire+n.Sanitation=12&&n.Police<>n.Fire&&n.Police<>n.Sanitation&&n.Fire<>n.Sanitation\nList.init (7*7*7) (fun n->{Police=n%7+1;Fire=(n/7)%7+1;Sanitation=(n/49)+1})|>List.filter fN|>List.iter(printfn \"%A\")\n\n\nOutput:\n{Police = 6;\n Fire = 5;\n Sanitation = 1;}\n{Police = 4;\n Fire = 7;\n Sanitation = 1;}\n{Police = 6;\n Fire = 4;\n Sanitation = 2;}\n{Police = 4;\n Fire = 6;\n Sanitation = 2;}\n{Police = 4;\n Fire = 5;\n Sanitation = 3;}\n{Police = 2;\n Fire = 7;\n Sanitation = 3;}\n{Police = 6;\n Fire = 2;\n Sanitation = 4;}\n{Police = 2;\n Fire = 6;\n Sanitation = 4;}\n{Police = 6;\n Fire = 1;\n Sanitation = 5;}\n{Police = 4;\n Fire = 3;\n Sanitation = 5;}\n{Police = 4;\n Fire = 2;\n Sanitation = 6;}\n{Police = 2;\n Fire = 4;\n Sanitation = 6;}\n{Police = 4;\n Fire = 1;\n Sanitation = 7;}\n{Police = 2;\n Fire = 3;\n Sanitation = 7;}\n\n", "explain": ""}, {"task_name": "Department numbers", "task_url": "https://rosettacode.org/wiki/Department_numbers", "task_cat": "Puzzles", "lang": "Groovy", "code": "\nTranslation of: Java\nclass DepartmentNumbers {\n    static void main(String[] args) {\n        println(\"Police  Sanitation  Fire\")\n        println(\"------  ----------  ----\")\n        int count = 0\n        for (int i = 2; i <= 6; i += 2) {\n            for (int j = 1; j <= 7; ++j) {\n                if (j == i) continue\n                for (int k = 1; k <= 7; ++k) {\n                    if (k == i || k == j) continue\n                    if (i + j + k != 12) continue\n                    println(\"  $i         $j         $k\")\n                    count++\n                }\n            }\n        }\n        println()\n        println(\"$count valid combinations\")\n    }\n}\n\n\nOutput:\nPolice  Sanitation  Fire\n------  ----------  ----\n  2         3         7\n  2         4         6\n  2         6         4\n  2         7         3\n  4         1         7\n  4         2         6\n  4         3         5\n  4         5         3\n  4         6         2\n  4         7         1\n  6         1         5\n  6         2         4\n  6         4         2\n  6         5         1\n\n14 valid combinations\n", "explain": ""}, {"task_name": "Department numbers", "task_url": "https://rosettacode.org/wiki/Department_numbers", "task_cat": "Puzzles", "lang": "Zig", "code": "\nWorks with: Zig version 0.11.0dev\nconst std = @import(\"std\");\n\npub fn main() !void {\n    const stdout = std.io.getStdOut().writer();\n\n    try stdout.writeAll(\"Police  Sanitation  Fire\\n\");\n    try stdout.writeAll(\"------  ----------  ----\\n\");\n\n    var p: usize = 2;\n    while (p <= 7) : (p += 2)\n        for (1..7 + 1) |s|\n            for (1..7 + 1) |f|\n                if (p != s and s != f and f != p and p + f + s == 12) {\n                    try stdout.print(\"  {d}         {d}         {d}\\n\", .{ p, s, f });\n                };\n}\n\n\nOutput:\nPolice  Sanitation  Fire\n------  ----------  ----\n  2         3         7\n  2         4         6\n  2         6         4\n  2         7         3\n  4         1         7\n  4         2         6\n  4         3         5\n  4         5         3\n  4         6         2\n  4         7         1\n  6         1         5\n  6         2         4\n  6         4         2\n  6         5         1\nCreating and using an iterator[edit]\n\nconst std = @import(\"std\");\n\npub fn main() !void {\n    const stdout = std.io.getStdOut().writer();\n\n    try stdout.writeAll(\"Police  Sanitation  Fire\\n\");\n    try stdout.writeAll(\"------  ----------  ----\\n\");\n\n    var it = SolutionIterator{};\n    while (it.next()) |solution| {\n        try stdout.print(\n            \"  {d}         {d}         {d}\\n\",\n            .{ solution.police, solution.sanitation, solution.fire },\n        );\n    }\n}\n\nconst SolutionIterator = struct {\n    // 5 bit unsigned (u5) allows addition up to 31\n    p: u5 = 2,\n    s: u5 = 1,\n    f: u5 = 0,\n\n    /// 3 bit unsigned (u3) limits 0 <= department <= 7\n    fn next(self: *SolutionIterator) ?struct { police: u3, sanitation: u3, fire: u3 } {\n        if (self.p > 7) return null; // already completed\n\n        while (true) {\n            self.f += 1; // fire\n            if (self.f > 7) {\n                self.f = 1;\n                self.s += 1; // sanitation\n                if (self.s > 7) {\n                    self.s = 1;\n                    self.p += 2; // police\n                    if (self.p > 7) {\n                        return null; // completed\n                    }\n                }\n            }\n            if (self.p + self.f + self.s == 12)\n                return .{\n                    .police = @truncate(self.p),\n                    .sanitation = @truncate(self.s),\n                    .fire = @truncate(self.f),\n                };\n        }\n    }\n};\n", "explain": "Using a Zig struct to create an iterator is a common pattern in Zig.\n"}, {"task_name": "Department numbers", "task_url": "https://rosettacode.org/wiki/Department_numbers", "task_cat": "Puzzles", "lang": "AWK", "code": "\n# syntax: GAWK -f DEPARTMENT_NUMBERS.AWK\nBEGIN {\n    print(\" # FD PD SD\")\n    for (fire=1; fire<=7; fire++) {\n      for (police=1; police<=7; police++) {\n        for (sanitation=1; sanitation<=7; sanitation++) {\n          if (rules() ~ /^1+$/) {\n            printf(\"%2d %2d %2d %2d\\n\",++count,fire,police,sanitation)\n          }\n        }\n      }\n    }\n    exit(0)\n}\nfunction rules(  stmt1,stmt2,stmt3) {\n    stmt1 = fire != police && fire != sanitation && police != sanitation\n    stmt2 = fire + police + sanitation == 12\n    stmt3 = police % 2 == 0\n    return(stmt1 stmt2 stmt3)\n}\n\n\nOutput:\n # FD PD SD\n 1  1  4  7\n 2  1  6  5\n 3  2  4  6\n 4  2  6  4\n 5  3  2  7\n 6  3  4  5\n 7  4  2  6\n 8  4  6  2\n 9  5  4  3\n10  5  6  1\n11  6  2  4\n12  6  4  2\n13  7  2  3\n14  7  4  1\n\n", "explain": ""}]