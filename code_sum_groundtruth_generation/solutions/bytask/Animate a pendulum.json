[{"task_name": "Animate a pendulum", "task_url": "https://rosettacode.org/wiki/Animate_a_pendulum", "task_cat": "Temporal media", "lang": "Python", "code": "\nLibrary: pygame[edit]\nTranslation of: C\nimport pygame, sys\nfrom pygame.locals import *\nfrom math import sin, cos, radians\n\npygame.init()\n\nWINDOWSIZE = 250\nTIMETICK = 100\nBOBSIZE = 15\n\nwindow = pygame.display.set_mode((WINDOWSIZE, WINDOWSIZE))\npygame.display.set_caption(\"Pendulum\")\n\nscreen = pygame.display.get_surface()\nscreen.fill((255,255,255))\n\nPIVOT = (WINDOWSIZE/2, WINDOWSIZE/10)\nSWINGLENGTH = PIVOT[1]*4\n\nclass BobMass(pygame.sprite.Sprite):\n    def __init__(self):\n        pygame.sprite.Sprite.__init__(self)\n        self.theta = 45\n        self.dtheta = 0\n        self.rect = pygame.Rect(PIVOT[0]-SWINGLENGTH*cos(radians(self.theta)),\n                                PIVOT[1]+SWINGLENGTH*sin(radians(self.theta)),\n                                1,1)\n        self.draw()\n\n    def recomputeAngle(self):\n        scaling = 3000.0/(SWINGLENGTH**2)\n\n        firstDDtheta = -sin(radians(self.theta))*scaling\n        midDtheta = self.dtheta + firstDDtheta\n        midtheta = self.theta + (self.dtheta + midDtheta)/2.0\n\n        midDDtheta = -sin(radians(midtheta))*scaling\n        midDtheta = self.dtheta + (firstDDtheta + midDDtheta)/2\n        midtheta = self.theta + (self.dtheta + midDtheta)/2\n\n        midDDtheta = -sin(radians(midtheta)) * scaling\n        lastDtheta = midDtheta + midDDtheta\n        lasttheta = midtheta + (midDtheta + lastDtheta)/2.0\n        \n        lastDDtheta = -sin(radians(lasttheta)) * scaling\n        lastDtheta = midDtheta + (midDDtheta + lastDDtheta)/2.0\n        lasttheta = midtheta + (midDtheta + lastDtheta)/2.0\n\n        self.dtheta = lastDtheta\n        self.theta = lasttheta\n        self.rect = pygame.Rect(PIVOT[0]-\n                                SWINGLENGTH*sin(radians(self.theta)), \n                                PIVOT[1]+\n                                SWINGLENGTH*cos(radians(self.theta)),1,1)\n\n\n    def draw(self):\n        pygame.draw.circle(screen, (0,0,0), PIVOT, 5, 0)\n        pygame.draw.circle(screen, (0,0,0), self.rect.center, BOBSIZE, 0)\n        pygame.draw.aaline(screen, (0,0,0), PIVOT, self.rect.center)\n        pygame.draw.line(screen, (0,0,0), (0, PIVOT[1]), (WINDOWSIZE, PIVOT[1]))\n\n    def update(self):\n        self.recomputeAngle()\n        screen.fill((255,255,255))\n        self.draw()\n\nbob = BobMass()\n\nTICK = USEREVENT + 2\npygame.time.set_timer(TICK, TIMETICK)\n\ndef input(events):\n    for event in events:\n        if event.type == QUIT:\n            sys.exit(0)\n        elif event.type == TICK:\n            bob.update()\n\nwhile True:\n    input(pygame.event.get())\n    pygame.display.flip()\n\nPython: using tkinter[edit]\n''' Python 3.6.5 code using Tkinter graphical user interface.''' \n\nfrom tkinter import *\nimport math\n\nclass Animation:\n    def __init__(self, gw):\n        self.window = gw\n        self.xoff, self.yoff = 300, 100\n        self.angle = 0\n        self.sina = math.sin(self.angle)\n        self.cosa = math.cos(self.angle)\n        self.rodhyp = 170\n        self.bobr = 30\n        self.bobhyp = self.rodhyp + self.bobr\n        self.rodx0, self.rody0 = self.xoff, self.yoff\n        self.ra = self.rodx0\n        self.rb = self.rody0\n        self.rc = self.xoff + self.rodhyp*self.sina\n        self.rd = self.yoff + self.rodhyp*self.cosa\n        self.ba = self.xoff - self.bobr + self.bobhyp*self.sina\n        self.bb = self.yoff - self.bobr + self.bobhyp*self.cosa\n        self.bc = self.xoff + self.bobr + self.bobhyp*self.sina\n        self.bd = self.yoff + self.bobr + self.bobhyp*self.cosa\n        self.da = math.pi / 360\n\n        # create / fill canvas:\n        self.cnv = Canvas(gw, bg='lemon chiffon')\n        self.cnv.pack(fill=BOTH, expand=True)\n\n        self.cnv.create_line(0, 100, 600, 100,\n                             fill='dodger blue',\n                             width=3)\n        radius = 8\n        self.cnv.create_oval(300-radius, 100-radius,\n                             300+radius, 100+radius,\n                             fill='navy')    \n\n        self.bob = self.cnv.create_oval(self.ba,\n                                        self.bb,\n                                        self.bc,\n                                        self.bd,\n                                        fill='red',\n                                        width=2)\n\n        self.rod = self.cnv.create_line(self.ra,\n                                        self.rb,\n                                        self.rc,\n                                        self.rd,\n                                        fill='dodger blue',\n                                        width=6)\n\n        self.animate()\n\n    def animate(self):\n        if abs(self.angle) > math.pi / 2:\n            self.da = - self.da\n        self.angle += self.da\n        self.sina = math.sin(self.angle)\n        self.cosa = math.cos(self.angle)\n        self.ra = self.rodx0\n        self.rb = self.rody0\n        self.rc = self.xoff + self.rodhyp*self.sina\n        self.rd = self.yoff + self.rodhyp*self.cosa\n        self.ba = self.xoff - self.bobr + self.bobhyp*self.sina\n        self.bb = self.yoff - self.bobr + self.bobhyp*self.cosa\n        self.bc = self.xoff + self.bobr + self.bobhyp*self.sina\n        self.bd = self.yoff + self.bobr + self.bobhyp*self.cosa\n        \n        self.cnv.coords(self.rod,\n                        self.ra,\n                        self.rb,\n                        self.rc,\n                        self.rd)\n        self.cnv.coords(self.bob,\n                        self.ba,\n                        self.bb,\n                        self.bc,\n                        self.bd)\n        self.window.update()\n        self.cnv.after(5, self.animate)\n         \nroot = Tk()\nroot.title('Pendulum')\nroot.geometry('600x400+100+50')\nroot.resizable(False, False)\na = Animation(root)\nroot.mainloop()\n\n", "explain": ""}, {"task_name": "Animate a pendulum", "task_url": "https://rosettacode.org/wiki/Animate_a_pendulum", "task_cat": "Temporal media", "lang": "C", "code": "\nLibrary: GLUT\n#include <stdlib.h>\n#include <math.h>\n#include <GL/glut.h>\n#include <GL/gl.h>\n#include <sys/time.h>\n\n#define length 5\n#define g 9.8\ndouble alpha, accl, omega = 0, E;\nstruct timeval tv;\n\ndouble elappsed() {\n\tstruct timeval now;\n\tgettimeofday(&now, 0);\n\tint ret = (now.tv_sec - tv.tv_sec) * 1000000\n\t\t+ now.tv_usec - tv.tv_usec;\n\ttv = now;\n\treturn ret / 1.e6;\n}\n\nvoid resize(int w, int h)\n{\n\tglViewport(0, 0, w, h);\n\tglMatrixMode(GL_PROJECTION);\n\tglLoadIdentity();\n\n\tglMatrixMode(GL_MODELVIEW);\n\tglLoadIdentity();\n\tglOrtho(0, w, h, 0, -1, 1);\n}\n\nvoid render()\n{\n\tdouble x = 320 + 300 * sin(alpha), y = 300 * cos(alpha);\n\tresize(640, 320);\n \tglClear(GL_COLOR_BUFFER_BIT);\n\n\tglBegin(GL_LINES);\n\tglVertex2d(320, 0);\n\tglVertex2d(x, y);\n\tglEnd();\n\tglFlush();\n\n\tdouble us = elappsed();\n\talpha += (omega + us * accl / 2) * us;\n\tomega += accl * us;\n\n\t/* don't let precision error go out of hand */\n\tif (length * g * (1 - cos(alpha)) >= E) {\n\t\talpha = (alpha < 0 ? -1 : 1) * acos(1 - E / length / g);\n\t\tomega = 0;\n\t}\n\taccl = -g / length * sin(alpha);\n}\n\nvoid init_gfx(int *c, char **v)\n{\n\tglutInit(c, v);\n\tglutInitDisplayMode(GLUT_RGB);\n\tglutInitWindowSize(640, 320);\n\tglutIdleFunc(render);\n\tglutCreateWindow(\"Pendulum\");\n}\n\nint main(int c, char **v)\n{\n\talpha = 4 * atan2(1, 1) / 2.1;\n\tE = length * g * (1 - cos(alpha));\n\n\taccl = -g / length * sin(alpha);\n\tomega = 0;\n\n\tgettimeofday(&tv, 0);\n\tinit_gfx(&c, v);\n\tglutMainLoop();\n\treturn 0;\n}\n\n", "explain": ""}, {"task_name": "Animate a pendulum", "task_url": "https://rosettacode.org/wiki/Animate_a_pendulum", "task_cat": "Temporal media", "lang": "C++", "code": "\nLibrary: wxWidgets\n\n#ifndef __wxPendulumDlg_h__\n#define __wxPendulumDlg_h__\n\n// ---------------------\n/// @author Martin Ettl\n/// @date   2013-02-03\n// ---------------------\n\n#ifdef __BORLANDC__\n#pragma hdrstop\n#endif\n\n#ifndef WX_PRECOMP\n#include <wx/wx.h>\n#include <wx/dialog.h>\n#else\n#include <wx/wxprec.h>\n#endif\n#include <wx/timer.h>\n#include <wx/dcbuffer.h>\n#include <cmath>\n\nclass wxPendulumDlgApp : public wxApp\n{\n    public:\n        bool OnInit();\n        int OnExit();\n};\n\nclass wxPendulumDlg : public wxDialog\n{\n    public:\n\n        wxPendulumDlg(wxWindow *parent, wxWindowID id = 1, const wxString &title = wxT(\"wxPendulum\"), \n\t\t\t\t const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, \n\t\t\t\t long style = wxSUNKEN_BORDER | wxCAPTION | wxRESIZE_BORDER | wxSYSTEM_MENU | wxDIALOG_NO_PARENT | wxMINIMIZE_BOX | wxMAXIMIZE_BOX | wxCLOSE_BOX);\n\n        virtual ~wxPendulumDlg();\n\t\n\t\t// Event handler\n        void wxPendulumDlgPaint(wxPaintEvent& event);\n        void wxPendulumDlgSize(wxSizeEvent& event);\n        void OnTimer(wxTimerEvent& event);\n\n    private:\n\n\t\t// a pointer to a timer object\n        wxTimer *m_timer;\n\n\t\tunsigned int m_uiLength;\n\t\tdouble  \t m_Angle;\n\t\tdouble       m_AngleVelocity;\n\n        enum wxIDs\n        {\n            ID_WXTIMER1 = 1001,\n            ID_DUMMY_VALUE_ \n        };\n\n        void OnClose(wxCloseEvent& event);\n        void CreateGUIControls();\n\n        DECLARE_EVENT_TABLE()\n};\n\n#endif // __wxPendulumDlg_h__\n\n\n// ---------------------\n/// @author Martin Ettl\n/// @date   2013-02-03\n// ---------------------\n\n#include \"wxPendulumDlg.hpp\"\n#include <wx/pen.h>\n\nIMPLEMENT_APP(wxPendulumDlgApp)\n\nbool wxPendulumDlgApp::OnInit()\n{\n    wxPendulumDlg* dialog = new wxPendulumDlg(NULL);\n    SetTopWindow(dialog);\n    dialog->Show(true);\n    return true;\n}\n\nint wxPendulumDlgApp::OnExit()\n{\n    return 0;\n}\n\nBEGIN_EVENT_TABLE(wxPendulumDlg, wxDialog)\n    EVT_CLOSE(wxPendulumDlg::OnClose)\n    EVT_SIZE(wxPendulumDlg::wxPendulumDlgSize)\n    EVT_PAINT(wxPendulumDlg::wxPendulumDlgPaint)\n    EVT_TIMER(ID_WXTIMER1, wxPendulumDlg::OnTimer)\nEND_EVENT_TABLE()\n\nwxPendulumDlg::wxPendulumDlg(wxWindow *parent, wxWindowID id, const wxString &title, const wxPoint &position, const wxSize& size, long style)\n    : wxDialog(parent, id, title, position, size, style)\n{\n    CreateGUIControls();\n}\n\nwxPendulumDlg::~wxPendulumDlg()\n{\n}\n\nvoid wxPendulumDlg::CreateGUIControls()\n{\n    SetIcon(wxNullIcon);\n    SetSize(8, 8, 509, 412);\n    Center();\n\n\tm_uiLength = 200;\n\tm_Angle    = M_PI/2.;\n\tm_AngleVelocity = 0;\n\n    m_timer = new wxTimer();\n    m_timer->SetOwner(this, ID_WXTIMER1);\n    m_timer->Start(20);\n}\n\nvoid wxPendulumDlg::OnClose(wxCloseEvent& WXUNUSED(event))\n{\n    Destroy();\n}\n\nvoid wxPendulumDlg::wxPendulumDlgPaint(wxPaintEvent& WXUNUSED(event))\n{\n    SetBackgroundStyle(wxBG_STYLE_CUSTOM);\n    wxBufferedPaintDC dc(this);\n\n    // Get window dimensions\n    wxSize sz = GetClientSize();\n\t// determine the center of the canvas\n    const wxPoint center(wxPoint(sz.x / 2, sz.y / 2));\n\n    // create background color\n    wxColour powderblue = wxColour(176,224,230);\n\n    // draw powderblue background\n    dc.SetPen(powderblue);\n    dc.SetBrush(powderblue);\n    dc.DrawRectangle(0, 0, sz.x, sz.y);\n\n    // draw lines\n\twxPen Pen(*wxBLACK_PEN);\n\tPen.SetWidth(1);\n    dc.SetPen(Pen);\n    dc.SetBrush(*wxBLACK_BRUSH);\n\n    double angleAccel, dt = 0.15;\n\n    angleAccel = (-9.81 / m_uiLength) * sin(m_Angle);\n    m_AngleVelocity += angleAccel * dt;\n    m_Angle += m_AngleVelocity * dt;\n\n    int anchorX = sz.x / 2, anchorY = sz.y / 4;\n    int ballX = anchorX + (int)(sin(m_Angle) * m_uiLength);\n    int ballY = anchorY + (int)(cos(m_Angle) * m_uiLength);\n    dc.DrawLine(anchorX, anchorY, ballX, ballY);\n\n    dc.SetBrush(*wxGREY_BRUSH);\n    dc.DrawEllipse(anchorX - 3, anchorY - 4, 7, 7);\n\n    dc.SetBrush(wxColour(255,255,0)); // yellow\n    dc.DrawEllipse(ballX - 7, ballY - 7, 20, 20);\n}\n\nvoid wxPendulumDlg::wxPendulumDlgSize(wxSizeEvent& WXUNUSED(event))\n{\n    Refresh();\n}\n\nvoid wxPendulumDlg::OnTimer(wxTimerEvent& WXUNUSED(event))\n{\n\t// force refresh\n\tRefresh();\n}\n\n\n", "explain": "File wxPendulumDlg.hpp\nFile wxPendulumDlg.cpp\nThis program is tested with wxWidgets version 2.8 and 2.9. \nThe whole project, including makefile for compiling on Linux \ncan be download from github.\n\n"}, {"task_name": "Animate a pendulum", "task_url": "https://rosettacode.org/wiki/Animate_a_pendulum", "task_cat": "Temporal media", "lang": "Java", "code": "\nLibrary: Swing Library: AWT\nimport java.awt.*;\nimport javax.swing.*;\n\npublic class Pendulum extends JPanel implements Runnable {\n\n    private double angle = Math.PI / 2;\n    private int length;\n\n    public Pendulum(int length) {\n        this.length = length;\n        setDoubleBuffered(true);\n    }\n\n    @Override\n    public void paint(Graphics g) {\n        g.setColor(Color.WHITE);\n        g.fillRect(0, 0, getWidth(), getHeight());\n        g.setColor(Color.BLACK);\n        int anchorX = getWidth() / 2, anchorY = getHeight() / 4;\n        int ballX = anchorX + (int) (Math.sin(angle) * length);\n        int ballY = anchorY + (int) (Math.cos(angle) * length);\n        g.drawLine(anchorX, anchorY, ballX, ballY);\n        g.fillOval(anchorX - 3, anchorY - 4, 7, 7);\n        g.fillOval(ballX - 7, ballY - 7, 14, 14);\n    }\n\n    public void run() {\n        double angleAccel, angleVelocity = 0, dt = 0.1;\n        while (true) {\n            angleAccel = -9.81 / length * Math.sin(angle);\n            angleVelocity += angleAccel * dt;\n            angle += angleVelocity * dt;\n            repaint();\n            try { Thread.sleep(15); } catch (InterruptedException ex) {}\n        }\n    }\n\n    @Override\n    public Dimension getPreferredSize() {\n        return new Dimension(2 * length + 50, length / 2 * 3);\n    }\n\n    public static void main(String[] args) {\n        JFrame f = new JFrame(\"Pendulum\");\n        Pendulum p = new Pendulum(200);\n        f.add(p);\n        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        f.pack();\n        f.setVisible(true);\n        new Thread(p).start();\n    }\n}\n\n", "explain": ""}, {"task_name": "Animate a pendulum", "task_url": "https://rosettacode.org/wiki/Animate_a_pendulum", "task_cat": "Temporal media", "lang": "C#", "code": "\nLibrary: Windows Forms\nLibrary: GDI (System.Drawing)\nusing System;\nusing System.Drawing;\nusing System.Windows.Forms;\n\nclass CSharpPendulum\n{\n    Form _form;\n    Timer _timer;\n    \n    double _angle = Math.PI / 2, \n           _angleAccel, \n           _angleVelocity = 0, \n           _dt = 0.1;\n    \n    int _length = 50;\n\n    [STAThread]\n    static void Main()\n    {\n        var p = new CSharpPendulum();\n    }\n\n    public CSharpPendulum()\n    {\n        _form = new Form() { Text = \"Pendulum\", Width = 200, Height = 200 };\n        _timer = new Timer() { Interval = 30 };\n\n        _timer.Tick += delegate(object sender, EventArgs e)\n        {\n            int anchorX = (_form.Width / 2) - 12,\n                anchorY = _form.Height / 4,\n                ballX = anchorX + (int)(Math.Sin(_angle) * _length),\n                ballY = anchorY + (int)(Math.Cos(_angle) * _length);\n\n            _angleAccel = -9.81 / _length * Math.Sin(_angle);\n            _angleVelocity += _angleAccel * _dt;\n            _angle += _angleVelocity * _dt;\n          \n            Bitmap dblBuffer = new Bitmap(_form.Width, _form.Height);\n            Graphics g = Graphics.FromImage(dblBuffer);\n            Graphics f = Graphics.FromHwnd(_form.Handle);\n\n            g.DrawLine(Pens.Black, new Point(anchorX, anchorY), new Point(ballX, ballY));\n            g.FillEllipse(Brushes.Black, anchorX - 3, anchorY - 4, 7, 7);\n            g.FillEllipse(Brushes.DarkGoldenrod, ballX - 7, ballY - 7, 14, 14);\n            \n            f.Clear(Color.White);\n            f.DrawImage(dblBuffer, new Point(0, 0));    \n        };\n\n        _timer.Start();\n        Application.Run(_form);\n    }     \n}\n\n", "explain": ""}, {"task_name": "Animate a pendulum", "task_url": "https://rosettacode.org/wiki/Animate_a_pendulum", "task_cat": "Temporal media", "lang": "JavaScript", "code": "\nWith <canvas>[edit]\nTranslation of: E (plus gratuitous motion blur)\n<html><head>\n  <title>Pendulum</title>\n</head><body style=\"background: gray;\">\n\n<canvas id=\"canvas\" width=\"600\" height=\"600\">\n  <p>Sorry, your browser does not support the &lt;canvas&gt; used to display the pendulum animation.</p>\n</canvas>\n<script>\n  function PendulumSim(length_m, gravity_mps2, initialAngle_rad, timestep_ms, callback) {\n    var velocity = 0;\n    var angle = initialAngle_rad;\n    var k = -gravity_mps2/length_m;\n    var timestep_s = timestep_ms / 1000;\n    return setInterval(function () {\n      var acceleration = k * Math.sin(angle);\n      velocity += acceleration * timestep_s;\n      angle    += velocity     * timestep_s;\n      callback(angle);\n    }, timestep_ms);\n  }\n  \n  var canvas = document.getElementById('canvas');\n  var context = canvas.getContext('2d');\n  var prev=0;\n  var sim = PendulumSim(1, 9.80665, Math.PI*99/100, 10, function (angle) {\n    var rPend = Math.min(canvas.width, canvas.height) * 0.47;\n    var rBall = Math.min(canvas.width, canvas.height) * 0.02;\n    var rBar = Math.min(canvas.width, canvas.height) * 0.005;\n    var ballX = Math.sin(angle) * rPend;\n    var ballY = Math.cos(angle) * rPend;\n\n    context.fillStyle = \"rgba(255,255,255,0.51)\";\n    context.globalCompositeOperation = \"destination-out\";\n    context.fillRect(0, 0, canvas.width, canvas.height);\n    \n    context.fillStyle = \"yellow\";\n    context.strokeStyle = \"rgba(0,0,0,\"+Math.max(0,1-Math.abs(prev-angle)*10)+\")\";\n    context.globalCompositeOperation = \"source-over\";\n\n    context.save();\n      context.translate(canvas.width/2, canvas.height/2);\n      context.rotate(angle);\n      \n      context.beginPath();\n      context.rect(-rBar, -rBar, rBar*2, rPend+rBar*2);\n      context.fill();\n      context.stroke();\n      \n      context.beginPath();\n      context.arc(0, rPend, rBall, 0, Math.PI*2, false);\n      context.fill();\n      context.stroke();\n    context.restore();\n    prev=angle;\n  });\n</script>\n\n</body></html>\n\nWithin SVG[edit]\n\n<svg height=\"100%\" width=\"100%\" viewBox=\"-2 0 4 4\" xmlns=\"http://www.w3.org/2000/svg\">\n  <line id=\"string\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"0\" stroke=\"grey\" stroke-width=\"0.05\" />\n  <circle id=\"ball\" cx=\"0\" cy=\"0\" r=\"0.1\" fill=\"black\" />\n  <script>\n    /*jshint esnext: true */\n\n    function rk4(dt, x, f) {\n      \"use strict\";\n      let from = Array.from,\n          a = from(f(from(x,  $    => $         )), $ => $*dt),\n          b = from(f(from(x, ($,i) => $ + a[i]/2)), $ => $*dt),\n          c = from(f(from(x, ($,i) => $ + b[i]/2)), $ => $*dt),\n          d = from(f(from(x, ($,i) => $ + c[i]  )), $ => $*dt);\n      return from(x, (_,i) => (a[i] + 2*b[i] + 2*c[i] + d[i])/6);\n    }\n\n    function setPendulumPos($) {\n      const string = document.getElementById(\"string\"),\n            ball = document.getElementById(\"ball\");\n      let $2 = $*$,\n          x = 2*$/(1+$2),\n          y = (1-$2)/(1+$2);\n      string.setAttribute(\"x2\", x);\n      string.setAttribute(\"y2\", y);\n      ball.setAttribute(\"cx\", x);\n      ball.setAttribute(\"cy\", y);\n    }\n\n    var q = [1, 0];\n    var previousTimestamp;\n    (function animate(timestamp) {\n      if ( previousTimestamp !== undefined) {\n        let dq = rk4((timestamp - previousTimestamp)/1000, q, $ => [$[1], 2*$[1]*$[1]*$[0]/(1+$[0]*$[0]) - $[0]]);\n        q = [q[0] + dq[0], q[1] + dq[1]];\n        setPendulumPos(q[0]);\n      }\n      previousTimestamp = timestamp;\n      window.requestAnimationFrame(animate);    \n    })()\n  </script>\n</svg>\n\n", "explain": "If we use SVG we don't even have to make a HTML document.  We can put the script inside SVG.\nTo do things a bit differently, we'll use a stereographic projection of the circle, in order to get algebraic Euler-Lagrange equations which we'll integrate with the Runge-Kutta method.\nAlso we'll use a dimensionless formulation of the problem (taking unit value for the mass, the length and so on).\n"}, {"task_name": "Animate a pendulum", "task_url": "https://rosettacode.org/wiki/Animate_a_pendulum", "task_cat": "Temporal media", "lang": "MATLAB", "code": "\n\n%This is a numerical simulation of a pendulum with a massless pivot arm.\n\n%% User Defined Parameters\n%Define external parameters\ng = -9.8;\ndeltaTime = 1/50; %Decreasing this will increase simulation accuracy\nendTime = 16;\n\n%Define pendulum\nrodPivotPoint = [2 2]; %rectangular coordinates\nrodLength = 1;\nmass = 1; %of the bob\nradius = .2; %of the bob\ntheta = 45; %degrees, defines initial position of the bob\nvelocity = [0 0]; %cylindrical coordinates; first entry is radial velocity,\n                  %second entry is angular velocity\n\n%% Simulation\nassert(radius < rodLength,'Pendulum bob radius must be less than the length of the rod.');\n\nposition = rodPivotPoint - (rodLength*[-sind(theta) cosd(theta)]); %in rectangular coordinates\n\n%Generate graphics, render pendulum\nfigure;\naxesHandle = gca;\nxlim(axesHandle, [(rodPivotPoint(1) - rodLength - radius) (rodPivotPoint(1) + rodLength + radius)] );\nylim(axesHandle, [(rodPivotPoint(2) - rodLength - radius) (rodPivotPoint(2) + rodLength + radius)] );\n\nrectHandle = rectangle('Position',[(position - radius/2) radius radius],...\n    'Curvature',[1,1],'FaceColor','g'); %Pendulum bob\nhold on\nplot(rodPivotPoint(1),rodPivotPoint(2),'^'); %pendulum pivot\nlineHandle = line([rodPivotPoint(1) position(1)],...\n    [rodPivotPoint(2) position(2)]); %pendulum rod\nhold off\n\n%Run simulation, all calculations are performed in cylindrical coordinates\nfor time = (deltaTime:deltaTime:endTime)\n        \n    drawnow; %Forces MATLAB to render the pendulum\n    \n    %Find total force\n    gravitationalForceCylindrical = [mass*g*cosd(theta) mass*g*sind(theta)];\n    \n    %This code is just incase you want to add more forces,e.g friction\n    totalForce = gravitationalForceCylindrical; \n    \n    %If the rod isn't massless or is a spring, etc., modify this line\n    %accordingly\n    rodForce = [-totalForce(1) 0]; %cylindrical coordinates\n    \n    totalForce = totalForce + rodForce;\n    \n    acceleration = totalForce / mass; %F = ma\n    velocity = velocity + acceleration * deltaTime;\n    rodLength = rodLength + velocity(1) * deltaTime;\n    theta = theta + velocity(2) * deltaTime; % Attention!! Mistake here. \n    % Velocity needs to be divided by pendulum length and scaled to degrees:\n    % theta = theta + velocity(2) * deltaTime/rodLength/pi*180;\n    \n    position = rodPivotPoint - (rodLength*[-sind(theta) cosd(theta)]);\n    \n    %Update figure with new position info\n    set(rectHandle,'Position',[(position - radius/2) radius radius]);\n    set(lineHandle,'XData',[rodPivotPoint(1) position(1)],'YData',...\n        [rodPivotPoint(2) position(2)]);\n\nend\n\n", "explain": "pendulum.m\n"}, {"task_name": "Animate a pendulum", "task_url": "https://rosettacode.org/wiki/Animate_a_pendulum", "task_cat": "Temporal media", "lang": "Fortran", "code": "\n\n!Implemented by Anant Dixit (October, 2014)\nprogram animated_pendulum\nimplicit none\ndouble precision, parameter :: pi = 4.0D0*atan(1.0D0), l = 1.0D-1, dt = 1.0D-2, g = 9.8D0\ninteger :: io\ndouble precision :: s_ang, c_ang, p_ang, n_ang\n\nwrite(*,*) 'Enter starting angle (in degrees):'\ndo\n  read(*,*,iostat=io) s_ang\n  if(io.ne.0 .or. s_ang.lt.-90.0D0 .or. s_ang.gt.90.0D0) then\n    write(*,*) 'Please enter an angle between 90 and -90 degrees:'\n  else\n    exit\n  end if\nend do\ncall execute_command_line('cls')\n\nc_ang = s_ang*pi/180.0D0\np_ang = c_ang\n\ncall display(c_ang)\ndo\n  call next_time_step(c_ang,p_ang,g,l,dt,n_ang)\n  if(abs(c_ang-p_ang).ge.0.05D0) then\n    call execute_command_line('cls')\n    call display(c_ang)\n  end if\nend do\nend program\n\nsubroutine next_time_step(c_ang,p_ang,g,l,dt,n_ang)\ndouble precision :: c_ang, p_ang, g, l, dt, n_ang\nn_ang = (-g*sin(c_ang)/l)*2.0D0*dt**2 + 2.0D0*c_ang - p_ang\np_ang = c_ang\nc_ang = n_ang\nend subroutine\n\nsubroutine display(c_ang)\ndouble precision :: c_ang\ncharacter (len=*), parameter :: cfmt = '(A1)'\ndouble precision :: rx, ry\ninteger :: x, y, i, j\nrx = 45.0D0*sin(c_ang)\nry = 22.5D0*cos(c_ang)\nx = int(rx)+51\ny = int(ry)+2\ndo i = 1,32\n  do j = 1,100\n    if(i.eq.y .and. j.eq.x) then\n      write(*,cfmt,advance='no') 'O'\n    else if(i.eq.y .and. (j.eq.(x-1).or.j.eq.(x+1))) then\n      write(*,cfmt,advance='no') 'G'\n    else if(j.eq.x .and. (i.eq.(y-1).or.i.eq.(y+1))) then\n      write(*,cfmt,advance='no') 'G'\n    else if(i.eq.y .and. (j.eq.(x-2).or.j.eq.(x+2))) then\n      write(*,cfmt,advance='no') '#'\n    else if(j.eq.x .and. (i.eq.(y-2).or.i.eq.(y+2))) then\n      write(*,cfmt,advance='no') 'G'\n    else if((i.eq.(y+1).and.j.eq.(x+1)) .or. (i.eq.(y-1).and.j.eq.(x-1))) then\n      write(*,cfmt,advance='no') '#'\n    else if((i.eq.(y+1).and.j.eq.(x-1)) .or. (i.eq.(y-1).and.j.eq.(x+1))) then\n      write(*,cfmt,advance='no') '#'\n    else if(j.eq.50) then\n      write(*,cfmt,advance='no') '|'\n    else if(i.eq.2) then\n      write(*,cfmt,advance='no') '-'\n    else\n      write(*,cfmt,advance='no') ' '\n    end if\n  end do\n  write(*,*)\nend do\nend subroutine\n\n\n                                                 |                                                  \n-------------------------------------------------|--------------------------------------------------\n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                G                                 \n                                                 |               #G#                                \n                                                 |              #GOG#                               \n                                                 |               #G#                                \n                                                 |                G                                 \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n\n\n\n                                                 |                                                  \n-------------------------------------------------|--------------------------------------------------\n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                       G                          \n                                                 |                      #G#                         \n                                                 |                     #GOG#                        \n                                                 |                      #G#                         \n                                                 |                       G                          \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n\n\n\n                                                 |                                                  \n-------------------------------------------------|--------------------------------------------------\n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                            G                     \n                                                 |                           #G#                    \n                                                 |                          #GOG#                   \n                                                 |                           #G#                    \n                                                 |                            G                     \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n\n\n\n                                                 |                                                  \n-------------------------------------------------|--------------------------------------------------\n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                 G                \n                                                 |                                #G#               \n                                                 |                               #GOG#              \n                                                 |                                #G#               \n                                                 |                                 G                \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n\n\n\n                                                 |                                                  \n-------------------------------------------------|--------------------------------------------------\n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                     G            \n                                                 |                                    #G#           \n                                                 |                                   #GOG#          \n                                                 |                                    #G#           \n                                                 |                                     G            \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n\n\n\n                                                 |                                                  \n-------------------------------------------------|--------------------------------------------------\n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                       G          \n                                                 |                                      #G#         \n                                                 |                                     #GOG#        \n                                                 |                                      #G#         \n                                                 |                                       G          \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n\n\n\n                                                 |                                                  \n-------------------------------------------------|--------------------------------------------------\n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                         G        \n                                                 |                                        #G#       \n                                                 |                                       #GOG#      \n                                                 |                                        #G#       \n                                                 |                                         G        \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n\n\n\n                                                 |                                                  \n-------------------------------------------------|--------------------------------------------------\n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                          G       \n                                                 |                                         #G#      \n                                                 |                                        #GOG#     \n                                                 |                                         #G#      \n                                                 |                                          G       \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n                                                 |                                                  \n\n\n", "explain": "Uses system commands (gfortran) to clear the screen. An initial starting angle is allowed between 90 (to the right) and -90 degrees (to the left). It checks for incorrect inputs.\nA small preview (truncated to a few steps of the pendulum changing direction). Initial angle provided = 80 degrees.\n"}, {"task_name": "Animate a pendulum", "task_url": "https://rosettacode.org/wiki/Animate_a_pendulum", "task_cat": "Temporal media", "lang": "Go", "code": "\nUsing Library: GXUI from Github\npackage main\n\nimport (\n\t\"github.com/google/gxui\"\n\t\"github.com/google/gxui/drivers/gl\"\n\t\"github.com/google/gxui/math\"\n\t\"github.com/google/gxui/themes/dark\"\n\tomath \"math\"\n\t\"time\"\n)\n\n//Two pendulums animated\n//Top: Mathematical pendulum with small-angle approxmiation (not appropiate with PHI_ZERO=pi/2)\n//Bottom: Simulated with differential equation phi'' = g/l * sin(phi)\n\nconst (\n\tANIMATION_WIDTH  int     = 480\n\tANIMATION_HEIGHT int     = 320\n\tBALL_RADIUS      float32 = 25.0\n\tMETER_PER_PIXEL  float64 = 1.0 / 20.0\n\tPHI_ZERO         float64 = omath.Pi * 0.5\n)\n\nvar (\n\tl    float64 = float64(ANIMATION_HEIGHT) * 0.5\n\tfreq float64 = omath.Sqrt(9.81 / (l * METER_PER_PIXEL))\n)\n\ntype Pendulum interface {\n\tGetPhi() float64\n}\n\ntype mathematicalPendulum struct {\n\tstart time.Time\n}\n\nfunc (p *mathematicalPendulum) GetPhi() float64 {\n\tif (p.start == time.Time{}) {\n\t\tp.start = time.Now()\n\t}\n\tt := float64(time.Since(p.start).Nanoseconds()) / omath.Pow10(9)\n\treturn PHI_ZERO * omath.Cos(t*freq)\n}\n\ntype numericalPendulum struct {\n\tcurrentPhi float64\n\tangAcc     float64\n\tangVel     float64\n\tlastTime   time.Time\n}\n\nfunc (p *numericalPendulum) GetPhi() float64 {\n\tdt := 0.0\n\tif (p.lastTime != time.Time{}) {\n\t\tdt = float64(time.Since(p.lastTime).Nanoseconds()) / omath.Pow10(9)\n\t}\n\tp.lastTime = time.Now()\n\n\tp.angAcc = -9.81 / (float64(l) * METER_PER_PIXEL) * omath.Sin(p.currentPhi)\n\tp.angVel += p.angAcc * dt\n\tp.currentPhi += p.angVel * dt\n\n\treturn p.currentPhi\n}\n\nfunc draw(p Pendulum, canvas gxui.Canvas, x, y int) {\n\tattachment := math.Point{X: ANIMATION_WIDTH/2 + x, Y: y}\n\n\tphi := p.GetPhi()\n\tball := math.Point{X: x + ANIMATION_WIDTH/2 + math.Round(float32(l*omath.Sin(phi))), Y: y + math.Round(float32(l*omath.Cos(phi)))}\n\n\tline := gxui.Polygon{gxui.PolygonVertex{attachment, 0}, gxui.PolygonVertex{ball, 0}}\n\n\tcanvas.DrawLines(line, gxui.DefaultPen)\n\n\tm := math.Point{int(BALL_RADIUS), int(BALL_RADIUS)}\n\trect := math.Rect{ball.Sub(m), ball.Add(m)}\n\tcanvas.DrawRoundedRect(rect, BALL_RADIUS, BALL_RADIUS, BALL_RADIUS, BALL_RADIUS, gxui.TransparentPen, gxui.CreateBrush(gxui.Yellow))\n}\n\nfunc appMain(driver gxui.Driver) {\n\ttheme := dark.CreateTheme(driver)\n\n\twindow := theme.CreateWindow(ANIMATION_WIDTH, 2*ANIMATION_HEIGHT, \"Pendulum\")\n\twindow.SetBackgroundBrush(gxui.CreateBrush(gxui.Gray50))\n\n\timage := theme.CreateImage()\n\n\tticker := time.NewTicker(time.Millisecond * 15)\n\tpendulum := &mathematicalPendulum{}\n\tpendulum2 := &numericalPendulum{PHI_ZERO, 0.0, 0.0, time.Time{}}\n\n\tgo func() {\n\t\tfor _ = range ticker.C {\n\t\t\tcanvas := driver.CreateCanvas(math.Size{ANIMATION_WIDTH, 2 * ANIMATION_HEIGHT})\n\t\t\tcanvas.Clear(gxui.White)\n\n\t\t\tdraw(pendulum, canvas, 0, 0)\n\t\t\tdraw(pendulum2, canvas, 0, ANIMATION_HEIGHT)\n\n\t\t\tcanvas.Complete()\n\t\t\tdriver.Call(func() {\n\t\t\t\timage.SetCanvas(canvas)\n\t\t\t})\n\t\t}\n\t}()\n\n\twindow.AddChild(image)\n\n\twindow.OnClose(ticker.Stop)\n\twindow.OnClose(driver.Terminate)\n}\n\nfunc main() {\n\tgl.StartDriver(appMain)\n}\n\n", "explain": ""}, {"task_name": "Animate a pendulum", "task_url": "https://rosettacode.org/wiki/Animate_a_pendulum", "task_cat": "Temporal media", "lang": "Delphi", "code": "\nLibrary:  Vcl.Forms\nLibrary:  Vcl.Graphics\nLibrary:  Vcl.ExtCtrls\nTranslation of: C#\nunit main;\n\ninterface\n\nuses\n  Vcl.Forms, Vcl.Graphics, Vcl.ExtCtrls;\n\ntype\n  TForm1 = class(TForm)\n    procedure FormCreate(Sender: TObject);\n    procedure FormDestroy(Sender: TObject);\n  private\n    Timer: TTimer;\n    angle, angleAccel, angleVelocity, dt: double;\n    len: Integer;\n    procedure Tick(Sender: TObject);\n  end;\n\nvar\n  Form1: TForm1;\n\nimplementation\n\n{$R *.dfm}\n\nprocedure TForm1.FormCreate(Sender: TObject);\nbegin\n  Width := 200;\n  Height := 200;\n  DoubleBuffered := True;\n  Timer := TTimer.Create(nil);\n  Timer.Interval := 30;\n  Timer.OnTimer := Tick;\n  Caption := 'Pendulum';\n\n  // initialize\n  angle := PI / 2;\n  angleAccel := 0;\n  angleVelocity := 0;\n  dt := 0.1;\n  len := 50;\nend;\n\nprocedure TForm1.FormDestroy(Sender: TObject);\nbegin\n  Timer.Free;\nend;\n\nprocedure TForm1.Tick(Sender: TObject);\nconst\n  HalfPivot = 4;\n  HalfBall = 7;\nvar\n  anchorX, anchorY, ballX, ballY: Integer;\nbegin\n  anchorX := Width div 2 - 12;\n  anchorY := Height div 4;\n  ballX := anchorX + Trunc(Sin(angle) * len);\n  ballY := anchorY + Trunc(Cos(angle) * len);\n\n  angleAccel := -9.81 / len * Sin(angle);\n  angleVelocity := angleVelocity + angleAccel * dt;\n  angle := angle + angleVelocity * dt;\n\n  with canvas do\n  begin\n    Pen.Color := clBlack;\n\n    with Brush do\n    begin\n      Style := bsSolid;\n      Color := clWhite;\n    end;\n\n    FillRect(ClientRect);\n    MoveTo(anchorX, anchorY);\n    LineTo(ballX, ballY);\n\n    Brush.Color := clGray;\n    Ellipse(anchorX - HalfPivot, anchorY - HalfPivot, anchorX + HalfPivot,\n      anchorY + HalfPivot);\n\n    Brush.Color := clYellow;\n    Ellipse(ballX - HalfBall, ballY - HalfBall, ballX + HalfBall, ballY + HalfBall);\n  end;\nend;\n\nend.\n\n", "explain": ""}, {"task_name": "Animate a pendulum", "task_url": "https://rosettacode.org/wiki/Animate_a_pendulum", "task_cat": "Temporal media", "lang": "Ruby", "code": "\nLibrary: Ruby/Tk[edit]\nTranslation of: Tcl\n\nrequire 'tk'\n\n$root = TkRoot.new(\"title\" => \"Pendulum Animation\")\n$canvas = TkCanvas.new($root) do\n  width 320\n  height 200\n  create TkcLine, 0,25,320,25,   'tags' => 'plate', 'width' => 2, 'fill' => 'grey50'\n  create TkcOval, 155,20,165,30, 'tags' => 'pivot', 'outline' => \"\", 'fill' => 'grey50'\n  create TkcLine, 1,1,1,1, 'tags' => 'rod', 'width' => 3, 'fill' => 'black'\n  create TkcOval, 1,1,2,2, 'tags' => 'bob', 'outline' => 'black', 'fill' => 'yellow'\nend\n$canvas.raise('pivot')\n$canvas.pack('fill' => 'both', 'expand' => true)\n\n$Theta = 45.0\n$dTheta = 0.0\n$length = 150\n$homeX = 160\n$homeY = 25\n\ndef show_pendulum\n  angle = $Theta * Math::PI / 180\n  x = $homeX + $length * Math.sin(angle)\n  y = $homeY + $length * Math.cos(angle)\n  $canvas.coords('rod', $homeX, $homeY, x, y)\n  $canvas.coords('bob', x-15, y-15, x+15, y+15)\nend\n\ndef recompute_angle\n  scaling = 3000.0 / ($length ** 2)\n  # first estimate\n  firstDDTheta = -Math.sin($Theta * Math::PI / 180) * scaling\n  midDTheta = $dTheta + firstDDTheta\n  midTheta = $Theta + ($dTheta + midDTheta)/2\n  # second estimate\n  midDDTheta = -Math.sin(midTheta * Math::PI / 180) * scaling\n  midDTheta = $dTheta + (firstDDTheta + midDDTheta)/2\n  midTheta = $Theta + ($dTheta + midDTheta)/2\n  # again, first\n  midDDTheta = -Math.sin(midTheta * Math::PI / 180) * scaling\n  lastDTheta = midDTheta + midDDTheta\n  lastTheta = midTheta + (midDTheta + lastDTheta)/2\n  # again, second\n  lastDDTheta = -Math.sin(lastTheta * Math::PI/180) * scaling\n  lastDTheta = midDTheta + (midDDTheta + lastDDTheta)/2\n  lastTheta = midTheta + (midDTheta + lastDTheta)/2\n  # Now put the values back in our globals\n  $dTheta  = lastDTheta\n  $Theta = lastTheta\nend\n\ndef animate\n  recompute_angle\n  show_pendulum\n  $after_id = $root.after(15) {animate}\nend\n\nshow_pendulum\n$after_id = $root.after(500) {animate}\n\n$canvas.bind('<Destroy>') {$root.after_cancel($after_id)}\n\nTk.mainloop\n\nLibrary: Shoes[edit]\nShoes.app(:width => 320, :height => 200) do\n  @centerX = 160\n  @centerY = 25\n  @length = 150\n  @diameter = 15\n\n  @Theta = 45.0\n  @dTheta = 0.0\n\n  stroke gray\n  strokewidth 3\n  line 0,25,320,25\n  oval 155,20,10\n\n  stroke black\n  @rod = line(@centerX, @centerY, @centerX, @centerY + @length)\n  @bob = oval(@centerX - @diameter, @centerY + @length - @diameter, 2*@diameter)\n\n  animate(24) do |i|\n    recompute_angle\n    show_pendulum\n  end\n\n  def show_pendulum\n    angle = (90 + @Theta) * Math::PI / 180\n    x = @centerX + (Math.cos(angle) * @length).to_i\n    y = @centerY + (Math.sin(angle) * @length).to_i\n\n    @rod.remove\n    strokewidth 3\n    @rod = line(@centerX, @centerY, x, y)\n    @bob.move(x-@diameter, y-@diameter)\n  end\n\n  def recompute_angle\n    scaling = 3000.0 / (@length **2)\n    # first estimate\n    firstDDTheta = -Math.sin(@Theta * Math::PI / 180) * scaling\n    midDTheta = @dTheta + firstDDTheta\n    midTheta = @Theta + (@dTheta + midDTheta)/2\n    # second estimate\n    midDDTheta = -Math.sin(midTheta * Math::PI / 180) * scaling\n    midDTheta = @dTheta + (firstDDTheta + midDDTheta)/2\n    midTheta = @Theta + (@dTheta + midDTheta)/2\n    # again, first\n    midDDTheta = -Math.sin(midTheta * Math::PI / 180) * scaling\n    lastDTheta = midDTheta + midDDTheta\n    lastTheta = midTheta + (midDTheta + lastDTheta)/2\n    # again, second\n    lastDDTheta = -Math.sin(lastTheta * Math::PI/180) * scaling\n    lastDTheta = midDTheta + (midDDTheta + lastDDTheta)/2\n    lastTheta = midTheta + (midDTheta + lastDTheta)/2\n    # Now put the values back in our globals\n    @dTheta  = lastDTheta\n    @Theta = lastTheta\n  end\nend\n\nLibrary: Ruby/Gosu[edit]\n#!/bin/ruby\n\nbegin; require 'rubygems'; rescue; end\n\nrequire 'gosu'\ninclude Gosu\n\n# Screen size\nW = 640\nH = 480\n\n# Full-screen mode\nFS = false\n\n# Screen update rate (Hz)\nFPS = 60\n\nclass Pendulum\n\n  attr_accessor :theta, :friction\n\n  def initialize( win, x, y, length, radius, bob = true, friction = false)\n    @win = win\n    @centerX = x\n    @centerY = y\n    @length = length\n    @radius = radius\n    @bob = bob\n    @friction = friction\n\n    @theta = 60.0\n    @omega = 0.0\n    @scale = 2.0 / FPS\n  end\n\n  def draw\n    @win.translate(@centerX, @centerY) {\n      @win.rotate(@theta) {\n        @win.draw_quad(-1, 0, 0x3F_FF_FF_FF, 1, 0, 0x3F_FF_FF_00, 1, @length, 0x3F_FF_FF_00, -1, @length, 0x3F_FF_FF_FF )\n        if @bob\n          @win.translate(0, @length) {\n            @win.draw_quad(0, -@radius, Color::RED, @radius, 0, Color::BLUE, 0, @radius, Color::WHITE, -@radius, 0, Color::BLUE )\n          }\n        end\n      }\n    }\n  end\n\n  def update\n    # Thanks to Hugo Elias for the formula (and explanation thereof)\n    @theta += @omega\n    @omega = @omega - (Math.sin(@theta * Math::PI / 180) / (@length * @scale))\n    @theta *= 0.999 if @friction\n  end\n\nend # Pendulum class\n\nclass GfxWindow < Window\n\n  def initialize\n    # Initialize the base class\n    super W, H, FS, 1.0 / FPS * 1000\n    # self.caption = \"You're getting sleeeeepy...\"\n    self.caption = \"Ruby/Gosu Pendulum Simulator (Space toggles friction)\"\n\n    @n = 1  # Try changing this number!\n    @pendulums = []\n    (1..@n).each do |i|\n      @pendulums.push Pendulum.new( self, W / 2, H / 10, H * 0.75 * (i / @n.to_f), H / 60 )\n    end\n\n  end\n\n  def draw\n    @pendulums.each { |pen| pen.draw }\n  end\n\n  def update\n    @pendulums.each { |pen| pen.update }\n  end\n\n  def button_up(id)\n    if id == KbSpace\n      @pendulums.each { |pen|\n        pen.friction = !pen.friction\n        pen.theta = (pen.theta <=> 0) * 45.0 unless pen.friction\n      }\n    else\n      close\n    end\n  end\n\n  def needs_cursor?()\n    true\n  end\n\nend # GfxWindow class\n\nbegin\n  GfxWindow.new.show\nrescue Exception => e\n  puts e.message, e.backtrace\n  gets\nend\n\n", "explain": "This does not have the window resizing handling that Tcl does -- \nI did not spend enough time in the docs to figure out \nhow to get the new window size out of the configuration event.  \nOf interest when running this pendulum side-by-side with the Tcl one: \nthe Tcl pendulum swings noticibly faster.\n"}, {"task_name": "Animate a pendulum", "task_url": "https://rosettacode.org/wiki/Animate_a_pendulum", "task_cat": "Temporal media", "lang": "Rust", "code": "\nTranslation of: C sharp\n\nLibrary: piston_window\n// using version 0.107.0 of piston_window\nuse piston_window::{clear, ellipse, line_from_to, PistonWindow, WindowSettings};\n\nconst PI: f64 = std::f64::consts::PI;\nconst WIDTH: u32 = 640;\nconst HEIGHT: u32 = 480;\n\nconst ANCHOR_X: f64 = WIDTH as f64 / 2. - 12.;\nconst ANCHOR_Y: f64 = HEIGHT as f64 / 4.;\nconst ANCHOR_ELLIPSE: [f64; 4] = [ANCHOR_X - 3., ANCHOR_Y - 3., 6., 6.];\n\nconst ROPE_ORIGIN: [f64; 2] = [ANCHOR_X, ANCHOR_Y];\nconst ROPE_LENGTH: f64 = 200.;\nconst ROPE_THICKNESS: f64 = 1.;\n\nconst DELTA: f64 = 0.05;\nconst STANDARD_GRAVITY_VALUE: f64 = -9.81;\n\n// RGBA Colors\nconst BLACK: [f32; 4] = [0., 0., 0., 1.];\nconst RED: [f32; 4] = [1., 0., 0., 1.];\nconst GOLD: [f32; 4] = [216. / 255., 204. / 255., 36. / 255., 1.0];\nfn main() {\n    let mut window: PistonWindow = WindowSettings::new(\"Pendulum\", [WIDTH, HEIGHT])\n        .exit_on_esc(true)\n        .build()\n        .unwrap();\n\n    let mut angle = PI / 2.;\n    let mut angular_vel = 0.;\n\n    while let Some(event) = window.next() {\n        let (angle_sin, angle_cos) = angle.sin_cos();\n        let ball_x = ANCHOR_X + angle_sin * ROPE_LENGTH;\n        let ball_y = ANCHOR_Y + angle_cos * ROPE_LENGTH;\n\n        let angle_accel = STANDARD_GRAVITY_VALUE / ROPE_LENGTH * angle_sin;\n        angular_vel += angle_accel * DELTA;\n        angle += angular_vel * DELTA;\n        let rope_end = [ball_x, ball_y];\n        let ball_ellipse = [ball_x - 7., ball_y - 7., 14., 14.];\n\n        window.draw_2d(&event, |context, graphics, _device| {\n            clear([1.0; 4], graphics);\n            line_from_to(\n                BLACK,\n                ROPE_THICKNESS,\n                ROPE_ORIGIN,\n                rope_end,\n                context.transform,\n                graphics,\n            );\n            ellipse(RED, ANCHOR_ELLIPSE, context.transform, graphics);\n            ellipse(GOLD, ball_ellipse, context.transform, graphics);\n        });\n    }\n}\n\n", "explain": "This is a translation of the C# code, albeit with a more explicit declaration of constants. \nWhen moving the mouse over the viewport, the framerate accelerates somehow - any edits to keep the framerate constant is welcome!\n"}, {"task_name": "Animate a pendulum", "task_url": "https://rosettacode.org/wiki/Animate_a_pendulum", "task_cat": "Temporal media", "lang": "R", "code": "\nlibrary(DescTools)\n\npendulum<-function(length=5,radius=1,circle.color=\"white\",bg.color=\"white\"){\n  tseq = c(seq(0,pi,by=.1),seq(pi,0,by=-.1))\n  slow=.27;fast=.07\n  sseq = c(seq(slow,fast,length.out = length(tseq)/4),seq(fast,slow,length.out = length(tseq)/4),seq(slow,fast,length.out = length(tseq)/4),seq(fast,slow,length.out = length(tseq)/4))\n  plot(0,0,xlim=c((-length-radius)*1.2,(length+radius)*1.2),ylim=c((-length-radius)*1.2,0),xaxt=\"n\",yaxt=\"n\",xlab=\"\",ylab=\"\")\n  cat(\"Press Esc to end animation\")\n\n  while(T){\n    for(i in 1:length(tseq)){\n      rect(par(\"usr\")[1],par(\"usr\")[3],par(\"usr\")[2],par(\"usr\")[4],col = bg.color)\n      abline(h=0,col=\"grey\")\n      points(0,0)\n      DrawCircle((radius+length)*cos(tseq[i]),(radius+length)*-sin(tseq[i]),r.out=radius,col=circle.color)\n      lines(c(0,length*cos(tseq[i])),c(0,length*-sin(tseq[i])))\n      Sys.sleep(sseq[i])\n    }\n  }\n  \n}\n\npendulum(5,1,\"gold\",\"lightblue\")\n\n", "explain": ""}, {"task_name": "Animate a pendulum", "task_url": "https://rosettacode.org/wiki/Animate_a_pendulum", "task_cat": "Temporal media", "lang": "Ada", "code": "\n\ngeneric\n   type Float_Type is digits <>;\n   Gravitation : Float_Type;\npackage Pendulums is\n   type Pendulum is private;\n   function New_Pendulum (Length : Float_Type;\n                          Theta0 : Float_Type) return Pendulum;\n   function Get_X (From : Pendulum) return Float_Type;\n   function Get_Y (From : Pendulum) return Float_Type;\n   procedure Update_Pendulum (Item : in out Pendulum; Time : in Duration);\nprivate\n   type Pendulum is record\n      Length   : Float_Type;\n      Theta    : Float_Type;\n      X        : Float_Type;\n      Y        : Float_Type;\n      Velocity : Float_Type;\n   end record;\nend Pendulums;\n\n\nwith Ada.Numerics.Generic_Elementary_Functions;\npackage body Pendulums is\n   package Math is new Ada.Numerics.Generic_Elementary_Functions (Float_Type);\n\n   function New_Pendulum (Length : Float_Type;\n                          Theta0 : Float_Type) return Pendulum is\n      Result : Pendulum;\n   begin\n      Result.Length   := Length;\n      Result.Theta    := Theta0 / 180.0 * Ada.Numerics.Pi;\n      Result.X        := Math.Sin (Theta0) * Length;\n      Result.Y        := Math.Cos (Theta0) * Length;\n      Result.Velocity := 0.0;\n      return Result;\n   end New_Pendulum;\n\n   function Get_X (From : Pendulum) return Float_Type is\n   begin\n      return From.X;\n   end Get_X;\n\n   function Get_Y (From : Pendulum) return Float_Type is\n   begin\n      return From.Y;\n   end Get_Y;\n\n   procedure Update_Pendulum (Item : in out Pendulum; Time : in Duration) is\n      Acceleration : constant Float_Type := Gravitation / Item.Length *\n                                            Math.Sin (Item.Theta);\n   begin\n         Item.X        := Math.Sin (Item.Theta) * Item.Length;\n         Item.Y        := Math.Cos (Item.Theta) * Item.Length;\n         Item.Velocity := Item.Velocity +\n                          Acceleration  * Float_Type (Time);\n         Item.Theta    := Item.Theta +\n                          Item.Velocity * Float_Type (Time);\n   end Update_Pendulum;\nend Pendulums;\n\n\nwith Ada.Text_IO;\nwith Ada.Calendar;\nwith Pendulums;\n\nprocedure Main is\n   package Float_Pendulum is new Pendulums (Float, -9.81);\n   use Float_Pendulum;\n   use type Ada.Calendar.Time;\n\n   My_Pendulum : Pendulum := New_Pendulum (10.0, 30.0);\n   Now, Before : Ada.Calendar.Time;\nbegin\n   Before := Ada.Calendar.Clock;\n   loop\n      Delay 0.1;\n      Now := Ada.Calendar.Clock;\n      Update_Pendulum (My_Pendulum, Now - Before);\n      Before := Now;\n      -- output positions relative to origin\n      -- replace with graphical output if wanted\n      Ada.Text_IO.Put_Line (\" X: \" & Float'Image (Get_X (My_Pendulum)) &\n                            \" Y: \" & Float'Image (Get_Y (My_Pendulum)));\n   end loop;\nend Main;\n\n\nOutput:\n X:  5.00000E+00 Y:  8.66025E+00\n X:  4.95729E+00 Y:  8.68477E+00\n X:  4.87194E+00 Y:  8.73294E+00\n X:  4.74396E+00 Y:  8.80312E+00\n X:  4.57352E+00 Y:  8.89286E+00\n X:  4.36058E+00 Y:  8.99919E+00\n X:  4.10657E+00 Y:  9.11790E+00\n X:  3.81188E+00 Y:  9.24498E+00\n X:  3.47819E+00 Y:  9.37562E+00\n X:  3.10714E+00 Y:  9.50504E+00\n X:  2.70211E+00 Y:  9.62801E+00\n X:  2.26635E+00 Y:  9.73980E+00\n X:  1.80411E+00 Y:  9.83591E+00\n X:  1.32020E+00 Y:  9.91247E+00\n X:  8.20224E-01 Y:  9.96630E+00\n X:  3.10107E-01 Y:  9.99519E+00\n X: -2.03865E-01 Y:  9.99792E+00\n X: -7.15348E-01 Y:  9.97438E+00\n X: -1.21816E+00 Y:  9.92553E+00\n X: -1.70581E+00 Y:  9.85344E+00\n X: -2.17295E+00 Y:  9.76106E+00\n X: -2.61452E+00 Y:  9.65216E+00\n X: -3.02618E+00 Y:  9.53112E+00\n X: -3.40427E+00 Y:  9.40271E+00\n X: -3.74591E+00 Y:  9.27190E+00\n X: -4.04873E+00 Y:  9.14373E+00\n X: -4.31141E+00 Y:  9.02285E+00\n X: -4.53271E+00 Y:  8.91373E+00\n X: -4.71186E+00 Y:  8.82034E+00\n X: -4.84868E+00 Y:  8.74587E+00\n X: -4.94297E+00 Y:  8.69293E+00\n X: -4.99459E+00 Y:  8.66337E+00\n X: -5.00352E+00 Y:  8.65822E+00\n...\n", "explain": "This does not use a GUI, it simply animates the pendulum and prints out the positions. If you want, you can replace the output method with graphical update methods.\nX and Y are relative positions of the pendulum to the anchor.\npendulums.ads:\npendulums.adb:\nexample main.adb:\n"}, {"task_name": "Animate a pendulum", "task_url": "https://rosettacode.org/wiki/Animate_a_pendulum", "task_cat": "Temporal media", "lang": "Julia", "code": "\nDifferential equation based solution using the Luxor graphics library.using Luxor\nusing Colors\nusing BoundaryValueDiffEq\n \n# constants for differential equations and movie\nconst g = 9.81\nconst L = 1.0                         # pendulum length in meters\nconst bobd = 0.10                     # pendulum bob diameter in meters\nconst framerate = 50.0                # intended frame rate/sec\nconst t0 = 0.0                        # start time (s)\nconst tf = 2.3                        # end simulation time (s)\nconst dtframe = 1.0/framerate         # time increment per frame\nconst tspan = LinRange(t0, tf, Int(floor(tf*framerate)))  # array of time points in animation\n \nconst bgcolor = \"black\"               # gif background\nconst leaderhue = (0.80, 0.70, 0.20)  # gif swing arm hue light gold\nconst hslcolors = [HSL(col) for col in (distinguishable_colors(\n                   Int(floor(tf*framerate)+3),[RGB(1,1,1)])[2:end])]\nconst giffilename = \"pendulum.gif\"    # output file\n \n# differential equations\nsimplependulum(du, u, p, t) = (\u03b8=u[1]; d\u03b8=u[2]; du[1]=d\u03b8; du[2]=-(g/L)*sin(\u03b8))\nbc2(residual, u, p, t) = (residual[1] = u[end\u00f72][1] + pi/2; residual[2] = u[end][1] - pi/2)\nbvp2 = BVProblem(simplependulum, bc2, [pi/2,pi/2], (tspan[1],tspan[end]))\nsol2 = solve(bvp2, MIRK4(), dt=dtframe) # use the MIRK4 solver for TwoPointBVProblem\n \n# movie making background\nbackdrop(scene, framenumber) = background(bgcolor)\n \nfunction frame(scene, framenumber)\n    u1, u2 = sol2.u[framenumber]\n    y, x = L*cos(u1), L*sin(u1)\n    sethue(leaderhue)\n    poly([Point(-4.0, 0.0), Point(4.0, 0.0),\n          Point(160.0x,160.0y)], :fill)\n    sethue(Colors.HSV(framenumber*4.0, 1, 1))\n    circle(Point(160.0x,160.0y), 160bobd, :fill)\n    text(string(\"frame $framenumber of $(scene.framerange.stop)\"),\n        Point(0.0, -190.0),\n        halign=:center)\nend\n \nmuv = Movie(400, 400, \"Pendulum Demo\", 1:length(tspan))\nanimate(muv, [Scene(muv, backdrop),\n              Scene(muv, frame, easingfunction=easeinoutcubic)],\n              creategif=true, pathname=giffilename)\n\n\nOutput:\n\n\n", "explain": "\n"}, {"task_name": "Animate a pendulum", "task_url": "https://rosettacode.org/wiki/Animate_a_pendulum", "task_cat": "Temporal media", "lang": "Kotlin", "code": "\n\nimport java.awt.*\nimport java.util.concurrent.*\nimport javax.swing.*\n\nclass Pendulum(private val length: Int) : JPanel(), Runnable {\n    init {\n        val f = JFrame(\"Pendulum\")\n        f.add(this)\n        f.defaultCloseOperation = JFrame.EXIT_ON_CLOSE\n        f.pack()\n        f.isVisible = true\n        isDoubleBuffered = true\n    }\n\n    override fun paint(g: Graphics) {\n        with(g) {\n            color = Color.WHITE\n            fillRect(0, 0, width, height)\n            color = Color.BLACK\n            val anchor = Element(width / 2, height / 4)\n            val ball = Element((anchor.x + Math.sin(angle) * length).toInt(), (anchor.y + Math.cos(angle) * length).toInt())\n            drawLine(anchor.x, anchor.y, ball.x, ball.y)\n            fillOval(anchor.x - 3, anchor.y - 4, 7, 7)\n            fillOval(ball.x - 7, ball.y - 7, 14, 14)\n        }\n    }\n\n    override fun run() {\n        angleVelocity += -9.81 / length * Math.sin(angle) * dt\n        angle += angleVelocity * dt\n        repaint()\n    }\n\n    override fun getPreferredSize() = Dimension(2 * length + 50, length / 2 * 3)\n\n    private data class Element(val x: Int, val y: Int)\n\n    private val dt = 0.1\n    private var angle = Math.PI / 2\n    private var angleVelocity = 0.0\n}\n\nfun main(a: Array<String>) {\n    val executor = Executors.newSingleThreadScheduledExecutor()\n    executor.scheduleAtFixedRate(Pendulum(200), 0, 15, TimeUnit.MILLISECONDS)\n}\n\n", "explain": "Conversion of Java snippet.\n"}, {"task_name": "Animate a pendulum", "task_url": "https://rosettacode.org/wiki/Animate_a_pendulum", "task_cat": "Temporal media", "lang": "Perl", "code": "\nLibrary: Perl/Tk\nTranslation of: Tcl\n\nuse strict;\nuse warnings;\nuse Tk; \nuse Math::Trig qw/:pi/;\n\nmy $root =  new MainWindow( -title => 'Pendulum Animation' );\nmy $canvas = $root->Canvas(-width => 320, -height => 200);\nmy $after_id;\n\nfor ($canvas) {\n\t$_->createLine(   0,  25, 320,  25, -tags => [qw/plate/], -width => 2, -fill => 'grey50' );\n\t$_->createOval( 155,  20, 165,  30, -tags => [qw/pivot outline/], -fill => 'grey50' );\n\t$_->createLine(   1,   1,    1,  1, -tags => [qw/rod width/], -width => 3, -fill => 'black' );\n\t$_->createOval(   1,   1,    2,  2, -tags => [qw/bob outline/], -fill => 'yellow' );\n}\n\n$canvas->raise('pivot');\n$canvas->pack(-fill => 'both', -expand => 1);\nmy ($Theta, $dTheta, $length, $homeX, $homeY) =\n\t(45, 0, 150, 160, 25);\n\nsub show_pendulum {\n  my $angle = $Theta * pi() / 180;\n  my $x = $homeX + $length * sin($angle);\n  my $y = $homeY + $length * cos($angle);\n  $canvas->coords('rod', $homeX, $homeY, $x, $y);\n  $canvas->coords('bob', $x-15, $y-15, $x+15, $y+15);\n}\n\n\n \nsub recompute_angle {\n  my $scaling = 3000.0 / ($length ** 2);\n  # first estimate\n  my $firstDDTheta = -sin($Theta * pi / 180) * $scaling;\n  my $midDTheta = $dTheta + $firstDDTheta;\n  my $midTheta = $Theta + ($dTheta + $midDTheta)/2;\n  # second estimate\n  my $midDDTheta = -sin($midTheta * pi/ 180) * $scaling;\n  $midDTheta = $dTheta + ($firstDDTheta + $midDDTheta)/2;\n  $midTheta = $Theta + ($dTheta + $midDTheta)/2;\n  # again, first\n  $midDDTheta = -sin($midTheta * pi/ 180) * $scaling;\n  my $lastDTheta = $midDTheta + $midDDTheta;\n  my $lastTheta = $midTheta + ($midDTheta + $lastDTheta)/2;\n  # again, second\n  my $lastDDTheta = -sin($lastTheta * pi/180) * $scaling;\n  $lastDTheta = $midDTheta + ($midDDTheta + $lastDDTheta)/2;\n  $lastTheta = $midTheta + ($midDTheta + $lastDTheta)/2;\n  # Now put the values back in our globals\n  $dTheta  = $lastDTheta;\n  $Theta = $lastTheta;\n}\n \n\nsub animate {\n  recompute_angle;\n  show_pendulum;\n  $after_id = $root->after(15 => sub {animate() });\n}\n\nshow_pendulum;\n$after_id = $root->after(500 => sub {animate});\n \n$canvas->bind('<Destroy>' => sub {$after_id->cancel});\nMainLoop;\n\n", "explain": "This does not have the window resizing handling that Tcl does.\n"}, {"task_name": "Animate a pendulum", "task_url": "https://rosettacode.org/wiki/Animate_a_pendulum", "task_cat": "Temporal media", "lang": "Prolog", "code": "\n\n:- use_module(library(pce)).\n\npendulum :-\n\tnew(D, window('Pendulum')),\n\tsend(D, size, size(560, 300)),\n\tnew(Line, line(80, 50, 480, 50)),\n\tsend(D, display, Line),\n\tnew(Circle, circle(20)),\n\tsend(Circle, fill_pattern,  colour(@default, 0, 0, 0)),\n\tnew(Boule, circle(60)),\n\tsend(Boule, fill_pattern,  colour(@default, 0, 0, 0)),\n\tsend(D, display, Circle, point(270,40)),\n\tsend(Circle, handle, handle(h/2, w/2, in)),\n\tsend(Boule, handle, handle(h/2, w/2, out)),\n\tsend(Circle, connect, Boule, link(in, out, line(0,0,0,0,none))),\n\tnew(Anim, animation(D, 0.0, Boule, 200.0)),\n\tsend(D, done_message, and(message(Anim, free),\n\t\t\t\t  message(Boule, free),\n\t\t\t\t  message(Circle, free),\n\t\t\t\t  message(@receiver,destroy))),\n\tsend(Anim?mytimer, start),\n\tsend(D, open).\n\n\n\n\n:- pce_begin_class(animation(window, angle, boule, len_pendulum), object).\nvariable(window, object,  both, \"Display window\").\nvariable(boule,  object, both,  \"bowl of the pendulum\").\nvariable(len_pendulum,    object, both,  \"len of the pendulum\").\nvariable(angle,  object, both,  \"angle with the horizontal\").\nvariable(delta,    object, both,  \"increment of the angle\").\nvariable(mytimer, timer, both, \"timer of the animation\").\n\ninitialise(P, W:object, A:object, B : object, L:object) :->\n        \"Creation of the object\"::\n        send(P, window, W),\n        send(P, angle, A),\n        send(P, boule, B),\n        send(P, len_pendulum, L),\n        send(P, delta, 0.01),\n\tsend(P, mytimer, new(_, timer(0.01,message(P, anim_message)))).\n\n% method called when the object is destroyed\n% first the timer is stopped\n% then all the resources are freed\nunlink(P) :->\n\tsend(P?mytimer, stop),\n\tsend(P, send_super, unlink).\n\n\n% message processed by the timer\nanim_message(P) :->\n\tget(P, angle, A),\n\tget(P, len_pendulum, L),\n\tcalc(A, L, X, Y),\n\tget(P, window, W),\n\tget(P, boule, B),\n\tsend(W, display, B, point(X,Y)),\n\t% computation of the next position\n\tget(P, delta, D),\n\tnext_Angle(A, D, NA, ND),\n\tsend(P, angle, NA),\n\tsend(P, delta, ND).\n\n:- pce_end_class.\n\n% computation of the position of the bowl.\ncalc(Ang, Len, X, Y) :-\n\tX is Len * cos(Ang)+ 250,\n\tY is Len * sin(Ang) + 20.\n\n\n% computation of the next angle\n% if we reach 0 or pi, delta change.\nnext_Angle(A, D, NA, ND) :-\n\tNA is D + A,\n\t(((D > 0,   abs(pi-NA) < 0.01); (D < 0, abs(NA) < 0.01))->\n\t  ND = - D;\n\t  ND = D).\n\n", "explain": "SWI-Prolog has a graphic interface XPCE.\n"}, {"task_name": "Animate a pendulum", "task_url": "https://rosettacode.org/wiki/Animate_a_pendulum", "task_cat": "Temporal media", "lang": "Lua", "code": "\n\nfunction degToRad( d )\n    return d * 0.01745329251\nend\n\nfunction love.load()\n    g = love.graphics\n    rodLen, gravity, velocity, acceleration = 260, 3, 0, 0\n    halfWid, damp = g.getWidth() / 2, .989\n    posX, posY, angle = halfWid\n    TWO_PI, angle = math.pi * 2, degToRad( 90 )\nend\n\nfunction love.update( dt )\n    acceleration = -gravity / rodLen * math.sin( angle )\n    angle = angle + velocity; if angle > TWO_PI then angle = 0 end\n    velocity = velocity + acceleration\n    velocity = velocity * damp\n    posX = halfWid + math.sin( angle ) * rodLen\n    posY = math.cos( angle ) * rodLen\nend\n\nfunction love.draw()\n    g.setColor( 250, 0, 250 )\n    g.circle( \"fill\", halfWid, 0, 8 )\n    g.line( halfWid, 4, posX, posY )\n    g.setColor( 250, 100, 20 )\n    g.circle( \"fill\", posX, posY, 20 )\nend\n\n", "explain": "Needs L\u00d6VE 2D Engine\n"}, {"task_name": "Animate a pendulum", "task_url": "https://rosettacode.org/wiki/Animate_a_pendulum", "task_cat": "Temporal media", "lang": "Scala", "code": "\nLibrary: Scala\nimport java.awt.Color\nimport java.util.concurrent.{Executors, TimeUnit}\n\nimport scala.swing.{Graphics2D, MainFrame, Panel, SimpleSwingApplication}\nimport scala.swing.Swing.pair2Dimension\n\nobject Pendulum extends SimpleSwingApplication {\n  val length = 100\n\n  lazy val ui = new Panel {\n    import scala.math.{cos, Pi, sin}\n\n    background = Color.white\n    preferredSize = (2 * length + 50, length / 2 * 3)\n    peer.setDoubleBuffered(true)\n\n    var angle: Double = Pi / 2\n\n    override def paintComponent(g: Graphics2D): Unit = {\n      super.paintComponent(g)\n\n      val (anchorX, anchorY) = (size.width / 2, size.height / 4)\n      val (ballX, ballY) =\n        (anchorX + (sin(angle) * length).toInt, anchorY + (cos(angle) * length).toInt)\n      g.setColor(Color.lightGray)\n      g.drawLine(anchorX - 2 * length, anchorY, anchorX + 2 * length, anchorY)\n      g.setColor(Color.black)\n      g.drawLine(anchorX, anchorY, ballX, ballY)\n      g.fillOval(anchorX - 3, anchorY - 4, 7, 7)\n      g.drawOval(ballX - 7, ballY - 7, 14, 14)\n      g.setColor(Color.yellow)\n      g.fillOval(ballX - 7, ballY - 7, 14, 14)\n    }\n\n    val animate: Runnable = new Runnable {\n      var angleVelocity = 0.0\n      var dt = 0.1\n\n      override def run(): Unit = {\n        angleVelocity += -9.81 / length * Math.sin(angle) * dt\n        angle += angleVelocity * dt\n        repaint()\n      }\n    }\n  }\n\n  override def top = new MainFrame {\n    title = \"Rosetta Code >>> Task: Animate a pendulum | Language: Scala\"\n    contents = ui\n    centerOnScreen()\n    Executors.\n      newSingleThreadScheduledExecutor().\n      scheduleAtFixedRate(ui.animate, 0, 15, TimeUnit.MILLISECONDS)\n  }\n}\n\n", "explain": ""}, {"task_name": "Animate a pendulum", "task_url": "https://rosettacode.org/wiki/Animate_a_pendulum", "task_cat": "Temporal media", "lang": "Haskell", "code": "\nLibrary: HGL\nimport Graphics.HGL.Draw.Monad (Graphic, )\nimport Graphics.HGL.Draw.Picture\nimport Graphics.HGL.Utils\nimport Graphics.HGL.Window\nimport Graphics.HGL.Run\n \nimport Control.Exception (bracket, )\nimport Control.Arrow\n \ntoInt = fromIntegral.round\n \npendulum = runGraphics $\n  bracket\n    (openWindowEx \"Pendulum animation task\" Nothing (600,400) DoubleBuffered (Just 30))\n    closeWindow\n    (\\w -> mapM_ ((\\ g -> setGraphic w g >> getWindowTick w).\n                    (\\ (x, y) -> overGraphic (line (300, 0) (x, y))\n                                    (ellipse (x - 12, y + 12) (x + 12, y - 12)) )) pts)\n where\n    dt = 1/30\n    t = - pi/4\n    l = 1\n    g = 9.812 \n    nextAVT (a,v,t) = (a', v', t + v' * dt) where\n        a' = - (g / l) * sin t\n        v' = v + a' * dt\n    pts = map (\\(_,t,_) -> (toInt.(300+).(300*).cos &&& toInt. (300*).sin) (pi/2+0.6*t) )\n        $ iterate nextAVT (- (g / l) * sin t, t, 0)\n\n\n*Main> pendulum\n\nAlternative solution[edit]\nLibrary: Gloss\nimport Graphics.Gloss\n\n-- Initial conditions\ng_  = (-9.8)        :: Float    --Gravity acceleration\nv_0 = 0             :: Float    --Initial tangential speed\na_0 = 0 / 180 * pi  :: Float    --Initial angle\ndt  = 0.01          :: Float    --Time step\nt_f = 15            :: Float    --Final time for data logging\nl_  = 200           :: Float    --Rod length\n\n-- Define a type to represent the pendulum: \ntype Pendulum = (Float, Float, Float) -- (rod length, tangential speed, angle)\n\n-- Pendulum's initial state\ninitialstate :: Pendulum\ninitialstate = (l_, v_0, a_0)\n\n-- Step funtion: update pendulum to new position\nmovePendulum :: Float -> Pendulum -> Pendulum\nmovePendulum dt (l,v,a) = ( l , v_2 , a + v_2 / l * dt*10 )\n    where   v_2 = v + g_ * (cos a) * dt\n\n-- Convert from Pendulum to [Picture] for display\nrenderPendulum :: Pendulum -> [Picture]\nrenderPendulum (l,v,a) = map (uncurry Translate newOrigin)\n                            [ Line    [ ( 0 , 0 ) , ( l * (cos a), l * (sin a) ) ] \n                            , polygon [ ( 0 , 0 ) , ( -5 , 8.66 ) , ( 5 , 8.66 ) ]\n                            , Translate ( l * (cos a)) (l * (sin a)) (circleSolid (0.04*l_))\n                            , Translate (-1.1*l) (-1.3*l) (Scale 0.1 0.1 (Text currSpeed))\n                            , Translate (-1.1*l) (-1.3*l + 20) (Scale 0.1 0.1 (Text currAngle))\n                            ]\n    where   currSpeed = \"Speed (pixels/s) = \" ++ (show v)\n            currAngle = \"Angle (deg) = \" ++ (show ( 90 + a / pi * 180 ) )\n\n-- New origin to beter display the animation\nnewOrigin = (0, l_ / 2)\n\n-- Calcule a proper window size (for angles between 0 and -pi)\nwindowSize :: (Int, Int)\nwindowSize = ( 300 + 2 * round (snd newOrigin)\n             , 200 + 2 * round (snd newOrigin) )\n\n-- Run simulation\nmain :: IO ()\nmain = do   --plotOnGNU\n            simulate window background fps initialstate render update\n                where   window      = InWindow \"Animate a pendulum\" windowSize (40, 40)\n                        background  = white         \n                        fps         = round (1/dt)\n                        render xs   = pictures $ renderPendulum xs\n                        update _    = movePendulum\n\n", "explain": "Usage with ghci:\n"}, {"task_name": "Animate a pendulum", "task_url": "https://rosettacode.org/wiki/Animate_a_pendulum", "task_cat": "Temporal media", "lang": "VBScript", "code": "\n\noption explicit\n\n const dt = 0.15\n const length=23\n dim ans0:ans0=chr(27)&\"[\"\n dim Veloc,Accel,angle,olr,olc,r,c \nconst r0=1\nconst c0=40\n cls\n angle=0.7\n while 1\n    wscript.sleep(50)\n    Accel = -.9 * sin(Angle)\n    Veloc = Veloc + Accel * dt\n    Angle = Angle + Veloc * dt\n   \n    r = r0 + int(cos(Angle) * Length)\n    c = c0+ int(2*sin(Angle) * Length)\n    cls\n    draw_line r,c,r0,c0\n    toxy r,c,\"O\"\n\n    olr=r :olc=c\nwend\n\nsub cls()  wscript.StdOut.Write ans0 &\"2J\"&ans0 &\"?25l\":end sub\nsub toxy(r,c,s)  wscript.StdOut.Write ans0 & r & \";\" & c & \"f\"  & s :end sub\n\nSub draw_line(r1,c1, r2,c2)  'Bresenham's line drawing\n  Dim x,y,xf,yf,dx,dy,sx,sy,err,err2\n  x =r1    : y =c1\n  xf=r2    : yf=c2\n  dx=Abs(xf-x) : dy=Abs(yf-y)\n  If x<xf Then sx=+1: Else sx=-1\n  If y<yf Then sy=+1: Else sy=-1\n  err=dx-dy\n  Do\n    toxy x,y,\".\"\n    If x=xf And y=yf Then Exit Do\n    err2=err+err\n    If err2>-dy Then err=err-dy: x=x+sx\n    If err2< dx Then err=err+dx: y=y+sy\n  Loop\nEnd Sub 'draw_line\n\n", "explain": "Well, VbScript does'nt have a graphics mode so this is a wobbly textmode pandulum. It should be called from cscript.\n"}, {"task_name": "Animate a pendulum", "task_url": "https://rosettacode.org/wiki/Animate_a_pendulum", "task_cat": "Temporal media", "lang": "Scheme", "code": "\nLibrary: Scheme/PsTk\nTranslation of: Ruby\n\n#!r6rs\n\n;;; R6RS implementation of Pendulum Animation\n\n(import (rnrs)\n        (lib pstk main) ; change this for your pstk installation\n        )\n\n(define PI 3.14159)\n(define *conv-radians* (/ PI 180))\n(define *theta* 45.0)\n(define *d-theta* 0.0)\n(define *length* 150)\n(define *home-x* 160)\n(define *home-y* 25)\n\n;;; estimates new angle of pendulum\n(define (recompute-angle)\n  (define (avg a b) (/ (+ a b) 2))\n  (let* ((scaling (/ 3000.0 (* *length* *length*)))\n         ; first estimate\n         (first-dd-theta (- (* (sin (* *theta* *conv-radians*)) scaling)))\n         (mid-d-theta (+ *d-theta* first-dd-theta))\n         (mid-theta (+ *theta* (avg *d-theta* mid-d-theta)))\n         ; second estimate\n         (mid-dd-theta (- (* (sin (* mid-theta *conv-radians*)) scaling)))\n         (mid-d-theta-2 (+ *d-theta* (avg first-dd-theta mid-dd-theta)))\n         (mid-theta-2 (+ *theta* (avg *d-theta* mid-d-theta-2)))\n         ; again first\n         (mid-dd-theta-2 (- (* (sin (* mid-theta-2 *conv-radians*)) scaling)))\n         (last-d-theta (+ mid-d-theta-2 mid-dd-theta-2))\n         (last-theta (+ mid-theta-2 (avg mid-d-theta-2 last-d-theta)))\n         ; again second\n         (last-dd-theta (- (* (sin (* last-theta *conv-radians*)) scaling)))\n         (last-d-theta-2 (+ mid-d-theta-2 (avg mid-dd-theta-2 last-dd-theta)))\n         (last-theta-2 (+ mid-theta-2 (avg mid-d-theta-2 last-d-theta-2))))\n    ; put values back in globals\n    (set! *d-theta* last-d-theta-2)\n    (set! *theta* last-theta-2)))\n\n;;; The main event loop and graphics context\n(let ((tk (tk-start)))\n  (tk/wm 'title tk \"Pendulum Animation\")\n  (let ((canvas (tk 'create-widget 'canvas)))\n\n    ;;; redraw the pendulum on canvas\n    ;;; - uses angle and length to compute new (x,y) position of bob\n    (define (show-pendulum canvas)\n      (let* ((pendulum-angle (* *conv-radians* *theta*))\n             (x (+ *home-x* (* *length* (sin pendulum-angle))))\n             (y (+ *home-y* (* *length* (cos pendulum-angle)))))\n        (canvas 'coords 'rod *home-x* *home-y* x y)\n        (canvas 'coords 'bob (- x 15) (- y 15) (+ x 15) (+ y 15))))\n\n    ;;; move the pendulum and repeat after 20ms\n    (define (animate)\n      (recompute-angle)\n      (show-pendulum canvas)\n      (tk/after 20 animate))\n\n    ;; layout the canvas\n    (tk/grid canvas 'column: 0 'row: 0)\n    (canvas 'create 'line 0 25 320 25 'tags: 'plate 'width: 2 'fill: 'grey50)\n    (canvas 'create 'oval 155 20 165 30 'tags: 'pivot 'outline: \"\" 'fill: 'grey50)\n    (canvas 'create 'line 1 1 1 1 'tags: 'rod 'width: 3 'fill: 'black)\n    (canvas 'create 'oval 1 1 2 2 'tags: 'bob 'outline: 'black 'fill: 'yellow)\n\n    ;; get everything started\n    (show-pendulum canvas)\n    (tk/after 500 animate)\n    (tk-event-loop tk)))\n\n\n#!/usr/bin/env gosh\n#| -*- mode: scheme; coding: utf-8; -*- |#\n(use gl)\n(use gl.glut)\n(use gl.simple.viewer)\n(use math.const)\n(define (deg->rad degree) (* (/ degree 180) pi))\n(define (rad->deg radians) (* (/ radians pi) 180))\n(define (main args)\n  (glut-init args)\n  (let* ((\u03c6 (deg->rad 179)) (l 0.5) (bob 0.02) (q (make <glu-quadric>))\n\t (draw-pendulum (lambda()\n  \t\t\t  (gl-push-matrix*\n\t\t\t   (gl-scale 4 4 4)\n\t\t\t   (gl-translate 0 l 0)\n\t\t\t   (gl-rotate (rad->deg \u03c6) 0 0 1)\n\t\t\t   (gl-begin GL_LINES)\n\t\t\t   (gl-vertex 0 0)\n\t\t\t   (gl-vertex 0 (- l))\n\t\t\t   (gl-end)\n\t\t\t   (gl-translate 0 (- l) 0)\n\t\t\t   (glu-sphere q bob 10 10))))\n\t (g 9.81)\n\t (\u03c6\u0307 0)\n\t (euler-step (lambda(h)\n\t\t       (inc! \u03c6\u0307 (* (- (* (/ g l) (sin \u03c6))) h))\n\t\t       (inc! \u03c6 (* \u03c6\u0307 h)))))\n    (simple-viewer-display\n     (lambda ()\n       ;; I hope sync to VBLANK aka VSYNC works and the display has ~60Hz\n       (euler-step 1/60)\n       (draw-pendulum)\n       (glut-post-redisplay))))\n  (simple-viewer-window 'pendulum)\n  (glut-full-screen)\n  (simple-viewer-run :rescue-errors #f))\n\n", "explain": "This is a direct translation of the Ruby/Tk example into Scheme + PS/Tk.\nAnother version using gauche scheme:\n"}, {"task_name": "Animate a pendulum", "task_url": "https://rosettacode.org/wiki/Animate_a_pendulum", "task_cat": "Temporal media", "lang": "Logo", "code": "\nWorks with: UCB Logo\nmake \"angle 45\nmake \"L 1\nmake \"bob 10\n\nto draw.pendulum\n  clearscreen\n  seth :angle+180\t\t; down on screen is 180\n  forward :L*100-:bob\n  penup\n  forward :bob\n  pendown\n  arc 360 :bob\nend\n\nmake \"G   9.80665\nmake \"dt  1/30\nmake \"acc 0\nmake \"vel 0\n\nto step.pendulum\n  make \"acc  -:G / :L * sin :angle\n  make \"vel   :vel   + :acc * :dt\n  make \"angle :angle + :vel * :dt\n  wait :dt*60\n  draw.pendulum\nend\n\nhideturtle\nuntil [key?] [step.pendulum]\n", "explain": ""}, {"task_name": "Animate a pendulum", "task_url": "https://rosettacode.org/wiki/Animate_a_pendulum", "task_cat": "Temporal media", "lang": "F#", "code": "\n\nopen System\nopen System.Drawing\nopen System.Windows.Forms\n\n// define units of measurement\n[<Measure>] type m;  // metres\n[<Measure>] type s;  // seconds\n\n// a pendulum is represented as a record of physical quantities\ntype Pendulum =\n { length   : float<m>\n   gravity  : float<m/s^2>\n   velocity : float<m/s>\n   angle    : float\n }\n\n// calculate the next state of a pendulum\nlet next pendulum deltaT : Pendulum =\n  let k = -pendulum.gravity / pendulum.length\n  let acceleration = k * Math.Sin pendulum.angle * 1.0<m> \n  let newVelocity = pendulum.velocity + acceleration * deltaT\n  let newAngle = pendulum.angle + newVelocity * deltaT / 1.0<m>\n  { pendulum with velocity = newVelocity; angle = newAngle }\n\n// paint a pendulum (using hard-coded screen coordinates)\nlet paint pendulum (gr: System.Drawing.Graphics) =\n  let homeX = 160\n  let homeY = 50\n  let length = 140.0\n  // draw plate\n  gr.DrawLine( new Pen(Brushes.Gray, width=2.0f), 0, homeY, 320, homeY )\n  // draw pivot\n  gr.FillEllipse( Brushes.Gray,           homeX-5, homeY-5, 10, 10 )\n  gr.DrawEllipse( new Pen(Brushes.Black), homeX-5, homeY-5, 10, 10 )\n  // draw the pendulum itself\n  let x = homeX + int( length * Math.Sin pendulum.angle )\n  let y = homeY + int( length * Math.Cos pendulum.angle )\n  // draw rod\n  gr.DrawLine( new Pen(Brushes.Black, width=3.0f), homeX, homeY, x, y )\n  // draw bob\n  gr.FillEllipse( Brushes.Yellow,         x-15, y-15, 30, 30 )\n  gr.DrawEllipse( new Pen(Brushes.Black), x-15, y-15, 30, 30 )\n\n// defines an operator \"-?\" that calculates the time from t2 to t1  \n// where t2 is optional\nlet (-?) (t1: DateTime) (t2: DateTime option) : float<s> =\n  match t2 with\n  | None   -> 0.0<s> // only one timepoint given -> difference is 0\n  | Some t -> (t1 - t).TotalSeconds * 1.0<s>\n\n// our main window is double-buffered form that reacts to paint events\ntype PendulumForm() as self = \n  inherit Form(Width=325, Height=240, Text=\"Pendulum\")\n  let mutable pendulum = { length   = 1.0<m>;\n                           gravity  = 9.81<m/s^2>\n                           velocity = 0.0<m/s>\n                           angle    = Math.PI / 2.0\n                         }\n  let mutable lastPaintedAt = None\n  let updateFreq = 0.01<s>\n\n  do self.DoubleBuffered <- true\n     self.Paint.Add( fun args ->\n       let now = DateTime.Now\n       let deltaT = now -? lastPaintedAt |> min 0.01<s> \n       lastPaintedAt <- Some now\n\n       pendulum <- next pendulum deltaT\n\n       let gr = args.Graphics\n       gr.Clear( Color.LightGray )\n       paint pendulum gr\n\n       // initiate a new paint event after a while (non-blocking)\n       async { do! Async.Sleep( int( 1000.0 * updateFreq / 1.0<s> ) )\n               self.Invalidate()\n            }\n       |> Async.Start \n     )\n\n[<STAThread>]\nApplication.Run( new PendulumForm( Visible=true ) )\n\n", "explain": "A nice application of F#'s support for units of measure.\n"}, {"task_name": "Animate a pendulum", "task_url": "https://rosettacode.org/wiki/Animate_a_pendulum", "task_cat": "Temporal media", "lang": "Groovy", "code": "\n\nimport java.awt.*;\nimport javax.swing.*;\n\nclass Pendulum extends JPanel implements Runnable {\n\n    private angle = Math.PI / 2;\n    private length;\n\n    Pendulum(length) {\n        this.length = length;\n        setDoubleBuffered(true);\n    }\n\n    @Override\n    void paint(Graphics g) {\n        g.setColor(Color.WHITE);\n        g.fillRect(0, 0, getWidth(), getHeight());\n        g.setColor(Color.BLACK);\n        int anchorX = getWidth() / 2, anchorY = getHeight() / 4;\n        def ballX = anchorX + (Math.sin(angle) * length) as int;\n        def ballY = anchorY + (Math.cos(angle) * length) as int;\n        g.drawLine(anchorX, anchorY, ballX, ballY);\n        g.fillOval(anchorX - 3, anchorY - 4, 7, 7);\n        g.fillOval(ballX - 7, ballY - 7, 14, 14);\n    }\n\n    void run() {\n        def angleAccel, angleVelocity = 0, dt = 0.1;\n        while (true) {\n            angleAccel = -9.81 / length * Math.sin(angle);\n            angleVelocity += angleAccel * dt;\n            angle += angleVelocity * dt;\n            repaint();\n            try { Thread.sleep(15); } catch (InterruptedException ex) {}\n        }\n    }\n\n    @Override\n    Dimension getPreferredSize() {\n        return new Dimension(2 * length + 50, (length / 2 * 3) as int);\n    }\n\n    static void main(String[] args) {\n        def f = new JFrame(\"Pendulum\");\n        def p = new Pendulum(200);\n        f.add(p);\n        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        f.pack();\n        f.setVisible(true);\n        new Thread(p).start();\n    }\n}\n\n", "explain": "Straight translation of Java solution groovified by removing explicit definitions and converting casts to Groovy as style where needed.\n"}, {"task_name": "Animate a pendulum", "task_url": "https://rosettacode.org/wiki/Animate_a_pendulum", "task_cat": "Temporal media", "lang": "Zig", "code": "\nLibrary: Raylib\nWorks with: Zig version 0.11.0dev Works with: Raylib version 4.6dev\nTranslation of: Nim\nconst math = @import(\"std\").math;\nconst c = @cImport({\n    @cInclude(\"raylib.h\");\n});\n\npub fn main() void {\n    c.SetConfigFlags(c.FLAG_VSYNC_HINT);\n    c.InitWindow(640, 320, \"Pendulum\");\n    defer c.CloseWindow();\n\n    // Simulation constants.\n    const g = 9.81; // Gravity (should be positive).\n    const length = 5.0; // Pendulum length.\n    const theta0 = math.pi / 3.0; // Initial angle for which omega = 0.\n\n    const e = g * length * (1 - @cos(theta0)); // Total energy = potential energy when starting.\n\n    // Simulation variables.\n    var theta: f32 = theta0; // Current angle.\n    var omega: f32 = 0; // Angular velocity = derivative of theta.\n    var accel: f32 = -g / length * @sin(theta0); // Angular acceleration = derivative of omega.\n\n    c.SetTargetFPS(60);\n\n    while (!c.WindowShouldClose()) // Detect window close button or ESC key\n    {\n        const half_width = @as(f32, @floatFromInt(c.GetScreenWidth())) / 2;\n        const pivot = c.Vector2{ .x = half_width, .y = 0 };\n\n        // Compute the position of the mass.\n        const mass = c.Vector2{\n            .x = 300 * @sin(theta) + pivot.x,\n            .y = 300 * @cos(theta),\n        };\n\n        {\n            c.BeginDrawing();\n            defer c.EndDrawing();\n\n            c.ClearBackground(c.RAYWHITE);\n\n            c.DrawLineV(pivot, mass, c.GRAY);\n            c.DrawCircleV(mass, 20, c.GRAY);\n        }\n\n        // Update theta and omega.\n        const dt = c.GetFrameTime();\n        theta += (omega + dt * accel / 2) * dt;\n        omega += accel * dt;\n\n        // If, due to computation errors, potential energy is greater than total energy,\n        // reset theta to \u00b1theta0 and omega to 0.\n        if (length * g * (1 - @cos(theta)) >= e) {\n            theta = math.sign(theta) * theta0;\n            omega = 0;\n        }\n        accel = -g / length * @sin(theta);\n    }\n}\n\n", "explain": ""}]