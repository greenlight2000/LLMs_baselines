[{"task_name": "String concatenation", "task_url": "https://rosettacode.org/wiki/String_concatenation", "task_cat": "String manipulation", "lang": "Python", "code": "\ns1 = \"hello\"\nprint s1 + \" world\"\n\ns2 = s1 + \" world\"\nprint s2\n\n\nOutput:\nhello world\nhello world\n\ns1 = \"hello\"\nprint \", \".join([s1, \"world\", \"mom\"])\n\ns2 = \", \".join([s1, \"world\", \"mom\"])\nprint s2\n\n\nOutput:\nhello, world, mom\nhello, world, mom\n", "explain": "When concatenating many strings, it is more efficient to use the join method of a string object, which takes a list of strings to be joined. The string on which join is called is used as a separator.\n"}, {"task_name": "String concatenation", "task_url": "https://rosettacode.org/wiki/String_concatenation", "task_cat": "String manipulation", "lang": "C", "code": "\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar *sconcat(const char *s1, const char *s2)\n{\n  char *s0 = malloc(strlen(s1)+strlen(s2)+1);\n  strcpy(s0, s1);\n  strcat(s0, s2);\n  return s0;\n}\n\nint main()\n{\n   const char *s = \"hello\";\n   char *s2;\n   \n   printf(\"%s literal\\n\", s);\n   /* or */\n   printf(\"%s%s\\n\", s, \" literal\");\n   \n   s2 = sconcat(s, \" literal\");\n   puts(s2);\n   free(s2);\n}\n\n", "explain": ""}, {"task_name": "String concatenation", "task_url": "https://rosettacode.org/wiki/String_concatenation", "task_cat": "String manipulation", "lang": "C++", "code": "\n#include <string>\n#include <iostream>\n\nint main() {\n   std::string s = \"hello\";\n   std::cout << s << \" literal\" << std::endl;\n   std::string s2 = s + \" literal\";\n   std::cout << s2 << std::endl;\n   return 0;\n}\n\n\nOutput:\nhello literal\nhello literal\n", "explain": ""}, {"task_name": "String concatenation", "task_url": "https://rosettacode.org/wiki/String_concatenation", "task_cat": "String manipulation", "lang": "Java", "code": "\n\nString string = \"abc\" + \"def\";\n\n\nString string = \"abc\";\nstring += \"def\";\n\n\nString string = \"abc\".concat(\"def\");\n\n\nStringBuilder string = new StringBuilder();\nstring.append(\"abc\").append(\"def\");\n\n\nStringBuilder string = new StringBuilder();\nstring.append(\"abc\");\nstring.insert(3, \"def\");\n\n\nString string = String.format(\"%s%s\", \"abc\", \"def\");\n\nString string = \"%s%s\".formatted(\"abc\", \"def\");\n\n\nabcdef\n\n\npublic class Str{\n   public static void main(String[] args){\n      String s = \"hello\";\n      System.out.println(s + \" literal\");\n      String s2 = s + \" literal\";\n      System.out.println(s2);\n   }\n}\n\n\nOutput:\nhello literal\nhello literal\n", "explain": "There are multiple ways to concatenate string values in Java.\nThe most common way is through the plus operator.\nWhich can also be written as\nThere is also the String.concat method\nYou could use a StringBuilder object if you're appending multiple strings.\nStringBuilder also conveniently lets you insert strings within strings.\nSo, you can also concatenate a string as follows\nA less common approach would be to use the String.format or String.formatted methods.\nAll of these methods will produce the following string\n\nAlternately\n"}, {"task_name": "String concatenation", "task_url": "https://rosettacode.org/wiki/String_concatenation", "task_cat": "String manipulation", "lang": "C#", "code": "\nusing System;\n\nclass Program {\n    static void Main(string[] args) {\n        var s = \"hello\";\n        Console.Write(s);\n        Console.WriteLine(\" literal\");\n        var s2 = s + \" literal\";\n        Console.WriteLine(s2);\n    }\n}\n\n", "explain": ""}, {"task_name": "String concatenation", "task_url": "https://rosettacode.org/wiki/String_concatenation", "task_cat": "String manipulation", "lang": "JavaScript", "code": "\nvar s = \"hello\"\nprint(s + \" there!\")\n\n", "explain": ""}, {"task_name": "String concatenation", "task_url": "https://rosettacode.org/wiki/String_concatenation", "task_cat": "String manipulation", "lang": "Visual_Basic_.NET", "code": "\n\nWorks with: Visual Basic .NET version 9.0+\ns = \"Hello\"\nConsole.WriteLine(s & \" literal\")\ns1 = s + \" literal\"\nConsole.WriteLine(s1)\n", "explain": "Platform: .NET\n"}, {"task_name": "String concatenation", "task_url": "https://rosettacode.org/wiki/String_concatenation", "task_cat": "String manipulation", "lang": "PHP", "code": "\n<?php\n$s = \"hello\";\necho $s . \" literal\" . \"\\n\";\n$s1 = $s . \" literal\";\necho $s1 . \"\\n\";\n?>\n\n", "explain": ""}, {"task_name": "String concatenation", "task_url": "https://rosettacode.org/wiki/String_concatenation", "task_cat": "String manipulation", "lang": "Fortran", "code": "\nprogram StringConcatenation\n\ninteger, parameter          :: maxstringlength = 64\ncharacter (maxstringlength) :: s1, s = \"hello\"\n\nprint *,s // \" literal\"\ns1 = trim(s) // \" literal\"\nprint *,s1\n\nend program\n\n", "explain": ""}, {"task_name": "String concatenation", "task_url": "https://rosettacode.org/wiki/String_concatenation", "task_cat": "String manipulation", "lang": "Go", "code": "\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    // text assigned to a string variable\n    s := \"hello\"\n\n    // output string variable\n    fmt.Println(s)\n\n    // this output requested by original task descrption, although\n    // not really required by current wording of task description.\n    fmt.Println(s + \" literal\")\n\n    // concatenate variable and literal, assign result to another string variable\n    s2 := s + \" literal\"\n\n    // output second string variable\n    fmt.Println(s2)\n}\n\n\nOutput:\nhello\nhello literal\nhello literal\n\n", "explain": ""}, {"task_name": "String concatenation", "task_url": "https://rosettacode.org/wiki/String_concatenation", "task_cat": "String manipulation", "lang": "ARM_Assembly", "code": "\nWorks with: as version Raspberry Pi\n/* ARM assembly Raspberry PI  */\n/*  program strConcat.s   */\n\n/* Constantes    */\n.equ STDOUT, 1                           @ Linux output console\n.equ EXIT,   1                           @ Linux syscall\n.equ WRITE,  4                           @ Linux syscall\n/* Initialized data */\n.data\nszMessFinal:   .asciz \"The final string is \\n\"\n\nszString:            .asciz \"Hello \"\nszString1:           .asciz \" the world. \\n\"\n\n/* UnInitialized data */\n.bss \nszFinalString:   .skip 255\n\n/*  code section */\n.text\n.global main \nmain:\n                                         @ load string \n    ldr r1,iAdrszString\n\tldr r2,iAdrszFinalString\n    mov r4,#0\n1:\n    ldrb r0,[r1,r4]                      @ load byte of string\n    strb r0,[r2,r4]\n    cmp r0,#0                            @ compar with zero\u00a0?\n    addne r4,#1\n    bne 1b\n    ldr r1,iAdrszString1\n    mov r3,#0\n2:\n    ldrb r0,[r1,r3]                      @ load byte of string 1\n    strb r0,[r2,r4]\n    cmp r0,#0                            @ compar with zero\u00a0?\n    addne r4,#1\n    addne r3,#1\n    bne 2b\n    mov r0,r2                            @ display final string\n    bl affichageMess\n100:                                     @ standard end of the program */\n    mov r0, #0                           @ return code\n    mov r7, #EXIT                        @ request to exit program\n    svc 0                                @ perform the system call\niAdrszString:             .int szString\niAdrszString1:            .int szString1\niAdrszFinalString:       .int szFinalString\niAdrszMessFinal:          .int szMessFinal\n\n/******************************************************************/\n/*     display text with size calculation                         */ \n/******************************************************************/\n/* r0 contains the address of the message */\naffichageMess:\n    push {r0,r1,r2,r7,lr}                       @ save  registers \n    mov r2,#0                                   @ counter length */\n1:                                              @ loop length calculation\n    ldrb r1,[r0,r2]                             @ read octet start position + index \n    cmp r1,#0                                   @ if 0 its over\n    addne r2,r2,#1                              @ else add 1 in the length\n    bne 1b                                      @ and loop \n                                                @ so here r2 contains the length of the message \n    mov r1,r0                                   @ address message in r1 \n    mov r0,#STDOUT                              @ code to write to the standard output Linux\n    mov r7, #WRITE                              @ code call system \"write\" \n    svc #0                                      @ call systeme\n    pop {r0,r1,r2,r7,lr}                        @ restaur des  2 registres\n    bx lr                                       @ return\n", "explain": ""}, {"task_name": "String concatenation", "task_url": "https://rosettacode.org/wiki/String_concatenation", "task_cat": "String manipulation", "lang": "MIPS_Assembly", "code": "\n\nmain:\n\tla $a0,String1\n\tla $a1,UserRam\n\n\tjal strcpy\t\t\t\n\tnop\n\n\tla $a0,String2\n\tjal strcpy\n\tnop\n\t\n\tla $a0,UserRam\n\tjal PrintString\n\tnop\n\nshutdown:\n\tnop           ;normally not needed, but Project 64 will throw an exception if I don't have a nop here.\n\tb shutdown    ;loop forever\n\tnop\nstrcpy:\n\tLBU t0,(a0)\n        nop\n\tbeqz t0,strcpy_done\t\n\tSB t0,(a1)\t\t\t;branch delay slot - this is actually executed BEFORE the beqz!\n\taddiu a0,a0,1\n\tb strcpy\n\taddiu a1,a1,1\t\t        ;branch delay slot\nstrcpy_done:\n\tjr ra\n\tnop\n\nString1:\n\t.ascii \"abcdefghijk\"\n\t.byte 0\n\t.align 4\nString2:\n\t.ascii \"lmnopqrstuvwxyz\"\n\t.byte 0\n\t.align 4\n\nOutput:\nabcdefghijklmnopqrstuvwxyz\n", "explain": "Using the following implementation of C's strcpy(), we can concatenate strings easily by copying them to a RAM buffer back-to-back. We'll only do a few so that we don't clobber any other RAM we're using.\n"}, {"task_name": "String concatenation", "task_url": "https://rosettacode.org/wiki/String_concatenation", "task_cat": "String manipulation", "lang": "Delphi", "code": "\nprogram Concat;\n\n{$APPTYPE CONSOLE}\n\nvar\n  s1, s2: string;\nbegin\n  s1 := 'Hello';\n  s2 := s1 + ' literal';\n  WriteLn(s1);\n  WriteLn(s2);\nend.\n\n", "explain": ""}, {"task_name": "String concatenation", "task_url": "https://rosettacode.org/wiki/String_concatenation", "task_cat": "String manipulation", "lang": "Ruby", "code": "\ns = \"hello\"\n\nputs \"#{s} template\"       #=> \"hello template\"\n# Variable s is intact\nputs s                     #=> \"hello\" \n\nputs s + \" literal\"        #=> \"hello literal\"\n# Variable s is still the same\nputs s                     #=> \"hello\"\n\n# Mutating s variable:\n\ns += \" literal\"\nputs s                     #=> \"hello literal\"\ns << \" another\" # append to s, use only when string literals are not frozen\nputs s                     #=> \"hello literal another\"\n\ns = \"hello\"\nputs s.concat(\" literal\")  #=> \"hello literal\"\nputs s                     #=> \"hello literal\"\nputs s.prepend(\"Alice said: \")  #=> \"Alice said: hello literal\"\nputs s                     #=> \"Alice said: hello literal\"\n", "explain": ""}, {"task_name": "String concatenation", "task_url": "https://rosettacode.org/wiki/String_concatenation", "task_cat": "String manipulation", "lang": "Rust", "code": "\nfn main() {\n    let s = \"hello\".to_owned();\n    println!(\"{}\", s);\n    \n    let s1 = s + \" world\";\n    println!(\"{}\", s1);\n}\n", "explain": ""}, {"task_name": "String concatenation", "task_url": "https://rosettacode.org/wiki/String_concatenation", "task_cat": "String manipulation", "lang": "Swift", "code": "\nlet s = \"hello\"\nprintln(s + \" literal\")\nlet s1 = s + \" literal\"\nprintln(s1)\n", "explain": ""}, {"task_name": "String concatenation", "task_url": "https://rosettacode.org/wiki/String_concatenation", "task_cat": "String manipulation", "lang": "R", "code": "\nhello <- \"hello\"\npaste(hello, \"literal\") # \"hello literal\"\nhl <- paste(hello, \"literal\") #saves concatenates string to a new variable\npaste(\"no\", \"spaces\", \"between\", \"words\", sep=\"\") # \"nospacesbetweenwords\"\n\n", "explain": ""}, {"task_name": "String concatenation", "task_url": "https://rosettacode.org/wiki/String_concatenation", "task_cat": "String manipulation", "lang": "COBOL", "code": "\n\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. Concat.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01  Str  PIC X(7) VALUE \"Hello, \".\n       01  Str2 PIC X(15).\n\n       PROCEDURE DIVISION.\n           DISPLAY \"Str \u00a0: \" Str\n           STRING Str \" World!\" DELIMITED BY SIZE INTO Str2\n           DISPLAY \"Str2\u00a0: \" Str2\n\n           GOBACK\n           .\n\n\n       ...\n       PROCEDURE DIVISION.\n           DISPLAY \"Str \u00a0: \" Str\n           MOVE FUNCTION CONCATENATE(Str, \" World!\") TO Str2\n           DISPLAY \"Str2\u00a0: \" Str2\n\n           GOBACK\n           .\n\n\n*      *> Using a '&'.\n       01  Long-Str-Val     PIC X(200) VALUE \"Lorem ipsum dolor sit \"\n           & \"amet, consectetuer adipiscing elit, sed diam nonummy \"\n           & \"nibh euismod tincidunt ut laoreet dolore magna aliquam \"\n           & \"erat volutpat.\".\n\n*      *> Using a '-' in column 7. Note the first two literals have no\n*      *> closing quotes.\n       01  Another-Long-Str PIC X(200) VALUE \" Ut wisi enim ad minim \n      -    \"veniam, quis nostrud exerci tation ullamcorper suscipit\n      -    \"lobortis nisl ut aliquip ex ea commodo consequat\".\n\n", "explain": "With the STRING verb:\nAlternate method using the CONCATENATE intrinsic function:\nString literals can also be concatenated in the follwing ways:\n"}, {"task_name": "String concatenation", "task_url": "https://rosettacode.org/wiki/String_concatenation", "task_cat": "String manipulation", "lang": "Visual_Basic", "code": "\nWorks with: Visual Basic version VB6 Standard\n\n", "explain": "works the same as in VBA, see String_concatenation#VBA\n"}, {"task_name": "String concatenation", "task_url": "https://rosettacode.org/wiki/String_concatenation", "task_cat": "String manipulation", "lang": "Ada", "code": "\nwith Ada.Text_IO;  use Ada.Text_IO;\n\nprocedure String_Concatenation is\n   S1 : constant String := \"Hello\";\n   S2 : constant String := S1 & \" literal\";\nbegin\n   Put_Line (S1);\n   Put_Line (S2);\nend String_Concatenation;\n\n\nSample output:\nHello\nHello literal\n\n", "explain": ""}, {"task_name": "String concatenation", "task_url": "https://rosettacode.org/wiki/String_concatenation", "task_cat": "String manipulation", "lang": "Julia", "code": "\ns = \"hello\"\nprintln(s * \" there!\")\n\n", "explain": ""}, {"task_name": "String concatenation", "task_url": "https://rosettacode.org/wiki/String_concatenation", "task_cat": "String manipulation", "lang": "SAS", "code": "\ndata _null_;\n   a=\"Hello,\";\n   b=\"World!\";\n   c=a\u00a0!! \" \"\u00a0!! b;\n   put c;\n   *Alternative using the catx function;\n   c=catx (\" \", a, b);\n   put c;\nrun;\n", "explain": ""}, {"task_name": "String concatenation", "task_url": "https://rosettacode.org/wiki/String_concatenation", "task_cat": "String manipulation", "lang": "Kotlin", "code": "\nfun main() {\n    val s1 = \"James\"\n    val s2 = \"Bond\"\n    println(s1)\n    println(s2)\n    val s3 = s1 + \" \" + s2\n    println(s3)\n}\n\n\nOutput:\nJames\nBond\nJames Bond\n", "explain": ""}, {"task_name": "String concatenation", "task_url": "https://rosettacode.org/wiki/String_concatenation", "task_cat": "String manipulation", "lang": "Perl", "code": "\nmy $s = 'hello';\nprint $s . ' literal', \"\\n\";\nmy $s1 = $s . ' literal';\nprint $s1, \"\\n\";\n\n\n$s .= ' literal';\nprint $s, \"\\n\";\n\n", "explain": "An example of destructive concatenation:\n"}, {"task_name": "String concatenation", "task_url": "https://rosettacode.org/wiki/String_concatenation", "task_cat": "String manipulation", "lang": "Objective-C", "code": "\n#import <Foundation/Foundation.h>\n\nint main()\n{\n  @autoreleasepool {\n\n    NSString *s = @\"hello\";\n    printf(\"%s%s\\n\", [s UTF8String], \" literal\");\n  \n    NSString *s2 = [s stringByAppendingString:@\" literal\"];\n    // or, NSString *s2 = [NSString stringWithFormat:@\"%@%@\", s, @\" literal\"];\n    puts([s2 UTF8String]);\n    /* or */\n    NSMutableString *s3 = [NSMutableString stringWithString: s];\n    [s3 appendString: @\" literal\"];\n    puts([s3 UTF8String]);\n  \n  }\n  return 0;\n}\n\n", "explain": ""}, {"task_name": "String concatenation", "task_url": "https://rosettacode.org/wiki/String_concatenation", "task_cat": "String manipulation", "lang": "Lua", "code": "\na = \"hello \"\nprint(a .. \"world\")\nc = a .. \"world\"\nprint(c)\n\n", "explain": ""}, {"task_name": "String concatenation", "task_url": "https://rosettacode.org/wiki/String_concatenation", "task_cat": "String manipulation", "lang": "Scala", "code": "\n\n  val s = \"hello\"                                 //> s \u00a0: String = hello\n  val s2 = s + \" world\"                           //> s2 \u00a0: String = hello world\n  val f2 = () =>  \"\u00a0!\"                            //> f2 \u00a0: () => String = <function0>\n\n  println(s2 + f2())                              //> hello world\u00a0!\n", "explain": "Evaluation in a Scala worksheet, to val f2 is an anonymous function assigned.\n"}, {"task_name": "String concatenation", "task_url": "https://rosettacode.org/wiki/String_concatenation", "task_cat": "String manipulation", "lang": "D", "code": "\nimport std.stdio;\n \nvoid main() {\n    string s = \"hello\";\n    writeln(s ~ \" world\");\n    auto s2 = s ~ \" world\";\n    writeln(s2);\n}\n\n", "explain": ""}, {"task_name": "String concatenation", "task_url": "https://rosettacode.org/wiki/String_concatenation", "task_cat": "String manipulation", "lang": "Haskell", "code": "\nimport System.IO\ns = \"hello\"\ns1 = s ++ \" literal\"\nmain = do putStrLn (s ++ \" literal\")\n          putStrLn s1\n\n", "explain": ""}, {"task_name": "String concatenation", "task_url": "https://rosettacode.org/wiki/String_concatenation", "task_cat": "String manipulation", "lang": "VBScript", "code": "\n\ts1=\"Hello\"\n\ts2=s1 & \" World!\"\n\tWScript.Echo s2\n\nOutput:\nHello World!\n\n\n", "explain": "\n"}, {"task_name": "String concatenation", "task_url": "https://rosettacode.org/wiki/String_concatenation", "task_cat": "String manipulation", "lang": "Scheme", "code": "\n(define s \"hello\")\n(display (string-append s \" literal\"))\n(newline)\n(define s1 (string-append s \" literal\"))\n(display s1)\n(newline)\n", "explain": ""}, {"task_name": "String concatenation", "task_url": "https://rosettacode.org/wiki/String_concatenation", "task_cat": "String manipulation", "lang": "Apex", "code": "\nString s1 = 'Hello ';\nString s2 = 'Salesforce Developer!';\n\nString s3 = s1+s2;\n\n// Print output\nSystem.debug(s3);\n\nOutput:\nHello Salesforce Developer!\n", "explain": ""}, {"task_name": "String concatenation", "task_url": "https://rosettacode.org/wiki/String_concatenation", "task_cat": "String manipulation", "lang": "PowerShell", "code": "\n$s = \"Hello\"\nWrite-Host $s World.\n\n# alternative, using variable expansion in strings\nWrite-Host \"$s World.\"\n\n$s2 = $s + \" World.\"\nWrite-Host $s2\n\n", "explain": ""}, {"task_name": "String concatenation", "task_url": "https://rosettacode.org/wiki/String_concatenation", "task_cat": "String manipulation", "lang": "Logo", "code": "\nmake \"s \"hello\nprint word :s \"| there!|\n", "explain": ""}, {"task_name": "String concatenation", "task_url": "https://rosettacode.org/wiki/String_concatenation", "task_cat": "String manipulation", "lang": "ABAP", "code": "\nDATA: s1 TYPE string,\n      s2 TYPE string.\n\ns1 = 'Hello'.\nCONCATENATE s1 ' literal' INTO s2 RESPECTING BLANKS.\nWRITE: / s1.\nWRITE: / s2.\n\n\nOutput:\nHello\nHello literal\n\nAnother way[edit]\nREPORT string_concatenation.\n\nDATA(var1) = 'Hello'.\nDATA(var2) = 'Literal'.\n\ncl_demo_output=>new(\n          )->begin_section( 'String concatenation using |{ }|'\n          )->write( 'Statement: |{ var1 } { var2 }|'\n          )->write( |{ var1 } { var2 }|\n          )->begin_section( 'String concatenation with new string'\n          )->write( 'Statement: |{ var1 } world!|'\n          )->write( |{ var1 } world!|\n          )->display( ).\n\n\nOutput:\nHello literal\nHello world!\n\n", "explain": ""}, {"task_name": "String concatenation", "task_url": "https://rosettacode.org/wiki/String_concatenation", "task_cat": "String manipulation", "lang": "F#", "code": "\nTranslation of: C#\nopen System\n\n[<EntryPoint>]\nlet main args =\n    let s = \"hello\"\n    Console.Write(s)\n    Console.WriteLine(\" literal\")\n    let s2 = s + \" literal\"\n    Console.WriteLine(s2)\n    0\n\n", "explain": ""}, {"task_name": "String concatenation", "task_url": "https://rosettacode.org/wiki/String_concatenation", "task_cat": "String manipulation", "lang": "Groovy", "code": "\ndef s = \"Greetings \"\nprintln s + \"Earthlings\"\n\ndef s1 = s + \"Earthlings\"\nprintln s1\n\n\nOutput:\nGreetings Earthlings\nGreetings Earthlings\n", "explain": ""}, {"task_name": "String concatenation", "task_url": "https://rosettacode.org/wiki/String_concatenation", "task_cat": "String manipulation", "lang": "Zig", "code": "\nconst std = @import(\"std\");\n\nconst debug = std.debug;\nconst heap = std.heap;\nconst mem = std.mem;\n\ntest \"string concatenation\" {\n    const hello = \"Hello,\";\n\n    debug.warn(\"\\n{}{}\\n\", .{ hello, \" world!\" });\n\n    // Method 1: Array concatenation\n    //\n    // This only works if the values are known at compile-time.\n    const hello_world_at_comptime = hello ++ \" world!\";\n\n    debug.warn(\"{}\\n\", .{hello_world_at_comptime});\n\n    // Method 2: std.mem.concat\n    var buf: [128]u8 = undefined;\n    const allocator = &heap.FixedBufferAllocator.init(&buf).allocator;\n\n    const hello_world_concatenated = try mem.concat(allocator, u8, &[_][]const u8{ hello, \" world!\" });\n\n    debug.warn(\"{}\\n\", .{hello_world_concatenated});\n\n    // Method 3: std.mem.join\n    const hello_world_joined = try mem.join(allocator, \" \", &[_][]const u8{ hello, \"world!\" });\n\n    debug.warn(\"{}\\n\", .{hello_world_joined});\n}\n\nOutput:\nTest [1/1] test \"string concatenation\"...\nHello, world!\nHello, world!\nHello, world!\nHello, world!\nAll 1 tests passed.\n", "explain": ""}, {"task_name": "String concatenation", "task_url": "https://rosettacode.org/wiki/String_concatenation", "task_cat": "String manipulation", "lang": "AWK", "code": "\n\nBEGIN {\n   s = \"hello\"\n   print s \" literal\"\n   s1 = s \" literal\"\n   print s1\n}\n\n", "explain": "The AWK concatenation operator is nothing.\n"}]