[{"task_name": "Simple windowed application", "task_url": "https://rosettacode.org/wiki/Simple_windowed_application", "task_cat": "GUI", "lang": "Python", "code": "\nLibrary: Tkinter[edit]\nWorks with: Python version 3.7\nfrom functools import partial\nimport tkinter as tk\n\ndef on_click(label: tk.Label,\n             counter: tk.IntVar) -> None:\n    counter.set(counter.get() + 1)\n    label[\"text\"] = f\"Number of clicks: {counter.get()}\"\n\ndef main():\n    window = tk.Tk()\n    window.geometry(\"200x50+100+100\")\n    label = tk.Label(master=window,\n                     text=\"There have been no clicks yet\")\n    label.pack()\n    counter = tk.IntVar()\n    update_counter = partial(on_click,\n                             label=label,\n                             counter=counter)\n    button = tk.Button(master=window,\n                       text=\"click me\",\n                       command=update_counter)\n    button.pack()\n    window.mainloop()\n\nif __name__ == '__main__':\n    main()\n\n\nimport tkinter as tk\n\nclass ClickCounter(tk.Frame):\n    def __init__(self, master=None):\n        super().__init__(master)\n        tk.Pack.config(self)\n        self.label = tk.Label(self, text='There have been no clicks yet')\n        self.label.pack()\n        self.button = tk.Button(self,\n                                text='click me',\n                                command=self.click)\n        self.button.pack()\n        self.count = 0\n\n    def click(self):\n        self.count += 1\n        self.label['text'] = f'Number of clicks: {self.count}'\n\n\nif __name__ == \"__main__\":\n    ClickCounter().mainloop()\n\nLibrary: PyQt[edit]\nfrom functools import partial\nfrom itertools import count\n\nfrom PyQt5.QtWidgets import (QApplication,\n                             QLabel,\n                             QPushButton,\n                             QWidget)\nfrom PyQt5.QtCore import QRect\n\nLABEL_GEOMETRY = QRect(0, 15, 200, 25)\nBUTTON_GEOMETRY = QRect(50, 50, 100, 25)\n\n\ndef on_click(_, label, counter=count(1)):\n    label.setText(f\"Number of clicks: {next(counter)}\")\n\n\ndef main():\n    application = QApplication([])\n    window = QWidget()\n    label = QLabel(text=\"There have been no clicks yet\",\n                   parent=window)\n    label.setGeometry(LABEL_GEOMETRY)\n    button = QPushButton(text=\"click me\",\n                         parent=window)\n    button.setGeometry(BUTTON_GEOMETRY)\n    update_counter = partial(on_click,\n                             label=label)\n    button.clicked.connect(update_counter)\n    window.show()\n    application.lastWindowClosed.connect(window.close)\n    application.exec_()\n\n\nif __name__ == '__main__':\n    main()\n\nLibrary: wxPython[edit]\nimport wx\n\n\nclass ClickCounter(wx.Frame):\n    def __init__(self):\n        super().__init__(parent=None)\n        self.count = 0\n        self.button = wx.Button(parent=self,\n                                label=\"Click me!\")\n        self.label = wx.StaticText(parent=self,\n                                   label=\"There have been no clicks yet\")\n        self.Bind(event=wx.EVT_BUTTON,\n                  handler=self.click,\n                  source=self.button)\n\n        self.sizer = wx.BoxSizer(wx.VERTICAL)\n        self.sizer.Add(window=self.button,\n                       proportion=1,\n                       flag=wx.EXPAND)\n        self.sizer.Add(window=self.label,\n                       proportion=1,\n                       flag=wx.EXPAND)\n        self.SetSizer(self.sizer)\n        self.sizer.Fit(self)\n\n    def click(self, _):\n        self.count += 1\n        self.label.SetLabel(f\"Count: {self.count}\")\n\n\nif __name__ == '__main__':\n    app = wx.App()\n    frame = ClickCounter()\n    frame.Show()\n    app.MainLoop()\n\n", "explain": "The same in OO manner:\n"}, {"task_name": "Simple windowed application", "task_url": "https://rosettacode.org/wiki/Simple_windowed_application", "task_cat": "GUI", "lang": "C", "code": "\nLibrary: GTK\n#include <stdio.h>\n#include <gtk/gtk.h>\n\nconst gchar *clickme = \"Click Me\";\nguint counter = 0;\n\n#define MAXLEN 64\nvoid clickedme(GtkButton *o, gpointer d)\n{\n    GtkLabel *l = GTK_LABEL(d);\n    char nt[MAXLEN];\n    \n    counter++;\n    snprintf(nt, MAXLEN, \"You clicked me %d times\", counter);\n    gtk_label_set_text(l, nt);\n}\n\nint main(int argc, char **argv)\n{\n    GtkWindow *win;\n    GtkButton *button;\n    GtkLabel *label;\n    GtkVBox *vbox;\n\n    gtk_init(&argc, &argv);\n    win = (GtkWindow*)gtk_window_new(GTK_WINDOW_TOPLEVEL);\n    gtk_window_set_title(win, clickme);\n    button = (GtkButton*)gtk_button_new_with_label(clickme);\n    label = (GtkLabel*)gtk_label_new(\"There have been no clicks yet\");\n    gtk_label_set_single_line_mode(label, TRUE);\n    vbox = (GtkVBox*)gtk_vbox_new(TRUE, 1);\n    gtk_container_add(GTK_CONTAINER(vbox), GTK_WIDGET(label));\n    gtk_container_add(GTK_CONTAINER(vbox), GTK_WIDGET(button));\n    gtk_container_add(GTK_CONTAINER(win), GTK_WIDGET(vbox));\n    g_signal_connect(G_OBJECT(win), \"delete-event\", (GCallback)gtk_main_quit, NULL);\n    g_signal_connect(G_OBJECT(button), \"clicked\", (GCallback)clickedme, label);\n    gtk_widget_show_all(GTK_WIDGET(win));\n    gtk_main();\n    return 0;\n}\n\n", "explain": ""}, {"task_name": "Simple windowed application", "task_url": "https://rosettacode.org/wiki/Simple_windowed_application", "task_cat": "GUI", "lang": "C++", "code": "\nUses: Qt (Components:{{#foreach: component$n$|{{{component$n$}}}Property \"Uses Library\" (as page type) with input value \"Library/Qt/{{{component$n$}}}\" contains invalid characters or is incomplete and therefore can cause unexpected results during a query or annotation process., }})\nLibrary: Qt 4.4 with source files as shown , built from a Makefile generated by the Qt tool qmake\nclickcounter.h[edit]\n#ifndef CLICKCOUNTER_H\n#define CLICKCOUNTER_H\n\n#include <QWidget>\nclass QLabel ;\nclass QPushButton ;\nclass QVBoxLayout ;\n\nclass Counter : public QWidget {\n    Q_OBJECT\npublic :\n   Counter( QWidget * parent = 0 ) ;\nprivate :\n   int number ;\n   QLabel *countLabel ;\n   QPushButton *clicker ;\n   QVBoxLayout *myLayout ;\nprivate slots :\n   void countClicks( ) ;\n} ;\n#endif\n\nclickcounter.cpp[edit]\n#include <QPushButton>\n#include <QLabel>\n#include <QVBoxLayout>\n#include \"clickcounter.h\" \n\nCounter::Counter( QWidget * parent ) : QWidget( parent ) {\n   number = 0 ;\n   countLabel = new QLabel( \"There have been no clicks yet!\" ) ;\n   clicker = new QPushButton( \"click me\" ) ;\n   connect ( clicker , SIGNAL( clicked( ) ) , this , SLOT( countClicks( ) ) ) ;\n   myLayout = new QVBoxLayout ;\n   myLayout->addWidget( countLabel ) ;\n   myLayout->addWidget( clicker ) ;\n   setLayout( myLayout ) ;\n}\n\nvoid Counter::countClicks( ) {\n   number++ ;\n   countLabel->setText( QString( \"The button has been clicked %1 times!\").arg( number ) ) ;\n}\n\nmain.cpp[edit]\n#include <QApplication>\n#include \"clickcounter.h\"\n\nint main( int argc , char *argv[ ] ) {\n   QApplication app( argc , argv ) ;\n   Counter counter ;\n   counter.show( ) ;\n   return app.exec( ) ;\n}\n\n", "explain": ""}, {"task_name": "Simple windowed application", "task_url": "https://rosettacode.org/wiki/Simple_windowed_application", "task_cat": "GUI", "lang": "Java", "code": "\nLibrary: AWT\nLibrary: Swing\nimport java.awt.BorderLayout;\nimport java.awt.Dimension;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport javax.swing.JButton;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.SwingUtilities;\npublic class Clicks extends JFrame{\n\tprivate long clicks = 0;\n\n\tpublic Clicks(){\n\t\tsuper(\"Clicks\");//set window title\n\t\tJLabel label = new JLabel(\"There have been no clicks yet\");\n\t\tJButton clicker = new JButton(\"click me\");\n\t\tclicker.addActionListener(//listen to the button\n\t\t\tnew ActionListener(){\n\t\t\t\t@Override\n\t\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\t\tlabel.setText(\"There have been \" + (++clicks) + \" clicks\");//change the text\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t\tsetLayout(new BorderLayout());//handles placement of components\n\t\tadd(label,BorderLayout.CENTER);//add the label to the biggest section\n\t\tadd(clicker,BorderLayout.SOUTH);//put the button underneath it\n\t\tlabel.setPreferredSize(new Dimension(300,100));//nice big label\n\t\tlabel.setHorizontalAlignment(JLabel.CENTER);//text not up against the side\n\t\tpack();//fix layout\n\t\tsetDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);//stop the program on \"X\"\n\t\tsetVisible(true);//show it\n\t}\n\tpublic static void main(String[] args){\n\t\tSwingUtilities.invokeLater( //Swing UI updates should not happen on the main thread\n\t\t\t() -> new Clicks() //call the constructor where all the magic happens\n\t\t);\n\t}\n}\n\n", "explain": ""}, {"task_name": "Simple windowed application", "task_url": "https://rosettacode.org/wiki/Simple_windowed_application", "task_cat": "GUI", "lang": "C#", "code": "\nusing System.Windows.Forms;\n\nclass RosettaForm : Form\n{\n    RosettaForm()\n    {\n        var clickCount = 0;\n\n        var label = new Label();\n        label.Text = \"There have been no clicks yet.\";\n        label.Dock = DockStyle.Top;\n        Controls.Add(label);\n\n        var button = new Button();\n        button.Text = \"Click Me\";\n        button.Dock = DockStyle.Bottom;\n        button.Click += delegate\n                        {\n                            clickCount++;\n                            label.Text = \"Number of clicks: \" + clickCount + \".\";\n                        };\n        Controls.Add(button);\n    }\n\n    static void Main()\n    {\n        Application.Run(new RosettaForm());\n    }\n}\n\n", "explain": ""}, {"task_name": "Simple windowed application", "task_url": "https://rosettacode.org/wiki/Simple_windowed_application", "task_cat": "GUI", "lang": "JavaScript", "code": "\n<html>\n<head>\n    <title>Simple Window Application</title>\n</head>\n\n<body>\n    <br> &nbsp &nbsp &nbsp &nbsp    \n\n    <script type=\"text/javascript\">\n        var box = document.createElement('input') \n        box.style.position = 'absolute';  // position it\n        box.style.left = '10px';\n        box.style.top = '60px';\n        document.body.appendChild(box).style.border=\"3px solid white\"; \n        document.body.appendChild(box).value = \"There have been no clicks yet\"; \n        document.body.appendChild(box).style['width'] = '220px';\n        var clicks = 0;\n        function count_clicks() {\n            document.body.appendChild(box).remove()\n            clicks += 1;\n            document.getElementById(\"clicks\").innerHTML = clicks;\n        };\n    </script>\n\n    <button type=\"button\" onclick=\"count_clicks()\"> Click me</button>\n    <pre><p>    Clicks: <a id=\"clicks\">0</a> </p></pre> \n</body>\n\n</html>\n\n\n\n", "explain": "Javascript Output\n"}, {"task_name": "Simple windowed application", "task_url": "https://rosettacode.org/wiki/Simple_windowed_application", "task_cat": "GUI", "lang": "Scratch", "code": "\nwhen flag clicked          # when program is run\nset counter to \"0\"         # initialize counter object to zero\nset message to \"There have been no clicks\"\nshow variable message      # show the message object\n\nwhen this sprite clicked   # when button clicked\nhide message               # hide the initial message\nchange counter by 1        # increment the counter object\n\n", "explain": "Comments and Description:\nThe Scratch IDE has a GUI drag and drop interface.  \nThe program above is has both graphic and text objects.\nThe 'message' and 'counter' variables coded above are also graphic objects.  \nThey are set to \"large readout\" rather than slider or normal.\nThe (implied) 'sprite' has a 'costume' set to \"button\".\nScratch-Output\n"}, {"task_name": "Simple windowed application", "task_url": "https://rosettacode.org/wiki/Simple_windowed_application", "task_cat": "GUI", "lang": "Go", "code": "\nLibrary: go-gtk\npackage main\n\nimport (\n    \"fmt\"\n    \"github.com/mattn/go-gtk/gtk\"\n)\n\nfunc main() {\n    gtk.Init(nil)\n    window := gtk.NewWindow(gtk.WINDOW_TOPLEVEL)\n    window.SetTitle(\"Click me\")\n    label := gtk.NewLabel(\"There have been no clicks yet\")\n    var clicks int\n    button := gtk.NewButtonWithLabel(\"click me\")\n    button.Clicked(func() {\n        clicks++\n        if clicks == 1 {\n            label.SetLabel(\"Button clicked 1 time\")\n        } else {\n            label.SetLabel(fmt.Sprintf(\"Button clicked %d times\",\n                clicks))\n        }\n    })\n    vbox := gtk.NewVBox(false, 1)\n    vbox.Add(label)\n    vbox.Add(button)\n    window.Add(vbox)\n    window.Connect(\"destroy\", func() {\n        gtk.MainQuit()\n    })\n    window.ShowAll()\n    gtk.Main()\n}\n\n", "explain": ""}, {"task_name": "Simple windowed application", "task_url": "https://rosettacode.org/wiki/Simple_windowed_application", "task_cat": "GUI", "lang": "Delphi", "code": "\nWorks with: Delphi version 5.0\n\n-- begin file --\n\n   Program SingleWinApp ;\n \n   // This is the equivalent of the C #include\n   Uses Forms, Windows, Messages, Classes, Graphics, Controls, StdCtrls ;\n\n   \n   type\n     \n     // The only reason for this declaration is to allow the connection of the\n     // on click method to the forms button object. This class declaration adds\n     // a procedure.\n\n     TMainForm class(tform) \n       Procedure AddClicks(sender : tObject);\n     end;\n\n\n   // Use these globals.  \n   var\n  \n     MainForm : tForm ;\n     aLabel   : tLabel ;\n     aButton  : tButton ;\n     i        : integer = 0 ;\n\n\n    // This is the Method call that we connect to the button object\n    // to start counting the clicks.\n    Procedure tMainForm.AddClicks(sender :tObject)\n    begin\n      inc(i);\n      aLabel.Caption := IntToStr(i) + ' Clicks since startup' ;\n    end;\n\n\n    Begin\n      // Do all the behind the scenes stuff that sets up the Windows environment \n      Application.Initialize ;\n\n      // Create the form\n      \n      // Forms can either be created with an owner, like I have done here, or with\n      // the owner set to Nil. In pascal (all versions of Borland) '''NIL''' is a\n      // reserved, (the equivalent of '''NULL''' in Ansi C) word and un-sets any pointer \n      // variable. Setting the owner to the application object will ensure that the form is\n      // freed by the application object when the application shuts down. If I had set\n      // the owner to NIL then i would have had to make sure I freed the form explicitly\n      // or it would have been orphaned, thus creating a memory leak.\n\n      // I must direct your attention to the CreateNew constructor.  This is \n      // a non standard usage.  Normally the constructor Create() will call this\n      // as part of the initialization routine for the form. Normally as you drop\n      // various components on a form in deign mode, a DFM file is created with \n      // all the various initial states of the controls. This bypasses the \n      // DFM file altogether although all components AND the form are created\n      // with default values. (see the Delphi help file).\n\n      MainForm          := tMainForm.CreateNew(Application);\n      MainForm.Parent   := Application ;\n      MainForm.Position := poScreenCenter ;\n      MainForm.Caption  := 'Single Window Application' ;\n\n      // Create the Label, set its owner as MaiaForm\n      aLabel          := tLabel.Create(mainForm);\n      aLabel.Parent   := MainForm;\n      aLabel.Caption  := IntToStr(i) + ' Clicks since startup' ;\n      aLabel.Left     := 20 ;\n      aLabel.Top      := MainForm.ClientRect.Bottom div 2 ;\n\n      // Create the button, set its owner to MainForm\n      aButton         := tButton.Create(MainForm);\n      aButton.Parent  := MainForm ;\n      aButton.Caption := 'Click Me!';\n      aButton.Left    := (MainForm.ClientRect.Right div 2)-(aButton.Width div 2 );\n      aButton.Top     := MainForm.ClientRect.Bottom - aButton.Height - 10 ;\n      aButton.OnClick := AddClicks ;\n\n      // Show the main form, Modaly. The ONLY reason to do this is because in this\n      // demonstration if you only call the SHOW method, the form will appear and\n      // disappear in a split second.\n      MainForm.ShowModal ;\n      \n      Application.Run ;\n\n   end. // Program\n\n", "explain": "Creating a \"basic windowed application\" in Delphi is quite simple. Start up the IDE and the default application is a single windowed app. This will have two files, the main project file \"project1\" and a unit file, \"unit1\". What I a going to do here is going to be somewhat different. I will do it all dynamically from the main \"program file\". Create this in any text editor and you can then either open it in the IDE to build it, or invoke the command line compiler. There is quite a bit going on behind the scenes with the VCL and the RTL.\nFilename = SingleWinApp.dpr\nNOTE: The project name here must match the name of the file.\n"}, {"task_name": "Simple windowed application", "task_url": "https://rosettacode.org/wiki/Simple_windowed_application", "task_cat": "GUI", "lang": "Ruby", "code": "\nLibrary: Ruby/Tk\nrequire 'tk'\nstr = TkVariable.new(\"no clicks yet\")\ncount = 0\nroot = TkRoot.new\nTkLabel.new(root, \"textvariable\" => str).pack\nTkButton.new(root) do\n  text \"click me\"\n  command {str.value = count += 1}\n  pack\nend\nTk.mainloop\n\nLibrary: Shoes\nShoes.app do\n  stack do\n    @count = 0\n    @label = para \"no clicks yet\"\n    button \"click me\" do \n      @count += 1\n      @label.text = \"click: #@count\"\n    end\n  end\nend\n\n", "explain": ""}, {"task_name": "Simple windowed application", "task_url": "https://rosettacode.org/wiki/Simple_windowed_application", "task_cat": "GUI", "lang": "Rust", "code": "\nLibrary: iced\nuse iced::{ // 0.2.0\n    button, Button, Column, Element, Length,\n    Text, Sandbox, Settings, Space,\n};\n\n#[derive(Debug, Copy, Clone)]\nstruct Pressed;\nstruct Simple {\n    value: i32,\n    button: button::State,\n}\n\nimpl Sandbox for Simple {\n    type Message = Pressed;\n\n    fn new() -> Simple {\n        Simple {\n            value: 0,\n            button: button::State::new(),\n        }\n    }\n\n    fn title(&self) -> String {\n        \"Simple Windowed Application\".into()\n    }\n\n    fn view(&mut self) -> Element<Self::Message> {\n        Column::new()\n            .padding(20)\n            .push({\n                let text = match self.value {\n                    0 => \"there have been no clicks yet\".into(),\n                    1 => \"there has been 1 click\".into(),\n                    n => format!(\"there have been {} clicks\", n),\n                };\n                Text::new(text).size(24)\n            }).push(\n                Space::with_height(Length::Fill)\n            ).push(\n                Button::new(&mut self.button, Text::new(\"Click Me!\"))\n                    .on_press(Pressed)\n            ).into()\n    }\n\n    fn update(&mut self, _: Self::Message) {\n        self.value += 1;\n    }\n}\n\nfn main() {\n    let mut settings = Settings::default();\n    settings.window.size = (600, 400);\n    Simple::run(settings).unwrap();\n}\n\n", "explain": ""}, {"task_name": "Simple windowed application", "task_url": "https://rosettacode.org/wiki/Simple_windowed_application", "task_cat": "GUI", "lang": "R", "code": "\nLibrary: gWidgets\nLibrary: gWidgetstcltk\n\nlibrary(gWidgets)\nlibrary(gWidgetstcltk)\nwin <- gwindow()\nlab <- glabel(\"There have been no clicks yet\", container=win)\nbtn <- gbutton(\"click me\", container=win, handle=function(h, ...) \n   {\n      val <- as.numeric(svalue(lab))\n      svalue(lab) <- ifelse(is.na(val) ,\"1\", as.character(val + 1))\n   }\n)\n\n", "explain": "gWidgetsRGtk2 or gWidgetsrJava can be used as an alternative to gWidgetstcltk.\n"}, {"task_name": "Simple windowed application", "task_url": "https://rosettacode.org/wiki/Simple_windowed_application", "task_cat": "GUI", "lang": "Visual_Basic", "code": "\n\nVERSION 5.00\nBegin VB.Form Form2 \n   Caption         =   \"There have been no clicks yet\"\n   ClientHeight    =   2940\n   ClientLeft      =   60\n   ClientTop       =   600\n   ClientWidth     =   8340\n   LinkTopic       =   \"Form1\"\n   ScaleHeight     =   2940\n   ScaleWidth      =   8340\n   StartUpPosition =   3  'Windows Default\n   Begin VB.CommandButton Command1 \n      Caption         =   \"Click me!\"\n      Height          =   495\n      Left            =   3600\n      TabIndex        =   0\n      Top             =   1200\n      Width           =   1215\n   End\nEnd\nAttribute VB_Name = \"Form1\"\nAttribute VB_GlobalNameSpace = False\nAttribute VB_Creatable = False\nAttribute VB_PredeclaredId = True\nAttribute VB_Exposed = False\n'-----user-written code begins here; everything above this line is hidden in the GUI-----\nPrivate clicked As Long\n\nPrivate Sub Command1_Click()\n    clicked = clicked + 1\n    Me.Caption = clicked & \" clicks.\"\nEnd Sub\n\n", "explain": "In VB, windows are usually created in the IDE. The generated code is hidden from the user unless viewed outside of VB. For the sake of this task, I have included that code, but normally it is hidden from the programmer.\n"}, {"task_name": "Simple windowed application", "task_url": "https://rosettacode.org/wiki/Simple_windowed_application", "task_cat": "GUI", "lang": "Ada", "code": "\nLibrary: GTK\u00a0version GtkAda\nLibrary: GtkAda\n\nwith Gdk.Event;   use Gdk.Event;\nwith Gtk.Button;  use Gtk.Button;\nwith Gtk.Label;   use Gtk.Label;\nwith Gtk.Window;  use Gtk.Window;\nwith Gtk.Widget;  use Gtk.Widget;\nwith Gtk.Table;   use Gtk.Table;\n\nwith Gtk.Handlers;\nwith Gtk.Main;\n\nprocedure Simple_Windowed_Application is\n   Window : Gtk_Window;\n   Grid   : Gtk_Table;\n   Button : Gtk_Button;\n   Label  : Gtk_Label;\n   Count  : Natural := 0;\n\n   package Handlers is new Gtk.Handlers.Callback (Gtk_Widget_Record);\n   package Return_Handlers is\n      new Gtk.Handlers.Return_Callback (Gtk_Widget_Record, Boolean);\n\n   function Delete_Event (Widget : access Gtk_Widget_Record'Class)\n      return Boolean is\n   begin\n      return False;\n   end Delete_Event;\n\n   procedure Destroy (Widget : access Gtk_Widget_Record'Class) is\n   begin\n     Gtk.Main.Main_Quit;\n   end Destroy;\n\n   procedure Clicked (Widget : access Gtk_Widget_Record'Class) is\n   begin\n     Count := Count + 1;\n     Set_Text (Label, \"The button clicks:\" & Natural'Image (Count));\n   end Clicked;\n\nbegin\n   Gtk.Main.Init;\n   Gtk.Window.Gtk_New (Window);\n   Gtk_New (Grid, 1, 2, False);\n   Add (Window, Grid);\n   Gtk_New (Label, \"There have been no clicks yet\");\n   Attach (Grid, Label, 0, 1, 0, 1);\n   Gtk_New (Button, \"Click me\");\n   Attach (Grid, Button, 0, 1, 1, 2);\n   Return_Handlers.Connect\n   (  Window,\n      \"delete_event\",\n      Return_Handlers.To_Marshaller (Delete_Event'Access)\n   );\n   Handlers.Connect\n   (  Window,\n      \"destroy\",\n      Handlers.To_Marshaller (Destroy'Access)\n   );\n   Handlers.Connect\n   (  Button,\n      \"clicked\",\n      Handlers.To_Marshaller (Clicked'Access)\n   );\n   Show_All (Grid);\n   Show (Window);\n\n   Gtk.Main.Main;\nend Simple_Windowed_Application;\n\n", "explain": "The following solution is based on bindings to GTK+. \nAda as a language does not provide standard GUI. \nApart from GtkAda, there exist numerous other GUI bindings and libraries: \nCLAW, AdaGLUT, GWindow, JEWL, win32ada, QtAda etc.\n"}, {"task_name": "Simple windowed application", "task_url": "https://rosettacode.org/wiki/Simple_windowed_application", "task_cat": "GUI", "lang": "Julia", "code": "\n\nusing Gtk.ShortNames\n\nfunction clickwindow()\n    clicks = 0\n    win = Window(\"Click Counter\", 300, 100) |> (Frame() |> (vbox = Box(:v)))\n    lab = Label(\"There have been no clicks yet.\")\n    but = Button(\"click me\")\n    push!(vbox, lab)\n    push!(vbox, but)\n    set_gtk_property!(vbox, :expand, lab, true)\n    set_gtk_property!(vbox, :spacing, 20)\n    callback(w) = (clicks += 1; set_gtk_property!(lab, :label, \"There have been $clicks button clicks.\"))\n    id = signal_connect(callback, but, :clicked)\n    Gtk.showall(win)\n    c = Condition()\n    endit(w) = notify(c)\n    signal_connect(endit, win, :destroy)\n    wait(c)\nend\n\nclickwindow()\n\n", "explain": "Uses the Gtk library.\n"}, {"task_name": "Simple windowed application", "task_url": "https://rosettacode.org/wiki/Simple_windowed_application", "task_cat": "GUI", "lang": "Kotlin", "code": "\nTranslation of: Java\n// version 1.0.6\n\nimport java.awt.BorderLayout\nimport java.awt.event.ActionEvent\nimport java.awt.event.ActionListener\nimport javax.swing.*\n\nclass Clicks : JFrame(), ActionListener {\n    private var clicks = 0\n    private val label: JLabel\n    private val clicker: JButton\n    private var text: String\n\n    init {\n        text = \"There have been no clicks yet\"\n        label = JLabel(text)\n        clicker = JButton(\"click me\")\n        clicker.addActionListener(this)        // listen to the button\n        layout = BorderLayout()                // handles placement of components\n        add(label, BorderLayout.CENTER)        // add the label to the biggest section\n        add(clicker, BorderLayout.SOUTH)       // put the button underneath it\n        setSize(300, 200)                       // stretch out the window\n        defaultCloseOperation = EXIT_ON_CLOSE  // stop the program on \"X\"\n        isVisible = true                       // show it\n    }\n\n    override fun actionPerformed(arg0: ActionEvent) {\n        if (arg0.source == clicker) {           // if they clicked the button\n            if (clicks == 0) text = \"There has been \" + (++clicks) + \" click\"\n            else text = \"There have been \" + (++clicks) + \" clicks\"\n            label.text = text                  // change the text\n        }\n    }\n}\n\nfun main(args: Array<String>) {\n    Clicks()  // call the constructor where all the magic happens\n}\n\nLibrary: TornadoFX\nimport tornadofx.*\n\nclass ClicksView: View(\"Clicks example\") {\n    var clicks = 0\n    override val root = vbox(5) {\n        var label1 = label(\"There have been no clicks yet\")\n        button(\"Click me!\") { action { label1.text = \"Clicked ${++clicks} times.\" } }\n    }\n}\n\nclass ClicksApp: App(ClicksView::class)\n\nfun main(args: Array<String>) = launch<ClicksApp>(args)\n\n", "explain": ""}, {"task_name": "Simple windowed application", "task_url": "https://rosettacode.org/wiki/Simple_windowed_application", "task_cat": "GUI", "lang": "Perl", "code": "\nLibrary: Perl/Tk[edit]\nuse Tk;\n\n$main = MainWindow->new;\n$l = $main->Label('-text' => 'There have been no clicks yet.')->pack;\n$count = 0;\n$main->Button(\n  -text => ' Click Me ',\n  -command => sub { $l->configure(-text => 'Number of clicks: '.(++$count).'.'); },\n)->pack;\nMainLoop();\n\nLibrary: GTK Works with: Perl/Gtk[edit]\nuse Gtk '-init';\n\n# Window.\n$window = Gtk::Window->new;\n$window->signal_connect('destroy' => sub { Gtk->main_quit; });\n\n# VBox.\n$vbox = Gtk::VBox->new(0, 0);\n$window->add($vbox);\n\n# Label.\n$label = Gtk::Label->new('There have been no clicks yet.');\n$vbox->add($label);\n\n# Button.\n$count = 0;\n$button = Gtk::Button->new(' Click Me ');\n$vbox->add($button);\n$button->signal_connect('clicked', sub {\n  $label->set_text(++$count);\n});\n\n# Show.\n$window->show_all;\n\n# Main loop.\nGtk->main;\n\n", "explain": ""}, {"task_name": "Simple windowed application", "task_url": "https://rosettacode.org/wiki/Simple_windowed_application", "task_cat": "GUI", "lang": "Objective-C", "code": "\nWorks with: GNUstep\n#include <Foundation/Foundation.h>\n#include <AppKit/AppKit.h>\n\n@interface ClickMe\u00a0: NSWindow\n{\n  NSButton *_button;\n  NSTextField *_text;\n  int _counter;\n}\n- (void)applicationDidFinishLaunching: (NSNotification *)notification;\n- (BOOL)applicationShouldTerminateAfterLastWindowClosed: (NSNotification *)notification;\n- (void)advanceCounter: (id)sender;\n@end\n\n@implementation ClickMe\u00a0: NSWindow\n-(instancetype) init\n{\n  NSButton *button = [[NSButton alloc] init];\n  [button setButtonType: NSToggleButton];\n  [button setTitle: @\"Click Me\"];\n  [button sizeToFit];\n  [button setTarget: self];\n  [button setAction: @selector(advanceCounter:)];\n  NSRect buttonRect = [button frame];\n\n  NSTextField *text = [[NSTextField alloc] \n\t   initWithFrame: NSMakeRect(buttonRect.origin.x, buttonRect.size.height,\n\t\t\t\t     buttonRect.size.width, buttonRect.size.height)];\n  [text setAlignment: NSCenterTextAlignment];\n  [text setEditable: NO];\n  [text setStringValue: @\"There have been no clicks yet\"];\n  [text sizeToFit];\n\n  // reset size of button according to size of (larger...?) text\n  [button \n    setFrameSize: NSMakeSize( [text frame].size.width, buttonRect.size.height ) ];\n\n  int totalWindowHeight = buttonRect.size.height + [text frame].size.height;\n  \n  if ((self = [super initWithContentRect: NSMakeRect(100, 100, \n\t\t\t\t    [text frame].size.width, totalWindowHeight)\n        styleMask: (NSTitledWindowMask | NSClosableWindowMask)\n      backing: NSBackingStoreBuffered\n      defer: NO])) {\n    _counter = 0;\n    _button = button;\n    _text = text;\n\n    [[self contentView] addSubview: _text];\n    [[self contentView] addSubview: _button];\n\n    [self setTitle: @\"Click Me!\"];\n    [self center];\n  }\n  return self;\n}\n\n\n- (void)applicationDidFinishLaunching: (NSNotification *)notification\n{\n  [self orderFront: self];\n}\n\n- (BOOL)applicationShouldTerminateAfterLastWindowClosed: (NSNotification *)notification\n{\n  return YES;\n}\n\n- (void)advanceCounter: (id)sender\n{\n  [_text setStringValue: [NSString stringWithFormat: @\"Clicked %d times\", ++_counter]];\n}\n@end\n\n\nint main()\n{\n  @autoreleasepool {\n    NSApplication *app =  [NSApplication sharedApplication];\n    ClickMe *clickme = [[ClickMe alloc] init];\n    [app setDelegate: clickme];\n    [app run];\n  }\n  return 0;\n}\n\n", "explain": ""}, {"task_name": "Simple windowed application", "task_url": "https://rosettacode.org/wiki/Simple_windowed_application", "task_cat": "GUI", "lang": "Prolog", "code": "\n\n:- dynamic click/1.\n\ndialog('Simple windowed application',\n       [ object        :=\n\t   Simple_windowed_application,\n\t parts         :=\n\t   [ Simple_windowed_application :=\n\t       dialog('Simple windowed application'),\n\t     Name                       :=\n\t       label(name, 'There have been no clicks yet'),\n\t     BtnClick                     :=\n\t       button(button)\n\t   ],\n\t modifications :=\n\t   [ BtnClick := [ label := 'Click me\u00a0!'\n\t\t       ]\n\t   ],\n\t layout        :=\n\t   [ area(Name,\n\t\t  area(40, 20, 200, 18)),\n\t     area(BtnClick,\n\t\t  area(90, 60, 80, 24))\n\t   ],\n\t behaviour :=\n\t [\n\t  BtnClick := [message := message(@prolog, btnclick, Name)]\n\t ]\n       ]).\n\nbtnclick(Label) :-\n\tretract(click(V)),\n\tV1 is V+1,\n\tassert(click(V1)),\n\tsformat(A, '~w click(s)', [V1]),\n\tsend(Label, selection, A).\n\nsimple_windowed :-\n\tretractall(click(_)),\n\tassert(click(0)),\n\tmake_dialog(D, 'Simple windowed application'),\n\tsend(D, open).\n\n", "explain": "Works with SWI-Prolog and XPCE.\n"}, {"task_name": "Simple windowed application", "task_url": "https://rosettacode.org/wiki/Simple_windowed_application", "task_cat": "GUI", "lang": "Lua", "code": "\nrequire\"iuplua\"\nl = iup.label{title=\"There have been no clicks yet.\"}\nb = iup.button{title=\"Click me!\"}\nclicks = 0\nfunction b:button_cb()\n  clicks = clicks + 1\n  l.title = \"There have been \" .. clicks/2 .. \" clicks so far.\" --yes, this is correct.\nend\ndlg = iup.dialog{iup.vbox{l, b}, title=\"Simple Windowed Application\"}\ndlg:show()\n\nif (not iup.MainLoopLevel or iup.MainLoopLevel()==0) then\n  iup.MainLoop()\nend\n\n", "explain": ""}, {"task_name": "Simple windowed application", "task_url": "https://rosettacode.org/wiki/Simple_windowed_application", "task_cat": "GUI", "lang": "Scala", "code": "\nLibrary: Scala\nimport scala.swing.{ BorderPanel, Button, Label, MainFrame, SimpleSwingApplication }\nimport scala.swing.event.ButtonClicked\n\nobject SimpleApp extends SimpleSwingApplication {\n  def top = new MainFrame {\n    contents = new BorderPanel {\n      var nClicks = 0\n\n      val (button, label) = (new Button { text = \"click me\" },\n        new Label { text = \"There have been no clicks yet\" })\n\n      layout(button) = BorderPanel.Position.South\n      layout(label) = BorderPanel.Position.Center\n      listenTo(button)\n      reactions += {\n        case ButtonClicked(_) =>\n          nClicks += 1\n          label.text = s\"There have been ${nClicks} clicks\"\n      }\n    }\n  }\n}\n\n\n", "explain": "\n"}, {"task_name": "Simple windowed application", "task_url": "https://rosettacode.org/wiki/Simple_windowed_application", "task_cat": "GUI", "lang": "D", "code": "\nDFL[edit]\nWorks with: D version 1\nLibrary: DFL\nmodule winapp ;\nimport dfl.all ;\nimport std.string ;\n\nclass MainForm: Form {\n  Label label ;\n  Button button ;\n  this() {\n    width = 240 ;\n    with(label = new Label) {\n      text = \"There have been no clicks yet\" ;\n      dock = DockStyle.TOP ;\n      parent = this ;     \n    }\n    with(button = new Button) {\n      dock = DockStyle.BOTTOM ;\n      text = \"Click Me\" ;\n      parent = this ;\n      click ~= &onClickButton ;\n    }\n    height = label.height + button.height + 36 ;\n  }\n  private void onClickButton(Object sender, EventArgs ea) {\n    static int count = 0 ;\n    label.text = \"You had been clicked me \" ~ std.string.toString(++count) ~ \" times.\" ;\n  }\n}\n\nvoid main() {\n    Application.run(new MainForm);  \n}\n\nHybrid[edit]\nWorks with: D version 1\nLibrary: Hybrid\n\nimport \"themes/default.cfg\"\n\nnew FramedTopLevelWindow main {\n\tframe.text = \"Simple Window\";\n\n\tnew Label label {\n\t\ttext = \"There have been no clicks yet\";\n\t}\n\n\tnew Button button {\n\t\ttext = \"Click me\";\n\t\tsize = 201 20;\n\t}\n}\n\n\nmodule SimpleWindow;\nimport tango.text.convert.Integer;\nimport tango.core.Thread; // For Thread.yield\n\nimport xf.hybrid.Hybrid; //For widgets and general API\nimport xf.hybrid.backend.GL; // For OpenGL Renderer\n\nvoid main() {\n\t//load config file\n\tscope cfg = loadHybridConfig(`./SimpleWindow.cfg`);\n\tscope renderer = new Renderer;\n\tauto counter = 0;\n\n\tbool programRunning = true;\n\twhile (programRunning) {\n\t\t// Tell Hybrid what config to use\n\t\tgui.begin(cfg);\n\t\t// Exit program if user clicks the Close button\n\t\tif (gui().getProperty!(bool)(\"main.frame.closeClicked\")) {\n\t\t\tprogramRunning = false;\n\t\t}\n\t\t// Update text on the label\n\t\tif (counter != 0)\n\t\t\tLabel(\"main.label\").text = toString(counter);\n\t\t// Increment counter if the button has been clicked\n\t\tif (Button(\"main.button\").clicked) {\n\t\t\tcounter++;\n\t\t}\n\t\t// Finalize. Prepare to render\n\t\tgui.end();\n\t\t// Render window using OpenGL Renderer\n\t\tgui.render(renderer);\n\n\t\tThread.yield();\n\t}\n}\n\n", "explain": "Hybrid uses config files to describe GUI layout.\nSimpleWindow.cfg:\nSimpleWindow.d:\n"}, {"task_name": "Simple windowed application", "task_url": "https://rosettacode.org/wiki/Simple_windowed_application", "task_cat": "GUI", "lang": "Haskell", "code": "\nLibrary: Gtk from HackageDB\nimport Graphics.UI.Gtk\nimport Data.IORef\n\nmain :: IO ()\nmain = do\n  initGUI\n  window <- windowNew\n  window `onDestroy` mainQuit\n  windowSetTitle window \"Simple Windowed App\"\n  set window [ containerBorderWidth := 10 ]\n\n  hbox <- hBoxNew True 5\n\n  set window [ containerChild := hbox ]\n  \n  lab <- labelNew (Just \"There have been no clicks yet\")\n  button <- buttonNewWithLabel \"Click me\"\n  set hbox [ containerChild := lab ]\n  set hbox [ containerChild := button ]\n  \n  m <- newIORef 0\n\n  onClicked button $ do\n    v <- readIORef m\n    writeIORef m (v+1)\n    set lab [ labelText := \"There have been \" ++ show (v+1) ++ \" clicks\" ]\n\n  widgetShowAll window\n\n  mainGUI\n\n", "explain": ""}, {"task_name": "Simple windowed application", "task_url": "https://rosettacode.org/wiki/Simple_windowed_application", "task_cat": "GUI", "lang": "PowerShell", "code": "\nWindows Forms[edit]\nWorks with: PowerShell version 3\n$Label1  = [System.Windows.Forms.Label]@{\n            Text = 'There have been no clicks yet'\n            Size = '200, 20' }\n$Button1 = [System.Windows.Forms.Button]@{\n            Text = 'Click me'\n            Location = '0, 20' }\n \n$Button1.Add_Click(\n    {\n    $Script:Clicks++\n    If ( $Clicks -eq 1 ) { $Label1.Text = \"There has been 1 click\" }\n    Else                 { $Label1.Text = \"There have been $Clicks clicks\" }\n    } )\n \n$Form1 = New-Object System.Windows.Forms.Form\n$Form1.Controls.AddRange( @( $Label1, $Button1 ) )\n \n$Clicks = 0\n \n$Result = $Form1.ShowDialog()\n\nWorks with: PowerShell version 2\nAdd-Type -AssemblyName System.Windows.Forms\n \n$Label1 = New-Object System.Windows.Forms.Label\n$Label1.Text = 'There have been no clicks yet'\n$Label1.Size = '200, 20'\n \n$Button1 = New-Object System.Windows.Forms.Button\n$Button1.Text = 'Click me'\n$Button1.Location = '0, 20'\n \n$Button1.Add_Click(\n    {\n    $Script:Clicks++\n    If ( $Clicks -eq 1 ) { $Label1.Text = \"There has been 1 click\" }\n    Else                 { $Label1.Text = \"There have been $Clicks clicks\" }\n    } )\n \n$Form1 = New-Object System.Windows.Forms.Form\n$Form1.Controls.AddRange( @( $Label1, $Button1 ) )\n \n$Clicks = 0\n \n$Result = $Form1.ShowDialog()\n\nWPF[edit]\n[xml]$Xaml = @\"\n<Window\n    xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n    x:Name = \"Window1\"\n    Width  = \"200\"\n    Height = \"120\"\n    ShowInTaskbar = \"True\">\n    <StackPanel>\n        <Label\n            x:Name  = \"Label1\"\n            Height  = \"40\"\n            Width   = \"200\"\n            Content = \"There have been no clicks\"/>\n        <Button\n            x:Name  = \"Button1\"\n            Height  = \"25\"\n            Width   = \"60\"\n            Content = \"Click me\"/>\n    </StackPanel>\n</Window>\n\"@\n \n$Window1 = [Windows.Markup.XamlReader]::Load( [System.Xml.XmlNodeReader]$Xaml )\n \n$Label1  = $Window1.FindName( \"Label1\"  )\n$Button1 = $Window1.FindName( \"Button1\" )\n \n$Button1.Add_Click(\n    {\n    $Script:Clicks++\n    If ( $Clicks -eq 1 ) { $Label1.Content = \"There has been 1 click\" }\n    Else                 { $Label1.Content = \"There have been $Clicks clicks\" }\n    } )\n \n$Clicks = 0\n \n$Result = $Window1.ShowDialog()\n\n", "explain": ""}, {"task_name": "Simple windowed application", "task_url": "https://rosettacode.org/wiki/Simple_windowed_application", "task_cat": "GUI", "lang": "Logo", "code": "\nWorks with: MSWlogo\nto clickwindow\nwindowCreate \"root \"clickWin [Click that button!!!] 0 0 100 100 []\nMake \"i 0\nstaticCreate \"clickWin \"clickSt [There have been no clicks yet] 0 0 100 20\nbuttonCreate \"clickWin \"clickBtn [click me] 10 20 80 20 ~\n\t[Make \"i :i+1 ~\n\tifelse :i=1 [staticUpdate \"clickSt (list \"clicked :i \"time)] ~\n\t            [staticUpdate \"clickSt (list \"clicked :i \"times)]]\nend\n\nclickwindow\n", "explain": "The window is opened with:\n"}, {"task_name": "Simple windowed application", "task_url": "https://rosettacode.org/wiki/Simple_windowed_application", "task_cat": "GUI", "lang": "F#", "code": "\nTranslation of: C#\nopen System.Windows.Forms\n\nlet mutable clickCount = 0\n\nlet form = new Form()\n\nlet label = new Label(Text = \"There have been no clicks yet.\", Dock = DockStyle.Top)\nform.Controls.Add(label)\n\nlet button = new Button(Text = \"Click me\", Dock = DockStyle.Bottom)\nbutton.Click.Add(fun _ ->\n    clickCount <- clickCount+1\n    label.Text <- sprintf \"Number of clicks: %i.\" clickCount)\nform.Controls.Add(button)\n\nApplication.Run(form)\n\n", "explain": ""}, {"task_name": "Simple windowed application", "task_url": "https://rosettacode.org/wiki/Simple_windowed_application", "task_cat": "GUI", "lang": "Groovy", "code": "\nimport groovy.swing.SwingBuilder\n\ncount = 0\nnew SwingBuilder().edt {\n  frame(title:'Click frame', pack: true, show: true) {\n    vbox {  \n      countLabel = label(\"There have been no clicks yet.\")\n      button('Click Me', actionPerformed: {count++; countLabel.text = \"Clicked ${count} time(s).\"})\n    }\n  }\n}\n\n\nimport groovy.swing.SwingBuilder\nimport groovy.beans.Bindable\n\n@Bindable class Model {\n   Integer count = 0\n}\nmodel = new Model()\nnew SwingBuilder().edt {\n  frame(title:'Click frame', pack: true, show: true) {\n    vbox {  \n      label(text: bind(source: model, sourceProperty: 'count',\n        converter: { v -> !v ? \"There have been no clicks yet.\" : \"Clicked ${v} time(s).\"}))\n      button('Click Me', actionPerformed: {model.count++})\n    }\n  }\n}\n\n", "explain": "with binding:\n"}]