[{"task_name": "Pick random element", "task_url": "https://rosettacode.org/wiki/Pick_random_element", "task_cat": "Randomness", "lang": "Python", "code": "\n>>> import random\n>>> random.choice(['foo', 'bar', 'baz'])\n'baz'\n\n", "explain": ""}, {"task_name": "Pick random element", "task_url": "https://rosettacode.org/wiki/Pick_random_element", "task_cat": "Randomness", "lang": "C", "code": "\n#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n \nint main(){\n   char array[] = { 'a', 'b', 'c','d','e','f','g','h','i','j' };\n   int i;\n   time_t t;\n   srand((unsigned)time(&t));\n   \n   for(i=0;i<30;i++){\n\t\tprintf(\"%c\\n\", array[rand()%10]);\n   }\n   \n   return 0;\n}\n\n\na\ne\nf\nh\nb\nd\ng\na\nb\nf\na\ni\nb\nd\nd\ng\nj\na\nf\ne\na\ne\ng\ne\ni\nd\nj\na\nf\ne\na\n\n", "explain": "Output\n"}, {"task_name": "Pick random element", "task_url": "https://rosettacode.org/wiki/Pick_random_element", "task_cat": "Randomness", "lang": "C++", "code": "\n#include <iostream>\n#include <random>\n#include <vector>\n\nint main( ) {\n   std::vector<int> numbers { 11 , 88 , -5 , 13 , 4 , 121 , 77 , 2 } ;\n   std::random_device seed ;\n   // generator \n   std::mt19937 engine( seed( ) ) ;\n   // number distribution\n   std::uniform_int_distribution<int> choose( 0 , numbers.size( ) - 1 ) ;\n   std::cout << \"random element picked\u00a0: \" << numbers[ choose( engine ) ] \n      << \"\u00a0!\\n\" ;\n   return 0 ;\n}\n\n", "explain": ""}, {"task_name": "Pick random element", "task_url": "https://rosettacode.org/wiki/Pick_random_element", "task_cat": "Randomness", "lang": "Java", "code": "\nimport java.util.Random;\n...\nint[] array = {1,2,3};\nreturn array[new Random().nextInt(array.length)]; // if done multiple times, the Random object should be re-used\n\n\n", "explain": "For a List object rather than an array, substitute list.get(...) for array[...]. If preserving the order of the List isn't important, you could call Collections.shuffle(list); and then list.get(0);. You would need to shuffle each time unless you removed the item from the list.\n"}, {"task_name": "Pick random element", "task_url": "https://rosettacode.org/wiki/Pick_random_element", "task_cat": "Randomness", "lang": "C#", "code": "\nusing System;\nusing System.Collections.Generic;\n\nclass RandomElementPicker {\n  static void Main() {\n    var list = new List<int>(new[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9});\n    var rng = new Random();\n    var randomElement = list[rng.Next(list.Count)];\n    Console.WriteLine(\"I picked element {0}\", randomElement);\n  }\n}\n\n", "explain": ""}, {"task_name": "Pick random element", "task_url": "https://rosettacode.org/wiki/Pick_random_element", "task_cat": "Randomness", "lang": "JavaScript", "code": "\nvar array = [1,2,3];\nreturn array[Math.floor(Math.random() * array.length)];\n\n", "explain": ""}, {"task_name": "Pick random element", "task_url": "https://rosettacode.org/wiki/Pick_random_element", "task_cat": "Randomness", "lang": "Visual_Basic_.NET", "code": "\nTranslation of: C#\nModule Program\n    Sub Main()\n        Dim list As New List(Of Integer)({0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n        Dim rng As New Random()\n        Dim randomElement = list(rng.Next(list.Count)) ' Upper bound is exclusive.\n        Console.WriteLine(\"I picked element {0}\", randomElement)\n    End Sub\nEnd Module\n\n", "explain": ""}, {"task_name": "Pick random element", "task_url": "https://rosettacode.org/wiki/Pick_random_element", "task_cat": "Randomness", "lang": "PHP", "code": "\n$arr = array('foo', 'bar', 'baz');\n$x = $arr[array_rand($arr)];\n\n", "explain": ""}, {"task_name": "Pick random element", "task_url": "https://rosettacode.org/wiki/Pick_random_element", "task_cat": "Randomness", "lang": "Fortran", "code": "\nWorks with: Fortran version 90 and later\nprogram pick_random\n  implicit none\n\n  integer :: i\n  integer :: a(10) = (/ (i, i = 1, 10) /)\n  real :: r\n\n  call random_seed\n  call random_number(r)\n  write(*,*) a(int(r*size(a)) + 1)\nend program\n\n", "explain": ""}, {"task_name": "Pick random element", "task_url": "https://rosettacode.org/wiki/Pick_random_element", "task_cat": "Randomness", "lang": "Go", "code": "\npackage main\n\nimport (\n    \"fmt\"\n    \"math/rand\"\n    \"time\"\n)\n\nvar list = []string{\"bleen\", \"fuligin\", \"garrow\", \"grue\", \"hooloovoo\"}\n\nfunc main() {\n    rand.Seed(time.Now().UnixNano())\n    fmt.Println(list[rand.Intn(len(list))])\n}\n\n", "explain": ""}, {"task_name": "Pick random element", "task_url": "https://rosettacode.org/wiki/Pick_random_element", "task_cat": "Randomness", "lang": "Delphi", "code": "\n\n", "explain": "See #Pascal / Delphi / Free Pascal.\n"}, {"task_name": "Pick random element", "task_url": "https://rosettacode.org/wiki/Pick_random_element", "task_cat": "Randomness", "lang": "Ruby", "code": "\n%w(north east south west).sample   # => \"west\"\n(1..100).to_a.sample(2)            # => [17, 79]\n\n", "explain": ""}, {"task_name": "Pick random element", "task_url": "https://rosettacode.org/wiki/Pick_random_element", "task_cat": "Randomness", "lang": "Rust", "code": "\nLibrary: rand\nextern crate rand;\n\nuse rand::Rng;\n\nfn main() {\n    let array = [5,1,2,5,6,7,8,1,2,4,5];\n    let mut rng = rand::thread_rng();\n    \n    println!(\"{}\", rng.choose(&array).unwrap());\n}\n\n", "explain": ""}, {"task_name": "Pick random element", "task_url": "https://rosettacode.org/wiki/Pick_random_element", "task_cat": "Randomness", "lang": "Swift", "code": "\nimport Darwin\n\nlet myList = [1, 2, 4, 5, 62, 234, 1, -1]\nprint(myList[Int(arc4random_uniform(UInt32(myList.count)))])\n\n", "explain": ""}, {"task_name": "Pick random element", "task_url": "https://rosettacode.org/wiki/Pick_random_element", "task_cat": "Randomness", "lang": "R", "code": "\n# a vector (letters are builtin)\nletters\n#  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n# [20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"\n\n# picking one element\nsample(letters, 1)\n# [1] \"n\"\n\n# picking some elements with repetition, and concatenating to get a word\npaste(sample(letters, 10, rep=T), collapse=\"\")\n# [1] \"episxgcgmt\"\n\n", "explain": ""}, {"task_name": "Pick random element", "task_url": "https://rosettacode.org/wiki/Pick_random_element", "task_cat": "Randomness", "lang": "COBOL", "code": "\nWorks with: GNU Cobol\n       >>SOURCE FREE\nIDENTIFICATION DIVISION.\nPROGRAM-ID. random-element.\n\nDATA DIVISION.\nWORKING-STORAGE SECTION.\n01  nums-area                           VALUE \"123456789\".\n    03  nums                            PIC 9 OCCURS 9 TIMES.\n    \n01  random-idx                          PIC 9 COMP.\n    \nPROCEDURE DIVISION.\n    COMPUTE random-idx = FUNCTION RANDOM(FUNCTION CURRENT-DATE (9:7)) * 9 + 1\n    DISPLAY nums (random-idx)\n    .\nEND PROGRAM random-element.\n\n", "explain": ""}, {"task_name": "Pick random element", "task_url": "https://rosettacode.org/wiki/Pick_random_element", "task_cat": "Randomness", "lang": "Ada", "code": "\n\nwith Ada.Text_IO, Ada.Numerics.Float_Random;\n\nprocedure Pick_Random_Element is\n\n   package Rnd renames Ada.Numerics.Float_Random;\n   Gen: Rnd.Generator; -- used globally\n\n   type Char_Arr is array (Natural range <>) of Character;\n\n   function Pick_Random(A: Char_Arr) return Character is\n      -- Chooses one of the characters of A (uniformly distributed)\n   begin\n      return A(A'First + Natural(Rnd.Random(Gen) * Float(A'Last)));\n   end Pick_Random;\n\n   Vowels    : Char_Arr := ('a', 'e', 'i', 'o', 'u');\n   Consonants: Char_Arr := ('t', 'n', 's', 'h', 'r', 'd', 'l');\n   Specials  : Char_Arr := (',', '.', '?', '!');\n\nbegin\n   Rnd.Reset(Gen);\n   for J in 1 .. 3 loop\n      for I in 1 .. 10 loop\n         Ada.Text_IO.Put(Pick_Random(Consonants));\n         Ada.Text_IO.Put(Pick_Random(Vowels));\n      end loop;\n      Ada.Text_IO.Put(Pick_Random(Specials) & \" \");\n   end loop;\n   Ada.Text_IO.New_Line;\nend Pick_Random_Element;\n\n\nOutput:\nhoranohesuhodinahiru. desehonirosedisinelo, losihehederidonolahe?\n", "explain": "The following program generates three 20-letter words. \nEach vowel and each consonant is picked randomly from a list of vowels \nresp. a list of consonants. \n"}, {"task_name": "Pick random element", "task_url": "https://rosettacode.org/wiki/Pick_random_element", "task_cat": "Randomness", "lang": "Julia", "code": "\narray = [1,2,3]\nrand(array)\n\n", "explain": ""}, {"task_name": "Pick random element", "task_url": "https://rosettacode.org/wiki/Pick_random_element", "task_cat": "Randomness", "lang": "Kotlin", "code": "\n// version 1.2.10\n\nimport java.util.Random\n\n/**\n * Extension function on any list that will return a random element from index 0 \n * to the last index\n */\nfun <E> List<E>.getRandomElement() = this[Random().nextInt(this.size)]\n\n/**\n * Extension function on any list that will return a list of unique random picks\n * from the list. If the specified number of elements you want is larger than the\n * number of elements in the list it returns null\n */\nfun <E> List<E>.getRandomElements(numberOfElements: Int): List<E>? {\n    if (numberOfElements > this.size) {\n        return null\n    }\n    return this.shuffled().take(numberOfElements)\n}\n\nfun main(args: Array<String>) { \n    val list = listOf(1, 16, 3, 7, 17, 24, 34, 23, 11, 2)\n    println(\"The list consists of the following numbers:\\n${list}\")\n \n    // notice we can call our extension functions as if they were regular member functions of List\n    println(\"\\nA randomly selected element from the list is ${list.getRandomElement()}\")\n    println(\"\\nA random sequence of 5 elements from the list is ${list.getRandomElements(5)}\")\n}\n\n\n\nOutput:\nThe list consists of the following numbers:\n[1, 16, 3, 7, 17, 24, 34, 23, 11, 2]\n\nA randomly selected element from the list is 11\n\nA random sequence of 5 elements from the list is [17, 24, 23, 16, 3]\n\n", "explain": "Sample output:\n"}, {"task_name": "Pick random element", "task_url": "https://rosettacode.org/wiki/Pick_random_element", "task_cat": "Randomness", "lang": "Perl", "code": "\nmy @array = qw(a b c);\nprint $array[ rand @array ];\n\n", "explain": ""}, {"task_name": "Pick random element", "task_url": "https://rosettacode.org/wiki/Pick_random_element", "task_cat": "Randomness", "lang": "Prolog", "code": "\nWorks with: SWI-Prolog version 6\n?- random_member(M, [a, b, c, d, e, f, g, h, i, j]).\nM = i.\n\n", "explain": ""}, {"task_name": "Pick random element", "task_url": "https://rosettacode.org/wiki/Pick_random_element", "task_cat": "Randomness", "lang": "Lua", "code": "\nmath.randomseed(os.time())\nlocal a = {1,2,3}\nprint(a[math.random(1,#a)])\n\n", "explain": ""}, {"task_name": "Pick random element", "task_url": "https://rosettacode.org/wiki/Pick_random_element", "task_cat": "Randomness", "lang": "Scala", "code": "\nLibrary: Scala\nval a = (1 to 10).toList\n\nprintln(scala.util.Random.shuffle(a).head)\n\n", "explain": ""}, {"task_name": "Pick random element", "task_url": "https://rosettacode.org/wiki/Pick_random_element", "task_cat": "Randomness", "lang": "Dart", "code": "\nTranslation of: C\nimport 'dart:math';\n\nvoid main() {\n  final array = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'];\n  int i;\n\n  for (i = 1; i < 30; i++) {\n    var intValue = Random().nextInt(i) % 10;\n    print(array[intValue]);\n  }\n}\n\n", "explain": ""}, {"task_name": "Pick random element", "task_url": "https://rosettacode.org/wiki/Pick_random_element", "task_cat": "Randomness", "lang": "D", "code": "\nimport std.stdio, std.random;\n\nvoid main() {\n    const items = [\"foo\", \"bar\", \"baz\"];\n    items[uniform(0, $)].writeln;\n}\n\n", "explain": ""}, {"task_name": "Pick random element", "task_url": "https://rosettacode.org/wiki/Pick_random_element", "task_cat": "Randomness", "lang": "Haskell", "code": "\n\nimport System.Random (randomRIO)\n\npick :: [a] -> IO a\npick xs = fmap (xs !!) $ randomRIO (0, length xs - 1)\n\nx <- pick [1, 2, 3]\n\n\nimport Data.Random\nsample $ randomElement  [1, 2, 3]\n\n\ndo \n  x <- sample $ randomElement  [1, 2, 3]\n  print x\n\n", "explain": "Creating a custom function:\nUsing the random-fu library:\nFor example:\n"}, {"task_name": "Pick random element", "task_url": "https://rosettacode.org/wiki/Pick_random_element", "task_cat": "Randomness", "lang": "VBScript", "code": "\nFunction pick_random(arr)\n\tSet objRandom = CreateObject(\"System.Random\")\n\tpick_random = arr(objRandom.Next_2(0,UBound(arr)+1))\nEnd Function\n\nWScript.Echo pick_random(Array(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"))\n\n\nOutput:\nd\n", "explain": ""}, {"task_name": "Pick random element", "task_url": "https://rosettacode.org/wiki/Pick_random_element", "task_cat": "Randomness", "lang": "Logo", "code": "\nWorks with: UCB Logo\npick [1 2 3]\n", "explain": ""}, {"task_name": "Pick random element", "task_url": "https://rosettacode.org/wiki/Pick_random_element", "task_cat": "Randomness", "lang": "F#", "code": "\nlet list = [\"a\"; \"b\"; \"c\"; \"d\"; \"e\"]\nlet rand = new System.Random()\nprintfn \"%s\" list.[rand.Next(list.Length)]\n\n", "explain": ""}, {"task_name": "Pick random element", "task_url": "https://rosettacode.org/wiki/Pick_random_element", "task_cat": "Randomness", "lang": "Groovy", "code": "\n\ndef list = [25, 30, 1, 450, 3, 78]\ndef random = new Random();\n\n(0..3).each {\n    def i = random.nextInt(list.size())\n    println \"list[${i}] == ${list[i]}\"\n}\n\n\nOutput:\nlist[3] == 450\nlist[2] == 1\nlist[5] == 78\nlist[3] == 450\n\n[25, 30, 1, 450, 3, 78].sort{new Random()}?.take(1)[0]\n\n", "explain": "Solution:\nAlternate Solution:\n"}, {"task_name": "Pick random element", "task_url": "https://rosettacode.org/wiki/Pick_random_element", "task_cat": "Randomness", "lang": "Zig", "code": "\n\nconst std = @import(\"std\");\n\nconst debug = std.debug;\nconst rand = std.rand;\nconst time = std.time;\n\ntest \"pick random element\" {\n    var pcg = rand.Pcg.init(time.milliTimestamp());\n\n    const chars = [_]u8{\n        'A', 'B', 'C', 'D',\n        'E', 'F', 'G', 'H',\n        'I', 'J', 'K', 'L',\n        'M', 'N', 'O', 'P',\n        'Q', 'R', 'S', 'T',\n        'U', 'V', 'W', 'X',\n        'Y', 'Z', '?', '!',\n        '<', '>', '(', ')',\n    };\n\n    var i: usize = 0;\n    while (i < 32)\u00a0: (i += 1) {\n        if (i\u00a0% 4 == 0) {\n            debug.warn(\"\\n  \", .{});\n        }\n        debug.warn(\"'{c}', \", .{chars[pcg.random.int(usize)\u00a0% chars.len]});\n    }\n\n    debug.warn(\"\\n\", .{});\n}\n\nOutput:\nTest [1/1] test \"pick random element\"...\n  'N', 'Q', 'H', '?', \n  'D', '>', 'Q', 'G', \n  'U', 'H', 'W', 'U', \n  'N', '(', 'E', 'K', \n  'Y', 'V', 'W', 'S', \n  'U', 'V', 'H', '<', \n  'Z', 'O', 'C', 'D', \n  'Y', 'J', '?', 'L', \nAll 1 tests passed.\n", "explain": "This example uses the PCG algorithm.\n"}, {"task_name": "Pick random element", "task_url": "https://rosettacode.org/wiki/Pick_random_element", "task_cat": "Randomness", "lang": "AWK", "code": "\n# syntax: GAWK -f PICK_RANDOM_ELEMENT.AWK\nBEGIN {\n    n = split(\"Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday\",day_of_week,\",\")\n    srand()\n    x = int(n*rand()) + 1\n    printf(\"%s\\n\",day_of_week[x])\n    exit(0)\n}\n\n\nOutput:\nGAWK -f PICK_RANDOM_ELEMENT.AWK\nSunday\nGAWK -f PICK_RANDOM_ELEMENT.AWK\nMonday\nGAWK -f PICK_RANDOM_ELEMENT.AWK\nWednesday\nGAWK -f PICK_RANDOM_ELEMENT.AWK\nTuesday\n", "explain": ""}]