[{"task_name": "Hostname", "task_url": "https://rosettacode.org/wiki/Hostname", "task_cat": "Programming environment operations", "lang": "Python", "code": "\nWorks with: Python version 2.5\nimport socket\nhost = socket.gethostname()\n\n", "explain": ""}, {"task_name": "Hostname", "task_url": "https://rosettacode.org/wiki/Hostname", "task_cat": "Programming environment operations", "lang": "Java", "code": "\nimport java.net.InetAddress;\nimport java.net.UnknownHostException;\n\nvoid printHostname() throws UnknownHostException {\n    InetAddress localhost = InetAddress.getLocalHost();\n    System.out.println(localhost.getHostName());\n}\n\npenguin\n\n", "explain": ""}, {"task_name": "Hostname", "task_url": "https://rosettacode.org/wiki/Hostname", "task_cat": "Programming environment operations", "lang": "C#", "code": "\nSystem.Net.Dns.GetHostName();\n\n", "explain": ""}, {"task_name": "Hostname", "task_url": "https://rosettacode.org/wiki/Hostname", "task_cat": "Programming environment operations", "lang": "JavaScript", "code": "\nWorks with: JScript\nvar network = new ActiveXObject('WScript.Network');\nvar hostname = network.computerName;\nWScript.echo(hostname);\n\n", "explain": ""}, {"task_name": "Hostname", "task_url": "https://rosettacode.org/wiki/Hostname", "task_cat": "Programming environment operations", "lang": "SQL", "code": "\nWorks with: Oracle\nselect host_name from v$instance;\n\n", "explain": ""}, {"task_name": "Hostname", "task_url": "https://rosettacode.org/wiki/Hostname", "task_cat": "Programming environment operations", "lang": "PHP", "code": "\necho $_SERVER['HTTP_HOST'];\n\necho php_uname('n');\n\nWorks with: PHP version 5.3+\necho gethostname();\n\n", "explain": ""}, {"task_name": "Hostname", "task_url": "https://rosettacode.org/wiki/Hostname", "task_cat": "Programming environment operations", "lang": "MATLAB", "code": "\n\n[failed,hostname] = system('hostname')\n\n", "explain": "This is a built-in MATLAB function. \"failed\" is a Boolean which will be false if the command sent to the OS succeeds. \"hostname\" is a string containing the system's hostname, provided that the external command hostname exists.\n"}, {"task_name": "Hostname", "task_url": "https://rosettacode.org/wiki/Hostname", "task_cat": "Programming environment operations", "lang": "Fortran", "code": "\nWorks with: gfortran\n\nprogram HostTest\n  character(len=128) :: name \n  call hostnm(name)\n  print *, name\nend program HostTest\n\n\nprogram test_hostname\n   use, intrinsic  :: iso_c_binding\n   implicit none\n   interface !to function: int gethostname(char *name, size_t namelen);\n      integer(c_int) function gethostname(name, namelen) bind(c)\n         use, intrinsic  :: iso_c_binding, only: c_char, c_int, c_size_t\n         integer(c_size_t), value, intent(in) :: namelen\n         character(len=1,kind=c_char), dimension(namelen),  intent(inout) ::  name\n      end function gethostname\n   end interface\n   integer(c_int) :: status\n   integer,parameter :: HOST_NAME_MAX=255\n   character(kind=c_char,len=1),dimension(HOST_NAME_MAX) :: cstr_hostname\n   integer(c_size_t) :: lenstr\n   character(len=:),allocatable :: hostname\n   lenstr = HOST_NAME_MAX\n   status = gethostname(cstr_hostname, lenstr)\n   hostname = c_to_f_string(cstr_hostname)\n   write(*,*) hostname, len(hostname)\n\n contains\n   ! convert c_string to f_string\n   pure function c_to_f_string(c_string) result(f_string)\n      use, intrinsic :: iso_c_binding, only: c_char, c_null_char\n      character(kind=c_char,len=1), intent(in) :: c_string(:)\n      character(len=:), allocatable :: f_string\n      integer i, n\n      i = 1\n      do\n         if (c_string(i) == c_null_char) exit\n         i = i + 1\n      end do\n      n = i - 1  ! exclude c_null_char\n      allocate(character(len=n) :: f_string)\n      f_string = transfer(c_string(1:n), f_string)\n   end function c_to_f_string\n\nend program test_hostname\n\n", "explain": "The function/subroutine HOSTNM is a GNU extension.\nUsing fortran 2003 C-interoperability we can call posix C function gethostname (unix system call) directly\n"}, {"task_name": "Hostname", "task_url": "https://rosettacode.org/wiki/Hostname", "task_cat": "Programming environment operations", "lang": "Go", "code": "\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc main() {\n\tfmt.Println(os.Hostname())\n}\n\n", "explain": "Use os.Hostname.\n"}, {"task_name": "Hostname", "task_url": "https://rosettacode.org/wiki/Hostname", "task_cat": "Programming environment operations", "lang": "Delphi", "code": "\nprogram ShowHostName;\n\n{$APPTYPE CONSOLE}\n\nuses Windows;\n\nvar\n  lHostName: array[0..255] of char;\n  lBufferSize: DWORD;\nbegin\n  lBufferSize := 256;\n  if GetComputerName(lHostName, lBufferSize) then\n    Writeln(lHostName)\n  else\n    Writeln('error getting host name');\nend.\n\n", "explain": ""}, {"task_name": "Hostname", "task_url": "https://rosettacode.org/wiki/Hostname", "task_cat": "Programming environment operations", "lang": "Ruby", "code": "\nrequire 'socket'\nhost = Socket.gethostname\n\n", "explain": ""}, {"task_name": "Hostname", "task_url": "https://rosettacode.org/wiki/Hostname", "task_cat": "Programming environment operations", "lang": "Rust", "code": "\n\nfn main() {\n    match hostname::get_hostname() {\n        Some(host) => println!(\"hostname: {}\", host),\n        None => eprintln!(\"Could not get hostname!\"),\n    }\n}\n\n", "explain": "Works on windows and linux with crate hostname version 0.1.5\n"}, {"task_name": "Hostname", "task_url": "https://rosettacode.org/wiki/Hostname", "task_cat": "Programming environment operations", "lang": "Swift", "code": "\n\nprint(ProcessInfo.processInfo.hostName)\n", "explain": "Swift 3\n"}, {"task_name": "Hostname", "task_url": "https://rosettacode.org/wiki/Hostname", "task_cat": "Programming environment operations", "lang": "R", "code": "\n\nSys.info()[[\"nodename\"]]\n\n\nsystem(\"hostname\", intern = TRUE)\n\n\nenv_var <- ifelse(.Platform$OS.type == \"windows\", \"COMPUTERNAME\", \"HOSTNAME\") \nSys.getenv(env_var)\n\n", "explain": "Sys.info provides information about the platform that R is running on.  The following code returns the hostname as a string.\nNote that Sys.info isn't guaranteed to be available on all platforms.  As an alternative, you can call an OS command.\n... or retrieve an environment variable\n"}, {"task_name": "Hostname", "task_url": "https://rosettacode.org/wiki/Hostname", "task_cat": "Programming environment operations", "lang": "COBOL", "code": "\n       identification division.\n       program-id. hostname.\n\n       data division.\n       working-storage section.\n       01 hostname pic x(256).\n       01 nullpos  pic 999 value 1.\n\n       procedure division.\n       call \"gethostname\" using hostname by value length of hostname\n       string hostname delimited by low-value into hostname\n           with pointer nullpos\n       display \"Host: \" hostname(1 : nullpos - 1)\n       goback.\n       end program hostname.\n\n", "explain": ""}, {"task_name": "Hostname", "task_url": "https://rosettacode.org/wiki/Hostname", "task_cat": "Programming environment operations", "lang": "Visual_Basic", "code": "\nWorks with: Visual Basic version 5\nWorks with: Visual Basic version 6\nWorks with: VBA version Access 97\nWorks with: VBA version 6.5\nWorks with: VBA version 7.1\nOption Explicit\n\nPrivate Declare Function GetComputerName Lib \"kernel32.dll\" Alias \"GetComputerNameW\" _\n  (ByVal lpBuffer As Long, ByRef nSize As Long) As Long\n \nPrivate Const MAX_COMPUTERNAME_LENGTH As Long = 31\nPrivate Const NO_ERR As Long = 0\n\nPrivate Function Hostname() As String\nDim i As Long, l As Long, s As String\n  s = Space$(MAX_COMPUTERNAME_LENGTH)\n  l = Len(s) + 1\n  i = GetComputerName(StrPtr(s), l)\n  Debug.Assert i <> 0\n  Debug.Assert l <> 0\n  Hostname = Left$(s, l)\nEnd Function\n\nSub Main()\n  Debug.Assert Hostname() = Environ$(\"COMPUTERNAME\")\nEnd Sub\n", "explain": ""}, {"task_name": "Hostname", "task_url": "https://rosettacode.org/wiki/Hostname", "task_cat": "Programming environment operations", "lang": "Ada", "code": "\n\nwith Ada.Text_IO; use Ada.Text_IO;\nwith GNAT.Sockets;\n\nprocedure Demo is\nbegin\n   Put_Line (GNAT.Sockets.Host_Name);\nend Demo;\n\n", "explain": "Works with GCC/GNAT\n"}, {"task_name": "Hostname", "task_url": "https://rosettacode.org/wiki/Hostname", "task_cat": "Programming environment operations", "lang": "Julia", "code": "\nprintln(gethostname())\n\n\nOutput:\nharlan\n\n", "explain": ""}, {"task_name": "Hostname", "task_url": "https://rosettacode.org/wiki/Hostname", "task_cat": "Programming environment operations", "lang": "Kotlin", "code": "\n// version 1.1.4\n\nimport java.net.InetAddress\n\nfun main(args: Array<String>) {\n    println(InetAddress.getLocalHost().hostName)\n}\n\n", "explain": ""}, {"task_name": "Hostname", "task_url": "https://rosettacode.org/wiki/Hostname", "task_cat": "Programming environment operations", "lang": "Perl", "code": "\nWorks with: Perl version 5.8.6\nLibrary: Sys::HostnameHostname\nuse Sys::Hostname;\n\n$name = hostname;\n\n", "explain": ""}, {"task_name": "Hostname", "task_url": "https://rosettacode.org/wiki/Hostname", "task_cat": "Programming environment operations", "lang": "Objective-C", "code": "\n\nNSLog(@\"%@\", [[NSProcessInfo processInfo] hostName]);\n\n\n2010-09-16 16:20:00.000 Playground[1319:a0f] sierra117.local // Hostname is sierra117.local.\n\n", "explain": "Cocoa / Cocoa Touch / GNUstep:\nExample Output:\n"}, {"task_name": "Hostname", "task_url": "https://rosettacode.org/wiki/Hostname", "task_cat": "Programming environment operations", "lang": "Lua", "code": "\n\nsocket = require \"socket\"\nprint( socket.dns.gethostname() )\n\n", "explain": "Requires: LuaSocket\n"}, {"task_name": "Hostname", "task_url": "https://rosettacode.org/wiki/Hostname", "task_cat": "Programming environment operations", "lang": "Scala", "code": "\nprintln(java.net.InetAddress.getLocalHost.getHostName)\n\n", "explain": ""}, {"task_name": "Hostname", "task_url": "https://rosettacode.org/wiki/Hostname", "task_cat": "Programming environment operations", "lang": "D", "code": "\nimport std.stdio, std.socket;\n\nvoid main() {\n    writeln(Socket.hostName());\n}\n\n", "explain": ""}, {"task_name": "Hostname", "task_url": "https://rosettacode.org/wiki/Hostname", "task_cat": "Programming environment operations", "lang": "Haskell", "code": "\nLibrary: network\nimport Network.BSD\nmain = do hostName <- getHostName\n          putStrLn hostName\n\n\nmodule GetHostName where\n\nimport Foreign.Marshal.Array ( allocaArray0, peekArray0 )\nimport Foreign.C.Types ( CInt(..), CSize(..) )\nimport Foreign.C.String ( CString, peekCString )\nimport Foreign.C.Error ( throwErrnoIfMinus1_ )\n\ngetHostName :: IO String\ngetHostName = do\n  let size = 256\n  allocaArray0 size $ \\ cstr -> do\n    throwErrnoIfMinus1_ \"getHostName\" $ c_gethostname cstr (fromIntegral size)\n    peekCString cstr\n\nforeign import ccall \"gethostname\" \n   c_gethostname :: CString -> CSize -> IO CInt\n\nmain = do hostName <- getHostName\n          putStrLn hostName\n\n", "explain": "Or if you don't want to depend on the network package being installed, you can implement it on your own (this implementation is based on the implementation in the network package).\n\n"}, {"task_name": "Hostname", "task_url": "https://rosettacode.org/wiki/Hostname", "task_cat": "Programming environment operations", "lang": "PL/SQL", "code": "\nSET serveroutput on\nBEGIN\n  DBMS_OUTPUT.PUT_LINE(UTL_INADDR.GET_HOST_NAME);  \nEND;\n\n", "explain": ""}, {"task_name": "Hostname", "task_url": "https://rosettacode.org/wiki/Hostname", "task_cat": "Programming environment operations", "lang": "VBScript", "code": "\nSet objNetwork = CreateObject(\"WScript.Network\")\nWScript.Echo objNetwork.ComputerName\n", "explain": ""}, {"task_name": "Hostname", "task_url": "https://rosettacode.org/wiki/Hostname", "task_cat": "Programming environment operations", "lang": "Scheme", "code": "\nWorks with: Chicken Scheme\n(use posix)\n(get-host-name)\n\nWorks with: Guile\n(gethostname)\n\n", "explain": ""}, {"task_name": "Hostname", "task_url": "https://rosettacode.org/wiki/Hostname", "task_cat": "Programming environment operations", "lang": "PowerShell", "code": "\n\n$Env:COMPUTERNAME\n\n\n[Net.Dns]::GetHostName()\n\n", "explain": "Windows systems have the ComputerName environment variable which can be used:\nAlso PowerShell can use .NET classes and methods:\n"}, {"task_name": "Hostname", "task_url": "https://rosettacode.org/wiki/Hostname", "task_cat": "Programming environment operations", "lang": "F#", "code": "\nprintfn \"%s\" (System.Net.Dns.GetHostName())\n\n", "explain": ""}, {"task_name": "Hostname", "task_url": "https://rosettacode.org/wiki/Hostname", "task_cat": "Programming environment operations", "lang": "Groovy", "code": "\nprintln InetAddress.localHost.hostName\n\n", "explain": ""}, {"task_name": "Hostname", "task_url": "https://rosettacode.org/wiki/Hostname", "task_cat": "Programming environment operations", "lang": "AWK", "code": "\n\n\nWARNING: the following purported solution makes an assumption about environment variables that may not be applicable in all circumstances.\n\n$ awk 'BEGIN{print ENVIRON[\"HOST\"]}'\nE51A08ZD\n\n", "explain": ""}]