[{"task_name": "URL encoding", "task_url": "https://rosettacode.org/wiki/URL_encoding", "task_cat": "String manipulation", "lang": "Python", "code": "\nimport urllib\ns = 'http://foo/bar/'\ns = urllib.quote(s)\n\n\n", "explain": "There is also urllib.quote_plus(), which also encodes spaces as \"+\" signs\n"}, {"task_name": "URL encoding", "task_url": "https://rosettacode.org/wiki/URL_encoding", "task_cat": "String manipulation", "lang": "C", "code": "\n#include <stdio.h>\n#include <ctype.h>\n \nchar rfc3986[256] = {0};\nchar html5[256] = {0};\n\n/* caller responsible for memory */\nvoid encode(const char *s, char *enc, char *tb)\n{\n\tfor (; *s; s++) {\n\t\tif (tb[*s]) sprintf(enc, \"%c\", tb[*s]);\n\t\telse        sprintf(enc, \"%%%02X\", *s);\n\t\twhile (*++enc);\n\t}\n}\n \nint main()\n{\n\tconst char url[] = \"http://foo bar/\";\n\tchar enc[(strlen(url) * 3) + 1];\n \n\tint i;\n\tfor (i = 0; i < 256; i++) {\n\t\trfc3986[i] = isalnum(i)||i == '~'||i == '-'||i == '.'||i == '_'\n\t\t\t? i : 0;\n\t\thtml5[i] = isalnum(i)||i == '*'||i == '-'||i == '.'||i == '_'\n\t\t\t? i : (i == ' ') ? '+' : 0;\n\t}\n \n\tencode(url, enc, rfc3986);\n\tputs(enc);\n \n\treturn 0;\n}\n\n", "explain": ""}, {"task_name": "URL encoding", "task_url": "https://rosettacode.org/wiki/URL_encoding", "task_cat": "String manipulation", "lang": "C++", "code": "\n\n#include <QByteArray>\n#include <iostream>\n\nint main( ) {\n   QByteArray text ( \"http://foo bar/\" ) ;\n   QByteArray encoded( text.toPercentEncoding( ) ) ;\n   std::cout << encoded.data( ) << '\\n' ;\n   return 0 ;\n}\n\n\nOutput:\nhttp%3A%2F%2Ffoo%20bar%2F\n", "explain": "using Qt 4.6 as a library\n"}, {"task_name": "URL encoding", "task_url": "https://rosettacode.org/wiki/URL_encoding", "task_cat": "String manipulation", "lang": "Java", "code": "\n\nimport java.net.URLEncoder;\nimport java.nio.charset.StandardCharsets;\n\nURLEncoder.encode(\"http://foo bar/\", StandardCharsets.UTF_8)\n\n\nString encode(String string) {\n    StringBuilder encoded = new StringBuilder();\n    for (char character : string.toCharArray()) {\n        switch (character) {\n            /* rfc3986 and html5 */\n            case '-', '.', '_', '~', '*' -> encoded.append(character);\n            case ' ' -> encoded.append('+');\n            default -> {\n                if (alphanumeric(character))\n                    encoded.append(character);\n                else {\n                    encoded.append(\"%\");\n                    encoded.append(\"%02x\".formatted((int) character));\n                }\n            }\n        }\n    }\n    return encoded.toString();\n}\n\nboolean alphanumeric(char character) {\n    return (character >= 'A' && character <= 'Z')\n        || (character >= 'a' && character <= 'z')\n        || (character >= '0' && character <= '9');\n}\n\nhttp%3a%2f%2ffoo+bar%2f\n\n", "explain": "Java includes the URLEncoder and URLDecoder classes for this specific task.\nAlternately, you could implement this with a basic for-loop.\n"}, {"task_name": "URL encoding", "task_url": "https://rosettacode.org/wiki/URL_encoding", "task_cat": "String manipulation", "lang": "C#", "code": "\nusing System;\n\nnamespace URLEncode\n{\n    internal class Program\n    {\n        private static void Main(string[] args)\n        {\n            Console.WriteLine(Encode(\"http://foo bar/\"));\n        }\n\n        private static string Encode(string uri)\n        {\n            return Uri.EscapeDataString(uri);\n        }\n    }\n}\n\nOutput:\nhttp%3A%2F%2Ffoo%20bar%2F\n\n", "explain": ""}, {"task_name": "URL encoding", "task_url": "https://rosettacode.org/wiki/URL_encoding", "task_cat": "String manipulation", "lang": "JavaScript", "code": "\n\nvar normal = 'http://foo/bar/';\nvar encoded = encodeURIComponent(normal);\n\n", "explain": "Confusingly, there are 3 different URI encoding functions in JavaScript: escape(), encodeURI(), and encodeURIComponent(). Each of them encodes a different set of characters. See this article and this article for more information and comparisons.\n"}, {"task_name": "URL encoding", "task_url": "https://rosettacode.org/wiki/URL_encoding", "task_cat": "String manipulation", "lang": "PHP", "code": "\n<?php\n$s = 'http://foo/bar/';\n$s = rawurlencode($s);\n?>\n\n\n", "explain": "There is also urlencode(), which also encodes spaces as \"+\" signs\n"}, {"task_name": "URL encoding", "task_url": "https://rosettacode.org/wiki/URL_encoding", "task_cat": "String manipulation", "lang": "Go", "code": "\npackage main\n\nimport (\n    \"fmt\"\n    \"net/url\"\n)\n\nfunc main() {\n    fmt.Println(url.QueryEscape(\"http://foo bar/\"))\n}\n\n\nOutput:\nhttp%3A%2F%2Ffoo+bar%2F\n\n\n", "explain": "\n"}, {"task_name": "URL encoding", "task_url": "https://rosettacode.org/wiki/URL_encoding", "task_cat": "String manipulation", "lang": "Delphi", "code": "\nWorks with: Delphi version 6.0\nLibrary: SysUtils,StdCtrls\n\nfunction EncodeURL(URL: string): string;\nvar I: integer;\nbegin\nResult:='';\nfor I:=1 to Length(URL) do\n if URL[I] in ['0'..'9', 'A'..'Z', 'a'..'z'] then Result:=Result+URL[I]\n else Result:=Result+'%'+IntToHex(byte(URL[I]),2);\nend;\n\nprocedure EncodeAndShowURL(Memo: TMemo; URL: string);\nvar ES: string;\nbegin\nMemo.Lines.Add('Unencoded URL: '+URL);\nES:=EncodeURL(URL);\nMemo.Lines.Add('Encoded URL:   '+ES);\nMemo.Lines.Add('');\nend;\n\nprocedure ShowEncodedURLs(Memo: TMemo);\nbegin\nEncodeAndShowURL(Memo,'http://foo bar/');\nEncodeAndShowURL(Memo,'https://rosettacode.org/wiki/URL_encoding');\nEncodeAndShowURL(Memo,'https://en.wikipedia.org/wiki/Pikes_Peak_granite');\nend;\n\n\nOutput:\nUnencoded URL: http://foo bar/\nEncoded URL:   http%3A%2F%2Ffoo%20bar%2F\n\nUnencoded URL: https://rosettacode.org/wiki/URL_encoding\nEncoded URL:   https%3A%2F%2Frosettacode%2Eorg%2Fwiki%2FURL%5Fencoding\n\nUnencoded URL: https://en.wikipedia.org/wiki/Pikes_Peak_granite\nEncoded URL:   https%3A%2F%2Fen%2Ewikipedia%2Eorg%2Fwiki%2FPikes%5FPeak%5Fgranite\n\nElapsed Time: 11.734 ms.\n\n\n", "explain": "\n\n"}, {"task_name": "URL encoding", "task_url": "https://rosettacode.org/wiki/URL_encoding", "task_cat": "String manipulation", "lang": "Ruby", "code": "\n\nrequire 'cgi'\nputs CGI.escape(\"http://foo bar/\").gsub(\"+\", \"%20\")\n# => \"http%3A%2F%2Ffoo%20bar%2F\"\n\n\nWorks with: Ruby version 1.9.2\nrequire 'uri'\nputs URI.encode_www_form_component(\"http://foo bar/\").gsub(\"+\", \"%20\")\n# => \"http%3A%2F%2Ffoo%20bar%2F\"\n\n", "explain": "CGI.escape encodes all characters except '-.0-9A-Z_a-z'.\nPrograms should not call URI.escape (alias URI.encode), because it fails to encode some characters. URI.escape is obsolete since Ruby 1.9.2.\nURI.encode_www_form_component is a new method from Ruby 1.9.2. It obeys HTML 5 and encodes all characters except '-.0-9A-Z_a-z' and '*'.\n"}, {"task_name": "URL encoding", "task_url": "https://rosettacode.org/wiki/URL_encoding", "task_cat": "String manipulation", "lang": "Rust", "code": "\nconst INPUT: &str = \"http://foo bar/\";\nconst MAX_CHAR_VAL: u32 = std::char::MAX as u32;\n \nfn main() {\n    let mut buff = [0; 4];\n    println!(\"{}\", INPUT.chars()\n        .map(|ch| {\n            match ch as u32 {\n                0 ..= 47 | 58 ..= 64 | 91 ..= 96 | 123 ..= MAX_CHAR_VAL => {\n                    ch.encode_utf8(&mut buff);\n                    buff[0..ch.len_utf8()].iter().map(|&byte| format!(\"%{:X}\", byte)).collect::<String>()\n                },\n                _ => ch.to_string(),\n            }\n        })\n        .collect::<String>()\n    );\n}\n\n\nOutput:\nhttp%3A%2F%2Ffoo%20bar%2F\n\n", "explain": ""}, {"task_name": "URL encoding", "task_url": "https://rosettacode.org/wiki/URL_encoding", "task_cat": "String manipulation", "lang": "R", "code": "\n\nURLencode(\"http://foo bar/\")\n\n\nlibrary(RCurl)\ncurlEscape(\"http://foo bar/\")\n\n", "explain": "R has a built-in\nfunction, but it doesn't fully follow RFC guidelines, so we have to use another R package to accomplish the task:\n"}, {"task_name": "URL encoding", "task_url": "https://rosettacode.org/wiki/URL_encoding", "task_cat": "String manipulation", "lang": "Ada", "code": "\nLibrary: AWS\nwith AWS.URL;\nwith Ada.Text_IO; use Ada.Text_IO;\nprocedure Encode is\n   Normal : constant String := \"http://foo bar/\";\nbegin\n   Put_Line (AWS.URL.Encode (Normal));\nend Encode;\n\n\nOutput:\nhttp%3A%2F%2Ffoo%20bar%2F\n", "explain": ""}, {"task_name": "URL encoding", "task_url": "https://rosettacode.org/wiki/URL_encoding", "task_cat": "String manipulation", "lang": "Julia", "code": "\n \n//version 1.0.1\nimport HTTP.URIs: escapeuri\n\ndcd = \"http://foo bar/\"\nenc = escapeuri(dcd)\n\nprintln(dcd, \" => \", enc)\n\n\nOutput:\nhttp://foo bar/ => http%3A%2F%2Ffoo%20bar%2F\n\n", "explain": ""}, {"task_name": "URL encoding", "task_url": "https://rosettacode.org/wiki/URL_encoding", "task_cat": "String manipulation", "lang": "Kotlin", "code": "\n// version 1.1.2\n\nimport java.net.URLEncoder\n\nfun main(args: Array<String>) {\n    val url = \"http://foo bar/\"\n    println(URLEncoder.encode(url, \"utf-8\")) // note: encodes space to + not %20\n}\n\n\nOutput:\nhttp%3A%2F%2Ffoo+bar%2F\n\n", "explain": ""}, {"task_name": "URL encoding", "task_url": "https://rosettacode.org/wiki/URL_encoding", "task_cat": "String manipulation", "lang": "Perl", "code": "\nsub urlencode {\n    my $s = shift;\n    $s =~ s/([^-A-Za-z0-9_.!~*'() ])/sprintf(\"%%%02X\", ord($1))/eg;\n    $s =~ tr/ /+/;\n    return $s;\n}\n\nprint urlencode('http://foo bar/').\"\\n\";\n\n\nOutput:\nhttp%3A%2F%2Ffoo+bar%2F\n\nuse URI::Escape;\n\nmy $s = 'http://foo/bar/';\nprint uri_escape($s);\n\n\nuse 5.10.0;\nuse CGI;\n\nmy $s = 'http://foo/bar/';\nsay $s = CGI::escape($s);\nsay $s = CGI::unescape($s);\n\n", "explain": "Use standard CGI module:\n"}, {"task_name": "URL encoding", "task_url": "https://rosettacode.org/wiki/URL_encoding", "task_cat": "String manipulation", "lang": "Objective-C", "code": "\nNSString *normal = @\"http://foo bar/\";\nNSString *encoded = [normal stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];\nNSLog(@\"%@\", encoded);\n\n\nWorks with: Mac OS X version 10.9+\nWorks with: iOS version 7+\nNSString *normal = @\"http://foo bar/\";\nNSString *encoded = [normal stringByAddingPercentEncodingWithAllowedCharacters:[NSCharacterSet alphanumericCharacterSet]];\nNSLog(@\"%@\", encoded);\n\n\n", "explain": "The Core Foundation function CFURLCreateStringByAddingPercentEscapes() provides more options.\nFor encoding for various parts of the URL, the allowed character sets [NSCharacterSet URLUserAllowedCharacterSet], [NSCharacterSet URLPasswordAllowedCharacterSet], [NSCharacterSet URLHostAllowedCharacterSet], [NSCharacterSet URLPathAllowedCharacterSet], [NSCharacterSet URLQueryAllowedCharacterSet], or [NSCharacterSet URLFragmentAllowedCharacterSet] are provided.\n"}, {"task_name": "URL encoding", "task_url": "https://rosettacode.org/wiki/URL_encoding", "task_cat": "String manipulation", "lang": "Lua", "code": "\nfunction encodeChar(chr)\n\treturn string.format(\"%%%X\",string.byte(chr))\nend\n\nfunction encodeString(str)\n\tlocal output, t = string.gsub(str,\"[^%w]\",encodeChar)\n\treturn output\nend\n\n-- will print \"http%3A%2F%2Ffoo%20bar%2F\"\nprint(encodeString(\"http://foo bar/\"))\n\n", "explain": ""}, {"task_name": "URL encoding", "task_url": "https://rosettacode.org/wiki/URL_encoding", "task_cat": "String manipulation", "lang": "Scala", "code": "\nLibrary: Scalaimport java.net.{URLDecoder, URLEncoder}\nimport scala.compat.Platform.currentTime\n\nobject UrlCoded extends App {\n  val original = \"\"\"http://foo bar/\"\"\"\n  val encoded: String = URLEncoder.encode(original, \"UTF-8\")\n\n  assert(encoded == \"http%3A%2F%2Ffoo+bar%2F\", s\"Original: $original not properly encoded: $encoded\")\n\n  val percentEncoding = encoded.replace(\"+\", \"%20\")\n  assert(percentEncoding == \"http%3A%2F%2Ffoo%20bar%2F\", s\"Original: $original not properly percent-encoded: $percentEncoding\")\n\n  assert(URLDecoder.decode(encoded, \"UTF-8\") == URLDecoder.decode(percentEncoding, \"UTF-8\"))\n\n  println(s\"Successfully completed without errors. [total ${currentTime - executionStart} ms]\")\n}\n\n", "explain": ""}, {"task_name": "URL encoding", "task_url": "https://rosettacode.org/wiki/URL_encoding", "task_cat": "String manipulation", "lang": "D", "code": "\nimport std.stdio, std.uri;\n\nvoid main() {\n    writeln(encodeComponent(\"http://foo bar/\"));\n}\n\nhttp%3A%2F%2Ffoo%20bar%2F\n", "explain": ""}, {"task_name": "URL encoding", "task_url": "https://rosettacode.org/wiki/URL_encoding", "task_cat": "String manipulation", "lang": "Haskell", "code": "\nimport qualified Data.Char as Char\nimport Text.Printf\n\nencode :: Char -> String\nencode c\n  | c == ' ' = \"+\"\n  | Char.isAlphaNum c || c `elem` \"-._~\" = [c]\n  | otherwise = printf \"%%%02X\" c\n\nurlEncode :: String -> String\nurlEncode = concatMap encode\n\nmain :: IO ()\nmain = putStrLn $ urlEncode \"http://foo bar/\"\n\n\nOutput:\nhttp%3A%2F%2Ffoo+bar%2F\n", "explain": ""}, {"task_name": "URL encoding", "task_url": "https://rosettacode.org/wiki/URL_encoding", "task_cat": "String manipulation", "lang": "VBScript", "code": "\nFunction UrlEncode(url)\n\tFor i = 1 To Len(url)\n\t\tn = Asc(Mid(url,i,1))\n\t\tIf (n >= 48 And n <= 57) Or (n >= 65 And n <= 90) _\n\t\t\tOr (n >= 97 And n <= 122) Then\n\t\t\tUrlEncode = UrlEncode & Mid(url,i,1)\n\t\tElse\n\t\t\tChrHex = Hex(Asc(Mid(url,i,1)))\n                        For j = 0 to (Len(ChrHex) / 2) - 1\n\t\t\t    UrlEncode = UrlEncode & \"%\" & Mid(ChrHex,(2*j) + 1,2)\n                        Next\n\t\tEnd If\n\tNext\nEnd Function\n\nWScript.Echo UrlEncode(\"http://foo bar\u00e9/\")\n\n\nOutput:\nhttp%3A%2F%2Ffoo%20bar%C3%A9%2F\n", "explain": ""}, {"task_name": "URL encoding", "task_url": "https://rosettacode.org/wiki/URL_encoding", "task_cat": "String manipulation", "lang": "Apex", "code": "\nEncodingUtil.urlEncode('http://foo bar/', 'UTF-8')\nhttp%3A%2F%2Ffoo+bar%2F\n", "explain": ""}, {"task_name": "URL encoding", "task_url": "https://rosettacode.org/wiki/URL_encoding", "task_cat": "String manipulation", "lang": "ColdFusion", "code": "\n", "explain": ""}, {"task_name": "URL encoding", "task_url": "https://rosettacode.org/wiki/URL_encoding", "task_cat": "String manipulation", "lang": "F#", "code": "\nopen System\n\n[<EntryPoint>]\nlet main args =\n    printfn \"%s\" (Uri.EscapeDataString(args.[0]))\n    0\n\n\nOutput:\n>URLencoding.exe \"http://foo bar/\"\nhttp%3A%2F%2Ffoo%20bar%2F\n", "explain": ""}, {"task_name": "URL encoding", "task_url": "https://rosettacode.org/wiki/URL_encoding", "task_cat": "String manipulation", "lang": "Groovy", "code": "\ndef normal = \"http://foo bar/\"\ndef encoded = URLEncoder.encode(normal, \"utf-8\")\nprintln encoded\n\n\nOutput:\nhttp%3A%2F%2Ffoo+bar%2F\n\n", "explain": ""}, {"task_name": "URL encoding", "task_url": "https://rosettacode.org/wiki/URL_encoding", "task_cat": "String manipulation", "lang": "AWK", "code": "\nBEGIN {\n\tfor (i = 0; i <= 255; i++)\n\t\tord[sprintf(\"%c\", i)] = i\n}\n\n# Encode string with application/x-www-form-urlencoded escapes.\nfunction escape(str,    c, len, res) {\n\tlen = length(str)\n\tres = \"\"\n\tfor (i = 1; i <= len; i++) {\n\t\tc = substr(str, i, 1);\n\t\tif (c ~ /[0-9A-Za-z]/)\n\t\t#if (c ~ /[-._*0-9A-Za-z]/)\n\t\t\tres = res c\n\t\t#else if (c == \" \")\n\t\t#\tres = res \"+\"\n\t\telse\n\t\t\tres = res \"%\" sprintf(\"%02X\", ord[c])\n\t}\n\treturn res\n}\n\n# Escape every line of input.\n{ print escape($0) }\n\n\n", "explain": "The array ord[] uses idea from Character codes#AWK.\nTo follow the rules for HTML 5, uncomment the two lines that convert \" \" to \"+\", and use the regular expression that preserves \"-._*\".\n"}]