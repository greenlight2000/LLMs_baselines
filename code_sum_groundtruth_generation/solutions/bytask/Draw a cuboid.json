[{"task_name": "Draw a cuboid", "task_url": "https://rosettacode.org/wiki/Draw_a_cuboid", "task_cat": "3D", "lang": "Python", "code": "\nAscii-Art[edit]\ndef _pr(t, x, y, z):\n    txt = '\\n'.join(''.join(t[(n,m)] for n in range(3+x+z)).rstrip()\n                    for m in reversed(range(3+y+z)))\n    return txt\n\t\t\ndef cuboid(x,y,z):\n    t = {(n,m):' ' for n in range(3+x+z) for m in range(3+y+z)}\n    xrow = ['+'] + ['%i' % (i % 10) for i in range(x)] + ['+']\n    for i,ch in enumerate(xrow):\n        t[(i,0)] = t[(i,1+y)] = t[(1+z+i,2+y+z)] = ch\n    if _debug: print(_pr(t, x, y, z))\n    ycol = ['+'] + ['%i' % (j % 10) for j in range(y)] + ['+']\n    for j,ch in enumerate(ycol):\n        t[(0,j)] = t[(x+1,j)] = t[(2+x+z,1+z+j)] = ch\n    zdepth = ['+'] + ['%i' % (k % 10) for k in range(z)] + ['+']\n    if _debug: print(_pr(t, x, y, z))\n    for k,ch in enumerate(zdepth):\n        t[(k,1+y+k)] = t[(1+x+k,1+y+k)] = t[(1+x+k,k)] = ch\n\t\n    return _pr(t, x, y, z)\n\n\n_debug = False\nif __name__ == '__main__':\n    for dim in ((2,3,4), (3,4,2), (4,2,3)):\n        print(\"CUBOID%r\" % (dim,), cuboid(*dim), sep='\\n')\n\n\nOutput:\nCUBOID(2, 3, 4)\n     +01+\n    3  32\n   2  2 1\n  1  1  0\n 0  0   +\n+01+   3\n2  2  2\n1  1 1\n0  00\n+01+\nCUBOID(3, 4, 2)\n   +012+\n  1   13\n 0   0 2\n+012+  1\n3   3  0\n2   2  +\n1   1 1\n0   00\n+012+\nCUBOID(4, 2, 3)\n    +0123+\n   2    21\n  1    1 0\n 0    0  +\n+0123+  2\n1    1 1\n0    00\n+0123+\nLibrary: VPython[edit]\n\nWorks with: Python version 2.7.5\nShort version[edit]\nfrom visual import *\nmybox = box(pos=(0,0,0), length=4, height=2, width=3, axis=(-0.1,-0.1,0.1) ) \nscene.title = \"VPython: cuboid\"\n\nCuboid viewer[edit]\n\nfrom __future__ import print_function, division\nfrom visual import *\nimport itertools\n\ntitle = \"VPython: Draw a cuboid\"\nscene.title = title\nprint( \"%s\\n\" % title )\n\nmsg = \"\"\"\nDrag with right mousebutton to rotate view.\nDrag up+down with middle mousebutton to zoom.\nLeft mouseclick to show info.\n\nPress x,X, y,Y, z,Z to rotate the box in single steps.\nPress b, c,o,m to change background, color, opacity, material.\nPress r,R to rotate, d,a for demo, automatic,  space to stop.\nPress h to show this help,  ESC or q to quit.\n\"\"\"\n\n#...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+...\n\n## Rotate one step per keypress:\n\ndef rotX(obj, a) :\n    obj.rotate( angle=a, axis=(1,0,0) )\ndef rotY(obj, a) :\n    obj.rotate( angle=a, axis=(0,1,0) )\ndef rotZ(obj, a) :\n    obj.rotate( angle=a, axis=(0,0,1) )\n\n## Selection of background-colors:\n\nbg_list = [color.gray(0.2), color.gray(0.4), color.gray(0.7), color.gray(0.9)]\nbg = itertools.cycle(bg_list)\ndef backgr() :\n    b = next(bg)\n    print(\"BackgroundColor=\",b)\n    scene.background = b\n\n## Selection of colors:\n\ncol_list = [color.white, color.red,  color.orange, color.yellow,  \n            color.green, color.blue, color.cyan,   color.magenta, \n            color.black]\ncol = itertools.cycle(col_list)\n#c = col.next()\n#c = next(col)\ndef paint(obj) :\n    c = next(col)\n    print(\"Color=\",c)\n    obj.color = c\n\n## Selection of opacity / transparancy\u00a0:\n\nopa_list = [1.0, 0.7, 0.5, 0.2]\nopa = itertools.cycle(opa_list)\ndef solid(obj) :\n    o = next(opa)\n    print(\"opacity =\",o)\n    obj.opacity = o\n\n## Selection of materials:\n\nmName_list = [\"None\",\n              \"wood\",\n              \"rough\",\n              \"bricks\",\n              \"glass\",\n              \"earth\",\n              \"plastic\",\n              \"ice\",\n              \"diffuse\",\n              \"marble\" ]\nmat_list  = [ None,\n              materials.wood,\n              materials.rough,\n              materials.bricks,\n              materials.glass,\n              materials.earth,\n              materials.plastic,\n              materials.ice,\n              materials.diffuse,\n              materials.marble ]\nmName = itertools.cycle(mName_list)\nmat   = itertools.cycle(mat_list)\ndef surface(obj) :\n    mM = next(mat)\n    mN = next(mName)\n    print(\"Material:\", mN)\n    obj.material = mM\n    obj.mat      = mN\n\n## Selection for rotation-angle & axis\u00a0:\n\nrotAng_list = [ 0.0, 0.005, 0.0, -0.005 ]\nrotDir_list = [ (1,0,0), (0,1,0), (0,0,1) ]\n\nrotAng = itertools.cycle(rotAng_list)\nrotDir = itertools.cycle(rotDir_list)\n\nrotAn = next(rotAng)     # rotAn = 0.005\nrotAx = next(rotDir)     # rotAx = (1,0,0)\n\ndef rotAngle() :\n    global rotAn\n    rotAn = next(rotAng)\n    print(\"RotateAngle=\",rotAn)\n\ndef rotAxis() :\n    global rotAx\n    rotAx = next(rotDir)\n    print(\"RotateAxis=\",rotAx)\n\n## List of keypresses for demo:\n\n#demoC_list = [ \"h\", \"c\", \"a\", \"o\", \"m\", \"b\" ]\ndemoCmd_list = \"rcbr\"+\"robr\"+\"rmR_r?\"\ndemoCmd = itertools.cycle(demoCmd_list)\ndef demoStep() :\n    k = next(demoCmd)\n    print(\"Demo:\",k)\n    cmd(k)\n\n#...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+...\n\ndef objCount():\n    n=0\n    for obj in scene.objects:\n        n=n+1\n    return n\n            \ndef objInfo(obj) :\n    print( \"\\nObject:\", obj )\n    print( \"Pos:\",  obj.pos,   \"Size:\", obj.size )\n    print( \"Axis:\", obj.axis,  \"Up:\",   obj.up )\n    print( \"Color\", obj.color, obj.opacity )\n    print( \"Mat:\",  obj.mat,   obj.material )\n\ndef sceneInfo(sc) :\n    print( \"\\nScene:\",  sc )\n    print( \".width x height:\",   sc.width, \"x\", sc.height )\n    print( \".range:\",   sc.range, \".scale:\", sc.scale )\n    print( \".center:\",  sc.center )    # Camera\n    print( \".forward:\", sc.forward, \".fov:\", sc.fov )\n    print( \"Mouse:\",    sc.mouse.camera, \"ray:\", sc.mouse.ray )\n    print( \".ambient:\", sc.ambient )\n    print( \"Lights:\",   sc.lights  )    # distant_light\n    print( \"objects:\", objCount(), scene.objects )\n    \n#...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+...\n\nscene.width  = 600\nscene.height = 400\nscene.range  = 4\n#scene.autocenter = True\n#scene.background = color.gray(0.2)\nscene.background = next(bg)\n\nautoDemo = -1\n\nprint( msg )\n\n\n## Create cuboid (aka \"box\")\u00a0:\n\n# c = box()     # using default-values --> cube\n# c = box(pos=(0,0,0), length=4, height=2, width=3, axis=(-0.1,-0.1,0.1) )\n##c  = box(pos =( 0.0, 0.0, 0.0 ),\n##         size=( 4, 2, 3 ),            # L,H,W\n##         axis=( 1.0, 0.0, 0.0 ),\n##         up  =( 0.0, 1.0, 0.0 ),\n##         color   = color.orange,\n##         opacity = 1.0,\n##         material= materials.marble\n##         )\nc  = box(pos =( 0.0, 0.0, 0.0 ),\n         size=( 4, 2, 3 ),            # L,H,W\n         axis=( 1.0, 0.0, 0.0 ),\n         up  =( 0.0, 1.0, 0.0 )\n         )\nprint(\"Box:\", c)\npaint(c)     # c.color    = color.red\nsolid(c)     # c.opacity  = 1.0\nsurface(c)   # c.material = materials.marble\n\nrotX(c,0.4)         # rotate box, to bring three faces into view\nrotY(c,0.6)\n\n#sceneInfo(scene)\n#objInfo(c)\nprint(\"\\nPress 'a' to start auto-running demo.\")\n\n#...+....1....+....2....+....3....+....4....+....5....+....6....+....7....+...\n\n\n## Processing of input:\n\ncCount = 0\ndef click():\n    global cCount\n    cCount=cCount+1\n    sceneInfo(scene)\n    objInfo(c)\nscene.bind( 'click', click )\n\ndef keyInput():\n    key = scene.kb.getkey()\n    print( 'Key: \"%s\"' % key )\n\n    if ( (key == 'esc') or (key == 'q') ) :\n        print( \"Bye!\" )\n        exit(0)\n    else :\n        cmd(key)\nscene.bind('keydown', keyInput)\n\ndef cmd(key):\n    global autoDemo\n    if (key == 'h') :  print( msg )\n    if (key == '?') :  print( msg )\n    if (key == 's') :  sceneInfo(scene)\n    if (key == 'i') :  objInfo(c)\n\n    if (key == 'x') :  rotX(c, 0.1)\n    if (key == 'X') :  rotX(c,-0.1)\n    if (key == 'y') :  rotY(c, 0.1)\n    if (key == 'Y') :  rotY(c,-0.1)\n    if (key == 'z') :  rotZ(c, 0.1)\n    if (key == 'Z') :  rotZ(c,-0.1)\n\n    if (key == 'c') :  paint(c)\n    if (key == 'o') :  solid(c)\n    if (key == 'm') :  surface(c)\n\n    if (key == 'b') :  backgr()\n    if (key == 'r') :  rotAngle()\n    if (key == 'R') :  rotAxis()\n    if (key == 'd') :  demoStep()\n    if (key == 'a') :  autoDemo = -autoDemo\n    if (key == 'A') :  autoDemo = -autoDemo\n    if (key == ' ') :  stop()\n\ndef stop() :\n    global autoDemo, rotAn\n    autoDemo = -1\n    while rotAn <> 0 :\n      rotAngle() \n    print(\"**Stop**\")\n      \nr=100\nt=0\nwhile True:                 # Animation-loop\n    rate(50)\n    t = t+1\n    if rotAn != 0 :\n        c.rotate( angle=rotAn, axis=rotAx )\n\n    if t>=r :\n        t=0\n        if autoDemo>0 :\n            demoStep()\n\n", "explain": "The cuboid (otherwise known as a \"box\"\u00a0:)\nThis has a lot of extras around the cuboid,\nso you can rotate the box (stepwise and continous), \nchange the background, color, transparancy, material,\nshow infos about scene and object, \nplus a selfrunning demo-mode that cycles thru everything.\n"}, {"task_name": "Draw a cuboid", "task_url": "https://rosettacode.org/wiki/Draw_a_cuboid", "task_cat": "3D", "lang": "C", "code": "\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n \nconst char *shades = \".:!*oe&#%@\";\n \nvoid vsub(double *v1, double *v2, double *s) {\n\ts[0] = v1[0] - v2[0];\n\ts[1] = v1[1] - v2[1];\n\ts[2] = v1[2] - v2[2];\n}\n\ndouble normalize(double * v) {\n        double len = sqrt(v[0]*v[0] + v[1]*v[1] + v[2]*v[2]);\n        v[0] /= len; v[1] /= len; v[2] /= len;\n\treturn len;\n}\n \ndouble dot(double *x, double *y) {\n        return x[0]*y[0] + x[1]*y[1] + x[2]*y[2];\n}\n\ndouble * cross(double x[3], double y[3], double s[3]) {\n\ts[0] = x[1] * y[2] - x[2] * y[1];\n\ts[1] = x[2] * y[0] - x[0] * y[2];\n\ts[2] = x[0] * y[1] - x[1] * y[0];\n\treturn s;\n}\n\ndouble* madd(double *x, double *y, double d, double *r) {\n\tr[0] = x[0] + y[0] * d;\n\tr[1] = x[1] + y[1] * d;\n\tr[2] = x[2] + y[2] * d;\n\treturn r;\n}\n\ndouble v000[] = { -4, -3, -2 };\ndouble v100[] = {  4, -3, -2 };\ndouble v010[] = { -4,  3, -2 };\ndouble v110[] = {  4,  3, -2 };\ndouble v001[] = { -4, -3,  2 };\ndouble v101[] = {  4, -3,  2 };\ndouble v011[] = { -4,  3,  2 };\ndouble v111[] = {  4,  3,  2 };\n\ntypedef struct {\n\tdouble * v[4];\n\tdouble norm[3];\n} face_t;\n\nface_t f[] = {\n\t{ { v000, v010, v110, v100 }, {  0,  0, -1 } },\n\t{ { v001, v011, v111, v101 }, {  0,  0,  1 } },\n\t{ { v000, v010, v011, v001 }, { -1,  0,  0 } },\n\t{ { v100, v110, v111, v101 }, {  1,  0,  0 } },\n\t{ { v000, v100, v101, v001 }, {  0, -1,  0 } },\n\t{ { v010, v110, v111, v011 }, {  0,  1,  0 } },\n};\n\nint in_range(double x, double x0, double x1) {\n\treturn (x - x0) * (x - x1) <= 0;\n}\n\nint face_hit(face_t *face, double src[3], double dir[3], double hit[3], double *d)\n{\n\tint i;\n\tdouble dist;\n\tfor (i = 0; i < 3; i++)\n\t\tif (face->norm[i])\n\t\t\tdist = (face->v[0][i] - src[i]) / dir[i];\n\n\tmadd(src, dir, dist, hit);\n\t*d = fabs(dot(dir, face->norm) * dist);\n\n\tif (face->norm[0]) {\n\t\treturn  in_range(hit[1], face->v[0][1], face->v[2][1]) &&\n\t\t\tin_range(hit[2], face->v[0][2], face->v[2][2]);\n\t}\n\telse if (face->norm[1]) {\n\t\treturn  in_range(hit[0], face->v[0][0], face->v[2][0]) &&\n\t\t\tin_range(hit[2], face->v[0][2], face->v[2][2]);\n\t}\n\telse if (face->norm[2]) {\n\t\treturn  in_range(hit[0], face->v[0][0], face->v[2][0]) &&\n\t\t\tin_range(hit[1], face->v[0][1], face->v[2][1]);\n\t}\n\treturn 0;\n}\n\nint main()\n{\n\tint i, j, k;\n\tdouble eye[3] = { 7, 7, 6 };\n\tdouble dir[3] = { -1, -1, -1 }, orig[3] = {0, 0, 0};\n\tdouble hit[3], dx[3], dy[3] = {0, 0, 1}, proj[3];\n\tdouble d, *norm, dbest, b;\n\tdouble light[3] = { 6, 8, 6 }, ldist[3], decay, strength = 10;\n\n \tnormalize(cross(eye, dy, dx));\n\tnormalize(cross(eye, dx, dy));\n\n\tfor (i = -10; i <= 17; i++) {\n\t\tfor (j = -35; j < 35; j++) {\n\t\t\tvsub(orig, orig, proj);\n\t\t\tmadd(madd(proj, dx, j / 6., proj), dy, i/3., proj);\n\t\t\tvsub(proj, eye, dir);\n\t\t\tdbest = 1e100;\n\t\t\tnorm = 0;\n\t\t \tfor (k = 0; k < 6; k++) {\n\t\t\t\tif (!face_hit(f + k, eye, dir, hit, &d)) continue;\n\t\t\t\tif (dbest > d) {\n\t\t\t\t\tdbest = d;\n\t\t\t\t\tnorm = f[k].norm;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!norm) {\n\t\t\t\tputchar(' ');\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tvsub(light, hit, ldist);\n\t\t\tdecay = normalize(ldist);\n\t\t\tb = dot(norm, ldist) / decay * strength;\n\t\t\tif (b < 0) b = 0;\n\t\t\telse if (b > 1) b = 1;\n\t\t\tb += .2;\n\t\t\tif (b > 1) b = 0;\n\t\t\telse b = 1 - b;\n\t\t\tputchar(shades[(int)(b * (sizeof(shades) - 2))]);\n\t\t}\n\t\tputchar('\\n');\n\t}\n\n        return 0;\n}\n\n\n                                \n                                .\n                        ................\n                ...............................\n         .............................................\n     ........................................................\n     ...............................................................\n      ..............................................................::\n      ...........................................................::::\n       .......................................................:::::::\n       .....................................................::::::::\n        .................................................::::::::::\n       \u00a0:..............................................::::::::::::\n        \u00a0:............................................::::::::::::\n        \u00a0::..........................................:::::::::::::\n          \u00a0:........................................:::::::::::::\n             ......................................::::::::::::::\n               ....................................:::::::::::::\n                 .................................::::::::::::\n                    ............................::::::::::::\n                      .........................:::::::::::\n                        ......................::::::::::\n                          ...................:::::::::\n                             ..............:::::::::\n                               ...........:::::::::\n                                 .........:::::::\n                                   .......:::::\n                                     .....:::\n                                        .::\n\n", "explain": "Code works fine but only '.' and ':' characters show up on the cuboid.\nOutput\u00a0:\n"}, {"task_name": "Draw a cuboid", "task_url": "https://rosettacode.org/wiki/Draw_a_cuboid", "task_cat": "3D", "lang": "C++", "code": "\n\n#include<graphics.h>\n#include<iostream>\n\nint main()\n{\n    int k;\n    initwindow(1500,810,\"Rosetta Cuboid\");\n    \n    do{\n       std::cout<<\"Enter ratio of sides ( 0 or -ve to exit)\u00a0: \";\n       std::cin>>k;\n       \n       if(k>0){\n                bar3d(100, 100, 100 + 2*k, 100 + 4*k, 3*k, 1);\n       }\n       }while(k>0);\n    \n    return 0;\n}\n\n\n", "explain": "This code needs the BGI for Windows available at Colorado State University.\n\n"}, {"task_name": "Draw a cuboid", "task_url": "https://rosettacode.org/wiki/Draw_a_cuboid", "task_cat": "3D", "lang": "Java", "code": "\n\nWorks with: Java version 8\nimport java.awt.*;\nimport java.awt.event.*;\nimport static java.lang.Math.*;\nimport javax.swing.*;\n\npublic class Cuboid extends JPanel {\n    double[][] nodes = {{-1, -1, -1}, {-1, -1, 1}, {-1, 1, -1}, {-1, 1, 1},\n    {1, -1, -1}, {1, -1, 1}, {1, 1, -1}, {1, 1, 1}};\n\n    int[][] edges = {{0, 1}, {1, 3}, {3, 2}, {2, 0}, {4, 5}, {5, 7}, {7, 6},\n    {6, 4}, {0, 4}, {1, 5}, {2, 6}, {3, 7}};\n\n    int mouseX, prevMouseX, mouseY, prevMouseY;\n\n    public Cuboid() {\n        setPreferredSize(new Dimension(640, 640));\n        setBackground(Color.white);\n\n        scale(80, 120, 160);\n        rotateCube(PI / 5, PI / 9);\n\n        addMouseListener(new MouseAdapter() {\n            @Override\n            public void mousePressed(MouseEvent e) {\n                mouseX = e.getX();\n                mouseY = e.getY();\n            }\n        });\n\n        addMouseMotionListener(new MouseAdapter() {\n            @Override\n            public void mouseDragged(MouseEvent e) {\n                prevMouseX = mouseX;\n                prevMouseY = mouseY;\n                mouseX = e.getX();\n                mouseY = e.getY();\n\n                double incrX = (mouseX - prevMouseX) * 0.01;\n                double incrY = (mouseY - prevMouseY) * 0.01;\n\n                rotateCube(incrX, incrY);\n                repaint();\n            }\n        });\n    }\n\n    private void scale(double sx, double sy, double sz) {\n        for (double[] node : nodes) {\n            node[0] *= sx;\n            node[1] *= sy;\n            node[2] *= sz;\n        }\n    }\n\n    private void rotateCube(double angleX, double angleY) {\n        double sinX = sin(angleX);\n        double cosX = cos(angleX);\n\n        double sinY = sin(angleY);\n        double cosY = cos(angleY);\n\n        for (double[] node : nodes) {\n            double x = node[0];\n            double y = node[1];\n            double z = node[2];\n\n            node[0] = x * cosX - z * sinX;\n            node[2] = z * cosX + x * sinX;\n\n            z = node[2];\n\n            node[1] = y * cosY - z * sinY;\n            node[2] = z * cosY + y * sinY;\n        }\n    }\n\n    void drawCube(Graphics2D g) {\n        g.translate(getWidth() / 2, getHeight() / 2);\n\n        for (int[] edge : edges) {\n            double[] xy1 = nodes[edge[0]];\n            double[] xy2 = nodes[edge[1]];\n            g.drawLine((int) round(xy1[0]), (int) round(xy1[1]),\n                    (int) round(xy2[0]), (int) round(xy2[1]));\n        }\n\n        for (double[] node : nodes) {\n            g.fillOval((int) round(node[0]) - 4, (int) round(node[1]) - 4, 8, 8);\n        }\n    }\n\n    @Override\n    public void paintComponent(Graphics gg) {\n        super.paintComponent(gg);\n        Graphics2D g = (Graphics2D) gg;\n        g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,\n                RenderingHints.VALUE_ANTIALIAS_ON);\n\n        drawCube(g);\n    }\n\n    public static void main(String[] args) {\n        SwingUtilities.invokeLater(() -> {\n            JFrame f = new JFrame();\n            f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n            f.setTitle(\"Cuboid\");\n            f.setResizable(false);\n            f.add(new Cuboid(), BorderLayout.CENTER);\n            f.pack();\n            f.setLocationRelativeTo(null);\n            f.setVisible(true);\n        });\n    }\n}\n\n", "explain": ""}, {"task_name": "Draw a cuboid", "task_url": "https://rosettacode.org/wiki/Draw_a_cuboid", "task_cat": "3D", "lang": "C#", "code": "\nTranslation of: Java\nusing System;\nusing System.Drawing;\nusing System.Drawing.Drawing2D;\nusing System.Windows.Forms;\n\nnamespace Cuboid\n{\n    public partial class Form1 : Form\n    {\n        double[][] nodes = {\n            new double[] {-1, -1, -1}, new double[] {-1, -1, 1}, new double[] {-1, 1, -1},\n            new double[] {-1, 1, 1}, new double[] {1, -1, -1}, new double[] {1, -1, 1},\n            new double[] {1, 1, -1}, new double[] {1, 1, 1} };\n\n        int[][] edges = {\n            new int[] {0, 1}, new int[] {1, 3}, new int[] {3, 2}, new int[] {2, 0}, new int[] {4, 5},\n            new int[] {5, 7}, new int[] {7, 6}, new int[] {6, 4}, new int[] {0, 4}, new int[] {1, 5},\n            new int[] {2, 6}, new int[] {3, 7}};\n\n        private int mouseX;\n        private int prevMouseX;\n        private int prevMouseY;\n        private int mouseY;\n\n        public Form1()\n        {\n            Width = Height = 640;\n            StartPosition = FormStartPosition.CenterScreen;\n            SetStyle(\n                ControlStyles.AllPaintingInWmPaint |\n                ControlStyles.UserPaint |\n                ControlStyles.DoubleBuffer,\n                true);\n\n            MouseMove += (s, e) =>\n            {\n                prevMouseX = mouseX;\n                prevMouseY = mouseY;\n                mouseX = e.X;\n                mouseY = e.Y;\n\n                double incrX = (mouseX - prevMouseX) * 0.01;\n                double incrY = (mouseY - prevMouseY) * 0.01;\n\n                RotateCuboid(incrX, incrY);\n                Refresh();\n            };\n\n            MouseDown += (s, e) =>\n            {\n                mouseX = e.X;\n                mouseY = e.Y;\n            };\n\n            Scale(80, 120, 160);\n            RotateCuboid(Math.PI / 5, Math.PI / 9);\n        }\n\n        private void RotateCuboid(double angleX, double angleY)\n        {\n            double sinX = Math.Sin(angleX);\n            double cosX = Math.Cos(angleX);\n\n            double sinY = Math.Sin(angleY);\n            double cosY = Math.Cos(angleY);\n\n            foreach (var node in nodes)\n            {\n                double x = node[0];\n                double y = node[1];\n                double z = node[2];\n\n                node[0] = x * cosX - z * sinX;\n                node[2] = z * cosX + x * sinX;\n\n                z = node[2];\n\n                node[1] = y * cosY - z * sinY;\n                node[2] = z * cosY + y * sinY;\n            }\n        }\n\n        private void Scale(int v1, int v2, int v3)\n        {\n            foreach (var item in nodes)\n            {\n                item[0] *= v1;\n                item[1] *= v2;\n                item[2] *= v3;\n            }\n        }\n\n        protected override void OnPaint(PaintEventArgs args)\n        {\n            var g = args.Graphics;\n            g.SmoothingMode = SmoothingMode.HighQuality;\n            g.Clear(Color.White);\n\n            g.TranslateTransform(Width / 2, Height / 2);\n\n            foreach (var edge in edges)\n            {\n                double[] xy1 = nodes[edge[0]];\n                double[] xy2 = nodes[edge[1]];\n                g.DrawLine(Pens.Black, (int)Math.Round(xy1[0]), (int)Math.Round(xy1[1]),\n                        (int)Math.Round(xy2[0]), (int)Math.Round(xy2[1]));\n            }\n\n            foreach (var node in nodes)\n            {\n                g.FillEllipse(Brushes.Black, (int)Math.Round(node[0]) - 4,\n                    (int)Math.Round(node[1]) - 4, 8, 8);\n            }\n        }\n    }\n}\n\n", "explain": ""}, {"task_name": "Draw a cuboid", "task_url": "https://rosettacode.org/wiki/Draw_a_cuboid", "task_cat": "3D", "lang": "JavaScript", "code": "\nTranslation of: Java\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <style>\n        canvas {\n            background-color: black;\n        }\n    </style>\n</head>\n<body>\n    <canvas></canvas>\n    <script>\n        var canvas = document.querySelector(\"canvas\");\n        canvas.width = window.innerWidth;\n        canvas.height = window.innerHeight;\n\n        var g = canvas.getContext(\"2d\");\n\n        canvas.addEventListener(\"mousemove\", function (event) {\n            prevMouseX = mouseX;\n            prevMouseY = mouseY;\n            mouseX = event.x;\n            mouseY = event.y;\n\n            var incrX = (mouseX - prevMouseX) * 0.01;\n            var incrY = (mouseY - prevMouseY) * 0.01;\n\n            rotateCuboid(incrX, incrY);\n            drawCuboid();\n        });\n\n        var nodes = [[-1, -1, -1], [-1, -1, 1], [-1, 1, -1], [-1, 1, 1],\n        [1, -1, -1], [1, -1, 1], [1, 1, -1], [1, 1, 1]];\n\n        var edges = [[0, 1], [1, 3], [3, 2], [2, 0], [4, 5], [5, 7], [7, 6],\n        [6, 4], [0, 4], [1, 5], [2, 6], [3, 7]];\n\n        var mouseX = 0, prevMouseX, mouseY = 0, prevMouseY;\n\n        function scale(factor0, factor1, factor2) {\n            nodes.forEach(function (node) {\n                node[0] *= factor0;\n                node[1] *= factor1;\n                node[2] *= factor2;\n            });\n        }\n\n        function rotateCuboid(angleX, angleY) {\n\n            var sinX = Math.sin(angleX);\n            var cosX = Math.cos(angleX);\n\n            var sinY = Math.sin(angleY);\n            var cosY = Math.cos(angleY);\n\n            nodes.forEach(function (node) {\n                var x = node[0];\n                var y = node[1];\n                var z = node[2];\n\n                node[0] = x * cosX - z * sinX;\n                node[2] = z * cosX + x * sinX;\n\n                z = node[2];\n\n                node[1] = y * cosY - z * sinY;\n                node[2] = z * cosY + y * sinY;\n            });\n        }\n\n        function drawCuboid() {\n            g.save();\n            \n            g.clearRect(0, 0, canvas.width, canvas.height);\n            g.translate(canvas.width / 2, canvas.height / 2);\n            g.strokeStyle = \"#FFFFFF\";\n            g.beginPath();\n\n            edges.forEach(function (edge) {\n                var p1 = nodes[edge[0]];\n                var p2 = nodes[edge[1]];\n                g.moveTo(p1[0], p1[1]);\n                g.lineTo(p2[0], p2[1]);\n            });\n            \n            g.closePath();\n            g.stroke();\n\n            g.restore();\n        }\n\n        scale(80, 120, 160);\n        rotateCuboid(Math.PI / 5, Math.PI / 9);\n    </script>\n\n</body>\n</html>\n\n", "explain": ""}, {"task_name": "Draw a cuboid", "task_url": "https://rosettacode.org/wiki/Draw_a_cuboid", "task_cat": "3D", "lang": "Go", "code": "\nTranslation of: PicoLisp\npackage main\n\nimport \"fmt\"\n\nfunc cuboid(dx, dy, dz int) {\n    fmt.Printf(\"cuboid %d %d %d:\\n\", dx, dy, dz)\n    cubLine(dy+1, dx, 0, \"+-\")\n    for i := 1; i <= dy; i++ {\n        cubLine(dy-i+1, dx, i-1, \"/ |\")\n    }\n    cubLine(0, dx, dy, \"+-|\")\n    for i := 4*dz - dy - 2; i > 0; i-- {\n        cubLine(0, dx, dy, \"| |\")\n    }\n    cubLine(0, dx, dy, \"| +\")\n    for i := 1; i <= dy; i++ {\n        cubLine(0, dx, dy-i, \"| /\")\n    }\n    cubLine(0, dx, 0, \"+-\\n\")\n}\n\nfunc cubLine(n, dx, dy int, cde string) {\n    fmt.Printf(\"%*s\", n+1, cde[:1])\n    for d := 9*dx - 1; d > 0; d-- {\n        fmt.Print(cde[1:2])\n    }\n    fmt.Print(cde[:1])\n    fmt.Printf(\"%*s\\n\", dy+1, cde[2:])\n}\n\nfunc main() {\n    cuboid(2, 3, 4)\n    cuboid(1, 1, 1)\n    cuboid(6, 2, 1)\n}\n\n\nOutput:\ncuboid 2 3 4:\n    +-----------------+ \n   /                 /|\n  /                 / |\n /                 /  |\n+-----------------+   |\n|                 |   |\n|                 |   |\n|                 |   |\n|                 |   |\n|                 |   |\n|                 |   |\n|                 |   |\n|                 |   |\n|                 |   |\n|                 |   |\n|                 |   |\n|                 |   +\n|                 |  /\n|                 | /\n|                 |/\n+-----------------+\n\ncuboid 1 1 1:\n  +--------+ \n /        /|\n+--------+ |\n|        | |\n|        | +\n|        |/\n+--------+\n\ncuboid 6 2 1:\n   +-----------------------------------------------------+ \n  /                                                     /|\n /                                                     / |\n+-----------------------------------------------------+  |\n|                                                     |  +\n|                                                     | /\n|                                                     |/\n+-----------------------------------------------------+\n\n", "explain": ""}, {"task_name": "Draw a cuboid", "task_url": "https://rosettacode.org/wiki/Draw_a_cuboid", "task_cat": "3D", "lang": "X86_Assembly", "code": "\n\n      1                                  ;Assemble with: tasm, tlink /t\n      2     0000                                 .model  tiny\n      3     0000                                 .code\n      4                                          .386\n      5                                          org     100h\n      6                                  ;assume: ax=0000h, bx=0000h, cx=00ff, and\n      7                                  ; direction bit is clear (so di increments)\n      8                                                                  ;                  ____\n      9           =0050                  X0      equ     80              ;                 /   /|\n     10           =0050                  Y0      equ     80              ;                /   / |\n     11           =0050                  wide    equ     2*40            ;         X0,Y0 +---+  |\n     12           =0064                  tall    equ     3*40*200/240    ;               |   |  |\n     13           =0035                  deep    equ     4*40/3          ;               |   | /\n     14                                                                  ;               |___|/\n     15\n     16     0100  B0 13                  start:  mov     al, 13h         ;set 320x200x8 graphic screen\n     17     0102  CD 10                          int     10h\n     18     0104  68 A000                        push    0A000h          ;point es to graphic memory segment\n     19     0107  07                             pop     es\n     20\n     21                                  ;Draw front of cuboid using horizontal lines\n     22     0108  B3 64                          mov     bl, tall\n     23     010A  BF E150                        mov     di, X0+(Y0+tall)*320 ;set pen at lower-left corner\n     24     010D  B0 04                          mov     al, 4           ;use red ink\n     25     010F  B1 50                  dc10:   mov     cl, wide        ;draw horizontal line\n     26     0111  F3> AA                         rep     stosb           ;es:[di++], al; cx--\n     27     0113  81 EF 0190                     sub     di, wide+320    ;move up to start of next line\n     28     0117  4B                             dec     bx              ;at top of face?\n     29     0118  75 F5                          jne     dc10            ;loop if not\n     30\n     31     011A  B3 35                          mov     bl, deep\n     32                                  ;Draw top using horizontal lines\n     33     011C  B0 02                  dc20:   mov     al, 2           ;use green ink\n     34     011E  B1 50                          mov     cl, wide        ;draw horizontal line\n     35     0120  F3> AA                         rep     stosb           ;es:[di++], al; cx--\n     36\n     37                                  ;Draw side using vertical lines\n     38     0122  B0 01                          mov     al, 1           ;use blue ink\n     39     0124  B1 64                          mov     cl, tall        ;draw vertical line\n     40     0126  AA                     dc30:   stosb                   ;es:[di++], al\n     41     0127  81 C7 013F                     add     di, 320-1       ;move down a pixel\n     42     012B  E2 F9                          loop    dc30\n     43\n     44     012D  81 EF 7E8F                     sub     di, wide+(tall+1)*320-1 ;move to start of next top line\n     45     0131  4B                             dec     bx              ;at deep limit?\n     46     0132  75 E8                          jne     dc20            ;loop if not\n     47\n     48     0134  CD 16                          int     16h             ;wait for keystroke (ah=0)\n     49     0136  B8 0003                        mov     ax, 0003h       ;restore normal text-mode screen\n     50     0139  CD 10                          int     10h\n     51     013B  C3                             ret                     ;return to DOS\n     52\n     53                                          end     start\n\n\nOutput:\n\n", "explain": "Sixty bytes does it.\n\n"}, {"task_name": "Draw a cuboid", "task_url": "https://rosettacode.org/wiki/Draw_a_cuboid", "task_cat": "3D", "lang": "Delphi", "code": "\nLibrary:  System.SysUtils\nTranslation of: Go\nprogram Draw_a_cuboid;\n\n{$APPTYPE CONSOLE}\n\nuses\n  System.SysUtils;\n\nprocedure cubLine(n, dx, dy: Integer; cde: string);\nvar\n  i: integer;\nbegin\n  write(format('%' + (n + 1).ToString + 's', [cde.Substring(0, 1)]));\n\n  for i := 9 * dx - 1 downto 1 do\n    Write(cde.Substring(1, 1));\n\n  Write(cde.Substring(0, 1));\n  Writeln(cde.Substring(2, cde.Length).PadLeft(dy + 1));\nend;\n\nprocedure cuboid(dx, dy, dz: integer);\nvar\n  i: integer;\nbegin\n  Writeln(Format('cuboid %d %d %d:', [dx, dy, dz]));\n\n  cubLine(dy + 1, dx, 0, '+-');\n\n  for i := 1 to dy do\n    cubLine(dy - i + 1, dx, i - 1, '/ |');\n\n  cubLine(0, dx, dy, '+-|');\n\n  for i := 4 * dz - dy - 2 downto 1 do\n    cubLine(0, dx, dy, '| |');\n\n  cubLine(0, dx, dy, '| +');\n\n  for i := 1 to dy do\n    cubLine(0, dx, dy - i, '| /');\n\n  cubLine(0, dx, 0, '+-');\n  Writeln;\nend;\n\nbegin\n  cuboid(2, 3, 4);\n  cuboid(1, 1, 1);\n  cuboid(6, 2, 1);\n\n  readln;\nend.\n\n", "explain": ""}, {"task_name": "Draw a cuboid", "task_url": "https://rosettacode.org/wiki/Draw_a_cuboid", "task_cat": "3D", "lang": "Ruby", "code": "\nX, Y, Z = 6, 2, 3\nDIR = {\"-\" => [1,0], \"|\" => [0,1], \"/\" => [1,1]}\n\ndef cuboid(nx, ny, nz)\n  puts \"cuboid %d %d %d:\" % [nx, ny, nz]\n  x, y, z = X*nx, Y*ny, Z*nz\n  area = Array.new(y+z+1){\" \" * (x+y+1)}\n  draw_line = lambda do |n, sx, sy, c|\n    dx, dy = DIR[c]\n    (n+1).times do |i|\n      xi, yi = sx+i*dx, sy+i*dy\n      area[yi][xi] = (area[yi][xi]==\" \" ? c : \"+\")\n    end\n  end\n  nz    .times {|i| draw_line[x,     0,   Z*i, \"-\"]}\n  (ny+1).times {|i| draw_line[x,   Y*i, z+Y*i, \"-\"]}\n  nx    .times {|i| draw_line[z,   X*i,     0, \"|\"]}\n  (ny+1).times {|i| draw_line[z, x+Y*i,   Y*i, \"|\"]}\n  nz    .times {|i| draw_line[y,     x,   Z*i, \"/\"]}\n  (nx+1).times {|i| draw_line[y,   X*i,     z, \"/\"]}\n  puts area.reverse\nend\n\ncuboid(2, 3, 4)\ncuboid(1, 1, 1)\ncuboid(6, 2, 1)\ncuboid(2, 4, 1)\n\n\nOutput:\ncuboid 2 3 4:\n      +-----+-----+\n     /     /     /|\n    +-----+-----+ |\n   /     /     /| +\n  +-----+-----+ |/|\n /     /     /| + |\n+-----+-----+ |/| +\n|     |     | + |/|\n|     |     |/| + |\n+-----+-----+ |/| +\n|     |     | + |/|\n|     |     |/| + |\n+-----+-----+ |/| +\n|     |     | + |/ \n|     |     |/| +  \n+-----+-----+ |/   \n|     |     | +    \n|     |     |/     \n+-----+-----+      \ncuboid 1 1 1:\n  +-----+\n /     /|\n+-----+ |\n|     | +\n|     |/ \n+-----+  \ncuboid 6 2 1:\n    +-----+-----+-----+-----+-----+-----+\n   /     /     /     /     /     /     /|\n  +-----+-----+-----+-----+-----+-----+ |\n /     /     /     /     /     /     /| +\n+-----+-----+-----+-----+-----+-----+ |/ \n|     |     |     |     |     |     | +  \n|     |     |     |     |     |     |/   \n+-----+-----+-----+-----+-----+-----+    \ncuboid 2 4 1:\n        +-----+-----+\n       /     /     /|\n      +-----+-----+ |\n     /     /     /| +\n    +-----+-----+ |/ \n   /     /     /| +  \n  +-----+-----+ |/   \n /     /     /| +    \n+-----+-----+ |/     \n|     |     | +      \n|     |     |/       \n+-----+-----+        \n\n", "explain": ""}, {"task_name": "Draw a cuboid", "task_url": "https://rosettacode.org/wiki/Draw_a_cuboid", "task_cat": "3D", "lang": "Ada", "code": "\n\nwith Ada.Text_IO;\n\nprocedure Main is\n   type Char_Matrix is\n     array (Positive range <>, Positive range <>) of Character;\n\n   function Create_Cuboid\n     (Width, Height, Depth : Positive)\n      return                 Char_Matrix\n   is\n      Result : Char_Matrix (1 .. Height + Depth + 3,\n         1 .. 2 * Width + Depth + 3) := (others => (others => ' '));\n   begin\n      -- points\n      Result (1, 1)                                      := '+';\n      Result (Height + 2, 1)                             := '+';\n      Result (1, 2 * Width + 2)                          := '+';\n      Result (Height + 2, 2 * Width + 2)                 := '+';\n      Result (Height + Depth + 3, Depth + 2)             := '+';\n      Result (Depth + 2, 2 * Width + Depth + 3)          := '+';\n      Result (Height + Depth + 3, 2 * Width + Depth + 3) := '+';\n      -- width lines\n      for I in 1 .. 2 * Width loop\n         Result (1, I + 1)                          := '-';\n         Result (Height + 2, I + 1)                 := '-';\n         Result (Height + Depth + 3, Depth + I + 2) := '-';\n      end loop;\n      -- height lines\n      for I in 1 .. Height loop\n         Result (I + 1, 1)                             := '|';\n         Result (I + 1, 2 * Width + 2)                 := '|';\n         Result (Depth + I + 2, 2 * Width + Depth + 3) := '|';\n      end loop;\n      -- depth lines\n      for I in 1 .. Depth loop\n         Result (Height + 2 + I, 1 + I)             := '/';\n         Result (1 + I, 2 * Width + 2 + I)          := '/';\n         Result (Height + 2 + I, 2 * Width + 2 + I) := '/';\n      end loop;\n      return Result;\n   end Create_Cuboid;\n\n   procedure Print_Cuboid (Width, Height, Depth : Positive) is\n      Cuboid : Char_Matrix := Create_Cuboid (Width, Height, Depth);\n   begin\n      for Row in reverse Cuboid'Range (1) loop\n         for Col in Cuboid'Range (2) loop\n            Ada.Text_IO.Put (Cuboid (Row, Col));\n         end loop;\n         Ada.Text_IO.New_Line;\n      end loop;\n   end Print_Cuboid;\nbegin\n   Print_Cuboid (2, 3, 4);\nend Main;\n\n\nOutput:\n     +----+\n    /    /|\n   /    / |\n  /    /  |\n /    /   +\n+----+   / \n|    |  /  \n|    | /   \n|    |/    \n+----+     \n", "explain": "ASCII-Art output, one width unit is two characters long ('--').\n"}, {"task_name": "Draw a cuboid", "task_url": "https://rosettacode.org/wiki/Draw_a_cuboid", "task_cat": "3D", "lang": "Julia", "code": "\nASCII Art[edit]\nTranslation of: Python\nWorks with: Julia version 0.6\n_pr(t::Dict, x::Int, y::Int, z::Int) = join((rstrip(join(t[(n, m)] for n in range(0, 3+x+z))) for m in reverse(range(0, 3+y+z))), \"\\n\")\n\nfunction cuboid(x::Int, y::Int, z::Int)\n    t = Dict((n, m) => \" \" for n in range(0, 3 + x + z), m in range(0, 3 + y + z))\n    xrow = vcat(\"+\", collect(\"$(i % 10)\" for i in range(0, x)), \"+\")\n    for (i, ch) in enumerate(xrow) t[(i, 0)] = t[(i, 1+y)] = t[(1+z+i, 2+y+z)] = ch end\n    yrow = vcat(\"+\", collect(\"$(j % 10)\" for j in range(0, y)), \"+\")\n    for (j, ch) in enumerate(yrow) t[(0, j)] = t[(x+1, j)] = t[(2+x+z, 1+z+j)] = ch end\n    zdep = vcat(\"+\", collect(\"$(k % 10)\" for k in range(0, y)), \"+\")\n    for (k, ch) in enumerate(xrow) t[(k, 1+y+k)] = t[(1+x+k, 1+y+k)] = t[(1+x+k, k)] = ch end\n\n    return _pr(t, x, y, z)\nend\n\nfor (x, y, z) in [(2, 3, 4), (3, 4, 2), (4, 2, 3), (5, 5, 6)]\n    println(\"\\nCUBOID($x, $y, $z)\\n\")\n    println(cuboid(x, y, z))\nend\n\n\nOutput:\nCUBOID(2, 3, 4)\n\n      +02\n    +  +1\n   1  1 0\n  0  0  +\n++ ++\n2+02+  +\n1  1  1\n0  0 0\n+  ++\n +01+\n\nCUBOID(3, 4, 2)\n\n   1+011\n  0   02\n++  ++ 1\n3+013+ 0\n2   2  +\n1   1  1\n0   0 0\n+   ++\n +012+\n\nCUBOID(4, 2, 3)\n\n    2+0122\n   1    10\n  0    0 +\n++   ++  2\n1+0121+ 1\n0    0 0\n+    ++\n +0123+\n\nCUBOID(5, 5, 6)\n\n       ++0123+\n      4     43\n     3     3 2\n    2     2  1\n   1     1   0\n  0     0    +\n++    ++     +\n4+01234+    4\n3     3    3\n2     2   2\n1     1  1\n0     0 0\n+     ++\n +01234+\n", "explain": ""}, {"task_name": "Draw a cuboid", "task_url": "https://rosettacode.org/wiki/Draw_a_cuboid", "task_cat": "3D", "lang": "Kotlin", "code": "\nTranslation of: Java\n// version 1.1\n\nimport java.awt.*\nimport java.awt.event.MouseAdapter\nimport java.awt.event.MouseEvent\nimport javax.swing.*\n\nclass Cuboid: JPanel() {\n    private val nodes = arrayOf(\n        doubleArrayOf(-1.0, -1.0, -1.0),\n        doubleArrayOf(-1.0, -1.0,  1.0),\n        doubleArrayOf(-1.0,  1.0, -1.0),\n        doubleArrayOf(-1.0,  1.0,  1.0),\n        doubleArrayOf( 1.0, -1.0, -1.0),\n        doubleArrayOf( 1.0, -1.0,  1.0),\n        doubleArrayOf( 1.0,  1.0, -1.0),\n        doubleArrayOf( 1.0,  1.0,  1.0)\n    )\n    private val edges = arrayOf(\n        intArrayOf(0, 1),\n        intArrayOf(1, 3),\n        intArrayOf(3, 2),\n        intArrayOf(2, 0),\n        intArrayOf(4, 5),\n        intArrayOf(5, 7),\n        intArrayOf(7, 6),\n        intArrayOf(6, 4),\n        intArrayOf(0, 4),\n        intArrayOf(1, 5),\n        intArrayOf(2, 6),\n        intArrayOf(3, 7)\n    )\n\n    private var mouseX: Int = 0\n    private var prevMouseX: Int = 0\n    private var mouseY: Int = 0\n    private var prevMouseY: Int = 0\n\n    init {\n        preferredSize = Dimension(640, 640)\n        background = Color.white\n        scale(80.0, 120.0, 160.0)\n        rotateCube(Math.PI / 5.0, Math.PI / 9.0)\n        addMouseListener(object: MouseAdapter() {\n            override fun mousePressed(e: MouseEvent) {\n                mouseX = e.x\n                mouseY = e.y\n            }\n        })\n\n        addMouseMotionListener(object: MouseAdapter() {\n            override fun mouseDragged(e: MouseEvent) {\n                prevMouseX = mouseX\n                prevMouseY = mouseY\n                mouseX = e.x\n                mouseY = e.y\n                val incrX = (mouseX - prevMouseX) * 0.01\n                val incrY = (mouseY - prevMouseY) * 0.01\n                rotateCube(incrX, incrY)\n                repaint()\n            }\n        })\n    }\n\n    private fun scale(sx: Double, sy: Double, sz: Double) {\n        for (node in nodes) {\n            node[0] *= sx\n            node[1] *= sy\n            node[2] *= sz\n        }\n    }\n\n    private fun rotateCube(angleX: Double, angleY: Double) {\n        val sinX = Math.sin(angleX)\n        val cosX = Math.cos(angleX)\n        val sinY = Math.sin(angleY)\n        val cosY = Math.cos(angleY)\n        for (node in nodes) {\n            val x = node[0]\n            val y = node[1]\n            var z = node[2]\n            node[0] = x * cosX - z * sinX\n            node[2] = z * cosX + x * sinX\n            z = node[2]\n            node[1] = y * cosY - z * sinY\n            node[2] = z * cosY + y * sinY\n        }\n    }\n\n    private fun drawCube(g: Graphics2D) {\n        g.translate(width / 2, height / 2)\n        for (edge in edges) {\n            val xy1 = nodes[edge[0]]\n            val xy2 = nodes[edge[1]]\n            g.drawLine(Math.round(xy1[0]).toInt(), Math.round(xy1[1]).toInt(),\n                       Math.round(xy2[0]).toInt(), Math.round(xy2[1]).toInt())\n        }\n        for (node in nodes) {\n            g.fillOval(Math.round(node[0]).toInt() - 4, Math.round(node[1]).toInt() - 4, 8, 8)\n        }\n    }\n\n    override public fun paintComponent(gg: Graphics) {\n        super.paintComponent(gg)\n        val g = gg as Graphics2D\n        g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON)\n        g.color = Color.blue\n        drawCube(g)\n    }\n}\n\nfun main(args: Array<String>) {\n    SwingUtilities.invokeLater {\n        val f = JFrame()\n        f.defaultCloseOperation = JFrame.EXIT_ON_CLOSE\n        f.title = \"Cuboid\"\n        f.isResizable = false\n        f.add(Cuboid(), BorderLayout.CENTER)\n        f.pack()\n        f.setLocationRelativeTo(null)\n        f.isVisible = true\n    }\n}\n\n", "explain": ""}, {"task_name": "Draw a cuboid", "task_url": "https://rosettacode.org/wiki/Draw_a_cuboid", "task_cat": "3D", "lang": "Perl", "code": "\nTranslation of: Go\nsub cubLine ($$$$) {\n    my ($n, $dx, $dy, $cde) = @_;\n\n    printf '%*s', $n + 1, substr($cde, 0, 1);\n\n    for (my $d = 9 * $dx - 1 ; $d > 0 ; --$d) {\n        print substr($cde, 1, 1);\n    }\n\n    print substr($cde, 0, 1);\n    printf \"%*s\\n\", $dy + 1, substr($cde, 2, 1);\n}\n\nsub cuboid ($$$) {\n    my ($dx, $dy, $dz) = @_;\n\n    printf \"cuboid %d %d %d:\\n\", $dx, $dy, $dz;\n    cubLine $dy + 1, $dx, 0, '+-';\n\n    for (my $i = 1 ; $i <= $dy ; ++$i) {\n        cubLine $dy - $i + 1, $dx, $i - 1, '/ |';\n    }\n    cubLine 0, $dx, $dy, '+-|';\n\n    for (my $i = 4 * $dz - $dy - 2 ; $i > 0 ; --$i) {\n        cubLine 0, $dx, $dy, '| |';\n    }\n    cubLine 0, $dx, $dy, '| +';\n\n    for (my $i = 1 ; $i <= $dy ; ++$i) {\n        cubLine 0, $dx, $dy - $i, '| /';\n    }\n    cubLine 0, $dx, 0, \"+-\\n\";\n}\n\ncuboid 2, 3, 4;\ncuboid 1, 1, 1;\ncuboid 6, 2, 1;\n\n\nOutput:\ncuboid 2 3 4:\n    +-----------------+ \n   /                 /|\n  /                 / |\n /                 /  |\n+-----------------+   |\n|                 |   |\n|                 |   |\n|                 |   |\n|                 |   |\n|                 |   |\n|                 |   |\n|                 |   |\n|                 |   |\n|                 |   |\n|                 |   |\n|                 |   |\n|                 |   +\n|                 |  /\n|                 | /\n|                 |/\n+-----------------+\n\ncuboid 1 1 1:\n  +--------+ \n /        /|\n+--------+ |\n|        | |\n|        | +\n|        |/\n+--------+\n\ncuboid 6 2 1:\n   +-----------------------------------------------------+ \n  /                                                     /|\n /                                                     / |\n+-----------------------------------------------------+  |\n|                                                     |  +\n|                                                     | /\n|                                                     |/\n+-----------------------------------------------------+\n\n\nuse 5.010;\n\n# usage: script X Y Z [S]\n\nsub cuboid {\n\n    # Constant dimnesions of the cuboid\n    my ($x, $y, $z) = map int, @_[0 .. 2];\n\n    # ASCII characters\n    # $c = corner point\n    # $h = horizontal line\n    # $v = vertical line\n    # $d = diagonal line\n    # $s = space (inside the cuboid)\n    my ($c, $h, $v, $d, $s) = ('+', '-', '|', '/', shift(@ARGV) // q{ });\n\n    say q{ } x ($z + 1), $c, $h x $x, $c;\n    say q{ } x ($z - $_ + 1), $d, $s x $x, $d, $s x ($_ - ($_ > $y ? ($_ - $y) : 1)),\n      $_ - 1 == $y ? $c : $_ > $y ? $d : $v for 1 .. $z;\n    say $c, $h x $x, $c, ($s x ($z < $y ? $z : $y), $z < $y ? $v : $z == $y ? $c : $d);\n    say $v, $s x $x, $v, $z > $y ? $_ >= $z ? ($s x $x, $c) : ($s x ($y - $_), $d)\n      : $y - $_ > $z ? ($s x $z, $v) : ($s x ($y - $_), $y - $_ == $z ? $c : $d) for 1 .. $y;\n    say $c, $h x $x, $c;\n}\n\ncuboid shift // rand 20, shift // rand 10, shift // rand 10;\n\n\n     +--+\n    /  /|\n   /  / |\n  /  /  |\n /  /   +\n+--+   /\n|  |  /\n|  | /\n|  |/\n+--+\n", "explain": "ASCII Art\nCuboid(2,3,4)\n"}, {"task_name": "Draw a cuboid", "task_url": "https://rosettacode.org/wiki/Draw_a_cuboid", "task_cat": "3D", "lang": "Prolog", "code": "\n\ncuboid(D1,D2,D3) :-\n\tW is D1 * 50,\n\tH is D2 * 50,\n\tD is D3 * 50,\n\n\tnew(C, window(cuboid)),\n\n\t% compute the size of the window\n\tWidth is W + ceiling(sqrt(H * 48)) + 50,\n\tHeight is H +  ceiling(sqrt(H * 48)) + 50,\n\tsend(C, size, new(_,size(Width,Height))),\n\n\t%compute the top-left corner of the front face of the cuboid\n\tPX is 25,\n\tPY is 25 + ceiling(sqrt(H * 48)),\n\n\t% colors of the faces\n\tnew(C1, colour(@default, 65535, 0, 0)),\n\tnew(C2, colour(@default, 0, 65535, 0)),\n\tnew(C3, colour(@default, 0, 0, 65535)),\n\n\t% the front face\n\tnew(B1, box(W, H)),\n\tsend(B1, fill_pattern, C1),\n\tsend(C, display,B1, point(PX, PY)),\n\n\t% the top face\n\tnew(B2, hpara(point(PX,PY), W, D, C2)),\n\tsend(C, display, B2),\n\n\t% the left face\n\tPX1 is PX + W,\n\tnew(B3, vpara(point(PX1,PY), H, D, C3)),\n\tsend(C, display, B3),\n\n\tsend(C, open).\n\n\n\n:- pce_begin_class(hpara, path, \"drawing of a horizontal parallelogram\").\n\ninitialise(P, Pos, Width, Height, Color) :->\n\tsend(P, send_super, initialise),\n\tsend(P, append, Pos),\n\tH is ceiling(sqrt(Height * 48)),\n\tget(Pos, x, X),\n\tget(Pos, y, Y),\n\tX1 is X + H,\n\tY1 is Y - H,\n\tsend(P, append, point(X1, Y1)),\n\tX2 is X1 + Width,\n\tsend(P, append, point(X2, Y1)),\n\tX3 is X2 - H,\n\tsend(P, append, point(X3, Pos?y)),\n\tsend(P, append, Pos),\n\tsend(P, fill_pattern, Color).\n\n:- pce_end_class.\n\n:- pce_begin_class(vpara, path, \"drawing of a vertical parallelogram\").\n\ninitialise(P, Pos, Height, Depth, Color) :->\n\tsend(P, send_super, initialise),\n\tsend(P, append, Pos),\n\tH is ceiling(sqrt(Depth * 48)),\n\tget(Pos, x, X),\n\tget(Pos, y, Y),\n\tX1 is X + H,\n\tY1 is Y - H,\n\tsend(P, append, point(X1, Y1)),\n\tY2 is Y1 + Height,\n\tsend(P, append, point(X1, Y2)),\n\tY3 is Y2 + H,\n\tsend(P, append, point(X, Y3)),\n\tsend(P, append, Pos),\n\tsend(P, fill_pattern, Color).\n\n:- pce_end_class.\n\n\nOutput:\n?- cuboid(2,3,4).\ntrue.\n\n\n", "explain": "Works with SWI-Prolog and XPCE.\n\n"}, {"task_name": "Draw a cuboid", "task_url": "https://rosettacode.org/wiki/Draw_a_cuboid", "task_cat": "3D", "lang": "Lua", "code": "\n\n-- needed for actual task\ncube.scale = function(self, sx, sy, sz)\n  for i,v in ipairs(self.verts) do\n    v[1], v[2], v[3] = v[1]*sx, v[2]*sy, v[3]*sz\n  end\nend\n-- only needed for output\n-- (to size it for screen, given a limited camera)\ncube.translate = function(self, tx, ty, tz)\n  for i,v in ipairs(self.verts) do\n    v[1], v[2], v[3] = v[1]+tx, v[2]+ty, v[3]+tz\n  end\nend\n\n\n--\nbitmap:init(40,40)\ncube:scale(2,3,4)\ncube:rotate(-pi/4, -pi/6)\ncube:translate(0,0,10)\nbitmap:clear(\"\u00b7\u00b7\")\nrenderer:render(cube, camera, bitmap)\nscreen:clear()\nbitmap:render()\n\n\nOutput:\n\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u00b7\u00b7\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u2588\u2588\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u2588\u2588\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u2588\u2588\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u2588\u2588\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u2588\u2588\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u2588\u2588\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u2588\u2588\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u2588\u2588\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u2588\u2588\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u2588\u2588\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u2588\u2588\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u2588\u2588\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u00b7\u00b7\u2588\u2588\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2588\u2588\u2588\u2588\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n", "explain": "Begin with the code in the Draw_a_rotating_cube task, then extend the cube object as follows:\nThen replace all of the \"demo\" code below the empty comment line \"--\" with:\n"}, {"task_name": "Draw a cuboid", "task_url": "https://rosettacode.org/wiki/Draw_a_cuboid", "task_cat": "3D", "lang": "Scala", "code": "\nJava Swing Interoperability[edit]\nimport java.awt._\nimport java.awt.event.{MouseAdapter, MouseEvent}\n\nimport javax.swing._\n\nimport scala.math.{Pi, cos, sin}\n\nobject Cuboid extends App {\n  SwingUtilities.invokeLater(() => {\n\n    class Cuboid extends JPanel {\n      private val nodes: Array[Array[Double]] =\n        Array(Array(-1, -1, -1), Array(-1, -1, 1), Array(-1, 1, -1), Array(-1, 1, 1),\n          Array(1, -1, -1), Array(1, -1, 1), Array(1, 1, -1), Array(1, 1, 1))\n      private var mouseX, prevMouseX, mouseY, prevMouseY: Int = _\n\n      private def edges =\n        Seq(Seq(0, 1), Seq(1, 3), Seq(3, 2), Seq(2, 0),\n          Seq(4, 5), Seq(5, 7), Seq(7, 6), Seq(6, 4),\n          Seq(0, 4), Seq(1, 5), Seq(2, 6), Seq(3, 7))\n\n      override def paintComponent(gg: Graphics): Unit = {\n        val g = gg.asInstanceOf[Graphics2D]\n\n        def drawCube(g: Graphics2D): Unit = {\n          g.translate(getWidth / 2, getHeight / 2)\n          for (edge <- edges) {\n            g.drawLine(nodes(edge.head)(0).round.toInt, nodes(edge.head)(1).round.toInt,\n              nodes(edge(1))(0).round.toInt, nodes(edge(1))(1).round.toInt)\n          }\n          for (node <- nodes) g.fillOval(node(0).round.toInt - 4, node(1).round.toInt - 4, 8, 8)\n        }\n\n        super.paintComponent(gg)\n        g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON)\n        drawCube(g)\n      }\n\n      private def scale(sx: Double, sy: Double, sz: Double): Unit = {\n        for (node <- nodes) {\n          node(0) *= sx\n          node(1) *= sy\n          node(2) *= sz\n        }\n      }\n\n      private def rotateCube(angleX: Double, angleY: Double): Unit = {\n        val (sinX, cosX, sinY, cosY) = (sin(angleX), cos(angleX), sin(angleY), cos(angleY))\n        for (node <- nodes) {\n          val (x, y, z) = (node.head, node(1), node(2))\n          node(0) = x * cosX - z * sinX\n          node(2) = z * cosX + x * sinX\n          node(1) = y * cosY - node(2) * sinY\n          node(2) = node(2) * cosY + y * sinY\n        }\n      }\n\n      addMouseListener(new MouseAdapter() {\n        override def mousePressed(e: MouseEvent): Unit = {\n          mouseX = e.getX\n          mouseY = e.getY\n        }\n      })\n\n      addMouseMotionListener(new MouseAdapter() {\n        override def mouseDragged(e: MouseEvent): Unit = {\n          prevMouseX = mouseX\n          prevMouseY = mouseY\n          mouseX = e.getX\n          mouseY = e.getY\n          rotateCube((mouseX - prevMouseX) * 0.01, (mouseY - prevMouseY) * 0.01)\n          repaint()\n        }\n      })\n\n      scale(80, 120, 160)\n      rotateCube(Pi / 5, Pi / 9)\n      setPreferredSize(new Dimension(640, 640))\n      setBackground(Color.white)\n    }\n\n    new JFrame(\"Cuboid\") {\n      add(new Cuboid, BorderLayout.CENTER)\n      pack()\n      setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE)\n      setLocationRelativeTo(null)\n      setResizable(false)\n      setVisible(true)\n    }\n  })\n}\n\n", "explain": ""}, {"task_name": "Draw a cuboid", "task_url": "https://rosettacode.org/wiki/Draw_a_cuboid", "task_cat": "3D", "lang": "D", "code": "\nTranslation of: Go\nimport std.stdio, std.array;\n\nvoid printCuboid(in int dx, in int dy, in int dz) {\n    static cline(in int n, in int dx, in int dy, in string cde) {\n        writef(\"%*s\", n+1, cde[0 .. 1]);\n        write(cde[1 .. 2].replicate(9*dx - 1));\n        write(cde[0]);\n        writefln(\"%*s\", dy+1, cde[2 .. $]);\n    }\n\n    cline(dy+1, dx, 0, \"+-\");\n    foreach (i; 1 .. dy+1)\n        cline(dy-i+1, dx, i-1, \"/ |\");\n    cline(0, dx, dy, \"+-|\");\n    foreach (_; 0 .. 4*dz - dy - 2)\n        cline(0, dx, dy, \"| |\");\n    cline(0, dx, dy, \"| +\");\n    foreach_reverse (i; 0 .. dy)\n        cline(0, dx, i, \"| /\");\n    cline(0, dx, 0, \"+-\\n\");\n}\n\nvoid main() {\n    printCuboid(2, 3, 4);\n    printCuboid(1, 1, 1);\n    printCuboid(6, 2, 1);\n}\n\n\nOutput:\n    +-----------------+ \n   /                 /|\n  /                 / |\n /                 /  |\n+-----------------+   |\n|                 |   |\n|                 |   |\n|                 |   |\n|                 |   |\n|                 |   |\n|                 |   |\n|                 |   |\n|                 |   |\n|                 |   |\n|                 |   |\n|                 |   |\n|                 |   +\n|                 |  /\n|                 | /\n|                 |/\n+-----------------+\n\n  +--------+ \n /        /|\n+--------+ |\n|        | |\n|        | +\n|        |/\n+--------+\n\n   +-----------------------------------------------------+ \n  /                                                     /|\n /                                                     / |\n+-----------------------------------------------------+  |\n|                                                     |  +\n|                                                     | /\n|                                                     |/\n+-----------------------------------------------------+\n", "explain": ""}, {"task_name": "Draw a cuboid", "task_url": "https://rosettacode.org/wiki/Draw_a_cuboid", "task_cat": "3D", "lang": "Haskell", "code": "\nimport Graphics.Rendering.OpenGL\nimport Graphics.UI.GLUT\n\n-- Draw a cuboid.  Its vertices are those of a unit cube, which is then scaled\n-- to the required dimensions.  We only specify the visible faces, each of\n-- which is composed of two triangles.  The faces are rotated into position and\n-- rendered with a perspective transformation.\n\ntype Fl = GLfloat\n\ncuboid :: IO ()\ncuboid = do\n  color red   ; render front  \n  color green ; render side\n  color blue  ; render top\n\nred,green,blue :: Color4 GLfloat\nred   = Color4 1 0 0 1\ngreen = Color4 0 1 0 1\nblue  = Color4 0 0 1 1\n\nrender :: [(Fl, Fl, Fl)] -> IO ()\nrender = renderPrimitive TriangleStrip . mapM_ toVertex\n  where toVertex (x,y,z) = vertex $ Vertex3 x y z\n\nfront,side,top :: [(Fl,Fl,Fl)]\nfront = vertices [0,1,2,3]\nside  = vertices [4,1,5,3]\ntop   = vertices [3,2,5,6]\n\nvertices :: [Int] -> [(Fl,Fl,Fl)]\nvertices = map (verts !!)\n\nverts :: [(Fl,Fl,Fl)]\nverts = [(0,0,1), (1,0,1), (0,1,1), (1,1,1), (1,0,0), (1,1,0), (0,1,0)]\n\ntransform :: IO ()\ntransform = do\n  translate $ Vector3 0 0 (-10 :: Fl)\n  rotate (-14) $ Vector3 0 0 (1 :: Fl)\n  rotate (-30) $ Vector3 0 1 (0 :: Fl)\n  rotate   25  $ Vector3 1 0 (0 :: Fl)\n  scale 2 3 (4 :: Fl)\n  translate $ Vector3 (-0.5) (-0.5) (-0.5 :: Fl)\n\ndisplay :: IO ()\ndisplay = do\n  clear [ColorBuffer]\n  perspective 40 1 1 (15 :: GLdouble)\n  transform\n  cuboid\n  flush\n\nmain :: IO ()\nmain = do\n  let name = \"Cuboid\"\n  initialize name []\n  createWindow name\n  displayCallback $= display\n  mainLoop\n\n\n", "explain": "\n"}, {"task_name": "Draw a cuboid", "task_url": "https://rosettacode.org/wiki/Draw_a_cuboid", "task_cat": "3D", "lang": "VBScript", "code": "\nTranslation of: Ruby\nx = 6 : y = 2 : z = 3\n\nSub cuboid(nx, ny, nz)\n   WScript.StdOut.WriteLine \"Cuboid \" & nx & \" \" & ny & \" \" & nz & \":\"\n   lx = X * nx : ly = y * ny : lz = z * nz\n\n   'define the array\n   Dim area(): ReDim area(ly+lz, lx+ly)\n   For i = 0 to ly+lz\n      For j = 0 to lx+ly : area(i,j) = \" \" : Next\n   Next\n\n   'drawing lines\n   For i = 0 to nz-1 : drawLine area, lx,      0,    Z*i, \"-\" : Next\n   For i = 0 to ny   : drawLine area, lx,    y*i, lz+y*i, \"-\" : Next\n   For i = 0 to nx-1 : drawLine area, lz,    x*i,      0, \"|\" : Next\n   For i = 0 to ny   : drawLine area, lz, lx+y*i,    y*i, \"|\" : Next\n   For i = 0 to nz-1 : drawLine area, ly,     lx,    z*i, \"/\" : Next\n   For i = 0 to nx   : drawLine area, ly,    x*i,     lz, \"/\" : Next\n\n   'output the cuboid (in reverse)\n   For i = UBound(area,1) to 0 Step -1\n      linOut = \"\"\n      For j = 0 to UBound(area,2) : linOut = linOut & area(i,j) : Next\n      WScript.StdOut.WriteLine linOut\n   Next\nEnd Sub\n\nSub drawLine(arr, n, sx, sy, c)\n   Select Case c\n      Case \"-\"\n         dx = 1 : dy = 0\n      Case \"|\"\n         dx = 0 : dy = 1\n      Case \"/\"\n         dx = 1 : dy = 1\n   End Select\n   For i = 0 to n\n      xi = sx + (i * dx) : yi = sy + (i * dy)\n      If arr(yi, xi) = \" \" Then\n         arr(yi, xi) = c\n      Else\n         arr(yi, xi) = \"+\"\n      End If\n   Next\nEnd Sub\n\ncuboid 2,3,4\n\n\nOutput:\nCuboid 2 3 4:\n      +-----+-----+\n     /     /     /|\n    +-----+-----+ |\n   /     /     /| +\n  +-----+-----+ |/|\n /     /     /| + |\n+-----+-----+ |/| +\n|     |     | + |/|\n|     |     |/| + |\n+-----+-----+ |/| +\n|     |     | + |/|\n|     |     |/| + |\n+-----+-----+ |/| +\n|     |     | + |/\n|     |     |/| +\n+-----+-----+ |/\n|     |     | +\n|     |     |/\n+-----+-----+\n\n", "explain": ""}, {"task_name": "Draw a cuboid", "task_url": "https://rosettacode.org/wiki/Draw_a_cuboid", "task_cat": "3D", "lang": "Logo", "code": "\n\nWorks with: MSWlogo\n\nto cuboid :l1 :l2 :l3\ncs perspective ;making the room ready to use\nsetxyz :l1   0    0\nsetxyz :l1 :l2    0\nsetxyz   0 :l2    0\nsetxyz   0   0    0\nsetxyz :l1   0    0\nsetxyz :l1   0 -:l3\nsetxyz :l1 :l2 -:l3\nsetxyz :l1 :l2    0\nsetxyz   0 :l2    0\nsetxyz   0 :l2 -:l3\nsetxyz :l1 :l2 -:l3\nend\n\ncuboid 50 100 150\n", "explain": "In Logo, we can use the perspective function to make drawing 3D-objects easier.\nSimple implementation, just moving to the appropriate points every time.\nExample call to achieve task:\n"}, {"task_name": "Draw a cuboid", "task_url": "https://rosettacode.org/wiki/Draw_a_cuboid", "task_cat": "3D", "lang": "Zig", "code": "\nTranslation of: Factor\nLibrary: raylib\nconst std = @import(\"std\");\nconst c = @cImport({\n    @cInclude(\"raylib.h\");\n});\n\npub fn main() !void {\n    c.SetConfigFlags(c.FLAG_WINDOW_RESIZABLE | c.FLAG_VSYNC_HINT);\n    c.InitWindow(600, 480, \"cuboid\");\n    defer c.CloseWindow();\n\n    const camera = c.Camera3D{\n        .position = .{ .x = 4.5, .y = 4.5, .z = 4.5 },\n        .target = .{ .x = 0, .y = 0, .z = 0 },\n        .up = .{ .x = 0, .y = 1, .z = 0 },\n        .fovy = 45.0,\n        .projection = c.CAMERA_PERSPECTIVE,\n    };\n\n    c.SetTargetFPS(60);\n\n    while (!c.WindowShouldClose()) {\n        c.BeginDrawing();\n        defer c.EndDrawing();\n\n        c.ClearBackground(c.BLACK);\n\n        {\n            c.BeginMode3D(camera);\n            defer c.EndMode3D();\n\n            c.DrawCubeWires(.{ .x = 0, .y = 0, .z = 0 }, 2, 3, 4, c.LIME);\n        }\n    }\n}\n\n", "explain": ""}, {"task_name": "Draw a cuboid", "task_url": "https://rosettacode.org/wiki/Draw_a_cuboid", "task_cat": "3D", "lang": "AWK", "code": "\n# syntax: GAWK -f DRAW_A_CUBOID.AWK [-v x=?] [-v y=?] [-v z=?]\n# example: GAWK -f DRAW_A_CUBOID.AWK -v x=12 -v y=4 -v z=6\n# converted from VBSCRIPT\nBEGIN {\n    init_sides()\n    draw_cuboid(2,3,4)\n    draw_cuboid(1,1,1)\n    draw_cuboid(6,2,1)\n    exit (errors == 0) ? 0 : 1\n}\nfunction draw_cuboid(nx,ny,nz,  esf,i,i_max,j,j_max,lx,ly,lz) {\n    esf = errors # errors so far\n    if (nx !~ /^[0-9]+$/ || nx <= 0) { error(nx,ny,nz,1) }\n    if (ny !~ /^[0-9]+$/ || ny <= 0) { error(nx,ny,nz,2) }\n    if (nz !~ /^[0-9]+$/ || nz <= 0) { error(nx,ny,nz,3) }\n    if (errors > esf) { return }\n    lx = x * nx\n    ly = y * ny\n    lz = z * nz\n# define the array size\n    i_max = ly + lz\n    j_max = lx + ly\n    delete arr\n    printf(\"%s %s %s (%d rows x %d columns)\\n\",nx,ny,nz,i_max+1,j_max+1)\n# draw lines\n    for (i=0; i<=nz-1; i++) { draw_line(lx,0,z*i,\"-\") }\n    for (i=0; i<=ny; i++)   { draw_line(lx,y*i,lz+y*i,\"-\") }\n    for (i=0; i<=nx-1; i++) { draw_line(lz,x*i,0,\"|\") }\n    for (i=0; i<=ny; i++)   { draw_line(lz,lx+y*i,y*i,\"|\") }\n    for (i=0; i<=nz-1; i++) { draw_line(ly,lx,z*i,\"/\") }\n    for (i=0; i<=nx; i++)   { draw_line(ly,x*i,lz,\"/\") }\n# output the cuboid\n    for (i=i_max; i>=0; i--) {\n      for (j=0; j<=j_max; j++) {\n        printf(\"%1s\",arr[i,j])\n      }\n      printf(\"\\n\")\n    }\n}\nfunction draw_line(n,x,y,c,  dx,dy,i,xi,yi) {\n    if      (c == \"-\") { dx = 1 ; dy = 0 }\n    else if (c == \"|\") { dx = 0 ; dy = 1 }\n    else if (c == \"/\") { dx = 1 ; dy = 1 }\n    for (i=0; i<=n; i++) {\n      xi = x + i * dx\n      yi = y + i * dy\n      arr[yi,xi] = (arr[yi,xi] ~ /^\u00a0?$/) ? c : \"+\"\n    }\n}\nfunction error(x,y,z,arg) {\n    printf(\"error: '%s,%s,%s' argument %d is invalid\\n\",x,y,z,arg)\n    errors++\n}\nfunction init_sides() {\n# to change the defaults on the command line use: -v x=? -v y=? -v z=?\n    if (x+0 < 2) { x = 6 } # top\n    if (y+0 < 2) { y = 2 } # right\n    if (z+0 < 2) { z = 3 } # front\n}\n\n\nOutput:\n2 3 4 (19 rows x 19 columns)\n      +-----+-----+\n     /     /     /|\n    +-----+-----+ |\n   /     /     /| +\n  +-----+-----+ |/|\n /     /     /| + |\n+-----+-----+ |/| +\n|     |     | + |/|\n|     |     |/| + |\n+-----+-----+ |/| +\n|     |     | + |/|\n|     |     |/| + |\n+-----+-----+ |/| +\n|     |     | + |/\n|     |     |/| +\n+-----+-----+ |/\n|     |     | +\n|     |     |/\n+-----+-----+\n1 1 1 (6 rows x 9 columns)\n  +-----+\n /     /|\n+-----+ |\n|     | +\n|     |/\n+-----+\n6 2 1 (8 rows x 41 columns)\n    +-----+-----+-----+-----+-----+-----+\n   /     /     /     /     /     /     /|\n  +-----+-----+-----+-----+-----+-----+ |\n /     /     /     /     /     /     /| +\n+-----+-----+-----+-----+-----+-----+ |/\n|     |     |     |     |     |     | +\n|     |     |     |     |     |     |/\n+-----+-----+-----+-----+-----+-----+\n\n", "explain": ""}]