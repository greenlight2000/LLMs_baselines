[{"task_name": "Morse code", "task_url": "https://rosettacode.org/wiki/Morse_code", "task_cat": "Temporal media", "lang": "Python", "code": "\nimport time, winsound #, sys\n\nchar2morse = {          \n          \"!\": \"---.\",      \"\\\"\": \".-..-.\",     \"$\": \"...-..-\",    \"'\": \".----.\",  \n          \"(\": \"-.--.\",      \")\": \"-.--.-\",     \"+\": \".-.-.\",      \",\": \"--..--\", \n          \"-\": \"-....-\",     \".\": \".-.-.-\",     \"/\": \"-..-.\", \n          \"0\": \"-----\",      \"1\": \".----\",      \"2\": \"..---\",      \"3\": \"...--\", \n          \"4\": \"....-\",      \"5\": \".....\",      \"6\": \"-....\",      \"7\": \"--...\", \n          \"8\": \"---..\",      \"9\": \"----.\", \n          \":\": \"---...\",     \";\": \"-.-.-.\",     \"=\": \"-...-\",      \"?\": \"..--..\", \n          \"@\": \".--.-.\", \n          \"A\": \".-\",         \"B\": \"-...\",       \"C\": \"-.-.\",       \"D\": \"-..\", \n          \"E\": \".\",          \"F\": \"..-.\",       \"G\": \"--.\",        \"H\": \"....\", \n          \"I\": \"..\",         \"J\": \".---\",       \"K\": \"-.-\",        \"L\": \".-..\", \n          \"M\": \"--\",         \"N\": \"-.\",         \"O\": \"---\",        \"P\": \".--.\", \n          \"Q\": \"--.-\",       \"R\": \".-.\",        \"S\": \"...\",        \"T\": \"-\", \n          \"U\": \"..-\",        \"V\": \"...-\",       \"W\": \".--\",        \"X\": \"-..-\", \n          \"Y\": \"-.--\",       \"Z\": \"--..\", \n          \"[\": \"-.--.\",      \"]\": \"-.--.-\",     \"_\": \"..--.-\",\n }\n\ne = 50      # Element time in ms. one dit is on for e then off for e\nf = 1280    # Tone freq. in hertz\nchargap = 1 # Time between characters of a word, in units of e\nwordgap = 7 # Time between words, in units of e\n\ndef gap(n=1):\n    time.sleep(n * e / 1000)\noff = gap\n\ndef on(n=1):\n    winsound.Beep(f, n * e)\n\ndef dit():\n    on(); off()\n\ndef dah():\n    on(3); off()\n\ndef bloop(n=3):\n    winsound.Beep(f//2, n * e)\n\ndef windowsmorse(text):\n    for word in text.strip().upper().split():\n        for char in word:\n            for element in char2morse.get(char, '?'):\n                if element == '-':\n                    dah()\n                elif element == '.':\n                    dit()\n                else:\n                    bloop()\n            gap(chargap)\n        gap(wordgap)\n\n# Outputs its own source file as Morse. An audible quine!\n#with open(sys.argv[0], 'r') as thisfile:\n#    windowsmorse(thisfile.read())\n    \nwhile True:\n    windowsmorse(input('A string to change into morse: '))\n\n", "explain": ""}, {"task_name": "Morse code", "task_url": "https://rosettacode.org/wiki/Morse_code", "task_cat": "Temporal media", "lang": "C", "code": "\n\n/*\n\n  David Lambert, 2010-Dec-09\n\n  filter producing morse beep commands.\n\n  build:\n    make morse\n\n  use:\n    $ echo tie a. | ./morse\n    beep -n -f 440 -l 300 -D 100 -n -D 200 -n -f 440 -l 100 -D 100 -n -f 440 -l 100 -D 100 -n -D 200 -n -f 440 -l 100 -D 100 -n -D 200 -n -D 400 -n -f 440 -l 100 -D 100 -n -f 440 -l 300 -D 100 -n -D 200 -n -f 440 -l 100 -D 100 -n -f 440 -l 300 -D 100 -n -f 440 -l 100 -D 100 -n -f 440 -l 300 -D 100 -n -f 440 -l 100 -D 100 -n -f 440 -l 300 -D 100 -n -D 200 -n -D 400 -n -D 400\n\n  bugs:\n    What is the space between letter and punctuation?\n    Demo truncates input lines at 71 characters or so.\n\n */\n\n#include <ctype.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define BIND(A,L,H) ((L)<(A)?(A)<(H)?(A):(H):(L))\n/*\n  BIND(-1,0,9) is 0\n  BIND( 7,0,9) is 7\n  BIND(77,0,9) is 9\n*/\n\nchar\n  /* beep args for */\n  /* dit  dah     extra space */\n  dih[50],dah[50],medium[30],word[30],\n  *dd[2] = {dih,dah};\nconst char\n  *ascii = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789.,?'!/()&:;=+-_\\\"$@\",\n  *itu[] = {\n     \"13\",\"3111\",\"3131\",\"311\",\"1\",\"1131\",\"331\",\"1111\",\"11\",\"1333\",\"313\",\"1311\",\"33\",\"31\",\"333\",\"1331\",\"3313\",\"131\",\"111\",\"3\",\"113\",\"1113\",\"133\",\"3113\",\"3133\",\"3311\",\"33333\",\"13333\",\"11333\",\"11133\",\"11113\",\"11111\",\"31111\",\"33111\",\"33311\",\"33331\",\"131313\",\"331133\",\"113311\",\"133331\",\"313133\",\"31131\",\"31331\",\"313313\",\"13111\",\"333111\",\"313131\",\"31113\",\"13131\",\"311113\",\"113313\",\"131131\",\"1113113\",\"133131\"\n  };\n\nvoid append(char*s,const char*morse) {\n  for (; *morse; ++morse)\n    strcat(s,dd['3'==*morse]);\n  strcat(s,medium);\n}\n\nchar*translate(const char*i,char*o) {\n  const char*pc;\n  sprintf(o,\"beep\");\n  for (; *i; ++i)\n    if (NULL == (pc = strchr(ascii,toupper(*i))))\n      strcat(o,word);\n    else\n      append(o,itu[pc-ascii]);\n  strcat(o,word);\n  return o;\n}\n\nint main(int ac,char*av[]) {\n  char\n    sin[73],sout[100000];\n  int\n    dit = 100;\n  if (1 < ac) {\n    if (strlen(av[1]) != strspn(av[1],\"0123456789\"))\n      return 0*fprintf(stderr,\"use: %s [duration]   dit in ms, default %d\\n\",*av,dit);\n    dit = BIND(atoi(av[1]),1,1000);\n  }\n  sprintf(dah,\" -n -f 440 -l %d -D %d\",3*dit,dit);\n  sprintf(dih,\" -n -f 440 -l %d -D %d\",dit,dit);\n  sprintf(medium,\" -n -D %d\",(3-1)*dit);\n  sprintf(word,\" -n -D %d\",(7-(3-1)-1)*dit);\n  while (NULL != fgets(sin,72,stdin))\n    puts(translate(sin,sout));\n  return 0;\n}\n\n", "explain": "One could substitute another program for  ubuntu beep  command.\n"}, {"task_name": "Morse code", "task_url": "https://rosettacode.org/wiki/Morse_code", "task_cat": "Temporal media", "lang": "C++", "code": "\n/*\nMichal Sikorski\n06/07/2016\n*/\n#include <cstdlib>\n#include <iostream>\n#include <windows.h>\n#include <string.h>\nusing namespace std;\nint main(int argc, char *argv[])\n{\n    string inpt;\n    char ascii[28] = \" ABCDEFGHIJKLMNOPQRSTUVWXYZ\", lwcAscii[28] = \" abcdefghijklmnopqrstuvwxyz\";\n    string morse[27] = {\"  \", \".- \", \"-... \", \"-.-. \", \"-.. \", \". \", \"..-. \", \"--. \", \".... \", \".. \", \".--- \", \"-.- \", \".-.. \", \"-- \", \"-. \", \"--- \", \".--.\", \"--.- \", \".-. \", \"... \", \"- \", \"..- \", \"...- \", \".-- \", \"-..- \", \"-.-- \", \"--.. \"};\n    string outpt;\n    getline(cin,inpt);\n    int xx=0;\n    int size = inpt.length();\n    cout<<\"Length:\"<<size<<endl;\n   \n    xx=0;\n    while(xx<inpt.length())\n    {\n                         int x=0;\n                         bool working = false;\n                         while(!working)\n                         {\n                                  if(ascii[x] != inpt[xx]&&lwcAscii[x] != inpt[xx])\n                                  {      \n                                        x++;\n                                  }\n                                  else\n                                  {\n                                        working = !working;\n                                  }\n                         }\n                         \n                         cout<<morse[x];\n                         outpt = outpt + morse[x];\n                         xx++;\n    }\n    \n    xx=0;\n    while(xx<outpt.length()+1)\n    {\n                         if(outpt[xx] == '.')\n                         {\n                                   Beep(1000,250);   \n                         }\n                         else\n                         {\n                             if(outpt[xx] == '-')\n                             {\n                                          Beep(1000,500);\n                             }\n                             else\n                             {\n                                 if(outpt[xx] == ' ')\n                                 {\n                                              Sleep(500);\n                                 }   \n                             }    \n                         }\n                         xx++; \n    }\n    system(\"PAUSE\");\n    return EXIT_SUCCESS;\n}\n\n", "explain": ""}, {"task_name": "Morse code", "task_url": "https://rosettacode.org/wiki/Morse_code", "task_cat": "Temporal media", "lang": "Java", "code": "\nWorks with: java version 7\nimport java.util.*;\n\npublic class MorseCode {\n\n    final static String[][] code = {\n        {\"A\", \".-     \"}, {\"B\", \"-...   \"}, {\"C\", \"-.-.   \"}, {\"D\", \"-..    \"},\n        {\"E\", \".      \"}, {\"F\", \"..-.   \"}, {\"G\", \"--.    \"}, {\"H\", \"....   \"},\n        {\"I\", \"..     \"}, {\"J\", \".---   \"}, {\"K\", \"-.-    \"}, {\"L\", \".-..   \"},\n        {\"M\", \"--     \"}, {\"N\", \"-.     \"}, {\"O\", \"---    \"}, {\"P\", \".--.   \"},\n        {\"Q\", \"--.-   \"}, {\"R\", \".-.    \"}, {\"S\", \"...    \"}, {\"T\", \"-      \"},\n        {\"U\", \"..-    \"}, {\"V\", \"...-   \"}, {\"W\", \".-   - \"}, {\"X\", \"-..-   \"},\n        {\"Y\", \"-.--   \"}, {\"Z\", \"--..   \"}, {\"0\", \"-----  \"}, {\"1\", \".----  \"},\n        {\"2\", \"..---  \"}, {\"3\", \"...--  \"}, {\"4\", \"....-  \"}, {\"5\", \".....  \"},\n        {\"6\", \"-....  \"}, {\"7\", \"--...  \"}, {\"8\", \"---..  \"}, {\"9\", \"----.  \"},\n        {\"'\", \".----. \"}, {\":\", \"---... \"}, {\",\", \"--..-- \"}, {\"-\", \"-....- \"},\n        {\"(\", \"-.--.- \"}, {\".\", \".-.-.- \"}, {\"?\", \"..--.. \"}, {\";\", \"-.-.-. \"},\n        {\"/\", \"-..-.  \"}, {\"-\", \"..--.- \"}, {\")\", \"---..  \"}, {\"=\", \"-...-  \"},\n        {\"@\", \".--.-. \"}, {\"\\\"\", \".-..-.\"}, {\"+\", \".-.-.  \"}, {\" \", \"/\"}}; // cheat a little\n\n    final static Map<Character, String> map = new HashMap<>();\n\n    static {\n        for (String[] pair : code)\n            map.put(pair[0].charAt(0), pair[1].trim());\n    }\n\n    public static void main(String[] args) {\n        printMorse(\"sos\");\n        printMorse(\"   Hello     World!\");\n        printMorse(\"Rosetta Code\");\n    }\n\n    static void printMorse(String input) {\n        System.out.printf(\"%s %n\", input);\n\n        input = input.trim().replaceAll(\"[ ]+\", \" \").toUpperCase();\n        for (char c : input.toCharArray()) {\n            String s = map.get(c);\n            if (s != null)\n                System.out.printf(\"%s \", s);\n        }\n        System.out.println(\"\\n\");\n    }\n}\n\nsos \n... --- ... \n\n   Hello     World! \n.... . .-.. .-.. --- / .-   - --- .-. .-.. -.. \n\nRosetta Code \n.-. --- ... . - - .- / -.-. --- -.. . \n", "explain": ""}, {"task_name": "Morse code", "task_url": "https://rosettacode.org/wiki/Morse_code", "task_cat": "Temporal media", "lang": "C#", "code": "\nusing System;\nusing System.Collections.Generic;\n\nnamespace Morse\n{\n    class Morse\n    {\n        static void Main(string[] args)\n        {\n            string word = \"sos\";\n            Dictionary<string, string> Codes = new Dictionary<string, string>\n            {\n                {\"a\", \".-   \"}, {\"b\", \"-... \"}, {\"c\", \"-.-. \"}, {\"d\", \"-..  \"}, \n                {\"e\", \".    \"}, {\"f\", \"..-. \"}, {\"g\", \"--.  \"}, {\"h\", \".... \"},\n                {\"i\", \"..   \"}, {\"j\", \".--- \"}, {\"k\", \"-.-  \"}, {\"l\", \".-.. \"},\n                {\"m\", \"--   \"}, {\"n\", \"-.   \"}, {\"o\", \"---  \"}, {\"p\", \".--. \"}, \n                {\"q\", \"--.- \"}, {\"r\", \".-.  \"}, {\"s\", \"...  \"}, {\"t\", \"-    \"}, \n                {\"u\", \"..-  \"}, {\"v\", \"...- \"}, {\"w\", \".--  \"}, {\"x\", \"-..- \"}, \n                {\"y\", \"-.-- \"}, {\"z\", \"--.. \"}, {\"0\", \"-----\"}, {\"1\", \".----\"}, \n                {\"2\", \"..---\"}, {\"3\", \"...--\"}, {\"4\", \"....-\"}, {\"5\", \".....\"}, \n                {\"6\", \"-....\"}, {\"7\", \"--...\"}, {\"8\", \"---..\"}, {\"9\", \"----.\"}    \n            };\n\n            foreach (char c in word.ToCharArray())\n            {\n                string rslt = Codes[c.ToString()].Trim();\n                foreach (char c2 in rslt.ToCharArray())\n                {\n                    if (c2 == '.')\n                        Console.Beep(1000, 250);\n                    else\n                        Console.Beep(1000, 750);\n                }\n                System.Threading.Thread.Sleep(50);\n            }\n        }\n    }\n}\n\n", "explain": ""}, {"task_name": "Morse code", "task_url": "https://rosettacode.org/wiki/Morse_code", "task_cat": "Temporal media", "lang": "JavaScript", "code": "\n\nvar globalAudioContext = new webkitAudioContext();\n\nfunction morsecode(text, unit, freq) {\n\t'use strict';\n\n\t// defaults\n\tunit = unit ? unit : 0.05;\n\tfreq = freq ? freq : 700;\n\tvar cont = globalAudioContext;\n\tvar time = cont.currentTime;\n\n\t// morsecode\n\tvar code = {\n\t\ta: '._',    b: '_...',  c: '_._.',  d: '_..',   e: '.',     f: '.._.',\n\t\tg: '__.',   h: '....',  i: '..',    j: '.___',  k: '_._',   l: '._..',\n\t\tm: '__',    n: '_.',    o: '___',   p: '.__.',  q: '__._',  r: '._.',\n\t\ts: '...',   t: '_',     u: '.._',   v: '..._',  w: '.__',   x: '_.._',\n\t\ty: '_.__',  z: '__..',  0: '_____', 1: '.____', 2: '..___', 3: '...__',\n\t\t4: '...._', 5: '.....', 6: '_....', 7: '__...', 8: '___..', 9: '____.'\n\t};\n\n\t// generate code for text\n\tfunction makecode(data) {\n\t\tfor (var i = 0; i <= data.length; i ++) {\n\t\t\tvar codedata = data.substr(i, 1).toLowerCase();\n\t\t\tcodedata = code[codedata];\n\t\t\t// recognised character\n\t\t\tif (codedata !== undefined) {\n\t\t\t\tmaketime(codedata);\n\t\t\t}\n\t\t\t// unrecognised character\n\t\t\telse {\n\t\t\t\ttime += unit * 7;\n\t\t\t}\n\t\t}\n\t}\n\n\t// generate time for code\n\tfunction maketime(data) {\n\t\tfor (var i = 0; i <= data.length; i ++) {\n\t\t\tvar timedata = data.substr(i, 1);\n\t\t\ttimedata = (timedata === '.') ? 1 : (timedata === '_') ? 3 : 0;\n\t\t\ttimedata *= unit;\n\t\t\tif (timedata > 0) {\n\t\t\t\tmaketone(timedata);\n\t\t\t\ttime += timedata;\n\t\t\t\t// tone gap\n\t\t\t\ttime += unit * 1;\n\t\t\t}\n\t\t}\n\t\t// char gap\n\t\ttime += unit * 2;\n\t}\n\n\t// generate tone for time\n\tfunction maketone(data) {\n\t\tvar start = time;\n\t\tvar stop = time + data;\n\t\t// filter: envelope the tone slightly\n\t\tgain.gain.linearRampToValueAtTime(0, start);\n\t\tgain.gain.linearRampToValueAtTime(1, start + (unit / 8));\n\t\tgain.gain.linearRampToValueAtTime(1, stop - (unit / 16));\n\t\tgain.gain.linearRampToValueAtTime(0, stop);\n\t}\n\n\t// create: oscillator, gain, destination\n\tvar osci = cont.createOscillator();\n\tosci.frequency.value = freq;\n\tvar gain = cont.createGainNode();\n\tgain.gain.value = 0;\n\tvar dest = cont.destination;\n\t// connect: oscillator -> gain -> destination\n\tosci.connect(gain);\n\tgain.connect(dest);\n\t// start oscillator\n\tosci.start(time);\n\n\t// begin encoding: text -> code -> time -> tone\n\tmakecode(text);\n\n\t// return web audio context for reuse / control\n\treturn cont;\n}\n\n\nmorsecode('Hello World');\n\n\nOutput:\n\n", "explain": "This implementation utilises the fairly new Web Audio API in the browser for generating tones, as such it only uses one vendor implementation (WebKit). It is split into three modules; 1. translating the characters into morse code. 2. creating timings for the morse code. 3. creating tones with the timings.\nUsage:\nLive Version\n"}, {"task_name": "Morse code", "task_url": "https://rosettacode.org/wiki/Morse_code", "task_cat": "Temporal media", "lang": "Visual_Basic_.NET", "code": "\nTranslation of: C#\nModule Module1\n\n    Sub Main()\n        Dim word = \"sos\"\n        Dim codes As New Dictionary(Of String, String) From {\n            {\"a\", \".-   \"}, {\"b\", \"-... \"}, {\"c\", \"-.-. \"}, {\"d\", \"-..  \"},\n            {\"e\", \".    \"}, {\"f\", \"..-. \"}, {\"g\", \"--.  \"}, {\"h\", \".... \"},\n            {\"i\", \"..   \"}, {\"j\", \".--- \"}, {\"k\", \"-.-  \"}, {\"l\", \".-.. \"},\n            {\"m\", \"--   \"}, {\"n\", \"-.   \"}, {\"o\", \"---  \"}, {\"p\", \".--. \"},\n            {\"q\", \"--.- \"}, {\"r\", \".-.  \"}, {\"s\", \"...  \"}, {\"t\", \"-    \"},\n            {\"u\", \"..-  \"}, {\"v\", \"...- \"}, {\"w\", \".--  \"}, {\"x\", \"-..- \"},\n            {\"y\", \"-.-- \"}, {\"z\", \"--.. \"}, {\"0\", \"-----\"}, {\"1\", \".----\"},\n            {\"2\", \"..---\"}, {\"3\", \"...--\"}, {\"4\", \"....-\"}, {\"5\", \".....\"},\n            {\"6\", \"-....\"}, {\"7\", \"--...\"}, {\"8\", \"---..\"}, {\"9\", \"----.\"}\n        }\n\n        For Each c In word.ToCharArray\n            Dim rslt = codes(c).Trim\n            For Each c2 In rslt.ToCharArray\n                If c2 = \".\" Then\n                    Console.Beep(1000, 250)\n                Else\n                    Console.Beep(1000, 750)\n                End If\n                System.Threading.Thread.Sleep(50)\n            Next\n        Next\n    End Sub\n\nEnd Module\n\n", "explain": ""}, {"task_name": "Morse code", "task_url": "https://rosettacode.org/wiki/Morse_code", "task_cat": "Temporal media", "lang": "MATLAB", "code": "\n\nfunction [morseText,morseSound] = text2morse(string,playSound)\n\n%% Translate AlphaNumeric Text to Morse Text\n\n    string = lower(string);\n    \n    %Defined such that the ascii code of the characters in the string map\n    %to the indecies of the dictionary.\n    morseDictionary = {{' ',' '},{'',''},{'',''},{'',''},...\n                       {'',''},{'',''},{'',''},{'',''},{'',''},{'',''},...\n                       {'',''},{'',''},{'',''},{'',''},{'',''},{'',''},...\n                       {'0','-----'},{'1','.----'},{'2','..---'},{'3','...--'},...\n                       {'4','....-'},{'5','.....'},{'6','-....'},{'7','--...'},...\n                       {'8','---..'},{'9','----.'},...\n                       {'',''},{'',''},{'',''},{'',''},{'',''},{'',''},...\n                       {'',''},{'',''},{'',''},{'',''},{'',''},{'',''},...\n                       {'',''},{'',''},{'',''},{'',''},{'',''},{'',''},...\n                       {'',''},{'',''},{'',''},{'',''},{'',''},{'',''},...\n                       {'',''},{'',''},{'',''},{'',''},{'',''},{'',''},...\n                       {'',''},{'',''},{'',''},{'',''},{'',''},{'',''},...\n                       {'',''},{'',''},{'',''},...\n                       {'a','.-'},{'b','-...'},{'c','-.-.'},{'d','-..'},...\n                       {'e','.'},{'f','..-.'},{'g','--.'},{'h','....'},...\n                       {'i','..'},{'j','.---'},{'k','-.-'},{'l','.-..'},...\n                       {'m','--'},{'n','-.'},{'o','---'},{'p','.--.'},...\n                       {'q','--.-'},{'r','.-.'},{'s','...'},{'t','-'},...\n                       {'u','..-'},{'v','...-'},{'w','.--'},{'x','-..-'},...\n                       {'y','-.--'},{'z','--..'}};\n    \n    %Iterates through each letter in the string and converts it to morse\n    %code\n    morseText = arrayfun(@(x)[morseDictionary{x}{2} '|'],(string - 31),'UniformOutput',false);\n    \n    %The output of the previous operation is a cell array, we want it to be\n    %a string. This line accomplishes that.\n    morseText = cell2mat(morseText);\n    \n    morseText(end) = []; %delete extra pipe\n    \n%% Translate Morse Text to Morse Audio\n    \n    %Generate the tones for each element of the code\n    SamplingFrequency = 8192; %Hz\n    ditLength = .1; %s\n    dit = (0:1/SamplingFrequency:ditLength);\n    dah = (0:1/SamplingFrequency:3*ditLength);\n    dit = sin(3520*dit);\n    dah = sin(3520*dah);\n    silent = zeros(1,length(dit));\n\n    %A dictionary of the audio components of each symbol\n    morseTiming = {{'.',[dit silent]},{'-',[dah silent]},{'|',[silent silent]},{' ',[silent silent]}};\n    morseSound = [];\n\n    for i = (1:length(morseText))\n\n        %Iterate through each cell in the morseTiming cell array and\n        %find which timing sequence corresponds to the current morse\n        %text symbol.\n        cellNum = find(cellfun(@(x)(x{1}==morseText(i)),morseTiming));\n\n        morseSound = [morseSound morseTiming{cellNum}{2}];\n    end\n\n    morseSound(end-length(silent):end) = []; %Delete the extra silent tone at the end\n    \n    if(playSound)\n        sound(morseSound,SamplingFrequency); %Play sound\n    end\n    \nend %text2morse\n\n\nOutput: This will play the audio automatically, because the playSound argument is \"true\".\n>> text2morse('Call me Ishmael.',true)\n\nans =\n\n-.-.|.-|.-..|.-..| |--|.| |..|...|....|--|.-|.|.-..|\n\n", "explain": "This function will remove any characters not defined in the morse code.\n"}, {"task_name": "Morse code", "task_url": "https://rosettacode.org/wiki/Morse_code", "task_cat": "Temporal media", "lang": "Go", "code": "\n// Command morse translates an input string into morse code,\n// showing the output on the console, and playing it as sound.\n// Only works on ubuntu.\npackage main\n\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"log\"\n\t\"regexp\"\n\t\"strings\"\n\t\"syscall\"\n\t\"time\"\n\t\"unicode\"\n)\n\n// A key represents an action on the morse key.\n// It's either on or off, for the given duration.\ntype key struct {\n\tduration int\n\ton       bool\n\tsym      string // for debug output\n}\n\nvar (\n\truneToKeys   = map[rune][]key{}\n\tinterCharGap = []key{{1, false, \"\"}}\n\tpunctGap     = []key{{7, false, \" / \"}}\n\tcharGap      = []key{{3, false, \" \"}}\n\twordGap      = []key{{7, false, \" / \"}}\n)\n\nconst rawMorse = `\nA:.-    J:.---  S:...    1:.----  .:.-.-.- \u00a0::---...\nB:-...  K:-.-   T:-      2:..---  ,:--..-- \u00a0;:-.-.-.\nC:-.-.  L:.-..  U:..-    3:...-- \u00a0?:..--..  =:-...-\nD:-..   M:--    V:...-   4:....-  ':.----.  +:.-.-.\nE:.     N:-.    W:.--    5:..... \u00a0!:-.-.--  -:-....-\nF:..-.  O:---   X:-..-   6:-....  /:-..-.   _:..--.-\nG:--.   P:.--.  Y:-.--   7:--...  (:-.--.   \":.-..-.\nH:....  Q:--.-  Z:--..   8:---..  ):-.--.-  $:...-..-\nI:..    R:.-.   0:-----  9:----.  &:.-...   @:.--.-.\n`\n\nfunc init() {\n\t// Convert the rawMorse table into a map of morse key actions.\n\tr := regexp.MustCompile(\"([^ ]):([.-]+)\")\n\tfor _, m := range r.FindAllStringSubmatch(rawMorse, -1) {\n\t\tc := m[1][0]\n\t\tkeys := []key{}\n\t\tfor i, dd := range m[2] {\n\t\t\tif i > 0 {\n\t\t\t\tkeys = append(keys, interCharGap...)\n\t\t\t}\n\t\t\tif dd == '.' {\n\t\t\t\tkeys = append(keys, key{1, true, \".\"})\n\t\t\t} else if dd == '-' {\n\t\t\t\tkeys = append(keys, key{3, true, \"-\"})\n\t\t\t} else {\n\t\t\t\tlog.Fatalf(\"found %c in morse for %c\", dd, c)\n\t\t\t}\n\t\t\truneToKeys[rune(c)] = keys\n\t\t\truneToKeys[unicode.ToLower(rune(c))] = keys\n\t\t}\n\t}\n}\n\n// MorseKeys translates an input string into a series of keys.\nfunc MorseKeys(in string) ([]key, error) {\n\tafterWord := false\n\tafterChar := false\n\tresult := []key{}\n\tfor _, c := range in {\n\t\tif unicode.IsSpace(c) {\n\t\t\tafterWord = true\n\t\t\tcontinue\n\t\t}\n\t\tmorse, ok := runeToKeys[c]\n\t\tif !ok {\n\t\t\treturn nil, fmt.Errorf(\"can't translate %c to morse\", c)\n\t\t}\n\t\tif unicode.IsPunct(c) && afterChar {\n\t\t\tresult = append(result, punctGap...)\n\t\t} else if afterWord {\n\t\t\tresult = append(result, wordGap...)\n\t\t} else if afterChar {\n\t\t\tresult = append(result, charGap...)\n\t\t}\n\t\tresult = append(result, morse...)\n\t\tafterChar = true\n\t\tafterWord = false\n\t}\n\treturn result, nil\n}\n\nfunc main() {\n\tvar ditDuration time.Duration\n\tflag.DurationVar(&ditDuration, \"d\", 40*time.Millisecond, \"length of dit\")\n\tflag.Parse()\n\tin := \"hello world.\"\n\tif len(flag.Args()) > 1 {\n\t\tin = strings.Join(flag.Args(), \" \")\n\t}\n\tkeys, err := MorseKeys(in)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to translate: %s\", err)\n\t}\n\tfor _, k := range keys {\n\t\tif k.on {\n\t\t\tif err := note(true); err != nil {\n\t\t\t\tlog.Fatalf(\"failed to play note: %s\", err)\n\t\t\t}\n\t\t}\n\t\tfmt.Print(k.sym)\n\t\ttime.Sleep(ditDuration * time.Duration(k.duration))\n\t\tif k.on {\n\t\t\tif err := note(false); err != nil {\n\t\t\t\tlog.Fatalf(\"failed to stop note: %s\", err)\n\t\t\t}\n\t\t}\n\t}\n\tfmt.Println()\n}\n\n// Implement sound on ubuntu. Needs permission to access /dev/console.\n\nvar consoleFD uintptr\n\nfunc init() {\n\tfd, err := syscall.Open(\"/dev/console\", syscall.O_WRONLY, 0)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to get console device: %s\", err)\n\t}\n\tconsoleFD = uintptr(fd)\n}\n\nconst KIOCSOUND = 0x4B2F\nconst clockTickRate = 1193180\nconst freqHz = 600\n\n// note either starts or stops a note.\nfunc note(on bool) error {\n\targ := uintptr(0)\n\tif on {\n\t\targ = clockTickRate / freqHz\n\t}\n\t_, _, errno := syscall.Syscall(syscall.SYS_IOCTL, consoleFD, KIOCSOUND, arg)\n\tif errno != 0 {\n\t\treturn errno\n\t}\n\treturn nil\n\n}\n\n", "explain": ""}, {"task_name": "Morse code", "task_url": "https://rosettacode.org/wiki/Morse_code", "task_cat": "Temporal media", "lang": "Delphi", "code": "\nprogram Morse;\n\n{$APPTYPE CONSOLE}\n\n{$R *.res}\n\nuses\n  System.Generics.Collections,\n  SysUtils,\n  Windows;\n\nconst\n  Codes: array[0..35, 0..1] of string =\n   (('a', '.-   '), ('b', '-... '), ('c', '-.-. '), ('d', '-..  '),\n    ('e', '.    '), ('f', '..-. '), ('g', '--.  '), ('h', '.... '),\n    ('i', '..   '), ('j', '.--- '), ('k', '-.-  '), ('l', '.-.. '),\n    ('m', '--   '), ('n', '-.   '), ('o', '---  '), ('p', '.--. '),\n    ('q', '--.- '), ('r', '.-.  '), ('s', '...  '), ('t', '-    '),\n    ('u', '..-  '), ('v', '...- '), ('w', '.--  '), ('x', '-..- '),\n    ('y', '-.-- '), ('z', '--.. '), ('0', '-----'), ('1', '.----'),\n    ('2', '..---'), ('3', '...--'), ('4', '....-'), ('5', '.....'),\n    ('6', '-....'), ('7', '--...'), ('8', '---..'), ('9', '----.'));\nvar\n  Dictionary: TDictionary<String, String>;\n\nprocedure InitCodes;\nvar\n  i: Integer;\nbegin\n  for i := 0 to High(Codes) do\n    Dictionary.Add(Codes[i, 0], Codes[i, 1]);\nend;\n\nprocedure SayMorse(const Word: String);\nvar\n  s: String;\nbegin\n  for s in Word do\n    if s = '.' then\n      Windows.Beep(1000, 250)\n    else if s = '-' then\n      Windows.Beep(1000, 750)\n    else\n      Windows.Beep(1000, 1000);\nend;\n\nprocedure ParseMorse(const Word: String);\nvar\n  s, Value: String;\nbegin\n  for s in word do\n    if Dictionary.TryGetValue(s, Value) then\n    begin\n      Write(Value + ' ');\n      SayMorse(Value);\n    end;\nend;\n\nbegin\n  Dictionary := TDictionary<String, String>.Create;\n  try\n    InitCodes;\n    if ParamCount = 0 then\n      ParseMorse('sos')\n    else if ParamCount = 1 then\n      ParseMorse(LowerCase(ParamStr(1)))\n    else\n      Writeln('Usage: Morse.exe anyword');\n\n    Readln;\n  finally\n    Dictionary.Free;\n  end;\nend.\n\n", "explain": ""}, {"task_name": "Morse code", "task_url": "https://rosettacode.org/wiki/Morse_code", "task_cat": "Temporal media", "lang": "Ruby", "code": "\nWorks with: Ruby version 1.8.7+ (uses each_char)\nLibrary: win32-utils\nrequire 'win32/sound'\n\nclass MorseCode\n  MORSE = {\n      \"!\" => \"---.\", \"\\\"\" => \".-..-.\", \"$\" => \"...-..-\", \"'\" => \".----.\",\n      \"(\" => \"-.--.\", \")\" => \"-.--.-\", \"+\" => \".-.-.\", \",\" => \"--..--\",\n      \"-\" => \"-....-\", \".\" => \".-.-.-\", \"/\" => \"-..-.\", \"0\" => \"-----\",\n      \"1\" => \".----\", \"2\" => \"..---\", \"3\" => \"...--\", \"4\" => \"....-\", \"5\" => \".....\",\n      \"6\" => \"-....\", \"7\" => \"--...\", \"8\" => \"---..\", \"9\" => \"----.\", \":\" => \"---...\",\n      \";\" => \"-.-.-.\", \"=\" => \"-...-\", \"?\" => \"..--..\", \"@\" => \".--.-.\", \"A\" => \".-\",\n      \"B\" => \"-...\", \"C\" => \"-.-.\", \"D\" => \"-..\", \"E\" => \".\", \"F\" => \"..-.\",\n      \"G\" => \"--.\", \"H\" => \"....\", \"I\" => \"..\", \"J\" => \".---\", \"K\" => \"-.-\",\n      \"L\" => \".-..\", \"M\" => \"--\", \"N\" => \"-.\", \"O\" => \"---\", \"P\" => \".--.\",\n      \"Q\" => \"--.-\", \"R\" => \".-.\", \"S\" => \"...\", \"T\" => \"-\", \"U\" => \"..-\",\n      \"V\" => \"...-\", \"W\" => \".--\", \"X\" => \"-..-\", \"Y\" => \"-.--\", \"Z\" => \"--..\",\n      \"[\" => \"-.--.\", \"]\" => \"-.--.-\", \"_\" => \"..--.-\",\n  }\n\n  T_UNIT = 75 # ms\n  FREQ = 700\n  DIT = 1 * T_UNIT\n  DAH = 3 * T_UNIT\n  CHARGAP = 1 * T_UNIT\n  WORDGAP = 7 * T_UNIT\n\n  def initialize(string)\n    @message = string\n    puts \"your message is #{string.inspect}\"\n  end\n\n  def send\n    @message.strip.upcase.split.each do |word|\n      word.each_char do |char|\n        send_char char\n        pause CHARGAP\n        print \" \"\n      end\n      pause WORDGAP\n      puts \"\"\n    end\n  end\n\n  private\n  def send_char(char)\n    MORSE[char].each_char do |code|\n      case code\n      when '.' then beep DIT\n      when '-' then beep DAH\n      end\n      pause CHARGAP\n      print code\n    end\n  end\n\n  def beep(ms)\n    ::Win32::Sound.beep(FREQ, ms)\n  end\n\n  def pause(ms)\n    sleep(ms.to_f/1000.0)\n  end\nend\n\nMorseCode.new('sos').send\nMorseCode.new('this is a test.').send\n\n\nOutput:\nyour message is \"sos\"\n... --- ...\nyour message is \"this is a test.\"\n- .... .. ...\n.. ...\n.-\n- . ... - .-.-.-\n", "explain": ""}, {"task_name": "Morse code", "task_url": "https://rosettacode.org/wiki/Morse_code", "task_cat": "Temporal media", "lang": "Rust", "code": "\n\n//!\n//! morse_code/src/main.rs\n//!\n//! Michael G. Cummings\n//! 2019-08-26\n//!\n//! Since Rust doesn't have build-in audio support text output is used.\n//!\n\nuse std::process;\nuse structopt::StructOpt;\nuse morse_code::{Config, Opt, run};\n\n/// Core of the command-line binary.\n///\n/// By default expects input from stdin and outputs resulting morse code to stdout, but can also\n/// read and/or write to files.\n/// Use `morse_code --help` for more information about options.\nfn main() {\n    let opts = Opt::from_args();\n    let mut config = Config::new(opts).unwrap_or_else(|err| {\n        eprintln!(\"Problem parsing arguments: {}\", err);\n        process::exit(1);\n    });\n    if let Err(err) = run(&mut config) {\n        eprintln!(\"Application error: {}\", err);\n        process::exit(2);\n    }\n}\n\n\n//!\n//! morse_code/src/lib.rs\n//!\n//! Michael G. Cummings\n//! 2019-08-26\n//!\n\n#[macro_use]\nextern crate structopt;\n\nuse std::{fs, io};\nuse std::collections::HashMap;\nuse std::error::Error;\nuse std::path::PathBuf;\n\n/// Main library function that does the actual work.\n///\n/// Each character has one space between them and there are two spaces between words.\n/// Unknown characters in the input are replaced with a '#' in the output.\n///\npub fn run(config: &mut Config) -> Result<(), Box<dyn Error>> {\n    let mut contents = String::new();\n    config.read.read_to_string(&mut contents)?;\n    let morse_map = init_code_map();\n    let mut result = String::new();\n    for char in contents.trim().to_uppercase().chars() {\n        match morse_map.get(&char) {\n            Some(hash) => {\n                result = result + *hash;\n            }\n            None => { result = result + \"#\" }\n        }\n        result = result + \" \";\n    }\n    config.write.write(result.as_ref())?;\n    Ok(())\n}\n\n/// Configuration structure for the input and output streams.\n#[derive(Debug)]\npub struct Config {\n    read: Box<dyn io::Read>,\n    write: Box<dyn io::Write>,\n}\n\nimpl Config {\n    pub fn new(opts: Opt) -> Result<Config, &'static str> {\n        let input: Box<dyn io::Read> = match opts.input {\n            Some(p) => Box::new(fs::File::open(p).unwrap()),\n            None => Box::new(io::stdin()),\n        };\n        let output: Box<dyn io::Write> = match opts.output {\n            Some(p) => Box::new(fs::File::create(p).unwrap()),\n            None => Box::new(io::stdout()),\n        };\n        Ok(Config { read: input, write: output })\n    }\n}\n\n/// Structure used to hold command line opts(parameters) of binary.\n///\n/// Using StructOpt crate to parse command-line parameters/options.\n///\n#[derive(Debug, StructOpt)]\n#[structopt(rename_all = \"kebab-case\", raw(setting = \"structopt::clap::AppSettings::ColoredHelp\"))]\npub struct Opt {\n    /// Input file, stdin if not present\n    #[structopt(short, long, parse(from_os_str))]\n    input: Option<PathBuf>,\n    /// Output file, stdout if not present\n    #[structopt(short, long, parse(from_os_str))]\n    output: Option<PathBuf>,\n}\n\n/// Initialize hash map of characters to morse code as string.\npub fn init_code_map() -> HashMap<char, &'static str> {\n    let mut morse_map: HashMap<char, &str> = HashMap::with_capacity(37);\n    morse_map.insert(' ', \" \");\n    morse_map.insert('A', \"._\");\n    morse_map.insert('B', \"_...\");\n    morse_map.insert('C', \"_._.\");\n    morse_map.insert('D', \"_..\");\n    morse_map.insert('E', \".\");\n    morse_map.insert('F', \".._.\");\n    morse_map.insert('G', \"__.\");\n    morse_map.insert('H', \"....\");\n    morse_map.insert('I', \"..\");\n    morse_map.insert('J', \".___\");\n    morse_map.insert('K', \"_._\");\n    morse_map.insert('L', \"._..\");\n    morse_map.insert('M', \"__\");\n    morse_map.insert('N', \"_.\");\n    morse_map.insert('O', \"___\");\n    morse_map.insert('P', \".__.\");\n    morse_map.insert('Q', \"__._\");\n    morse_map.insert('R', \"._.\");\n    morse_map.insert('S', \"...\");\n    morse_map.insert('T', \"_\");\n    morse_map.insert('U', \".._\");\n    morse_map.insert('V', \"..._\");\n    morse_map.insert('W', \".__\");\n    morse_map.insert('X', \"_.._\");\n    morse_map.insert('Y', \"_.__\");\n    morse_map.insert('Z', \"__..\");\n    morse_map.insert('1', \".____\");\n    morse_map.insert('2', \"..___\");\n    morse_map.insert('3', \"...__\");\n    morse_map.insert('4', \"...._\");\n    morse_map.insert('5', \".....\");\n    morse_map.insert('6', \"_....\");\n    morse_map.insert('7', \"__...\");\n    morse_map.insert('8', \"___..\");\n    morse_map.insert('9', \"____.\");\n    morse_map.insert('0', \"_____\");\n    morse_map\n}\n\n", "explain": "Original code can be found on GitHub.\nmorse_code/src/main.rs file:\nmorse_code/src/lib.rs file:\n"}, {"task_name": "Morse code", "task_url": "https://rosettacode.org/wiki/Morse_code", "task_cat": "Temporal media", "lang": "Visual_Basic", "code": "\nWorks with: Visual Basic version 6\n\n", "explain": "The #VBA example works in VB6 as well, without any change.\n"}, {"task_name": "Morse code", "task_url": "https://rosettacode.org/wiki/Morse_code", "task_cat": "Temporal media", "lang": "Ada", "code": "\n\npackage Morse is\n\n   type Symbols is (Nul, '-', '.', ' ');\n   -- Nul is the letter separator, space the word separator;\n   Dash : constant Symbols := '-';\n   Dot : constant Symbols := '.';\n   type Morse_Str is array (Positive range <>) of Symbols;\n   pragma Pack (Morse_Str);\n\n   function Convert (Input : String) return Morse_Str;\n   procedure Morsebeep (Input : Morse_Str);\n\nprivate\n   subtype Reschars is Character range ' ' .. 'Z';\n   -- restricted set of characters from 16#20# to 16#60#\n   subtype Length is Natural range 1 .. 5;\n   subtype Codes is Morse_Str (Length);\n   -- using the current ITU standard with 5 signs\n   -- only alphanumeric characters  are taken into consideration\n\n   type Codings is record\n      L : Length;\n      Code : Codes;\n   end record;\n   Table : constant array (Reschars) of Codings :=\n     ('A' => (2, \".-   \"), 'B' => (4, \"-... \"),  'C' => (4, \"-.-. \"),\n      'D' => (3, \"-..  \"), 'E' => (1, \".    \"),  'F' => (4, \"..-. \"),\n      'G' => (3, \"--.  \"), 'H' => (4, \".... \"),  'I' => (2, \"..   \"),\n      'J' => (4, \".--- \"), 'K' => (3, \"-.-  \"),  'L' => (4, \".-.. \"),\n      'M' => (2, \"--   \"), 'N' => (2, \"-.   \"),  'O' => (3, \"---  \"),\n      'P' => (4, \".--. \"), 'Q' => (4, \"--.- \"),  'R' => (3, \".-.  \"),\n      'S' => (3, \"...  \"), 'T' => (1, \"-    \"),  'U' => (3, \"..-  \"),\n      'V' => (4, \"...- \"), 'W' => (3, \".--  \"),  'X' => (4, \"-..- \"),\n      'Y' => (4, \"-.-- \"), 'Z' => (4, \"--.. \"),  '1' => (5, \".----\"),\n      '2' => (5, \"..---\"), '3' => (5, \"...--\"),  '4' => (5, \"....-\"),\n      '5' => (5, \".....\"), '6' => (5, \"-....\"),  '7' => (5, \"--...\"),\n      '8' => (5, \"---..\"), '9' => (5, \"----.\"),  '0' => (5, \"-----\"),\n      others => (1, \"     \")); -- Dummy => Other characters do not need code.\n\nend Morse;\n\nwith Ada.Strings.Maps, Ada.Characters.Handling, Interfaces.C;\nuse  Ada, Ada.Strings, Ada.Strings.Maps, Interfaces;\n\npackage body Morse is\n\n   Dit, Dah, Lettergap, Wordgap : Duration; -- in seconds\n   Dit_ms, Dah_ms : C.unsigned; -- durations expressed in ms\n   Freq : constant C.unsigned := 1280; -- in Herz\n\n   Morse_Sequence : constant Character_Sequence :=\n      \" ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n   Morse_charset : constant Character_Set := To_Set (Morse_Sequence);\n\n   function Convert (Input : String) return Morse_Str is\n      Cap_String : constant String := Characters.Handling.To_Upper (Input);\n      Result : Morse_Str (1 .. 7 * Input'Length); -- Upper Capacity\n      First, Last : Natural := 0;\n      Char_code : Codings;\n   begin\n      for I in Cap_String'Range loop\n         if Is_In (Cap_String (I), Morse_charset) then\n            First := Last + 1;\n            if Cap_String (I) = ' ' then\n               Result (First) := ' ';\n               Last := Last + 1;\n            else\n               Char_code := Table (Reschars (Cap_String (I)));\n               Last := First + Char_code.L - 1;\n               Result (First .. Last) := Char_code.Code (1 .. Char_code.L);\n               Last := Last + 1;\n               Result (Last) := Nul;\n            end if;\n         end if;\n      end loop;\n      if Result (Last) /= ' ' then\n         Last := Last + 1;\n         Result (Last) := ' ';\n      end if;\n      return Result (1 .. Last);\n   end Convert;\n\n   procedure Morsebeep (Input : Morse_Str) is\n      -- Beep is not portable\u00a0: adapt to your OS/sound board\n      -- Implementation for Windows XP / interface to fn in stdlib\n      procedure win32xp_beep\n        (dwFrequency : C.unsigned;\n         dwDuration : C.unsigned);\n      pragma Import (C, win32xp_beep, \"_beep\");\n   begin\n      for I in Input'Range loop\n         case Input (I) is\n            when Nul =>\n               delay Lettergap;\n            when Dot =>\n               win32xp_beep (Freq, Dit_ms);\n               delay Dit;\n            when Dash =>\n               win32xp_beep (Freq, Dah_ms);\n               delay Dit;\n            when ' ' =>\n               delay Wordgap;\n         end case;\n      end loop;\n   end Morsebeep;\nbegin\n   Dit := 0.20;\n   Lettergap := 2 * Dit;\n   Dah := 3 * Dit;\n   Wordgap := 4 * Dit;\n   Dit_ms := C.unsigned (Integer (Dit * 1000));\n   Dah_ms := C.unsigned (Integer (Dah * 1000));\nend Morse;\n\n\nwith Morse;            use Morse;\nprocedure Morse_Tx is\nbegin\n   Morsebeep (Convert (\"Science sans Conscience\"));\nend Morse_Tx;\n\n", "explain": "Conforms to Ada95. \nWorks for Windows 32 XP , not for Vista since Beep is no longer effective.\nSpecification of the package\u00a0:\nMain program\u00a0:\n"}, {"task_name": "Morse code", "task_url": "https://rosettacode.org/wiki/Morse_code", "task_cat": "Temporal media", "lang": "Julia", "code": "\n\nusing PortAudio\n\nconst pstream = PortAudioStream(0, 2)\nsendmorsesound(t, f) = write(pstream, SinSource(eltype(stream), samplerate(stream)*0.8, [f]), (t/1000)s)\n\nchar2morse = Dict[\n      \"!\" => \"---.\", \"\\\"\" => \".-..-.\", \"$\" => \"...-..-\", \"'\" => \".----.\",\n      \"(\" => \"-.--.\", \")\" => \"-.--.-\", \"+\" => \".-.-.\", \",\" => \"--..--\",\n      \"-\" => \"-....-\", \".\" => \".-.-.-\", \"/\" => \"-..-.\", \"0\" => \"-----\",\n      \"1\" => \".----\", \"2\" => \"..---\", \"3\" => \"...--\", \"4\" => \"....-\", \"5\" => \".....\",\n      \"6\" => \"-....\", \"7\" => \"--...\", \"8\" => \"---..\", \"9\" => \"----.\", \":\" => \"---...\",\n      \";\" => \"-.-.-.\", \"=\" => \"-...-\", \"?\" => \"..--..\", \"@\" => \".--.-.\", \"A\" => \".-\",\n      \"B\" => \"-...\", \"C\" => \"-.-.\", \"D\" => \"-..\", \"E\" => \".\", \"F\" => \"..-.\",\n      \"G\" => \"--.\", \"H\" => \"....\", \"I\" => \"..\", \"J\" => \".---\", \"K\" => \"-.-\",\n      \"L\" => \".-..\", \"M\" => \"--\", \"N\" => \"-.\", \"O\" => \"---\", \"P\" => \".--.\",\n      \"Q\" => \"--.-\", \"R\" => \".-.\", \"S\" => \"...\", \"T\" => \"-\", \"U\" => \"..-\",\n      \"V\" => \"...-\", \"W\" => \".--\", \"X\" => \"-..-\", \"Y\" => \"-.--\", \"Z\" => \"--..\",\n      \"[\" => \"-.--.\", \"]\" => \"-.--.-\", \"_\" => \"..--.-\"]\n \nfunction sendmorsesound(freq, duration)\ncpause() = sleep(0.080)\nwpause = sleep(0.400)\n\ndit() = sendmorsesound(0.070, 700)\ndash() = sensmorsesound(0.210, 700)\nsendmorsechar(c) = for d in char2morse(c) d == '.' ? dit(): dash() end end\nsendmorseword(w) = for c in w sendmorsechar(c) cpause() end wpause() end\nsendmorse(msg) = for word in uppercase(msg) sendmorseword(word) end\n\nsendmorse(\"sos sos sos\")\nsendmorse(\"The case of letters in Morse coding is ignored.\"\n\n", "explain": "Requires a sound card and the PortAudio libraries.\n"}, {"task_name": "Morse code", "task_url": "https://rosettacode.org/wiki/Morse_code", "task_cat": "Temporal media", "lang": "Kotlin", "code": "\n\nimport javax.sound.sampled.AudioFormat\nimport javax.sound.sampled.AudioSystem\n\nval morseCode = hashMapOf(\n        'a' to \".-\", 'b' to \"-...\", 'c' to \"-.-.\",\n        'd' to \"-..\", 'e' to \".\", 'f' to \"..-.\",\n        'g' to \"--.\", 'h' to \"....\", 'i' to \"..\",\n        'j' to \".---\", 'k' to \"-.-\", 'l' to \".-..\",\n        'm' to \"--\", 'n' to \"-.\", 'o' to \"---\",\n        'p' to \".--.\", 'q' to \"--.-\", 'r' to \".-.\",\n        's' to \"...\", 't' to \"-\", 'u' to \"..-\",\n        'v' to \"...-\", 'w' to \".--\", 'x' to \"-..-\",\n        'y' to \"-.--\", 'z' to \"--..\",\n\n        '0' to \".....\", '1' to \"-....\", '2' to \"--...\",\n        '3' to \"---..\", '4' to \"----.\", '5' to \"-----\",\n        '6' to \".----\", '7' to \"..---\", '8' to \"...--\",\n        '9' to \"....-\",\n\n        ' ' to \"/\", ',' to \"--..--\", '!' to \"-.-.--\",\n        '\"' to \".-..-.\", '.' to \".-.-.-\", '?' to \"..--..\",\n        '\\'' to \".----.\", '/' to \"-..-.\", '-' to \"-....-\",\n        '(' to \"-.--.-\", ')' to \"-.--.-\"\n)\n\nval symbolDurationInMs = hashMapOf('.' to 200, '-' to 500, '/' to 1000)\n\n\nfun toMorseCode(message: String) = message.filter { morseCode.containsKey(it) }\n                                          .fold(\"\") { acc, ch -> acc + morseCode[ch]!! }\n\nfun playMorseCode(morseCode: String) = morseCode.forEach { symbol -> beep(symbolDurationInMs[symbol]!!) }\n\nfun beep(durationInMs: Int) {\n    val soundBuffer = ByteArray(durationInMs * 8)\n    for ((i, _) in soundBuffer.withIndex()) {\n        soundBuffer[i] = (Math.sin(i / 8.0 * 2.0 * Math.PI) * 80.0).toByte()\n    }\n\n    val audioFormat = AudioFormat(\n            /*sampleRate*/ 8000F,\n            /*sampleSizeInBits*/ 8,\n            /*channels*/ 1,\n            /*signed*/ true,\n            /*bigEndian*/ false\n    )\n    with (AudioSystem.getSourceDataLine(audioFormat)!!) {\n        open(audioFormat)\n\n        start()\n        write(soundBuffer, 0, soundBuffer.size)\n        drain()\n\n        close()\n    }\n}\n\nfun main(args: Array<String>) {\n    args.forEach {\n        playMorseCode(toMorseCode(it.toLowerCase()))\n    }\n}\n\n", "explain": "Java does not have easy access to the beep method, so we need to create one using the Audio API it provides.\n"}, {"task_name": "Morse code", "task_url": "https://rosettacode.org/wiki/Morse_code", "task_cat": "Temporal media", "lang": "Perl", "code": "\nuse Acme::AGMorse qw(SetMorseVals SendMorseMsg);\nSetMorseVals(20,30,400);\nSendMorseMsg('Hello World! abcdefg @\\;');  # note, caps are ingnored in Morse Code\nexit;\n\n\nAcme::AGMorse\nAudio::Beep\nSwitch\n\n1) pcspkr may not be available by default. Run: sudo modprobe pcspkr\n2) pcspkr may be available but muted.\n    - Check your sound prefrences,usually a right click over the speaker icon\n", "explain": "The above code requires:\nSome known problems on UNIX:\n"}, {"task_name": "Morse code", "task_url": "https://rosettacode.org/wiki/Morse_code", "task_cat": "Temporal media", "lang": "Prolog", "code": "\n\n% convert text to morse\n% query text2morse(Text, Morse)\n% where\n% Text is string to convert\n% Morse is Morse representation\n% There is a space between chars and double space between words\n%\ntext2morse(Text, Morse) :-\n\tstring_lower(Text, TextLower),\t\t\t% rules are in lower case\n\tstring_chars(TextLower, Chars),\t\t\t% convert string into list of chars\n\tchars2morse(Chars, MorseChars),\t\t\t% convert each char into morse\n\tstring_chars(MorsePlusSpace, MorseChars),\t% append returned string list into single string\n\tstring_concat(Morse, ' ', MorsePlusSpace).\t% Remove trailing space\n\nchars2morse([], \"\").\nchars2morse([H|CharTail], Morse) :-\n\tmorse(H, M),\n\tchars2morse(CharTail, MorseTail),\n\tstring_concat(M,' ', MorseSpace),\n\tstring_concat(MorseSpace, MorseTail, Morse).\n\n% space\nmorse(' ', \" \").\n% letters\nmorse('a', \".-\").\nmorse('b', \"-...\").\nmorse('c', \"-.-.\").\nmorse('d', \"-..\").\nmorse('e', \".\").\nmorse('f', \"..-.\").\nmorse('g', \"--.\").\nmorse('h', \"....\").\nmorse('i', \"..\").\nmorse('j', \".---\").\nmorse('k', \"-.-\").\nmorse('l', \".-..\").\nmorse('m', \"--\").\nmorse('n', \"-.\").\nmorse('o', \"---\").\nmorse('p', \".--.\").\nmorse('q', \"--.-\").\nmorse('r', \".-.\").\nmorse('s', \"...\").\nmorse('t', \"-\").\nmorse('u', \"..-\").\nmorse('v', \"...-\").\nmorse('w', \".--\").\nmorse('x', \"-..-\").\nmorse('y', \"-.--\").\nmorse('z', \"--..\").\n% numbers\nmorse('1', \".----\").\nmorse('2', \"..---\").\nmorse('3', \"...--\").\nmorse('4', \"....-\").\nmorse('5', \".....\").\nmorse('6', \"-....\").\nmorse('7', \"--...\").\nmorse('8', \"---..\").\nmorse('9', \"----.\").\nmorse('0', \"-----\").\n% common punctuation\nmorse('.', \".-.-.-\").\nmorse(',', \"--..--\").\nmorse('/', \"-..-.\").\nmorse('?', \"..--..\").\nmorse('=', \"-...-\").\nmorse('+', \".-.-.\").\nmorse('-', \"-....-\").\nmorse('@', \".--.-.\").\n\ntext2morse(\"Hello World\", Morse).\n\n\nOutput:\nMorse = \".... . .-.. .-.. ---   .-- --- .-. .-.. -..\"\n\n", "explain": "Runs in SWI Prolog, Edinburgh syntax\n"}, {"task_name": "Morse code", "task_url": "https://rosettacode.org/wiki/Morse_code", "task_cat": "Temporal media", "lang": "Lua", "code": "\n\nlocal M = {}\n\n-- module-local variables\nlocal BUZZER = pio.PB_10\nlocal dit_length, dah_length, word_length\n\n-- module-local functions\nlocal buzz, dah, dit, init, inter_element_gap, medium_gap, pause, sequence, short_gap\n\nbuzz = function(duration)\n  pio.pin.output(BUZZER)\n  pio.pin.setlow(BUZZER)\n  tmr.delay(tmr.SYS_TIMER, duration)\n  pio.pin.sethigh(BUZZER)\n  pio.pin.input(BUZZER)\nend\n\ndah = function()\n  buzz(dah_length)\nend\n\ndit = function()\n  buzz(dit_length)\nend\n\ninit = function(baseline)\n  dit_length = baseline\n  dah_length = 2 * baseline\n  word_length = 4 * baseline\nend\n\ninter_element_gap = function()\n  pause(dit_length)\nend\n\nmedium_gap = function()\n  pause(word_length)\nend\n\npause = function(duration)\n  tmr.delay(tmr.SYS_TIMER, duration)\nend\n\nsequence = function(codes)\n  if codes then\n    for _,f in ipairs(codes) do\n      f()\n      inter_element_gap()\n    end\n    short_gap()\n  end\nend\n\nshort_gap = function()\n  pause(dah_length)\nend\n\nlocal morse = {\n  a = { dit, dah }, b = { dah, dit, dit, dit }, c = { dah, dit, dah, dit },\n  d = { dah, dit, dit }, e = { dit }, f = { dit, dit, dah, dit },\n  g = { dah, dah, dit }, h = { dit, dit, dit ,dit }, i = { dit, dit },\n  j = { dit, dah, dah, dah }, k = { dah, dit, dah }, l = { dit, dah, dit, dit },\n  m = { dah, dah }, n = { dah, dit }, o = { dah, dah, dah },\n  p = { dit, dah, dah, dit }, q = { dah, dah, dit, dah }, r = { dit, dah, dit },\n  s = { dit, dit, dit }, t = { dah }, u = { dit, dit, dah },\n  v = { dit, dit, dit, dah }, w = { dit, dah, dah }, x = { dah, dit, dit, dah },\n  y = { dah, dit, dah, dah }, z = { dah, dah, dit, dit },\n\n  [\"0\"] = { dah, dah, dah, dah, dah }, [\"1\"] = { dit, dah, dah, dah, dah },\n  [\"2\"] = { dit, dit, dah, dah, dah }, [\"3\"] = { dit, dit, dit, dah, dah },\n  [\"4\"] = { dit, dit, dit, dit, dah }, [\"5\"] = { dit, dit, dit, dit, dit },\n  [\"6\"] = { dah, dit, dit, dit, dit }, [\"7\"] = { dah, dah, dit, dit, dit },\n  [\"8\"] = { dah, dah, dah, dit, dit }, [\"9\"] = { dah, dah, dah, dah, dit },\n\n  [\" \"] = { medium_gap }\n}\n\n-- public interface\nM.beep = function(message)\n  message = message:lower()\n  for _,ch in ipairs { message:byte(1, #message) } do\n    sequence(morse[string.char(ch)])\n  end\nend\n\nM.set_dit = function(duration)\n  init(duration)\nend\n\n-- initialization code\ninit(50000)\n\nreturn M\n\n\nmorse = require 'morse'\nmorse.beep \"I am the very model of a modern major-general.\"\n\n", "explain": "The following code is actual eLua code used to beep the speaker in Morse code n the Shenzhou III STM32F103ZET6 evaluation board.  eLua is a Lua 5.1.4 implementation paired with libraries for low-level hardware access in embedded systems.  The below code could easily be converted to any other Lua 5.n environment (including games), provided some kind of sound library has been installed.  Only the functions buzz and pause would have to be modified.\nUsing this module is as simple as:\n"}, {"task_name": "Morse code", "task_url": "https://rosettacode.org/wiki/Morse_code", "task_cat": "Temporal media", "lang": "Scala", "code": "\n\nOutput:Best seen running in your browser either by ScalaFiddle (ES aka JavaScript, non JVM) or Scastie (remote JVM).\nobject MorseCode extends App {\n\n  private val code = Map(\n    ('A', \".-     \"), ('B', \"-...   \"), ('C', \"-.-.   \"), ('D', \"-..    \"),\n    ('E', \".      \"), ('F', \"..-.   \"), ('G', \"--.    \"), ('H', \"....   \"),\n    ('I', \"..     \"), ('J', \".---   \"), ('K', \"-.-    \"), ('L', \".-..   \"),\n    ('M', \"--     \"), ('N', \"-.     \"), ('O', \"---    \"), ('P', \".--.   \"),\n    ('Q', \"--.-   \"), ('R', \".-.    \"), ('S', \"...    \"), ('T', \"-      \"),\n    ('U', \"..-    \"), ('V', \"...-   \"), ('W', \".-   - \"), ('X', \"-..-   \"),\n    ('Y', \"-.--   \"), ('Z', \"--..   \"), ('0', \"-----  \"), ('1', \".----  \"),\n    ('2', \"..---  \"), ('3', \"...--  \"), ('4', \"....-  \"), ('5', \".....  \"),\n    ('6', \"-....  \"), ('7', \"--...  \"), ('8', \"---..  \"), ('9', \"----.  \"),\n    ('\\'', \".----.\"), (':', \"---... \"), (',', \"--..-- \"), ('-', \"-....- \"),\n    ('(', \"-.--.- \"), ('.', \".-.-.- \"), ('?', \"..--.. \"), (';', \"-.-.-. \"),\n    ('/', \"-..-.  \"), ('-', \"..--.- \"), (')', \"---..  \"), ('=', \"-...-  \"),\n    ('@', \".--.-. \"), ('\"', \".-..-. \"), ('+', \".-.-.  \"), (' ', \"/\")) // cheat a little\n\n  private def printMorse(input: String): Unit = {\n    println(input)\n    println(input.trim.replaceAll(\"[ ]+\", \" \").toUpperCase\n      .map(code.getOrElse(_, \"\").trim).mkString(\" \"))\n  }\n\n  printMorse(\"sos\")\n  printMorse(\"   Hello     World!\")\n  printMorse(\"Rosetta Code\")\n\n}\n\n", "explain": ""}, {"task_name": "Morse code", "task_url": "https://rosettacode.org/wiki/Morse_code", "task_cat": "Temporal media", "lang": "D", "code": "\nimport std.conv;\nimport std.stdio;\n\nimmutable string[char] morsecode;\n\nstatic this() {\n    morsecode = [\n        'a': \".-\",\n        'b': \"-...\",\n        'c': \"-.-.\",\n        'd': \"-..\",\n        'e': \".\",\n        'f': \"..-.\",\n        'g': \"--.\",\n        'h': \"....\",\n        'i': \"..\",\n        'j': \".---\",\n        'k': \"-.-\",\n        'l': \".-..\",\n        'm': \"--\",\n        'n': \"-.\",\n        'o': \"---\",\n        'p': \".--.\",\n        'q': \"--.-\",\n        'r': \".-.\",\n        's': \"...\",\n        't': \"-\",\n        'u': \"..-\",\n        'v': \"...-\",\n        'w': \".--\",\n        'x': \"-..-\",\n        'y': \"-.--\",\n        'z': \"--..\",\n        '0': \"-----\",\n        '1': \".----\",\n        '2': \"..---\",\n        '3': \"...--\",\n        '4': \"....-\",\n        '5': \".....\",\n        '6': \"-....\",\n        '7': \"--...\",\n        '8': \"---..\",\n        '9': \"----.\"\n    ];\n}\n\nvoid main(string[] args) {\n    foreach (arg; args[1..$]) {\n        writeln(arg);\n        foreach (ch; arg) {\n            if (ch in morsecode) {\n                write(morsecode[ch]);\n            }\n            write(' ');\n        }\n        writeln();\n    }\n}\n\n", "explain": ""}, {"task_name": "Morse code", "task_url": "https://rosettacode.org/wiki/Morse_code", "task_cat": "Temporal media", "lang": "Haskell", "code": "\n\nimport System.IO\nimport MorseCode\nimport MorsePlaySox\n\n-- Read standard input, converting text to Morse code, then playing the result.\n-- We turn off buffering on stdin so it will play as you type.\nmain = do\n  hSetBuffering stdin NoBuffering\n  text <- getContents\n  play $ toMorse text\n\n\nmodule MorseCode (Morse, MSym(..), toMorse) where\n\nimport Data.List\nimport Data.Maybe\nimport qualified Data.Map as M\n\ntype Morse = [MSym]\ndata MSym = Dot | Dash | SGap | CGap | WGap deriving (Show)\n\n-- Based on the table of International Morse Code letters and numerals at \n-- http://en.wikipedia.org/wiki/Morse_code.\ndict = M.fromList\n       [('a', m \".-\"   ), ('b', m \"-...\" ), ('c', m \"-.-.\" ), ('d', m \"-..\"  ),\n        ('e', m \".\"    ), ('f', m \"..-.\" ), ('g', m \"--.\"  ), ('h', m \"....\" ),\n        ('i', m \"..\"   ), ('j', m \".---\" ), ('k', m \"-.-\"  ), ('l', m \".-..\" ),\n        ('m', m \"--\"   ), ('n', m \"-.\"   ), ('o', m \"---\"  ), ('p', m \".--.\" ),\n        ('q', m \"--.-\" ), ('r', m \".-.\"  ), ('s', m \"...\"  ), ('t', m \"-\"    ),\n        ('u', m \"..-\"  ), ('v', m \"...-\" ), ('w', m \".--\"  ), ('x', m \"-..-\" ),\n        ('y', m \"-.--\" ), ('z', m \"--..\" ), ('1', m \".----\"), ('2', m \"..---\"), \n        ('3', m \"...--\"), ('4', m \"....-\"), ('5', m \".....\"), ('6', m \"-....\"), \n        ('7', m \"--...\"), ('8', m \"---..\"), ('9', m \"----.\"), ('0', m \"-----\")]\n    where m = intersperse SGap . map toSym\n          toSym '.' = Dot\n          toSym '-' = Dash\n\n-- Convert a string to a stream of Morse symbols.  We enhance the usual dots\n-- and dashes with special \"gap\" symbols, which indicate the border between\n-- symbols, characters and words.  This allows a player to easily adjust its\n-- timing by simply looking at the current symbol, rather than trying to keep\n-- track of state.\ntoMorse :: String -> Morse\ntoMorse = fromWords . words . weed\n    where fromWords = intercalate [WGap] . map fromWord\n          fromWord  = intercalate [CGap] . map fromChar\n          fromChar  = fromJust . flip M.lookup dict\n          weed      = filter (\\c -> c == ' ' || M.member c dict)\n\n\nmodule MorsePlaySox (play) where\n\nimport Sound.Sox.Play\nimport Sound.Sox.Option.Format\nimport Sound.Sox.Signal.List\nimport Data.Int\nimport System.Exit\nimport MorseCode\n\nsamps = 15           -- samples/cycle\nfreq  = 700          -- cycles/second (frequency)\nrate  = samps * freq -- samples/second (sampling rate)\n\ntype Samples = [Int16]\n\n-- One cycle of silence and a sine wave.\nmute, sine :: Samples\nmute = replicate samps 0\nsine = let n = fromIntegral samps\n           f k = 8000.0 * sin (2*pi*k/n)\n       in map (round . f . fromIntegral) [0..samps-1]\n\n-- Repeat samples until we have the specified duration in seconds.\nrep :: Float -> Samples -> Samples\nrep dur = take n . cycle\n    where n = round (dur * fromIntegral rate)\n\n-- Convert Morse symbols to samples.  Durations are in seconds, based on \n-- http://en.wikipedia.org/wiki/Morse_code#Representation.2C_timing_and_speeds.\ntoSamples :: MSym -> Samples\ntoSamples Dot  = rep 0.1 sine\ntoSamples Dash = rep 0.3 sine\ntoSamples SGap = rep 0.1 mute\ntoSamples CGap = rep 0.3 mute\ntoSamples WGap = rep 0.7 mute\n\n-- Interpret the stream of Morse symbols as sound.\nplay :: Morse -> IO ExitCode\nplay = simple put none rate . concatMap toSamples\n\n", "explain": "This implementation requires that the \"play\" program of the SoX (Sound eXchange)\npackage be installed.  However, it is easy to replace the module that uses it with\na different one.\nThe main program.\nThe module to convert text to Morse code symbols.\nThe module to interpret Morse code symbols as sound.\n"}, {"task_name": "Morse code", "task_url": "https://rosettacode.org/wiki/Morse_code", "task_cat": "Temporal media", "lang": "PowerShell", "code": "\n\nfunction Send-MorseCode\n{\n    [CmdletBinding()]\n    [OutputType([string])]\n    Param\n    (\n        [Parameter(Mandatory=$true,\n                   ValueFromPipeline=$true,\n                   Position=0)]\n        [string]\n        $Message,\n\n        [switch]\n        $ShowCode\n    )\n\n    Begin\n    {\n        $morseCode = @{\n            a = \".-\"   ; b = \"-...\" ; c = \"-.-.\" ; d = \"-..\"\n            e = \".\"    ; f = \"..-.\" ; g = \"--.\"  ; h = \"....\"\n            i = \"..\"   ; j = \".---\" ; k = \"-.-\"  ; l = \".-..\"\n            m = \"--\"   ; n = \"-.\"   ; o = \"---\"  ; p = \".--.\"\n            q = \"--.-\" ; r = \".-.\"  ; s = \"...\"  ; t = \"-\"\n            u = \"..-\"  ; v = \"...-\" ; w = \".--\"  ; x = \"-..-\"\n            y = \"-.--\" ; z = \"--..\" ; 0 = \"-----\"; 1 = \".----\"\n            2 = \"..---\"; 3 = \"...--\"; 4 = \"....-\"; 5 = \".....\"\n            6 = \"-....\"; 7 = \"--...\"; 8 = \"---..\"; 9 = \"----.\"\n        }    \n    }\n    Process\n    {\n        foreach ($word in $Message)\n        {\n            $word.Split(\" \",[StringSplitOptions]::RemoveEmptyEntries) | ForEach-Object {\n\n                foreach ($char in $_.ToCharArray())\n                {\n                    if ($char -in $morseCode.Keys)\n                    {\n                        foreach ($code in ($morseCode.\"$char\").ToCharArray())\n                        {\n                            if ($code -eq \".\") {$duration = 250} else {$duration = 750}\n\n                            [System.Console]::Beep(1000, $duration)\n                            Start-Sleep -Milliseconds 50\n                        }\n\n                        if ($ShowCode) {Write-Host (\"{0,-6}\" -f (\"{0,6}\" -f $morseCode.\"$char\")) -NoNewLine}\n                    }\n                }\n\n                if ($ShowCode) {Write-Host}\n            }\n\n            if ($ShowCode) {Write-Host}\n        }\n    }\n}\n\nSend-MorseCode -Message \"S.O.S\" -ShowCode\n\n\nOutput:\n...   ---   ...\n\n\"S.O.S\", \"Goodbye, cruel world!\" | Send-MorseCode -ShowCode\n\n\nOutput:\n   ...   ---   ...\n\n   --.   ---   ---   -..  -...  -.--     .\n  -.-.   .-.   ..-     .  .-..\n   .--   ---   .-.  .-..   -..\n\n", "explain": "This function is case insensitive, ignores all non-Morse characters and optionally displays the Morse code.\n"}, {"task_name": "Morse code", "task_url": "https://rosettacode.org/wiki/Morse_code", "task_cat": "Temporal media", "lang": "ABAP", "code": "\nREPORT morse_code.\nTYPES: BEGIN OF y_morse_code,\n         letter TYPE string,\n         code   TYPE string,\n       END OF y_morse_code,\n       ty_morse_code TYPE STANDARD TABLE OF y_morse_code WITH EMPTY KEY.\n\ncl_demo_output=>new(\n          )->begin_section( |Morse Code|\n          )->write( REDUCE stringtab( LET words = VALUE stringtab( ( |sos|                 )\n                                                                   ( |   Hello     World!| )\n                                                                   ( |Rosetta Code|        ) )\n                                          morse_code = VALUE ty_morse_code( ( letter = 'A'   code = '.-     ' )\n                                                                            ( letter = 'B'   code = '-...   ' )\n                                                                            ( letter = 'C'   code = '-.-.   ' )\n                                                                            ( letter = 'D'   code = '-..    ' )\n                                                                            ( letter = 'E'   code = '.      ' )\n                                                                            ( letter = 'F'   code = '..-.   ' )\n                                                                            ( letter = 'G'   code = '--.    ' )\n                                                                            ( letter = 'H'   code = '....   ' )\n                                                                            ( letter = 'I'   code = '..     ' )\n                                                                            ( letter = 'J'   code = '.---   ' )\n                                                                            ( letter = 'K'   code = '-.-    ' )\n                                                                            ( letter = 'L'   code = '.-..   ' )\n                                                                            ( letter = 'M'   code = '--     ' )\n                                                                            ( letter = 'N'   code = '-.     ' )\n                                                                            ( letter = 'O'   code = '---    ' )\n                                                                            ( letter = 'P'   code = '.--.   ' )\n                                                                            ( letter = 'Q'   code = '--.-   ' )\n                                                                            ( letter = 'R'   code = '.-.    ' )\n                                                                            ( letter = 'S'   code = '...    ' )\n                                                                            ( letter = 'T'   code = '-      ' )\n                                                                            ( letter = 'U'   code = '..-    ' )\n                                                                            ( letter = 'V'   code = '...-   ' )\n                                                                            ( letter = 'W'   code = '.-   - ' )\n                                                                            ( letter = 'X'   code = '-..-   ' )\n                                                                            ( letter = 'Y'   code = '-.--   ' )\n                                                                            ( letter = 'Z'   code = '--..   ' )\n                                                                            ( letter = '0'   code = '-----  ' )\n                                                                            ( letter = '1'   code = '.----  ' )\n                                                                            ( letter = '2'   code = '..---  ' )\n                                                                            ( letter = '3'   code = '...--  ' )\n                                                                            ( letter = '4'   code = '....-  ' )\n                                                                            ( letter = '5'   code = '.....  ' )\n                                                                            ( letter = '6'   code = '-....  ' )\n                                                                            ( letter = '7'   code = '--...  ' )\n                                                                            ( letter = '8'   code = '---..  ' )\n                                                                            ( letter = '9'   code = '----.  ' )\n                                                                            ( letter = ''''  code = '.----. ' )\n                                                                            ( letter = ':'   code = '---... ' )\n                                                                            ( letter = ','   code = '--..-- ' )\n                                                                            ( letter = '-'   code = '-....- ' )\n                                                                            ( letter = '('   code = '-.--.- ' )\n                                                                            ( letter = '.'   code = '.-.-.- ' )\n                                                                            ( letter = '?'   code = '..--.. ' )\n                                                                            ( letter = ';'   code = '-.-.-. ' )\n                                                                            ( letter = '/'   code = '-..-.  ' )\n                                                                            ( letter = '_'   code = '..--.- ' )\n                                                                            ( letter = ')'   code = '---..  ' )\n                                                                            ( letter = '='   code = '-...-  ' )\n                                                                            ( letter = '@'   code = '.--.-. ' )\n                                                                            ( letter = '\\'   code = '.-..-. ' )\n                                                                            ( letter = '+'   code = '.-.-.  ' )\n                                                                            ( letter = ' '   code = '/'       ) )\n                                      IN INIT word_coded_tab TYPE stringtab\n                                          FOR word IN words\n                                         NEXT word_coded_tab = VALUE #( BASE word_coded_tab ( REDUCE string( INIT word_coded TYPE string\n                                                                                                              FOR index = 1 UNTIL index > strlen( word )\n                                                                                                              LET _morse_code = VALUE #( morse_code[ letter = COND #( WHEN index = 1 THEN to_upper( word(index) )\n                                                                                                                                                                      ELSE LET prev = index - 1 IN to_upper( word+prev(1) ) ) ]-code OPTIONAL )\n                                                                                                               IN NEXT word_coded = |{ word_coded } { _morse_code }| ) ) ) )\n          )->display( ).\n\n", "explain": ""}, {"task_name": "Morse code", "task_url": "https://rosettacode.org/wiki/Morse_code", "task_cat": "Temporal media", "lang": "F#", "code": "\nopen System\nopen System.Threading\n\nlet morse = Map.ofList\n                [('a', \"._ \"); ('b', \"_... \"); ('c', \"_._. \"); ('d', \"_.. \");\n                ('e', \". \"); ('f', \".._. \"); ('g', \"__. \"); ('h', \".... \");\n                ('i', \".. \"); ('j', \".___ \"); ('k', \"_._ \"); ('l', \"._.. \");\n                ('m', \"__ \"); ('n', \"_. \"); ('o', \"___ \"); ('p', \".__. \");\n                ('q', \"__._ \"); ('r', \"._. \"); ('s', \"... \"); ('t', \"_ \");\n                ('u', \".._ \"); ('v', \"..._ \"); ('w', \".__ \"); ('x', \"_.._ \");\n                ('y', \"_.__ \"); ('z', \"__.. \"); ('0', \"_____ \"); ('1', \".____ \");\n                ('2', \"..___ \"); ('3', \"...__ \"); ('4', \"...._ \"); ('5', \"..... \");\n                ('6', \"_.... \"); ('7', \"__... \"); ('8', \"___.. \"); ('9', \"____. \")]\n\nlet beep c =\n    match c with\n    | '.' ->\n        printf \".\"\n        Console.Beep(1200, 250)\n    | '_' ->\n        printf \"_\"\n        Console.Beep(1200, 1000)\n    | _ ->\n        printf \" \"\n        Thread.Sleep(125)\n\nlet trim (s: string) = s.Trim()\nlet toMorse c = Map.find c morse\nlet lower (s: string) = s.ToLower()\nlet sanitize = String.filter Char.IsLetterOrDigit\n\nlet send = sanitize >> lower >> String.collect toMorse >> trim >> String.iter beep\n\nsend \"Rosetta Code\"\n\n\nOutput:\n._. ___ ... . _ _ ._ _._. ___ _.. .\n", "explain": ""}, {"task_name": "Morse code", "task_url": "https://rosettacode.org/wiki/Morse_code", "task_cat": "Temporal media", "lang": "AWK", "code": "\n\n# usage: awk -f morse.awk [inputfile]\nBEGIN { FS=\"\";\n m=\"A.-B-...C-.-.D-..E.F..-.G--.H....I..J.---K-.-L.-..M--N-.\";\n m=m \"O---P.--.Q--.-R.-.S...T-U..-V...-W.--X-..-Y-.--Z--..  \";\n}\n                                                                                \n{ for(i=1; i<=NF; i++)\n  {\n    c=toupper($i); n=1; b=\".\";\n                                                                               \n    while((c!=b)&&(b!=\" \")) { b=substr(m,n,1); n++; }\n                                                                                \n    b=substr(m,n,1);\n                                                                                \n    while((b==\".\")||(b==\"-\")) { printf(\"%s\",b); n++; b=substr(m,n,1); }\n \n    printf(\"|\");\n  }\n  printf(\"\\n\");\n}\n\n\nOutput: with input \"sos sos titanic\"\n...|---|...||...|---|...||-|..|-|.-|-.|..|-.-.|\n\n", "explain": "AWK cannot play sounds by itself, \nso here we just translate text to dits and dots:\n"}]