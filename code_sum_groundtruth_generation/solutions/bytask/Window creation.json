[{"task_name": "Window creation", "task_url": "https://rosettacode.org/wiki/Window_creation", "task_cat": "GUI", "lang": "Python", "code": "\nWorks with: Python version 2.4 and 2.5\nLibrary: Tkinter[edit]\n  import Tkinter\n  \n  w = Tkinter.Tk()\n  w.mainloop()\n\nWorks with: Python version 3.7\nimport tkinter\n \nw = tkinter.Tk()\nw.mainloop()\n\nLibrary: wxPython[edit]\n  from wxPython.wx import *\n  \n  class MyApp(wxApp):\n    def OnInit(self):\n      frame = wxFrame(NULL, -1, \"Hello from wxPython\")\n      frame.Show(true)\n      self.SetTopWindow(frame)\n      return true\n  \n  app = MyApp(0)\n  app.MainLoop()\n\nLibrary: Pythonwin[edit]\n  import win32ui\n  from pywin.mfc.dialog import Dialog\n  \n  d = Dialog(win32ui.IDD_SIMPLE_INPUT)\n  d.CreateWindow()\n\nLibrary: PyGTK[edit]\n  import gtk\n  \n  window = gtk.Window()\n  window.show()\n  gtk.main()\n\nLibrary: PyQT[edit]\n  from PyQt4.QtGui import *\n\n  app = QApplication([])\n  win = QWidget()\n  win.show()\n\n  app.exec_()\n\n", "explain": ""}, {"task_name": "Window creation", "task_url": "https://rosettacode.org/wiki/Window_creation", "task_cat": "GUI", "lang": "C", "code": "\nSDL[edit]\nWorks with: ANSI C version C89\nLibrary: SDL\nUses: SDL (Components:{{#foreach: component$n$|{{{component$n$}}}Property \"Uses library\" (as page type) with input value \"library/SDL/{{{component$n$}}}\" contains invalid characters or is incomplete and therefore can cause unexpected results during a query or annotation process., }})\nUses: ANSI C (Components:{{#foreach: component$n$|{{{component$n$}}}Property \"Uses library\" (as page type) with input value \"library/ANSI C/{{{component$n$}}}\" contains invalid characters or is incomplete and therefore can cause unexpected results during a query or annotation process., }})\n\n/*\n *   Opens an 800x600 16bit color window. \n *   Done here with ANSI C.\n */\n\n#include <stdio.h>\n#include <stdlib.h>\n#include \"SDL.h\"\n\nint main()\n{\n  SDL_Surface *screen;\n  \n  if (SDL_Init(SDL_INIT_VIDEO) != 0) {\n    fprintf(stderr, \"Unable to initialize SDL: %s\\n\", SDL_GetError());\n    return 1;\n  }\n  atexit(SDL_Quit);\n  screen = SDL_SetVideoMode( 800, 600, 16, SDL_SWSURFACE | SDL_HWPALETTE );\n  \n  return 0;\n}\n\nGTK[edit]\nLibrary: GTK\nUses: GTK (Components:{{#foreach: component$n$|{{{component$n$}}}Property \"Uses library\" (as page type) with input value \"library/GTK/{{{component$n$}}}\" contains invalid characters or is incomplete and therefore can cause unexpected results during a query or annotation process., }})\n\n#include <gtk/gtk.h>\n\nint\nmain(int argc, char *argv[]) \n{\n  GtkWidget *window;\n\n  gtk_init(&argc, &argv);\n  window = gtk_window_new(GTK_WINDOW_TOPLEVEL);\n  gtk_signal_connect(GTK_OBJECT(window), \"destroy\",\n    GTK_SIGNAL_FUNC(gtk_main_quit), NULL);\n  gtk_widget_show(window);\n  gtk_main();\n\n  return 0;\n}\n\nGTK2[edit]\nLibrary: Gtk2\nUses: Gtk2 (Components:{{#foreach: component$n$|{{{component$n$}}}Property \"Uses library\" (as page type) with input value \"library/Gtk2/{{{component$n$}}}\" contains invalid characters or is incomplete and therefore can cause unexpected results during a query or annotation process., }})\n\n#include <gtk/gtk.h>\n\nint\nmain(int argc, char *argv[])\n{\n  GtkWidget *window;\n\n  gtk_init(&argc, &argv);\n  window = gtk_window_new(GTK_WINDOW_TOPLEVEL);\n  g_signal_connect (window, \"destroy\", G_CALLBACK(gtk_main_quit), NULL);\n  gtk_widget_show(window);\n  gtk_main();\n\n  return 0;\n}\n\nGLUT[edit]\nLibrary: GLUT\nUses: GLUT (Components:{{#foreach: component$n$|{{{component$n$}}}Property \"Uses library\" (as page type) with input value \"library/GLUT/{{{component$n$}}}\" contains invalid characters or is incomplete and therefore can cause unexpected results during a query or annotation process., }})\n\n// A C+GLUT implementation of the Creating a Window task at Rosetta Code\n// http://rosettacode.org/wiki/Creating_a_Window\n#include <stdlib.h>\n#include <GL/glut.h>\n\n// This function is not strictly necessary to meet the requirements of the task.\nvoid onKeyPress(unsigned char key, int x, int y)\n{\n\t// If you have any cleanup or such, you need to use C's\n\t// onexit routine for registering cleanup callbacks.\n\texit(0);\n\n}\n\nint main(int argc, char **argv)\n{\n\t// Pulls out any command-line arguments that are specific to GLUT,\n\t// And leaves a command-line argument set without any of those arguments\n\t// when it returns.\n\t// (If you want a copy, take a copy first.)\n\tglutInit(&argc, argv);\n\n\t// Tell GLUT we want to create a window.\n\t// It won't *actually* be created until we call glutMainLoop below.\n\tglutCreateWindow(\"Goodbye, World!\");\n\n\t// Register a callback to handle key press events (so we can quit on\n\t// when someone hits a key)  This part is not necessary to meet the\n\t// requirements of the task.\n\tglutKeyboardFunc(&onKeyPress);\n\n\t// Put the execution of the app in glut's hands. Most GUI environments\n\t// involve a message loop that communicate window events. GLUT handles\n\t// most of these with defaults, except for any we register callbacks\n\t// for. (Like the onKeyPress above.)\n\tglutMainLoop();\n\n\treturn 0;\n\n}\n\n", "explain": "Compile Command: gcc `sdl-config --cflags` `sdl-config --libs` SDL_Window.c -o window\nCompile command: gcc `gtk-config --cflags` `gtk-config --libs` -o window window.c\nCompile command: gcc -Wall -pedantic `pkg-config --cflags gtk+-2.0` `pkg-config --libs gtk+-2.0` -o window window.c\nCompile command: gcc -I /usr/include/ -lglut  -o window window_glut.c\nNote that we aren't registering a painting or drawing callback, so the window will be created with nothing drawn in it.  This is almost certain to lead to a strange appearance; On many systems, dragging the window around will appear to drag a copy of what was underneath where the window was when it was originally created.\nWe are registering a keypress callback, which isn't strictly necessary; It simply allows us to use a keypress to close the program rather than depending on the windowing system the program is run under.\n"}, {"task_name": "Window creation", "task_url": "https://rosettacode.org/wiki/Window_creation", "task_cat": "GUI", "lang": "C++", "code": "\nLibrary: Qt\nUses: Qt (Components:{{#foreach: component$n$|{{{component$n$}}}Property \"Uses library\" (as page type) with input value \"library/Qt/{{{component$n$}}}\" contains invalid characters or is incomplete and therefore can cause unexpected results during a query or annotation process., }})\n\n#include <QApplication>\n#include <QMainWindow>\n\nint main(int argc, char *argv[])\n{\n QApplication app(argc, argv);\n QMainWindow window;\n window.show();\n return app.exec();\n}\n\nLibrary: GTK\n\n#include <iostream>\n#include <gtkmm.h>\n\nint\nmain( int argc, char* argv[] )\n{\n try\n {\n  Gtk::Main m( argc, argv ) ;\n  Gtk::Window win ;\n  m.run( win ) ;\n }\n \n catch( std::exception const & exc )\n {\n  std::cout << exc.what() << std::endl ;\n  exit( -1 ) ;\n }\n \n exit( 0 ) ;\n}\n\n", "explain": "Compiler command: qmake -pro; qmake\nCompiler command: g++ filename.cc -o test `pkg-config --cflags --libs gtkmm-2.4`\n"}, {"task_name": "Window creation", "task_url": "https://rosettacode.org/wiki/Window_creation", "task_cat": "GUI", "lang": "Java", "code": "\nLibrary: Swing\nimport javax.swing.JFrame;\n\npublic class Main {\n     public static void main(String[] args) throws Exception {\n         JFrame w = new JFrame(\"Title\");\n         w.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n         w.setSize(800,600);\n         w.setVisible(true);\n     }\n}\n\n", "explain": ""}, {"task_name": "Window creation", "task_url": "https://rosettacode.org/wiki/Window_creation", "task_cat": "GUI", "lang": "C#", "code": "\nLibrary: Windows Forms\nUses: .NET Framework (Components:{{#foreach: component$n$|{{{component$n$}}}Property \"Uses library\" (as page type) with input value \"library/.NET Framework/{{{component$n$}}}\" contains invalid characters or is incomplete and therefore can cause unexpected results during a query or annotation process., }})\nusing System;\nusing System.Windows.Forms;\n\npublic class Window {\n    [STAThread]\n    static void Main() {\n        Form form = new Form();\n        \n        form.Text = \"Window\";\n        form.Disposed += delegate { Application.Exit(); };\n\n        form.Show();\n        Application.Run();\n    }\n}\n\n", "explain": ""}, {"task_name": "Window creation", "task_url": "https://rosettacode.org/wiki/Window_creation", "task_cat": "GUI", "lang": "JavaScript", "code": "\n   window.open(\"webpage.html\", \"windowname\", \"width=800,height=600\");\n\n", "explain": ""}, {"task_name": "Window creation", "task_url": "https://rosettacode.org/wiki/Window_creation", "task_cat": "GUI", "lang": "Visual_Basic_.NET", "code": "\n    Dim newForm as new Form\n    newForm.Text = \"It's a new window\"\n   \n        newForm.Show()\n", "explain": ""}, {"task_name": "Window creation", "task_url": "https://rosettacode.org/wiki/Window_creation", "task_cat": "GUI", "lang": "Go", "code": "\nGTK[edit]\nLibrary: go-gtk\npackage main\n\nimport (\n    \"github.com/mattn/go-gtk/glib\"\n    \"github.com/mattn/go-gtk/gtk\"\n)\n\nfunc main() {\n    gtk.Init(nil)\n    window := gtk.NewWindow(gtk.WINDOW_TOPLEVEL)\n    window.Connect(\"destroy\",\n        func(*glib.CallbackContext) { gtk.MainQuit() }, \"\")\n    window.Show()\n    gtk.Main()\n}\n\nSDL[edit]\nLibrary: Go-SDL\npackage main\n\nimport (\n    \"log\"\n\n    \"github.com/veandco/go-sdl2/sdl\"\n)\n\nfunc main() {\n    window, err := sdl.CreateWindow(\"RC Window Creation\",\n        sdl.WINDOWPOS_UNDEFINED, sdl.WINDOWPOS_UNDEFINED,\n        320, 200, 0)\n    if err != nil {\n        log.Fatal(err)\n    }\n    for {\n        if _, ok := sdl.WaitEvent().(*sdl.QuitEvent); ok {\n            break\n        }\n    }\n    window.Destroy()\n}\n\nX11[edit]\npackage main\n\nimport (\n    \"code.google.com/p/x-go-binding/ui\"\n    \"code.google.com/p/x-go-binding/ui/x11\"\n    \"log\"\n)\n\nfunc main() {\n    win, err := x11.NewWindow()\n    if err != nil {\n        log.Fatalf(\"Error: %v\\n\", err)\n    }\n    defer win.Close()\n\n    for ev := range win.EventChan() {\n        switch e := ev.(type) {\n        case ui.ErrEvent:\n            log.Fatalf(\"Error: %v\\n\", e.Err)\n        }\n    }\n}\n\n", "explain": ""}, {"task_name": "Window creation", "task_url": "https://rosettacode.org/wiki/Window_creation", "task_cat": "GUI", "lang": "X86_Assembly", "code": "\nLibrary: GTK\nWorks with: NASM\n;GTK imports and defines etc.\n%define GTK_WINDOW_TOPLEVEL 0\n\nextern gtk_init\nextern gtk_window_new\nextern gtk_widget_show\nextern gtk_signal_connect\nextern gtk_main\nextern g_print\nextern gtk_main_quit\n\nbits 32\n\nsection .text\n\tglobal _main\n\t\n        ;exit signal\n\tsig_main_exit:\n\t\tpush exit_sig_msg\n\t\tcall g_print\n\t\tadd esp, 4\n\t\tcall gtk_main_quit\n\t\tret\n\t\t\n\t_main:\n\t\tmov ebp, esp\t\n\t\tsub esp, 8\n\t\tpush argv\n\t\tpush argc\n\t\tcall gtk_init\n\t\tadd esp, 8\t\t\t\t;stack alignment.\n\t\tpush GTK_WINDOW_TOPLEVEL\n\t\tcall gtk_window_new\n\t\tadd esp, 4\n\t\tmov [ebp-4], eax\t\t;ebp-4 now holds our GTKWindow pointer.\n\t\tpush 0\n\t\tpush sig_main_exit\n\t\tpush gtk_delete_event\n\t\tpush dword [ebp-4]\n\t\tcall gtk_signal_connect\n\t\tadd esp, 16\n\t\tpush dword [ebp-4]\n\t\tcall gtk_widget_show\n\t\tadd esp, 4\n\t\tcall gtk_main\t\n\t\t\nsection .data\n;sudo argv \nargc                dd 1\nargv                dd args\nargs                dd title   \n\t\t\t\t\t\t  dd 0\n                  \ntitle               db \"GTK Window\",0\ngtk_delete_event   db 'delete_event',0\nexit_sig_msg      db \"-> Rage quitting..\",10,0\n\nWorks with: MASM\n.586\n.model flat, stdcall\noption casemap:none\n\ninclude /masm32/include/windows.inc\ninclude /masm32/include/kernel32.inc\ninclude /masm32/include/user32.inc\n\nincludelib /masm32/lib/kernel32.lib\nincludelib /masm32/lib/user32.lib\n\nWinMain proto :dword,:dword,:dword,:dword\n\n.data\n   ClassName db \"WndClass\",0\n   AppName   db \"Window!\",0\n.data? \n   hInstance   dd\u00a0?\n   CommandLine dd\u00a0?\n\n.code\nstart:\n   invoke GetModuleHandle, NULL\n   mov hInstance, eax\n   invoke GetCommandLine\n   mov CommandLine, eax\n   invoke WinMain, hInstance, NULL, CommandLine, SW_SHOWDEFAULT\n\n   WinMain proc hInst:dword, hPervInst:dword, CmdLine:dword, CmdShow:dword\n   LOCAL wc:WNDCLASSEX\n   LOCAL msg:MSG\n   LOCAL hwnd:HWND\n\n   wc.cbSize, sizeof WNDCLASSEX\n   wc.style, CS_HREDRAW or CS_VREDRAW\n   wc.lpfnWndPRoc, offset WndProc\n   wc.cbClsExtra,NULL\n   wc.cbWndExtra, NULL\n   push hInstance\n   pop wc.hInstance\n   mov wc.hbrBackground, COLOR_BTNFACE+1\n   mov wc.lpszMenuName NULL\n   mov wc.lpszClassName, offset ClassName\n   invoke LoadIcon, NULL, IDI_APPLICATION\n   mov wc.hIcon, eax\n   mov wc.hIconSm, eax\n   invoke LoadCursor, NULL, IDC_ARROW\n   mov wc.hCursor, eax\n   invoke RegisterClassEx, addr wc\n   invoke CreateWindowEx, NULL, addr ClassName, addr AppName, WS_OVERLAPPEDWINDOW, CS_USEDEFAULT, CW_USEDEFAUT,\\\n   CW_USEDEFAUT, CW_USEDEFAUT, NULL, NULL, hInst, NULL\n   mov hwnd, eax\n   invoke ShowWindow, hwnd, SW_SHOWNORMAL\n   invoke UpdateWindow, hwnd\n   .while TRUE\n      invoke GetMessage, addr msg, NULL, 0,0\n      .break .if (!eax)\n      invoke TranslateMessage, addr msg\n      invoke DispatchMessage, addr msg\n   .endw\n   mov eax, msg.wParam\n   ret\n   WinMain endp\n\n   WndProc proc hWnd:dword, uMsg:dword, wParam:dword, lParam:dword\n   mov eax, uMsg\n   .if eax==WM_DESTROY\n      invoke PostQuitMessage, NULL\n   .else\n      invoke DefWindowProc, hWnd, uMsg, wParam, lParam\n   .endif\n   xor eax, eax\n   ret\n   WndProc endp\nend start\n\n", "explain": "\n\n"}, {"task_name": "Window creation", "task_url": "https://rosettacode.org/wiki/Window_creation", "task_cat": "GUI", "lang": "Delphi", "code": "\n\n// The project file (Project1.dpr)\nprogram Project1;\n\nuses\n  Forms,\n  // Include file with Window class declaration (see below)\n  Unit0 in 'Unit1.pas' {Form1};\n\n{$R *.res}\n\nbegin\n  Application.Initialize;\n  Application.CreateForm(TForm1, Form1);\n  Application.Run;\nend.\n\n\n// The Window class declaration\nunit Unit1;\n\ninterface\n\nuses\n  Forms;\n\ntype\n  TForm1 = class(TForm)\n  end;\n\nvar\n  Form1: TForm1;\n\nimplementation\n\n{$R *.dfm} // The window definition resource (see below)\n\nend.\n\n// A textual rendition of the Window (form) definition file (Unit1.dfm)\nobject Form1: TForm1\n  Left = 469\n  Top = 142\n  Width = 800\n  Height = 600\n  Caption = 'Form1'\n  Color = clBtnFace\n  Font.Charset = DEFAULT_CHARSET\n  Font.Color = clWindowText\n  Font.Height = -11\n  Font.Name = 'MS Shell Dlg 2'\n  Font.Style = []\n  OldCreateOrder = False\n  Position = poScreenCenter\n  PixelsPerInch = 96\n  TextHeight = 13\nend\n\n\nprogram Project3;\n\nuses\n  Windows,\n  Messages;\n\nvar\n  WndClass: TWndClass;\n  Msg: TMsg;\n  winT, winL: Integer;\n\n// Initial height/width of the window\nconst\n  winW: Integer = 800;\n  winH: Integer = 600;\n\n// Callback function to processes messages sent to the window\nfunction WindowProc(hWnd,Msg,wParam,lParam:Integer): Integer; stdcall;\nbegin\n  // Trap the WM_DESTROY message\n  if (Msg = WM_DESTROY) then PostQuitMessage(0);\n  Result := DefWindowProc(hWnd,Msg,wParam,lParam);\nend;\n\nbegin\n  // Fill the WndClass structure with the window class attributes\n  // to be registered by the RegisterClass function\n  with WndClass do\n    begin\n      lpszClassName:= 'Form1';\n      lpfnWndProc :=  @WindowProc; // Pointer to our message handling callback\n      style := CS_OWNDC or         // Request a unique device context\n               CS_VREDRAW or       // Redraw window when resized vertically\n               CS_HREDRAW;         // Redraw window when resized horizontally\n      hInstance := hInstance;      // The instance that the window procedure of this class is within\n      hbrBackground := HBRUSH(COLOR_BTNFACE+1); // Background colour of the window\n    end;\n\n  // Register the window class for use by CreateWindow\n  RegisterClass(WndClass);\n\n  // Calculate initial top and left positions of the window\n  winT := (GetSystemMetrics(SM_CYFULLSCREEN) - winH) div 2;\n  winL := (GetSystemMetrics(SM_CXFULLSCREEN) - winW) div 2;\n\n  // Create the window\n  CreateWindow(WndClass.lpszClassName,              // Class name\n               'Form1',                             // Window name\n               WS_OVERLAPPEDWINDOW or WS_VISIBLE,   // Window style\n               winL,                                // Horizontal Position (Left)\n               winT,                                // Vertical Position (Top)\n               winW,                                // Width\n               winH,                                // Height\n               0,                                   // Window parent/owner handle\n               0,                                   // Menu handle\n               hInstance,                           // Handle to application instance\n               nil);                                // Pointer to window creation data\n\n // Handle messages\n while GetMessage(Msg,0,0,0) do\n   DispatchMessage(Msg);\n\nend.\n\n", "explain": "This first example is a minimalist approach using Delphi's standard Window (form) creation procedure.  In Delphi 7, this will create a single Window executable of 362KB.\nThis second example demonstrates a 'pure' Windows API approach (i.e. NOT using the Delphi Visual Component Library). In Delphi 7, this will create a single Window executable of 15KB.\n"}, {"task_name": "Window creation", "task_url": "https://rosettacode.org/wiki/Window_creation", "task_cat": "GUI", "lang": "Ruby", "code": "\nWorks with: Ruby version 1.8.5\nLibrary: Ruby/Tk\n require 'tk'\n \n window = TkRoot::new()\n window::mainloop()\n\nLibrary: GTK\n require 'gtk2'\n \n window = Gtk::Window.new.show\n Gtk.main\n\nLibrary: Shoes\nShoes.app {}\n\n", "explain": ""}, {"task_name": "Window creation", "task_url": "https://rosettacode.org/wiki/Window_creation", "task_cat": "GUI", "lang": "Rust", "code": "\nLibrary: winit\nuse winit::event::{Event, WindowEvent};  // winit 0.24\nuse winit::event_loop::{ControlFlow, EventLoop};\nuse winit::window::WindowBuilder;\n\nfn main() {\n    let event_loop = EventLoop::new();\n    let _win = WindowBuilder::new()\n        .with_title(\"Window\")\n        .build(&event_loop).unwrap();\n\n    event_loop.run(move |ev, _, flow| {\n        match ev {\n            Event::WindowEvent {\n                event: WindowEvent::CloseRequested, ..\n            } => {\n                *flow = ControlFlow::Exit;\n            }\n            _ => {}\n        }\n    });\n}\n\n\n", "explain": "\n"}, {"task_name": "Window creation", "task_url": "https://rosettacode.org/wiki/Window_creation", "task_cat": "GUI", "lang": "R", "code": "\n\nwin <- tktoplevel()\n\nLibrary: gWidgets\n\nlibrary(gWidgetstcltk) #or e.g. gWidgetsRGtk2\nwin <- gwindow()\n\n", "explain": "Although R cannot create windows itself, it has wrappers for several GUI toolkits.  tcl/tk is shipped with R by default, and you can create windows with that.\nThe gWidgets packages let you write GUIs in a toolkit independent way.  You can create a window with\n"}, {"task_name": "Window creation", "task_url": "https://rosettacode.org/wiki/Window_creation", "task_cat": "GUI", "lang": "Ada", "code": "\nLibrary: GTK\nLibrary: GtkAda\nUses: GtkAda (Components:{{#foreach: component$n$|{{{component$n$}}}Property \"Uses library\" (as page type) with input value \"library/GtkAda/{{{component$n$}}}\" contains invalid characters or is incomplete and therefore can cause unexpected results during a query or annotation process., }})\nwith Gtk.Window;  use Gtk.Window;\nwith Gtk.Widget;  use Gtk.Widget;\n\nwith Gtk.Handlers;\nwith Gtk.Main;\n\nprocedure Windowed_Application is\n   Window : Gtk_Window;\n\n   package Handlers is new Gtk.Handlers.Callback (Gtk_Widget_Record);\n   package Return_Handlers is\n      new Gtk.Handlers.Return_Callback (Gtk_Widget_Record, Boolean);\n\n   function Delete_Event (Widget : access Gtk_Widget_Record'Class)\n      return Boolean is\n   begin\n      return False;\n   end Delete_Event;\n\n   procedure Destroy (Widget : access Gtk_Widget_Record'Class) is\n   begin\n     Gtk.Main.Main_Quit;\n   end Destroy;\n\nbegin\n   Gtk.Main.Init;\n   Gtk.Window.Gtk_New (Window);\n   Return_Handlers.Connect\n   (  Window,\n      \"delete_event\",\n      Return_Handlers.To_Marshaller (Delete_Event'Access)\n   );\n   Handlers.Connect\n   (  Window,\n      \"destroy\",\n      Handlers.To_Marshaller (Destroy'Access)\n   );\n   Show (Window);\n\n   Gtk.Main.Main;\nend Windowed_Application;\n\n", "explain": ""}, {"task_name": "Window creation", "task_url": "https://rosettacode.org/wiki/Window_creation", "task_cat": "GUI", "lang": "Julia", "code": "\n# v0.6\n\nusing Tk\n\nw = Toplevel(\"Example\")\n\n", "explain": ""}, {"task_name": "Window creation", "task_url": "https://rosettacode.org/wiki/Window_creation", "task_cat": "GUI", "lang": "Kotlin", "code": "\nTranslation of: Java\nimport javax.swing.JFrame\n\nfun main(args : Array<String>) {\n    JFrame(\"Title\").apply {\n        setSize(800, 600)\n        defaultCloseOperation = JFrame.EXIT_ON_CLOSE\n        isVisible = true\n    }\n}\n\n", "explain": ""}, {"task_name": "Window creation", "task_url": "https://rosettacode.org/wiki/Window_creation", "task_cat": "GUI", "lang": "Perl", "code": "\nWorks with: Perl version 5.8.8\nLibrary: Perl/Tk[edit]\n  use Tk;\n  \n  MainWindow->new();\n  MainLoop;\n\nLibrary: Perl/SDL[edit]\n  use SDL::App;\n  use SDL::Event;\n  \n  $app = SDL::App->new;\n  $app->loop({\n    SDL_QUIT() => sub { exit 0; },\n  });\n\nLibrary: Perl/Gtk3[edit]\n  use Gtk3 '-init';\n  \n  $window = Gtk3::Window->new;\n  $window->signal_connect(\n    destroy => sub { Gtk3->main_quit; }\n  );\n  $window->show_all;\n  Gtk3->main;\n\nLibrary: Perl/Qt[edit]\nuse strict;\nuse warnings;\nuse QtGui4;\n\nmy $app = Qt::Application(\\@ARGV);\nmy $window = Qt::MainWindow;\n$window->show;\nexit $app->exec;\n\nLibrary: Perl/Wx[edit]\n  use Wx;\n  \n  $window = Wx::Frame->new(undef, -1, 'title');\n  $window->Show;\n  Wx::SimpleApp->new->MainLoop;\n\n", "explain": ""}, {"task_name": "Window creation", "task_url": "https://rosettacode.org/wiki/Window_creation", "task_cat": "GUI", "lang": "Objective-C", "code": "\nWorks with: GNUstep\nWorks with: Cocoa\n\n#include <Foundation/Foundation.h>\n#include <AppKit/AppKit.h>\n\n@interface Win\u00a0: NSWindow\n{\n}\n- (void)applicationDidFinishLaunching: (NSNotification *)notification;\n- (BOOL)applicationShouldTerminateAfterLastWindowClosed: (NSNotification *)notification;\n@end\n\n\n@implementation Win\u00a0: NSWindow\n-(instancetype) init\n{\n  if ((self = [super \n    initWithContentRect: NSMakeRect(0, 0, 800, 600)\n    styleMask: (NSTitledWindowMask | NSClosableWindowMask)\n    backing: NSBackingStoreBuffered\n    defer: NO])) {\n\n    [self setTitle: @\"A Window\"];\n    [self center];\n  }\n  return self;\n}\n\n- (void)applicationDidFinishLaunching: (NSNotification *)notification\n{\n  [self orderFront: self];\n}\n\n- (BOOL)applicationShouldTerminateAfterLastWindowClosed: (NSNotification *)notification\n{\n  return YES;\n}\n@end\n\nint main()\n{\n  @autoreleasepool {\n\n    [NSApplication sharedApplication];\n    Win *mywin = [[Win alloc] init];\n    [NSApp setDelegate: mywin];\n    [NSApp runModalForWindow: mywin];\n\n  }\n  return EXIT_SUCCESS;\n}\n\n", "explain": "It opens a 800\u00d7600 window, centered on the screen, with title \"A Window\".\n"}, {"task_name": "Window creation", "task_url": "https://rosettacode.org/wiki/Window_creation", "task_cat": "GUI", "lang": "Prolog", "code": "\n\n?- new(D, window('Prolog Window')), send(D, open).\n\n", "explain": "Works with SWI-Prolog which has a graphic interface XPCE.\n"}, {"task_name": "Window creation", "task_url": "https://rosettacode.org/wiki/Window_creation", "task_cat": "GUI", "lang": "Lua", "code": "\nLibrary: IUPLua\nlocal iup = require \"iuplua\"\n\niup.dialog{\n  title = \"Window\";\n  iup.vbox{\n    margin = \"10x10\";\n    iup.label{title = \"A window\"}\n  }\n}:show()\n\niup.MainLoop()\n\n", "explain": ""}, {"task_name": "Window creation", "task_url": "https://rosettacode.org/wiki/Window_creation", "task_cat": "GUI", "lang": "Scala", "code": "\nLibrary: sdljava\nLibrary: Scala Java Swing interoperability\nimport javax.swing.JFrame\n\nobject ShowWindow{\n  def main(args: Array[String]){\n    var jf = new JFrame(\"Hello!\")\n\n    jf.setSize(800, 600)\n    jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE)\n    jf.setVisible(true)\n  }\n}\n\n\nimport scala.swing._\nimport scala.swing.Swing._\n\nobject SimpleWindow extends SimpleSwingApplication {\n  def top = new MainFrame {\n    title = \"Hello!\"\n    preferredSize = ((800, 600):Dimension)\n  }\n}\n\n", "explain": "Using native Scala libraries (which are wrappers over Java libraries):\n"}, {"task_name": "Window creation", "task_url": "https://rosettacode.org/wiki/Window_creation", "task_cat": "GUI", "lang": "D", "code": "\nLibrary: FLTK4d\n module Window;\n \n import fltk4d.all;\n \n void main() {\n     auto window = new Window(300, 300, \"A window\");\n     window.show;\n     FLTK.run;\n }\n\nLibrary: Derelict\nLibrary: SDL\n import derelict.sdl.sdl;\n \n int main(char[][] args)\n {\n     DerelictSDL.load();\n \n     SDL_Event event;\n     auto done = false;\n \n     SDL_Init(SDL_INIT_VIDEO);\n     scope(exit) SDL_Quit();\n \n     SDL_SetVideoMode(1024, 768, 0, SDL_OPENGL);\n     SDL_WM_SetCaption(\"My first Window\", \"SDL test\");\n \t \n     while (!done)\n     {\n         if (SDL_PollEvent(&event) == 1)\n         {\n             switch (event.type)\n \t     {\n                 case SDL_QUIT:\n \t              done = true;\n \t\t          break;\n \t\t default:\n \t\t      break;\n \t     }\n \t }\t\t\n     }\n \n    return 0;\n }\n\nLibrary: QD\n\n import qd;\n \n void main() {\n   screen(640, 480);\n   while (true) events();\n }\n\n", "explain": "QD is a simple and easy-to-use wrapper around SDL.\n"}, {"task_name": "Window creation", "task_url": "https://rosettacode.org/wiki/Window_creation", "task_cat": "GUI", "lang": "Haskell", "code": "\nUsing Library: HGL from HackageDB.\n\nimport Graphics.HGL\n\naWindow =  runGraphics $\n  withWindow_ \"Rosetta Code task: Creating a window\" (300, 200) $ \\ w -> do\n\tdrawInWindow w $ text (100, 100) \"Hello World\"\n\tgetKey w\n\n", "explain": "A simple graphics library, designed to give the programmer access to most interesting parts of the Win32 Graphics Device Interface and X11 library without exposing the programmer to the pain and anguish usually associated with using these interfaces. \n"}, {"task_name": "Window creation", "task_url": "https://rosettacode.org/wiki/Window_creation", "task_cat": "GUI", "lang": "Scheme", "code": "\nLibrary: Scheme/PsTk\n#!r6rs\n\n;; PS-TK example: display simple frame\n\n(import (rnrs) \n        (lib pstk main) ; change this to refer to your installation of PS/Tk\n        )\n\n(define tk (tk-start))\n(tk/wm 'title tk \"PS-Tk Example: Frame\")\n\n(tk-event-loop tk)\n\n", "explain": ""}, {"task_name": "Window creation", "task_url": "https://rosettacode.org/wiki/Window_creation", "task_cat": "GUI", "lang": "PowerShell", "code": "\nLibrary: WPK\nNew-Window -Show\n\nLibrary: Windows Forms\n$form = New-Object Windows.Forms.Form\n$form.Text = \"A Window\"\n$form.Size = New-Object Drawing.Size(150,150)\n$form.ShowDialog() | Out-Null\n\n", "explain": ""}, {"task_name": "Window creation", "task_url": "https://rosettacode.org/wiki/Window_creation", "task_cat": "GUI", "lang": "F#", "code": "\n\nLibrary: Windows Forms\n open System.Windows.Forms\n \n [<System.STAThread>]\n do\n     Form(Text = \"F# Window\")\n     |> Application.Run\n\n", "explain": "Everything is provided by the .NET runtime so this is almost identical to C_sharp.\n"}, {"task_name": "Window creation", "task_url": "https://rosettacode.org/wiki/Window_creation", "task_cat": "GUI", "lang": "Groovy", "code": "\n import groovy.swing.SwingBuilder\n\n new SwingBuilder().frame(title:'My Window', size:[200,100]).show()\n\n", "explain": ""}]