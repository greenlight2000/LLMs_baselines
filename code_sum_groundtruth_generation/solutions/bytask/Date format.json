[{"task_name": "Date format", "task_url": "https://rosettacode.org/wiki/Date_format", "task_cat": "Text processing", "lang": "Python", "code": "\n\nimport datetime\ntoday = datetime.date.today()\n# The first requested format is a method of datetime objects:\ntoday.isoformat()\n# For full flexibility, use the strftime formatting codes from the link above:\ntoday.strftime(\"%A, %B %d, %Y\")\n# This mechanism is integrated into the general string formatting system.\n# You can do this with positional arguments referenced by number\n\"The date is {0:%A, %B %d, %Y}\".format(d)\n# Or keyword arguments referenced by name\n\"The date is {date:%A, %B %d, %Y}\".format(date=d)\n# Since Python 3.6, f-strings allow the value to be inserted inline\nf\"The date is {d:%A, %B %d, %Y}\"\n\n", "explain": "Formatting rules: http://docs.python.org/lib/module-time.html (strftime)\n"}, {"task_name": "Date format", "task_url": "https://rosettacode.org/wiki/Date_format", "task_cat": "Text processing", "lang": "C", "code": "\n#include <stdlib.h>\n#include <stdio.h>\n#include <time.h>\n#define MAX_BUF 50\n\nint main(void)\n{\n  char buf[MAX_BUF];\n  time_t seconds = time(NULL);\n  struct tm *now = localtime(&seconds);\n  const char *months[] = {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n                          \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"};\n\n  const char *days[] = {\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"};\n\n  (void) printf(\"%d-%d-%d\\n\", now->tm_year + 1900, now->tm_mon + 1, now->tm_mday);\n  (void) printf(\"%s, %s %d, %d\\n\",days[now->tm_wday], months[now->tm_mon],\n               now->tm_mday, now->tm_year + 1900);\n  /* using the strftime (the result depends on the locale) */\n  (void) strftime(buf, MAX_BUF, \"%A, %B %e, %Y\", now);\n  (void) printf(\"%s\\n\", buf);\n  return EXIT_SUCCESS;\n}\n\n\nOutput:\n2009-5-13\nWednesday, May 13, 2009\nWednesday, May 13, 2009\n", "explain": ""}, {"task_name": "Date format", "task_url": "https://rosettacode.org/wiki/Date_format", "task_cat": "Text processing", "lang": "C++", "code": "\n// Display the current date in the formats of \"2007-11-10\"\n// and \"Sunday, November 10, 2007\". \n\n#include <vector>\n#include <string>\n#include <iostream>\n#include <ctime>\n\n/** Return the current date in a string, formatted as either ISO-8601\n *  or \"Weekday-name, Month-name Day, Year\".\n *\n *  The date is initialized when the object is created and will return\n *  the same date for the lifetime of the object.  The date returned\n *  is the date in the local timezone.\n */\nclass Date\n{\n    struct tm ltime;\n\npublic:\n    /// Default constructor.\n    Date()\n    {\n        time_t t = time(0);\n        localtime_r(&t, &ltime);\n    }\n    \n    /** Return the date based on a format string.  The format string is\n     *  fed directly into strftime().  See the strftime() documentation\n     *  for information on the proper construction of format strings.\n     *\n     *  @param[in] fmt is a valid strftime() format string.\n     *\n     *  @return a string containing the formatted date, or a blank string\n     *      if the format string was invalid or resulted in a string that\n     *      exceeded the internal buffer length.\n     */\n    std::string getDate(const char* fmt)\n    {\n        char out[200];\n        size_t result = strftime(out, sizeof out, fmt, &ltime);\n        return std::string(out, out + result);\n    }\n    \n    /** Return the date in ISO-8601 date format.\n     *\n     *  @return a string containing the date in ISO-8601 date format.\n     */\n    std::string getISODate() {return getDate(\"%F\");}\n    \n    /** Return the date formatted as \"Weekday-name, Month-name Day, Year\".\n     *\n     *  @return a string containing the date in the specified format.\n     */\n    std::string getTextDate() {return getDate(\"%A, %B %d, %Y\");}\n};\n\nint main()\n{\n    Date d;\n    std::cout << d.getISODate() << std::endl;\n    std::cout << d.getTextDate() << std::endl;\n    return 0;\n}\n\n\nOutput:\n2009-05-14\nThursday, May 14, 2009\n\n", "explain": ""}, {"task_name": "Date format", "task_url": "https://rosettacode.org/wiki/Date_format", "task_cat": "Text processing", "lang": "Java", "code": "\npublic static void main(String[] args) {\n    long millis = System.currentTimeMillis();\n    System.out.printf(\"%tF%n\", millis);\n    System.out.printf(\"%tA, %1$tB %1$td, %1$tY%n\", millis);\n}\n\n2023-05-10\nWednesday, May 10, 2023\n\n\nimport java.util.Calendar;\nimport java.util.GregorianCalendar;\nimport java.text.DateFormatSymbols;\nimport java.text.DateFormat;\npublic class Dates{\n public static void main(String[] args){\n  Calendar now = new GregorianCalendar(); //months are 0 indexed, dates are 1 indexed\n  DateFormatSymbols symbols = new DateFormatSymbols(); //names for our months and weekdays\n\n  //plain numbers way\n  System.out.println(now.get(Calendar.YEAR)  + \"-\" + (now.get(Calendar.MONTH) + 1) + \"-\" + now.get(Calendar.DATE));\n\n  //words way\n  System.out.print(symbols.getWeekdays()[now.get(Calendar.DAY_OF_WEEK)] + \", \");\n  System.out.print(symbols.getMonths()[now.get(Calendar.MONTH)] + \" \");\n  System.out.println(now.get(Calendar.DATE) + \", \" + now.get(Calendar.YEAR));\n }\n}\n\n\nJava 8 Date Time API[edit]\nimport java.time.LocalDate;\nimport java.time.format.DateTimeFormatter;\npublic class Dates\n{\n public static void main(final String[] args)\n {\n  //using DateTimeFormatter\n  LocalDate date = LocalDate.now();\n  DateTimeFormatter dtFormatter = DateTimeFormatter.ofPattern(\"yyyy MM dd\");\n\n  System.out.println(dtFormatter.format(date));\n }\n}\n\nJava Util Date API[edit]\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\n\npublic class DateFormat {\n    public static void main(String[]args){\n        SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd\");\n        SimpleDateFormat formatLong = new SimpleDateFormat(\"EEEE, MMMM dd, yyyy\");\n        System.out.println(format.format(new Date()));\n        System.out.println(formatLong.format(new Date()));\n    }\n}\n\n", "explain": "\nAn alternate demonstration\nBetter: use a library, see http://sourceforge.net/apps/mediawiki/threeten/index.php?title=ThreeTen\n"}, {"task_name": "Date format", "task_url": "https://rosettacode.org/wiki/Date_format", "task_cat": "Text processing", "lang": "C#", "code": "\nusing System;\n\nnamespace RosettaCode.DateFormat\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            DateTime today = DateTime.Now.Date;\n            Console.WriteLine(today.ToString(\"yyyy-MM-dd\"));\n            Console.WriteLine(today.ToString(\"dddd, MMMMM d, yyyy\"));\n        }\n    }\n}\n\n", "explain": ""}, {"task_name": "Date format", "task_url": "https://rosettacode.org/wiki/Date_format", "task_cat": "Text processing", "lang": "JavaScript", "code": "\n\nvar now = new Date(),\n    weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    months   = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n    fmt1 = now.getFullYear() + '-' + (1 + now.getMonth()) + '-' + now.getDate(),\n    fmt2 = weekdays[now.getDay()] + ', ' + months[now.getMonth()] + ' ' + now.getDate() + ', ' + now.getFullYear();\nconsole.log(fmt1);\nconsole.log(fmt2);\n\n2010-1-12\nTuesday, January 12, 2010\n", "explain": "JavaScript does not have any built-in strftime-type functionality.\n"}, {"task_name": "Date format", "task_url": "https://rosettacode.org/wiki/Date_format", "task_cat": "Text processing", "lang": "SQL", "code": "\nWorks with: Oracle\nselect to_char(sysdate,'YYYY-MM-DD') date_fmt_1 from dual;\n\nselect to_char(sysdate,'fmDay, Month DD, YYYY') date_fmt_2 from dual;\nSQL>\nDATE_FMT_1\n----------\n2016-12-12\n\nSQL> SQL>\nDATE_FMT_2\n--------------------------------------------------------------------------------\nMonday, December 12, 2016\n\n", "explain": ""}, {"task_name": "Date format", "task_url": "https://rosettacode.org/wiki/Date_format", "task_cat": "Text processing", "lang": "PHP", "code": "\n\n<?php\necho date('Y-m-d', time()).\"\\n\";\necho date('l, F j, Y', time()).\"\\n\";\n?>\n\n", "explain": "Formatting rules: http://www.php.net/date\n"}, {"task_name": "Date format", "task_url": "https://rosettacode.org/wiki/Date_format", "task_cat": "Text processing", "lang": "Fortran", "code": "\nWorks with: Fortran version 95 and later\n\nPROGRAM DATE\n\n  IMPLICIT NONE\n  \n  INTEGER :: dateinfo(8), day\n  CHARACTER(9) :: month, dayname\n     \n  CALL DATE_AND_TIME(VALUES=dateinfo)\n  SELECT CASE(dateinfo(2))\n    CASE(1)\n      month = \"January\"\n    CASE(2)\n      month = \"February\"\n    CASE(3)\n      month = \"March\"\n    CASE(4)\n      month = \"April\"\n    CASE(5)\n      month = \"May\"\n    CASE(6)\n      month = \"June\"\n    CASE(7)\n      month = \"July\"\n    CASE(8)\n      month = \"August\"\n    CASE(9)\n      month = \"September\"\n    CASE(10)\n      month = \"October\"\n    CASE(11)\n      month = \"November\"\n    CASE(12)\n     month = \"December\"\n  END SELECT\n\n  day = Day_of_week(dateinfo(3), dateinfo(2), dateinfo(1))\n\n  SELECT CASE(day)\n    CASE(0)\n      dayname = \"Saturday\"\n    CASE(1)\n      dayname = \"Sunday\"\n    CASE(2)\n      dayname = \"Monday\"\n    CASE(3)\n      dayname = \"Tuesday\"\n    CASE(4)\n      dayname = \"Wednesday\"\n    CASE(5)\n      dayname = \"Thursday\"\n    CASE(6)\n      dayname = \"Friday\"\n  END SELECT\n  \n  WRITE(*,\"(I0,A,I0,A,I0)\") dateinfo(1),\"-\", dateinfo(2),\"-\", dateinfo(3)\n  WRITE(*,\"(4(A),I0,A,I0)\") trim(dayname), \", \", trim(month), \" \", dateinfo(3), \", \", dateinfo(1)\n\nCONTAINS\n\n  FUNCTION Day_of_week(d, m, y)\n    INTEGER :: Day_of_week, j, k\n    INTEGER, INTENT(IN) :: d, m, y\n    \n    j = y / 100\n    k = MOD(y, 100)\n    Day_of_week = MOD(d + (m+1)*26/10 + k + k/4 + j/4 + 5*j, 7)\n  END FUNCTION Day_of_week\n\nEND PROGRAM DATE\n\n\nOutput:\n2008-12-14\nSunday, December 14, 2008\n\n", "explain": "The subroutine DATE_AND_TIME does not return day of week information so we have to write our own function for that\n"}, {"task_name": "Date format", "task_url": "https://rosettacode.org/wiki/Date_format", "task_cat": "Text processing", "lang": "Go", "code": "\n\npackage main\n\nimport \"time\"\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(time.Now().Format(\"2006-01-02\"))\n    fmt.Println(time.Now().Format(\"Monday, January 2, 2006\"))\n}\n\n\nOutput:\n2011-12-02\nFriday, December 2, 2011\n\n", "explain": "In an interesting design, you specify your format by providing the format for the date and time 01/02 03:04:05PM '06 -0700\n"}, {"task_name": "Date format", "task_url": "https://rosettacode.org/wiki/Date_format", "task_cat": "Text processing", "lang": "ARM_Assembly", "code": "\nWorks with: as version Raspberry Pi\n/* ARM assembly Raspberry PI  */\n/*  program dateFormat.s   */\n\n/* REMARK 1\u00a0: this program use routines in a include file \n   see task Include a file language arm assembly \n   for the routine affichageMess conversion10 \n   see at end of this program the instruction include */\n\n/*******************************************/\n/* Constantes                              */\n/*******************************************/\n.equ STDOUT, 1           @ Linux output console\n.equ EXIT,   1           @ Linux syscall\n.equ WRITE,  4           @ Linux syscall\n.equ BRK,    0x2d        @ Linux syscall\n.equ CHARPOS,     '@'\n\n.equ GETTIME,   0x4e     @ call system linux gettimeofday\n\n/*******************************************/\n/* Structures                               */\n/********************************************/\n/* example structure  time  */\n    .struct  0\ntimeval_sec:                     @\n    .struct  timeval_sec + 4 \ntimeval_usec:                     @\n    .struct  timeval_usec + 4 \ntimeval_end:\n    .struct  0\ntimezone_min:                     @\n    .struct  timezone_min + 4 \ntimezone_dsttime:                 @ \n    .struct  timezone_dsttime + 4 \ntimezone_end:\n\n/*********************************/\n/* Initialized data              */\n/*********************************/\n.data\nszMessError:       .asciz \"Error detected\u00a0!!!!. \\n\"\nszMessResult:      .asciz \"Date\u00a0: @/@/@ \\n\"  @ message result\nszMessResult1:     .asciz \"Date day\u00a0: @ @ @ @ \\n\"  @ message result\nszJan:             .asciz \"Janvier\"\nszFev:             .asciz \"F\u00e9vrier\"\nszMars:            .asciz \"Mars\"\nszAvril:            .asciz \"Avril\"\nszMai:             .asciz \"Mai\"\nszJuin:            .asciz \"Juin\"\nszJuil:            .asciz \"Juillet\"\nszAout:            .asciz \"Aout\"\nszSept:            .asciz \"Septembre\"\nszOct:             .asciz \"Octobre\"\nszNov:             .asciz \"Novembre\"\nszDec:             .asciz \"D\u00e9cembre\"\nszLundi:           .asciz \"Lundi\"\nszMardi:           .asciz \"Mardi\"\nszMercredi:        .asciz \"Mercredi\"\nszJeudi:           .asciz \"Jeudi\"\nszVendredi:        .asciz \"Vendredi\"\nszSamedi:          .asciz \"Samedi\"\nszDimanche:        .asciz \"Dimanche\"\nszCarriageReturn:  .asciz \"\\n\"\n.align 4\ntbDayMonthYear:    .int  0,  31,  60,  91, 121, 152, 182, 213, 244, 274, 305, 335\n                   .int 366, 397, 425, 456, 486, 517, 547, 578, 609, 639, 670, 700\n                   .int 731, 762, 790, 821, 851, 882, 912, 943, 974,1004,1035,1065\n                   .int 1096,1127,1155,1186,1216,1247,1277,1308,1339,1369,1400,1430\ntbMonthName:       .int szJan\n                   .int szFev\n                   .int szMars\n                   .int szAvril\n                   .int szMai\n                   .int szJuin\n                   .int szJuil\n                   .int szAout\n                   .int szSept\n                   .int szOct\n                   .int szNov\n                   .int szDec\ntbDayName:         .int szLundi\n                   .int szMardi\n                   .int szMercredi\n                   .int szJeudi\n                   .int szVendredi\n                   .int szSamedi\n                   .int szDimanche\n\n/*********************************/\n/* UnInitialized data            */\n/*********************************/\n.bss \n.align 4\nstTVal:                .skip timeval_end\nstTZone:               .skip timezone_end\nsZoneConv:             .skip 100\n/*********************************/\n/*  code section                 */\n/*********************************/\n.text\n.global main \nmain:                              @ entry of program \n    ldr r0,iAdrstTVal\n    ldr r1,iAdrstTZone\n    mov r7,#GETTIME\n    svc 0\n    cmp r0,#-1                     @ error\u00a0?\n    beq 99f\n    ldr r1,iAdrstTVal\n    ldr r0,[r1,#timeval_sec]       @ timestemp in second\n    bl dateFormatNum\n    ldr r0,[r1,#timeval_sec]       @ timestemp in second\n    bl dateFormatAlpha\n    ldr r0,iTStest1\n    bl dateFormatNum\n    ldr r0,iTStest1\n    bl dateFormatAlpha\n    ldr r0,iTStest2\n    bl dateFormatNum\n    ldr r0,iTStest2\n    bl dateFormatAlpha\n    ldr r0,iTStest3\n    bl dateFormatNum\n    ldr r0,iTStest3\n    bl dateFormatAlpha\n    b 100f\n99:\n    ldr r0,iAdrszMessError\n    bl affichageMess \n100:                               @ standard end of the program \n    mov r0,#0                      @ return code\n    mov r7,#EXIT                   @ request to exit program\n    svc 0                          @ perform the system call\n\niAdrszMessError:          .int szMessError\niAdrstTVal:               .int stTVal\niAdrstTZone:              .int stTZone\niAdrszCarriageReturn:     .int szCarriageReturn\niAdrsZoneConv:            .int sZoneConv\niTStest1:                 .int 1609508339    @ 01/01/2021\niTStest2:                 .int 1657805939    @ 14/07/2022\niTStest3:                 .int 1767221999    @ 31/12/2025\n/******************************************************************/\n/*     date format numeric                                        */ \n/******************************************************************/\n/* r0 contains the  timestamp in seconds */\ndateFormatNum:\n    push {r1-r11,lr}                             @ save  registers \n    ldr r2,iSecJan2020\n    sub r0,r0,r2                   @ total secondes to 01/01/2020\n    mov r1,#60\n    bl division\n    mov r0,r2\n    mov r6,r3                      @ compute secondes\n    mov r1,#60\n    bl division\n    mov r7,r3                      @ compute minutes\n    mov r0,r2\n    mov r1,#24\n    bl division\n    mov r8,r3                      @ compute hours\n    mov r0,r2\n    mov r11,r0\n    mov r1,#(365 * 4 + 1)\n    bl division\n    lsl r9,r2,#2                   @ multiply by 4 = year1\n    mov r1,#(365 * 4 + 1)\n    mov r0,r11\n    bl division\n    mov r10,r3\n\n    ldr r1,iAdrtbDayMonthYear\n    mov r2,#3\n    mov r3,#12\n1:\n    mul r11,r3,r2\n    ldr r4,[r1,r11,lsl #2]         @ load days by year\n    cmp r10,r4\n    bge 2f\n    sub r2,r2,#1\n    cmp r2,#0\n    bne 1b\n2:                                 @ r2 = year2\n    mov r5,#11\n    mul r11,r3,r2\n    lsl r11,#2\n    add r11,r1                     @ table address \n3:\n    ldr r4,[r11,r5,lsl #2]         @ load days by month\n    cmp r10,r4\n    bge 4f\n    subs r5,r5,#1\n    bne 3b\n4:                                 @ r5 = month - 1\n    mul r11,r3,r2\n    add r11,r5\n    ldr r1,iAdrtbDayMonthYear\n    ldr r3,[r1,r11,lsl #2]\n    sub r0,r10,r3\n    add r0,r0,#1                   @ final compute day\n    ldr r1,iAdrsZoneConv\n    bl conversion10                @ this function do not zero final\n    mov r11,#0                     @ store zero final\n    strb r11,[r1,r0]\n    ldr r0,iAdrszMessResult\n    ldr r1,iAdrsZoneConv\n    bl strInsertAtCharInc          @ insert result at first @ character\n    mov r3,r0\n    add r0,r5,#1                   @ final compute month\n    cmp r0,#12\n    subgt r0,#12\n    ldr r1,iAdrsZoneConv\n    bl conversion10\n    mov r11,#0                      @ store zero final\n    strb r11,[r1,r0]\n    mov r0,r3\n    ldr r1,iAdrsZoneConv\n    bl strInsertAtCharInc          @ insert result at next @ character\n    mov r3,r0\n    ldr r11,iYearStart\n    add r0,r9,r11\n    add r0,r0,r2                   @ final compute year = 2020 + year1 + year2\n    ldr r1,iAdrsZoneConv\n    bl conversion10\n    mov r11,#0                     @ store zero final\n    strb r11,[r1,r0]\n    mov r0,r3\n    ldr r1,iAdrsZoneConv\n    bl strInsertAtCharInc          @ insert result at next @ character\n    bl affichageMess \n100:\n    pop {r1-r11,lr}                @ restaur registers\n    bx lr                          @ return\niAdrszMessResult:         .int szMessResult\n/******************************************************************/\n/*     date format alphanumeric                                   */ \n/******************************************************************/\n/* r0 contains the  timestamp in seconds */\ndateFormatAlpha:\n    push {r1-r10,lr}               @ save  registers \n    ldr r2,iSecJan2020\n    sub r0,r0,r2                   @ total secondes to 01/01/2020\n    mov r6,r0\n    mov r1,#60\n    bl division\n    mov r0,r2\n    mov r1,#60\n    bl division\n    mov r0,r2\n    mov r1,#24\n    bl division\n    mov r0,r2\n    mov r8,r0\n    mov r1,#(365 * 4 + 1)\n    bl division\n    lsl r9,r2,#2                   @ multiply by 4 = year1\n    mov r1,#(365 * 4 + 1)\n    mov r0,r8\n    bl division\n    mov r10,r3                     @ reste\n\n    ldr r1,iAdrtbDayMonthYear\n    mov r7,#3\n    mov r3,#12\n1:\n    mul r8,r3,r7\n    ldr r4,[r1,r8,lsl #2]          @ load days by year\n    cmp r10,r4\n    bge 2f\n    sub r7,r7,#1\n    cmp r7,#0\n    bne 1b\n2:                                 @ r7 = year2\n    mov r5,#11\n    mul r8,r3,r7\n    lsl r8,#2\n    add r8,r1\n3:\n    ldr r4,[r8,r5,lsl #2]          @ load days by month\n    cmp r10,r4\n    bge 4f\n    subs r5,r5,#1\n    bne 3b\n4:                                 @ r5 = month - 1\n\n    mov r0,r6                      @ number secondes depuis 01/01/2020\n    ldr r1,iNbSecByDay\n    bl division\n    mov r0,r2\n    mov r1,#7\n    bl division\n    add r2,r3,#2\n    cmp r2,#7\n    subge r2,#7\n    ldr r1,iAdrtbDayName\n    ldr r1,[r1,r2,lsl #2]\n    ldr r0,iAdrszMessResult1\n    bl strInsertAtCharInc          @ insert result at next @ character\n    mov r3,r0\n    mov r8,#12\n    mul r11,r8,r7\n    add r11,r5\n    ldr r1,iAdrtbDayMonthYear\n    ldr r8,[r1,r11,lsl #2]\n    sub r0,r10,r8\n    add r0,r0,#1                   @ final compute day\n    ldr r1,iAdrsZoneConv\n    bl conversion10                @ this function do not zero final\n    mov r8,#0                      @ store zero final\n    strb r8,[r1,r0]\n    mov r0,r3\n    ldr r1,iAdrsZoneConv\n    bl strInsertAtCharInc          @ insert result at first @ character\n    mov r3,r0\n    ldr r1,iAdrtbMonthName\n    cmp r5,#12\n    subge r5,#12\n    ldr r1,[r1,r5,lsl #2]          @ month name\n    mov r0,r3\n    bl strInsertAtCharInc          @ insert result at first @ character\n    mov r3,r0\n    ldr r0,iYearStart\n    add r0,r7\n    add r0,r9                      @ final compute year = 2020 + year1 + year2\n\n    ldr r1,iAdrsZoneConv\n    bl conversion10                @ this function do not zero final\n    mov r8,#0                      @ store zero final\n    strb r8,[r1,r0]\n    mov r0,r3\n    ldr r1,iAdrsZoneConv\n    bl strInsertAtCharInc          @ insert result at first @ character\n    bl affichageMess \n100:\n    pop {r1-r10,lr}                @ restaur registers\n    bx lr                          @ return\niAdrszMessResult1:         .int szMessResult1\niSecJan2020:              .int 1577836800\niAdrtbDayMonthYear:       .int tbDayMonthYear\niYearStart:               .int 2020\niAdrtbMonthName:          .int tbMonthName\niAdrtbDayName:            .int tbDayName\niNbSecByDay:              .int 3600 * 24\n/***************************************************/\n/*      ROUTINES INCLUDE                 */\n/***************************************************/\n.include \"../affichage.inc\"\n\nOutput:\nDate\u00a0: 30/3/2020\nDate day\u00a0: Lundi 30 Mars 2020\nDate\u00a0: 1/1/2021\nDate day\u00a0: Vendredi 1 Janvier 2021\nDate\u00a0: 14/7/2022\nDate day\u00a0: Jeudi 14 Juillet 2022\nDate\u00a0: 31/12/2025\nDate day\u00a0: Mercredi 31 D\u00e9cembre 2025\n\n", "explain": ""}, {"task_name": "Date format", "task_url": "https://rosettacode.org/wiki/Date_format", "task_cat": "Text processing", "lang": "Delphi", "code": "\nShowMessage(FormatDateTime('yyyy-mm-dd', Now) +#13#10+ FormatDateTime('dddd, mmmm dd, yyyy', Now));\n\n\nOutput:\n2022-02-16\nWednesday, February 16, 2022\nRedirecting to \n\n", "explain": ""}, {"task_name": "Date format", "task_url": "https://rosettacode.org/wiki/Date_format", "task_cat": "Text processing", "lang": "Ruby", "code": "\n\nputs Time.now\nputs Time.now.strftime('%Y-%m-%d')\nputs Time.now.strftime('%F')            # same as %Y-%m-%d (ISO 8601 date formats)\nputs Time.now.strftime('%A, %B %d, %Y')\n\n\nOutput:\n2015-02-08 10:48:45 +0900\n2015-02-08\n2015-02-08\nSunday, February 08, 2015\n\n", "explain": "Formatting rules: Time#strftime\n"}, {"task_name": "Date format", "task_url": "https://rosettacode.org/wiki/Date_format", "task_cat": "Text processing", "lang": "Rust", "code": "\n\nfn main() {\n    let now = chrono::Utc::now();\n    println!(\"{}\", now.format(\"%Y-%m-%d\"));\n    println!(\"{}\", now.format(\"%A, %B %d, %Y\"));\n}\n\n", "explain": "Using chrono 0.4.6\n"}, {"task_name": "Date format", "task_url": "https://rosettacode.org/wiki/Date_format", "task_cat": "Text processing", "lang": "Swift", "code": "\nimport Foundation\nextension String {\n    func toStandardDateWithDateFormat(format: String) -> String {\n        let dateFormatter = NSDateFormatter()\n        dateFormatter.dateFormat = format\n        dateFormatter.dateStyle = .LongStyle\n        return dateFormatter.stringFromDate(dateFormatter.dateFromString(self)!)\n    }\n}\n\nlet date = \"2015-08-28\".toStandardDateWithDateFormat(\"yyyy-MM-dd\")\n\nOutput:\n2015\ua20e8\ua1aa28\ua44d\uff08In Sichuan Yi Language Environment\uff09\n\n", "explain": ""}, {"task_name": "Date format", "task_url": "https://rosettacode.org/wiki/Date_format", "task_cat": "Text processing", "lang": "R", "code": "\n\nnow <- Sys.time()\nstrftime(now, \"%Y-%m-%d\")\nstrftime(now, \"%A, %B %d, %Y\")\n\n", "explain": "strftime is short for \"string format time\".\n"}, {"task_name": "Date format", "task_url": "https://rosettacode.org/wiki/Date_format", "task_cat": "Text processing", "lang": "COBOL", "code": "\nWorks with: OpenCOBOL\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. Date-Format.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n\n       01  Days-Area.\n           03  Days-Data.\n               05  FILLER PIC X(9) VALUE \"Monday\".\n               05  FILLER PIC X(9) VALUE \"Tuesday\".\n               05  FILLER PIC X(9) VALUE \"Wednesday\".\n               05  FILLER PIC X(9) VALUE \"Thursday\".\n               05  FILLER PIC X(9) VALUE \"Friday\".\n               05  FILLER PIC X(9) VALUE \"Saturday\".\n               05  FILLER PIC X(9) VALUE \"Sunday\".\n\n           03  Days-Values REDEFINES Days-Data.\n               05  Days-Table PIC X(9) OCCURS 7 TIMES.\n\n       01  Months-Area.\n           03  Months-Data.\n               05  FILLER PIC X(9) VALUE \"January\".\n               05  FILLER PIC X(9) VALUE \"February\".\n               05  FILLER PIC X(9) VALUE \"March\".\n               05  FILLER PIC X(9) VALUE \"April\".\n               05  FILLER PIC X(9) VALUE \"May\".\n               05  FILLER PIC X(9) VALUE \"June\".\n               05  FILLER PIC X(9) VALUE \"July\".\n               05  FILLER PIC X(9) VALUE \"August\".\n               05  FILLER PIC X(9) VALUE \"September\".\n               05  FILLER PIC X(9) VALUE \"October\".\n               05  FILLER PIC X(9) VALUE \"November\".\n               05  FILLER PIC X(9) VALUE \"December\".\n              \n           03  Months-Values REDEFINES Months-Data.\n               05  Months-Table PIC X(9) OCCURS 12 TIMES.\n\n       01  Current-Date-Str.\n           03  Current-Year     PIC X(4).\n           03  Current-Month    PIC X(2).\n           03  Current-Day      PIC X(2).\n\n       01  Current-Day-Of-Week  PIC 9.\n\n       PROCEDURE DIVISION.\n           MOVE FUNCTION CURRENT-DATE (1:8) TO Current-Date-Str\n           \n           DISPLAY Current-Year \"-\" Current-Month \"-\" Current-Day\n\n           ACCEPT Current-Day-Of-Week FROM DAY-OF-WEEK\n           DISPLAY\n               FUNCTION TRIM(\n                   Days-Table (FUNCTION NUMVAL(Current-Day-Of-Week)))\n               \", \"\n               FUNCTION TRIM(\n                   Months-Table (FUNCTION NUMVAL(Current-Month)))\n               \" \"\n               Current-Day\n               \", \"\n               Current-Year\n           END-DISPLAY\n\n           GOBACK\n           .\n\n", "explain": ""}, {"task_name": "Date format", "task_url": "https://rosettacode.org/wiki/Date_format", "task_cat": "Text processing", "lang": "Ada", "code": "\nwith Ada.Calendar;             use Ada.Calendar;\nwith Ada.Calendar.Formatting;  use Ada.Calendar.Formatting;\nwith Ada.Text_IO;              use Ada.Text_IO;\n\nprocedure Date_Format is\n   function Image (Month : Month_Number) return String is\n   begin\n      case Month is\n         when 1  => return \"January\";\n         when 2  => return \"February\";\n         when 3  => return \"March\";\n         when 4  => return \"April\";\n         when 5  => return \"May\";\n         when 6  => return \"June\";\n         when 7  => return \"July\";\n         when 8  => return \"August\";\n         when 9  => return \"September\";\n         when 10 => return \"October\";\n         when 11 => return \"November\";\n         when 12 => return \"December\";\n      end case;\n   end Image;\n   function Image (Day : Day_Name) return String is\n   begin\n      case Day is\n         when Monday    => return \"Monday\";\n         when Tuesday   => return \"Tuesday\";\n         when Wednesday => return \"Wednesday\";\n         when Thursday  => return \"Thursday\";\n         when Friday    => return \"Friday\";\n         when Saturday  => return \"Saturday\";\n         when Sunday    => return \"Sunday\";\n      end case;\n   end Image;\n   Today : Time := Clock;\nbegin\n   Put_Line (Image (Today) (1..10));\n   Put_Line\n   (  Image (Day_Of_Week (Today)) & \", \"\n   &  Image (Ada.Calendar.Month (Today))\n   &  Day_Number'Image (Ada.Calendar.Day (Today)) & \",\"\n   &  Year_Number'Image (Ada.Calendar.Year (Today))\n   );\nend Date_Format;\n\n\nOutput:\n2008-10-03\nFriday, October 3, 2008\n\n", "explain": ""}, {"task_name": "Date format", "task_url": "https://rosettacode.org/wiki/Date_format", "task_cat": "Text processing", "lang": "Julia", "code": "\nWorks with: Julia version 0.6\nts = Dates.today()\n\nprintln(\"Today's date is:\")\nprintln(\"\\t$ts\")\nprintln(\"\\t\", Dates.format(ts, \"E, U dd, yyyy\"))\n\n\nOutput:\nToday's date is:\n\t2018-01-05\n\tFriday, January 05, 2018\n", "explain": ""}, {"task_name": "Date format", "task_url": "https://rosettacode.org/wiki/Date_format", "task_cat": "Text processing", "lang": "Kotlin", "code": "\n// version 1.0.6\n\nimport java.util.GregorianCalendar\n\nfun main(args: Array<String>) {\n    val now = GregorianCalendar()\n    println(\"%tF\".format(now))\n    println(\"%tA, %1\\$tB %1\\$te, %1\\$tY\".format(now))\n}\n\n\nOutput:\n2017-01-16\nMonday, January 16, 2017\n\n", "explain": ""}, {"task_name": "Date format", "task_url": "https://rosettacode.org/wiki/Date_format", "task_cat": "Text processing", "lang": "Perl", "code": "\nLibrary: POSIX\nuse POSIX;\n\nprint strftime('%Y-%m-%d', 0, 0, 0, 10, 10, 107), \"\\n\";\nprint strftime('%A, %B %d, %Y', 0, 0, 0, 10, 10, 107), \"\\n\";\n\n\nOutput: with locales C\n\n2007-11-10\nSaturday, November 10, 2007\n\n\nOutput: with locales cs_CZ.UTF-8\n\n2007-11-10\nSobota, listopad 10, 2007\n\n\nuse POSIX;\n\nprint strftime('%Y-%m-%d', localtime), \"\\n\";\nprint strftime('%A, %B %d, %Y', localtime), \"\\n\";\n\n\nOutput: with locales C\n\n2008-02-13\nWednesday, February 13, 2008\n\n", "explain": "Actual date:\n"}, {"task_name": "Date format", "task_url": "https://rosettacode.org/wiki/Date_format", "task_cat": "Text processing", "lang": "Objective-C", "code": "\nNSLog(@\"%@\", [NSDate date]);\nNSLog(@\"%@\", [[NSDate date] descriptionWithCalendarFormat:@\"%Y-%m-%d\" timeZone:nil locale:nil]);\nNSLog(@\"%@\", [[NSDate date] descriptionWithCalendarFormat:@\"%A, %B %d, %Y\" timeZone:nil locale:nil]);\n\nWorks with: Mac OS X version 10.4+\nWorks with: iOS\nNSLog(@\"%@\", [NSDate date]);\nNSDateFormatter *dateFormatter = [[NSDateFormat alloc] init];\n[dateFormatter setDateFormat:@\"yyyy-MM-dd\"];\nNSLog(@\"%@\", [dateFormatter stringFromDate:[NSDate date]]);\n[dateFormatter setDateFormat:@\"EEEE, MMMM d, yyyy\"];\nNSLog(@\"%@\", [dateFormatter stringFromDate:[NSDate date]]);\n\n", "explain": ""}, {"task_name": "Date format", "task_url": "https://rosettacode.org/wiki/Date_format", "task_cat": "Text processing", "lang": "Prolog", "code": "\nWorks with: SWI-Prolog version 6\ndisplay_date :-\n    get_time(Time),\n    format_time(atom(Short), '%Y-%M-%d',      Time),\n    format_time(atom(Long),  '%A, %B %d, %Y', Time),\n    format('~w~n~w~n', [Short, Long]).\n\n", "explain": ""}, {"task_name": "Date format", "task_url": "https://rosettacode.org/wiki/Date_format", "task_cat": "Text processing", "lang": "Lua", "code": "\nprint( os.date( \"%Y-%m-%d\" ) )\nprint( os.date( \"%A, %B %d, %Y\" ) )\n\n", "explain": ""}, {"task_name": "Date format", "task_url": "https://rosettacode.org/wiki/Date_format", "task_cat": "Text processing", "lang": "Scala", "code": "\nimport java.util.Date\n\nval now=new Date()\nprintln(\"%tF\".format(now))\nprintln(\"%1$tA, %1$tB %1$td, %1$tY\".format(now))\n\n\nOutput:\n2023-04-17\nMonday, April 17, 2023\n\n", "explain": ""}, {"task_name": "Date format", "task_url": "https://rosettacode.org/wiki/Date_format", "task_cat": "Text processing", "lang": "D", "code": "\nWorks with: D version DMD 1.026\nLibrary: Tango\nmodule datetimedemo ;\n\nimport tango.time.Time ; \nimport tango.text.locale.Locale ;\nimport tango.time.chrono.Gregorian ;\n\nimport tango.io.Stdout ;\n\nvoid main() {\n    Gregorian g = new Gregorian ;\n    Stdout.layout = new Locale; // enable Stdout to handle date/time format\n    Time d = g.toTime(2007, 11, 10, 0, 0, 0, 0, g.AD_ERA) ;\n    Stdout.format(\"{:yyy-MM-dd}\", d).newline ;\n    Stdout.format(\"{:dddd, MMMM d, yyy}\", d).newline ;\n    d = g.toTime(2008, 2, 1, 0, 0, 0, 0, g.AD_ERA) ;\n    Stdout.format(\"{:dddd, MMMM d, yyy}\", d).newline ;\n}\n\n\nOutput:\n2007-11-10\nSaturday, November 10, 2007\nFriday, February 1, 2008\n", "explain": ""}, {"task_name": "Date format", "task_url": "https://rosettacode.org/wiki/Date_format", "task_cat": "Text processing", "lang": "Haskell", "code": "\nimport Data.Time\n       (FormatTime, formatTime, defaultTimeLocale, utcToLocalTime,\n        getCurrentTimeZone, getCurrentTime)\n\nformats :: FormatTime t => [t -> String]\nformats = (formatTime defaultTimeLocale) <$>  [\"%F\", \"%A, %B %d, %Y\"]\n\nmain :: IO ()\nmain = do\n  t <- pure utcToLocalTime <*> getCurrentTimeZone <*> getCurrentTime\n  putStrLn $ unlines (formats <*> pure t)\n\n\n2017-06-05\nMonday, June 05, 2017\n", "explain": "Sample output:\n"}, {"task_name": "Date format", "task_url": "https://rosettacode.org/wiki/Date_format", "task_cat": "Text processing", "lang": "VBScript", "code": "\n'YYYY-MM-DD format\nWScript.StdOut.WriteLine Year(Date) & \"-\" & Right(\"0\" & Month(Date),2) & \"-\" & Right(\"0\" & Day(Date),2)\n\n'Weekday_Name, Month_Name DD, YYYY format\nWScript.StdOut.WriteLine FormatDateTime(Now,1)\n\nOutput:\n2015-08-31\nMonday, August 31, 2015\n\n", "explain": ""}, {"task_name": "Date format", "task_url": "https://rosettacode.org/wiki/Date_format", "task_cat": "Text processing", "lang": "Scheme", "code": "\nWorks with: Guile version 2.0.13\n(define short-date\n  (lambda (lt)\n    (strftime \"%Y-%m-%d\" (localtime lt))))\n\n(define long-date\n  (lambda (lt)\n    (strftime \"%A, %B %d, %Y\" (localtime lt))))\n\n(define main\n  (lambda (args)\n    ;; Current date\n    (let ((dt (car (gettimeofday))))\n      ;; Short style\n      (display (short-date dt))(newline)\n      ;; Long style\n      (display (long-date dt))(newline))))\n\n", "explain": ""}, {"task_name": "Date format", "task_url": "https://rosettacode.org/wiki/Date_format", "task_cat": "Text processing", "lang": "Apex", "code": "\nDatetime dtNow = datetime.now();\nString strDt1 = dtNow.format('yyyy-MM-dd');\nString strDt2 = dtNow.format('EEEE, MMMM dd, yyyy');\nsystem.debug(strDt1); // \"2007-11-10\"\nsystem.debug(strDt2); //\"Sunday, November 10, 2007\"\n\n\nOutput:\n2016-04-20\nWednesday, April 20, 2016\n\n", "explain": ""}, {"task_name": "Date format", "task_url": "https://rosettacode.org/wiki/Date_format", "task_cat": "Text processing", "lang": "PowerShell", "code": "\n\"{0:yyyy-MM-dd}\" -f (Get-Date)\n\"{0:dddd, MMMM d, yyyy}\" -f (Get-Date)\n# or\n(Get-Date).ToString(\"yyyy-MM-dd\")\n(Get-Date).ToString(\"dddd, MMMM d, yyyy\")\n\n\n", "explain": "Note: The names of months and days follow the currently set locale but otherwise the format is unchanged.\n"}, {"task_name": "Date format", "task_url": "https://rosettacode.org/wiki/Date_format", "task_cat": "Text processing", "lang": "Logo", "code": "\nWorks with: UCB Logo\n\nprint first shell [date +%F]\nprint first shell [date +\"%A, %B %d, %Y\"]\n\nOutput:\n2020-09-16\nWednesday, September 16, 2020\n", "explain": "A bit of a cheat since Logo has no standard built-in time and date functions, but UCB Logo can call out to the shell, so:\n"}, {"task_name": "Date format", "task_url": "https://rosettacode.org/wiki/Date_format", "task_cat": "Text processing", "lang": "ColdFusion", "code": "\n<cfoutput>\n    #dateFormat(Now(), \"YYYY-MM-DD\")#<br />\n    #dateFormat(Now(), \"DDDD, MMMM DD, YYYY\")#\n</cfoutput>\n\n", "explain": ""}, {"task_name": "Date format", "task_url": "https://rosettacode.org/wiki/Date_format", "task_cat": "Text processing", "lang": "ABAP", "code": "\nreport zdate.\ndata: lv_month type string,\n      lv_weekday type string,\n      lv_date type string,\n      lv_day type c.\n\ncall function 'DATE_COMPUTE_DAY'\n  exporting date = sy-datum\n  importing day  = lv_day.\nselect single ltx from t247 into lv_month\n  where spras = sy-langu and\n  mnr = sy-datum+4(2).\n\nselect single langt from t246 into lv_weekday\n  where sprsl = sy-langu and\n  wotnr = lv_day.\n\nconcatenate lv_weekday ', ' lv_month ' ' sy-datum+6(2) ', ' sy-datum(4) into lv_date respecting blanks.\nwrite lv_date.\nconcatenate sy-datum(4) '-' sy-datum+4(2) '-' sy-datum+6(2) into lv_date.\nwrite / lv_date.\n\n", "explain": ""}, {"task_name": "Date format", "task_url": "https://rosettacode.org/wiki/Date_format", "task_cat": "Text processing", "lang": "F#", "code": "\n\n> open System;;\n> Console.WriteLine( DateTime.Now.ToString(\"yyyy-MM-dd\") );;\n2010-08-13\n> Console.WriteLine( \"{0:D}\", DateTime.Now );;\nFriday, August 13, 2010\n\n", "explain": "\"F# Interactive\" session:\n"}, {"task_name": "Date format", "task_url": "https://rosettacode.org/wiki/Date_format", "task_cat": "Text processing", "lang": "Groovy", "code": "\n\ndef isoFormat = { date -> date.format(\"yyyy-MM-dd\") }\ndef longFormat = { date -> date.format(\"EEEE, MMMM dd, yyyy\") }\n\n\ndef now = new Date()\nprintln isoFormat(now)\nprintln longFormat(now)\n\n", "explain": "Solution:\nTest Program:\n"}, {"task_name": "Date format", "task_url": "https://rosettacode.org/wiki/Date_format", "task_cat": "Text processing", "lang": "AWK", "code": "\nWorks with: Gawk\n$ awk 'BEGIN{t=systime();print strftime(\"%Y-%m-%d\",t)\"\\n\"strftime(\"%A, %B %d, %Y\",t)}'\n2009-05-15\nFriday, May 15, 2009\n\n", "explain": ""}]