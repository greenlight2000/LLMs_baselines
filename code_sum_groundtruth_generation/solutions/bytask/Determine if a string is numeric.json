[{"task_name": "Determine if a string is numeric", "task_url": "https://rosettacode.org/wiki/Determine_if_a_string_is_numeric", "task_cat": "Text processing", "lang": "Python", "code": "\nPython: Simple int/float[edit]\ndef is_numeric(s):\n    try:\n        float(s)\n        return True\n    except (ValueError, TypeError):\n        return False\n\nis_numeric('123.0')\n\n'123'.isdigit()\nPython: Most numeric literals[edit]\n\ndef is_numeric(literal):\n    \"\"\"Return whether a literal can be parsed as a numeric value\"\"\"\n    castings = [int, float, complex,\n        lambda s: int(s,2),  #binary\n        lambda s: int(s,8),  #octal\n        lambda s: int(s,16)] #hex\n    for cast in castings:\n        try:\n            cast(literal)\n            return True\n        except ValueError:\n            pass\n    return False\n\ndef numeric(literal):\n    \"\"\"Return value of numeric literal or None if can't parse a value\"\"\"\n    castings = [int, float, complex,\n        lambda s: int(s,2),  #binary\n        lambda s: int(s,8),  #octal\n        lambda s: int(s,16)] #hex\n    for cast in castings:\n        try:\n            return cast(literal)\n        except ValueError:\n            pass\n    return None\n\n\ntests = [\n    '0', '0.', '00', '123', '0123', '+123', '-123', '-123.', '-123e-4', '-.8E-04',\n    '0.123', '(5)', '-123+4.5j', '0b0101', ' +0B101 ', '0o123', '-0xABC', '0x1a1',\n    '12.5%', '1/2', '\u00bd', '3\u00bc', '\u03c0', '\u216b', '1,000,000', '1 000', '- 001.20e+02', \n    'NaN', 'inf', '-Infinity']\n\nfor s in tests:\n    print(\"%14s ->\u00a0%-14s\u00a0%-20s is_numeric:\u00a0%-5s  str.isnumeric: %s\"\u00a0% (\n        '\"'+s+'\"', numeric(s), type(numeric(s)), is_numeric(s), s.isnumeric() ))\n\nOutput:\n           \"0\" -> 0              <class 'int'>        is_numeric: True   str.isnumeric: True\n          \"0.\" -> 0.0            <class 'float'>      is_numeric: True   str.isnumeric: False\n          \"00\" -> 0              <class 'int'>        is_numeric: True   str.isnumeric: True\n         \"123\" -> 123            <class 'int'>        is_numeric: True   str.isnumeric: True\n        \"0123\" -> 123            <class 'int'>        is_numeric: True   str.isnumeric: True\n        \"+123\" -> 123            <class 'int'>        is_numeric: True   str.isnumeric: False\n        \"-123\" -> -123           <class 'int'>        is_numeric: True   str.isnumeric: False\n       \"-123.\" -> -123.0         <class 'float'>      is_numeric: True   str.isnumeric: False\n     \"-123e-4\" -> -0.0123        <class 'float'>      is_numeric: True   str.isnumeric: False\n     \"-.8E-04\" -> -8e-05         <class 'float'>      is_numeric: True   str.isnumeric: False\n       \"0.123\" -> 0.123          <class 'float'>      is_numeric: True   str.isnumeric: False\n         \"(5)\" -> (5+0j)         <class 'complex'>    is_numeric: True   str.isnumeric: False\n   \"-123+4.5j\" -> (-123+4.5j)    <class 'complex'>    is_numeric: True   str.isnumeric: False\n      \"0b0101\" -> 5              <class 'int'>        is_numeric: True   str.isnumeric: False\n    \" +0B101 \" -> 5              <class 'int'>        is_numeric: True   str.isnumeric: False\n       \"0o123\" -> 83             <class 'int'>        is_numeric: True   str.isnumeric: False\n      \"-0xABC\" -> -2748          <class 'int'>        is_numeric: True   str.isnumeric: False\n       \"0x1a1\" -> 417            <class 'int'>        is_numeric: True   str.isnumeric: False\n       \"12.5%\" -> None           <class 'NoneType'>   is_numeric: False  str.isnumeric: False\n         \"1/2\" -> None           <class 'NoneType'>   is_numeric: False  str.isnumeric: False\n           \"\u00bd\" -> None           <class 'NoneType'>   is_numeric: False  str.isnumeric: True\n          \"3\u00bc\" -> None           <class 'NoneType'>   is_numeric: False  str.isnumeric: True\n           \"\u03c0\" -> None           <class 'NoneType'>   is_numeric: False  str.isnumeric: False\n           \"\u216b\" -> None           <class 'NoneType'>   is_numeric: False  str.isnumeric: True\n   \"1,000,000\" -> None           <class 'NoneType'>   is_numeric: False  str.isnumeric: False\n       \"1 000\" -> None           <class 'NoneType'>   is_numeric: False  str.isnumeric: False\n\"- 001.20e+02\" -> None           <class 'NoneType'>   is_numeric: False  str.isnumeric: False\n         \"NaN\" -> nan            <class 'float'>      is_numeric: True   str.isnumeric: False\n         \"inf\" -> inf            <class 'float'>      is_numeric: True   str.isnumeric: False\n   \"-Infinity\" -> -inf           <class 'float'>      is_numeric: True   str.isnumeric: False\nPython: Regular expressions[edit]\nimport re\nnumeric = re.compile('[-+]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?')\nis_numeric = lambda x: numeric.fullmatch(x)\u00a0!= None\n\nis_numeric('123.0')\n", "explain": "Or for positive integers only:\nIncluding complex, hex, binary, and octal numeric literals we get:\nSample use, including value parsed, its type, and standard method str.isnumeric():\n"}, {"task_name": "Determine if a string is numeric", "task_url": "https://rosettacode.org/wiki/Determine_if_a_string_is_numeric", "task_cat": "Text processing", "lang": "C", "code": "\n\n#include <ctype.h>\n#include <stdlib.h>\nint isNumeric (const char * s)\n{\n    if (s == NULL || *s == '\\0' || isspace(*s))\n      return 0;\n    char * p;\n    strtod (s, &p);\n    return *p == '\\0';\n}\n\n", "explain": "Returns true (non-zero) if character-string parameter represents a signed or unsigned floating-point number. Otherwise returns false (zero).\n"}, {"task_name": "Determine if a string is numeric", "task_url": "https://rosettacode.org/wiki/Determine_if_a_string_is_numeric", "task_cat": "Text processing", "lang": "C++", "code": "\n\n#include <sstream> // for istringstream\n\nusing namespace std;\n\nbool isNumeric( const char* pszInput, int nNumberBase )\n{\n\tistringstream iss( pszInput );\n\n\tif ( nNumberBase == 10 )\n\t{\n\t\tdouble dTestSink;\n\t\tiss >> dTestSink;\n\t}\n\telse if ( nNumberBase == 8 || nNumberBase == 16 )\n\t{\n\t\tint nTestSink;\n\t\tiss >> ( ( nNumberBase == 8 ) ? oct : hex ) >> nTestSink;\n\t}\n\telse\n\t\treturn false;\n\n\t// was any input successfully consumed/converted?\n\tif ( ! iss )\n\t\treturn false;\n\n\t// was all the input successfully consumed/converted?\n\treturn ( iss.rdbuf()->in_avail() == 0 );\n}\n\n\nbool isNumeric( const char* pszInput, int nNumberBase )\n{\n\tstring base = \"0123456789ABCDEF\";\n\tstring input = pszInput;\n\n\treturn (input.find_first_not_of(base.substr(0, nNumberBase)) == string::npos);\n}\n\n\nbool isNumeric(const std::string& input) {\n    return std::all_of(input.begin(), input.end(), ::isdigit);\n}\n\n", "explain": "Using stringstream:\nUsing find:\nUsing all_of (requires C++11)\n"}, {"task_name": "Determine if a string is numeric", "task_url": "https://rosettacode.org/wiki/Determine_if_a_string_is_numeric", "task_cat": "Text processing", "lang": "Java", "code": "\n\nInteger.parseInt(\"12345\")\n\nFloat.parseFloat(\"123.456\")\n\n\npublic static void main(String[] args) {\n    String value;\n    value = \"1234567\";\n    System.out.printf(\"%-10s %b%n\", value, isInteger(value));\n    value = \"12345abc\";\n    System.out.printf(\"%-10s %b%n\", value, isInteger(value));\n    value = \"-123.456\";\n    System.out.printf(\"%-10s %b%n\", value, isFloatingPoint(value));\n    value = \"-.456\";\n    System.out.printf(\"%-10s %b%n\", value, isFloatingPoint(value));\n    value = \"123.\";\n    System.out.printf(\"%-10s %b%n\", value, isFloatingPoint(value));\n    value = \"123.abc\";\n    System.out.printf(\"%-10s %b%n\", value, isFloatingPoint(value));\n}\n\nstatic boolean isInteger(String string) {\n    String digits = \"0123456789\";\n    for (char character : string.toCharArray()) {\n        if (!digits.contains(String.valueOf(character)))\n            return false;\n    }\n    return true;\n}\n\nstatic boolean isFloatingPoint(String string) {\n    /* at least one decimal-point */\n    int indexOf = string.indexOf('.');\n    if (indexOf == -1)\n        return false;\n    /* assure only 1 decimal-point */\n    if (indexOf != string.lastIndexOf('.'))\n        return false;\n    if (string.charAt(0) == '-' || string.charAt(0) == '+') {\n        string = string.substring(1);\n        indexOf--;\n    }\n    String integer = string.substring(0, indexOf);\n    if (!integer.isEmpty()) {\n        if (!isInteger(integer))\n            return false;\n    }\n    String decimal = string.substring(indexOf + 1);\n    if (!decimal.isEmpty())\n        return isInteger(decimal);\n    return true;\n}\n\n1234567    true\n12345abc   false\n-123.456   true\n-.456      true\n123.       true\n123.abc    false\n\n\npublic boolean isNumeric(String input) {\n  try {\n    Integer.parseInt(input);\n    return true;\n  }\n  catch (NumberFormatException e) {\n    // s is not numeric\n    return false;\n  }\n}\n\n\nprivate static final boolean isNumeric(final String s) {\n  if (s == null || s.isEmpty()) return false;\n  for (int x = 0; x < s.length(); x++) {\n    final char c = s.charAt(x);\n    if (x == 0 && (c == '-')) continue;  // negative\n    if ((c >= '0') && (c <= '9')) continue;  // 0 - 9\n    return false; // invalid\n  }\n  return true; // valid\n}\n\n\npublic static boolean isNumeric(String inputData) {\n  return inputData.matches(\"[-+]?\\\\d+(\\\\.\\\\d+)?\");\n}\n\n\npublic static boolean isNumeric(String inputData) {\n  NumberFormat formatter = NumberFormat.getInstance();\n  ParsePosition pos = new ParsePosition(0);\n  formatter.parse(inputData, pos);\n  return inputData.length() == pos.getIndex();\n}\n\n\npublic static boolean isNumeric(String inputData) {\n  Scanner sc = new Scanner(inputData);\n  return sc.hasNextInt();\n}\n\n\n", "explain": "Typically, you would use the 'parse' methods from either the Integer, Long, Float, or Double class, which will throw a NumberFormatException for ill-formed values.\nFor example\nThe performance mark is somewhat negligible between a try-block and custom methods. \n\nIt's generally bad practice in Java to rely on an exception being thrown since exception handling is relatively expensive. If non-numeric strings are common, you're going to see a huge performance hit.\nAlternative 1\u00a0: Check that each character in the string is number. Note that this will only works for integers.\nAlternative 2\u00a0: use a regular expression (a more elegant solution).\nAlternative 3\u00a0: use the positional parser in the java.text.NumberFormat object (a more robust solution). If, after parsing, the parse position is at the end of the string, we can deduce that the entire string was a valid number.\nAlternative 4\u00a0: use the java.util.Scanner object. Very useful if you have to scan multiple entries. \nScanner also has similar methods for longs, shorts, bytes, doubles, floats, BigIntegers, and BigDecimals as well as methods for integral types where you may input a base/radix other than 10 (10 is the default, which can be changed using the useRadix method).\n"}, {"task_name": "Determine if a string is numeric", "task_url": "https://rosettacode.org/wiki/Determine_if_a_string_is_numeric", "task_cat": "Text processing", "lang": "C#", "code": "\n\npublic static bool IsNumeric(string s)\n{\n    double Result;\n    return double.TryParse(s, out Result);  // TryParse routines were added in Framework version 2.0.\n}        \n\nstring value = \"123\";\nif (IsNumeric(value)) \n{\n  // do something\n}\n\n\npublic static bool IsNumeric(string s)\n{\n  try\n  {\n    Double.Parse(s);\n    return true;\n  }\n  catch\n  {\n    return false;\n  }\n}\n\n", "explain": "Framework: .NET 2.0+\nFramework: .NET 1.0+\n"}, {"task_name": "Determine if a string is numeric", "task_url": "https://rosettacode.org/wiki/Determine_if_a_string_is_numeric", "task_cat": "Text processing", "lang": "JavaScript", "code": "\n\nfunction isNumeric(n) {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n}\nvar value = \"123.45e7\"; // Assign string literal to value\nif (isNumeric(value)) {\n  // value is a number\n}\n//Or, in web browser in address field:\n//  javascript:function isNumeric(n) {return !isNaN(parseFloat(n)) && isFinite(n);}; value=\"123.45e4\"; if(isNumeric(value)) {alert('numeric')} else {alert('non-numeric')}\n\n", "explain": "A far better validator can be found on StackOverflow[1]\n"}, {"task_name": "Determine if a string is numeric", "task_url": "https://rosettacode.org/wiki/Determine_if_a_string_is_numeric", "task_cat": "Text processing", "lang": "Visual_Basic_.NET", "code": "\nWorks with: Visual Basic .NET version 2005\nDim Value As String = \"+123\"\n\nIf IsNumeric(Value) Then\n    PRINT \"It is numeric.\"\nEnd If\n", "explain": ""}, {"task_name": "Determine if a string is numeric", "task_url": "https://rosettacode.org/wiki/Determine_if_a_string_is_numeric", "task_cat": "Text processing", "lang": "SQL", "code": "\nWorks with: MS SQL version Server 2005\ndeclare @s varchar(10)\nset @s = '1234.56'\n\nprint isnumeric(@s) --prints 1 if numeric, 0 if not.\n\nif isnumeric(@s)=1 begin print 'Numeric' end \nelse print 'Non-numeric'\n", "explain": ""}, {"task_name": "Determine if a string is numeric", "task_url": "https://rosettacode.org/wiki/Determine_if_a_string_is_numeric", "task_cat": "Text processing", "lang": "PHP", "code": "\n<?php\n$string = '123';\nif(is_numeric(trim($string))) {\n}\n?>\n\n", "explain": ""}, {"task_name": "Determine if a string is numeric", "task_url": "https://rosettacode.org/wiki/Determine_if_a_string_is_numeric", "task_cat": "Text processing", "lang": "MATLAB", "code": "\n  function r = isnum(a)\n    r = ~isnan(str2double(a))\n  end \n\n% tests\ndisp(isnum(123)) % 1\ndisp(isnum(\"123\")) % 1\ndisp(isnum(\"foo123\")) % 0\ndisp(isnum(\"123bar\")) % 0\ndisp(isnum(\"3.1415\")) % 1\n\n", "explain": ""}, {"task_name": "Determine if a string is numeric", "task_url": "https://rosettacode.org/wiki/Determine_if_a_string_is_numeric", "task_cat": "Text processing", "lang": "Fortran", "code": "\nFUNCTION is_numeric(string)\n  IMPLICIT NONE\n  CHARACTER(len=*), INTENT(IN) :: string\n  LOGICAL :: is_numeric\n  REAL :: x\n  INTEGER :: e\n  READ(string,*,IOSTAT=e) x\n  is_numeric = e == 0\nEND FUNCTION is_numeric\n\n", "explain": ""}, {"task_name": "Determine if a string is numeric", "task_url": "https://rosettacode.org/wiki/Determine_if_a_string_is_numeric", "task_cat": "Text processing", "lang": "Go", "code": "\n\npackage main\n\nimport (\n    \"fmt\"\n    \"strconv\"\n)\n\nfunc isNumeric(s string) bool {\n    _, err := strconv.ParseFloat(s, 64)\n    return err == nil\n}\n\nfunc main() {\n    fmt.Println(\"Are these strings numeric?\")\n    strings := []string{\"1\", \"3.14\", \"-100\", \"1e2\", \"NaN\", \"rose\"}\n    for _, s := range strings {\n        fmt.Printf(\"  %4s -> %t\\n\", s, isNumeric(s))\n    }\n}\n\n\nOutput:\nAre these strings numeric?\n     1 -> true\n  3.14 -> true\n  -100 -> true\n   1e2 -> true\n   NaN -> true\n  rose -> false\n\n\npackage main\n\nimport (\n    \"fmt\"\n    \"strconv\"\n    \"unicode\"\n)\n\nfunc isInt(s string) bool {\n    for _, c := range s {\n        if !unicode.IsDigit(c) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc main() {\n    fmt.Println(\"Are these strings integers?\")\n    v := \"1\"\n    b := false\n    if _, err := strconv.Atoi(v); err == nil {\n        b = true\n    }\n    fmt.Printf(\"  %3s -> %t\\n\", v, b)\n    i := \"one\"\n    fmt.Printf(\"  %3s -> %t\\n\", i, isInt(i))\n}\n\n\nOutput:\nAre these strings integers?\n    1 -> true\n  one -> false\n\n", "explain": "This uses a library function to meet the task's requirements:\nThis uses both a library function and a custom one but only checks for integerness:\n"}, {"task_name": "Determine if a string is numeric", "task_url": "https://rosettacode.org/wiki/Determine_if_a_string_is_numeric", "task_cat": "Text processing", "lang": "ARM_Assembly", "code": "\nWorks with: as version Raspberry Pi\n/* ARM assembly Raspberry PI  */\n/*  program strNumber.s   */\n\n/* Constantes    */\n.equ STDIN,  0                           @ Linux input console\n.equ STDOUT, 1                           @ Linux output console\n.equ EXIT,   1                           @ Linux syscall\n.equ READ,   3                           @ Linux syscall\n.equ WRITE,  4                           @ Linux syscall\n\n.equ BUFFERSIZE,          100\n\n\n/* Initialized data */\n.data\nszMessNum: .asciz \"Enter number\u00a0: \\n\"\n\nszMessError:            .asciz \"String is not a number\u00a0!!!\\n\"\nszMessInteger:          .asciz \"String is a integer.\\n\"\nszMessFloat:            .asciz \"String is a float.\\n\"\nszMessFloatExp:         .asciz \"String is a float with exposant.\\n\"\nszCarriageReturn:       .asciz \"\\n\"\n\n/* UnInitialized data */\n.bss \nsBuffer:              .skip BUFFERSIZE\n\n/*  code section */\n.text\n.global main \nmain: \n\nloop:\n    ldr r0,iAdrszMessNum\n    bl affichageMess\n    mov r0,#STDIN                               @ Linux input console\n    ldr r1,iAdrsBuffer                          @ buffer address \n    mov r2,#BUFFERSIZE                          @ buffer size \n    mov r7, #READ                               @ request to read datas\n    swi 0                                       @ call system\n    ldr r1,iAdrsBuffer                          @ buffer address \n    mov r2,#0                                   @ end of string\n    sub r0,#1                                   @ replace character 0xA\n    strb r2,[r1,r0]                             @ store byte at the end of input string (r0 contains number of characters)\n    ldr r0,iAdrsBuffer\n    bl controlNumber                            @ call routine\n    cmp r0,#0\n    bne 1f\n    ldr r0,iAdrszMessError                      @ not a number\n    bl affichageMess\n    b 5f\n1:\n    cmp r0,#1\n    bne 2f\n    ldr r0,iAdrszMessInteger                    @ integer\n    bl affichageMess\n    b 5f\n2:\n    cmp r0,#2\n    bne 3f\n    ldr r0,iAdrszMessFloat                      @ float\n    bl affichageMess\n    b 5f\n3:\n    cmp r0,#3\n    bne 5f\n    ldr r0,iAdrszMessFloatExp                   @ float with exposant\n    bl affichageMess\n5:\n    b loop\n\n100:                                            @ standard end of the program\n    mov r0, #0                                  @ return code\n    mov r7, #EXIT                               @ request to exit program\n    svc 0                                       @ perform system call\niAdrszMessNum:            .int szMessNum\niAdrszMessError:          .int szMessError\niAdrszMessInteger:        .int szMessInteger\niAdrszMessFloat:          .int szMessFloat\niAdrszMessFloatExp:       .int szMessFloatExp\niAdrszCarriageReturn:     .int szCarriageReturn\niAdrsBuffer:              .int sBuffer\n/******************************************************************/\n/*     control if string is number                          */ \n/******************************************************************/\n/* r0 contains the address of the string */\n/* r0 return 0 if not a number       */\n/* r0 return 1 if integer   eq 12345 or -12345      */\n/* r0 return 2 if float     eq 123.45 or 123,45  or -123,45     */\n/* r0 return 3 if float with exposant  eq 123.45E30 or -123,45E-30        */\ncontrolNumber:\n    push {r1-r4,lr}                       @ save  registers \n    mov r1,#0\n    mov r3,#0          @ point counter \n1:\n    ldrb r2,[r0,r1]\n    cmp r2,#0\n    beq 5f\n    cmp r2,#' '\n    addeq r1,#1\n    beq   1b\n    cmp r2,#'-'                    @ negative\u00a0?\n    addeq r1,#1\n    beq 2f\n    cmp r2,#'+'                    @ positive\u00a0?\n    addeq r1,#1\n2:\n    ldrb r2,[r0,r1]                @ control space\n    cmp r2,#0                      @ end\u00a0?\n    beq 5f\n    cmp r2,#' '\n    addeq r1,#1\n    beq 2b\n3:\n    ldrb r2,[r0,r1]\n    cmp r2,#0                 @ end\u00a0?\n    beq 10f\n    cmp r2,#'E'               @ exposant\u00a0?\n    beq 6f\n    cmp r2,#'e'               @ exposant\u00a0?\n    beq 6f\n    cmp r2,#'.'               @ point\u00a0?\n    addeq r3,#1               @ yes increment counter\n    addeq r1,#1\n    beq 3b\n    cmp r2,#','               @ comma\u00a0?\n    addeq r3,#1               @ yes increment counter\n    addeq r1,#1\n    beq 3b\n    cmp r2,#'0'               @ control digit < 0\n    blt 5f\n    cmp r2,#'9'               @ control digit > 0\n    bgt 5f\n    add r1,#1                 @ no error loop digit\n    b 3b\n5:                            @ error detected\n    mov r0,#0\n    b 100f\n6:    @ float with exposant\n    add r1,#1\n    ldrb r2,[r0,r1]\n    cmp r2,#0             @ end\u00a0?\n    moveq r0,#0           @ error\n    beq 100f\n    cmp r2,#'-'           @ negative exposant\u00a0?\n    addeq r1,#1\n    mov r4,#0             @ nombre de chiffres \n7:\n    ldrb r2,[r0,r1]\n    cmp r2,#0             @ end\u00a0?\n    beq 9f\n    cmp r2,#'0'           @ control digit < 0\n    blt 8f\n    cmp r2,#'9'           @ control digit > 0\n    bgt 8f\n    add r1,#1\n    add r4,#1             @ counter digit\n    b 7b\n8:\n    mov r0,#0\n    b 100f\n9:\n    cmp r4,#0             @ number digit exposant = 0 -> error \n    moveq r0,#0           @ erreur\n    beq 100f\n    cmp r4,#2             @ number digit exposant > 2 -> error \n    movgt r0,#0           @ error\n    bgt 100f\n    mov r0,#3             @ valid float with exposant\n    b 100f\n10:\n    cmp r3,#0\n    moveq r0,#1           @ valid integer\n    beq 100f\n    cmp r3,#1             @ number of point or comma = 1\u00a0?\n    moveq r0,#2           @ valid float\n    movgt r0,#0           @ error\n100:\n    pop {r1-r4,lr}                         @ restaur des  2 registres\n    bx lr                                        @ return\n/******************************************************************/\n/*     display text with size calculation                         */ \n/******************************************************************/\n/* r0 contains the address of the message */\naffichageMess:\n    push {r0,r1,r2,r7,lr}                       @ save  registers \n    mov r2,#0                                   @ counter length */\n1:                                              @ loop length calculation\n    ldrb r1,[r0,r2]                             @ read octet start position + index \n    cmp r1,#0                                   @ if 0 its over\n    addne r2,r2,#1                              @ else add 1 in the length\n    bne 1b                                      @ and loop \n                                                @ so here r2 contains the length of the message \n    mov r1,r0                                   @ address message in r1 \n    mov r0,#STDOUT                              @ code to write to the standard output Linux\n    mov r7, #WRITE                              @ code call system \"write\" \n    svc #0                                      @ call system\n    pop {r0,r1,r2,r7,lr}                        @ restaur registers\n    bx lr                                       @ return\n", "explain": ""}, {"task_name": "Determine if a string is numeric", "task_url": "https://rosettacode.org/wiki/Determine_if_a_string_is_numeric", "task_cat": "Text processing", "lang": "MIPS_Assembly", "code": "\n# $a0 char val\n# $a1 address pointer\n# $a2 PERIOD_HIT_FLAG\n# $a3 HAS_DIGITS_FLAG\n\n.data \n\t\t\t### CHANGE THIS STRING TO TEST DIFFERENT ONES... ###\n\tstring: .asciiz \"-.1236\"  \n\ts_false: .asciiz \"False\"\n\ts_true: .asciiz \"True\"\n.text\nmain:\n\tset_up: #test for 0th char == 45 or 46 or 48...57\n\t\tla $a1,string\n\t\tlb $a0,($a1)\n\t\tbeq $a0,45,loop # == '-'\n\t\tbeq $a0,46,loop # == '.'\n\t\tblt $a0,48,exit_false # isn't below the ascii range for chars '0'...'9'\n\t\tbgt $a0,57,exit_false # isn't above the ascii range for chars '0'...'9'\n\tloop:\n\t\taddi $a1,$a1,1\n\t\tlb $a0,($a1)\n\t\tbeqz $a0,exit_true # test for \\0 null char\n\t\tbeq $a0,46,period_test #test for a duplicate period\n\t\tblt $a0,48,exit_false  #test for \n\t\tbgt $a0,57,exit_false\n\t\tla $a3,1 #set the HAS_DIGITS flag. This line is only reached because the\n\t\t\t #    tests for period and - both jump back to start. \n\t\tj loop\n\t\nexit_true:\n\tbeqz $a3,exit_false\n\tla $a0,s_true\n\tla $v0,4\n\tsyscall\n\n\tli $v0,10\n\tsyscall\t\n\nexit_false:\n\tla $a0,s_false\n\tla $v0,4\n\tsyscall\n\t\n\tli $v0,10\n\tsyscall\n\t\nperiod_test:\n\tbeq $a2,1,exit_false\n\tli $a2,1\n\tj loop\n", "explain": ""}, {"task_name": "Determine if a string is numeric", "task_url": "https://rosettacode.org/wiki/Determine_if_a_string_is_numeric", "task_cat": "Text processing", "lang": "Delphi", "code": "\n\nfunction IsNumericString(const inStr: string): Boolean;\nvar\n  i: extended;\nbegin\n  Result := TryStrToFloat(inStr,i);\nend;\n\n\nprogram isNumeric;\n\n{$APPTYPE CONSOLE}\n\nuses\n  Classes,\n  SysUtils;\n\nfunction IsNumericString(const inStr: string): Boolean;\nvar\n  i: extended;\nbegin\n  Result := TryStrToFloat(inStr,i);\nend;\n\n\n{ Test function }\nvar\n  s: string;\n  c: Integer;\n\nconst\n  MAX_TRIES = 10;\n  sPROMPT   = 'Enter a string (or type \"quit\" to exit):';\n  sIS       = ' is numeric';\n  sISNOT    = ' is NOT numeric';\n\nbegin\n  c := 0;\n  s := '';\n  repeat\n    Inc(c);\n    Writeln(sPROMPT);\n    Readln(s);\n    if (s <> '') then\n      begin\n        tmp.Add(s);\n        if IsNumericString(s) then\n          begin\n            Writeln(s+sIS);\n          end\n          else\n          begin\n            Writeln(s+sISNOT);\n          end;\n        Writeln('');\n      end;\n  until\n    (c >= MAX_TRIES) or (LowerCase(s) = 'quit');\n\nend.\n\n\nOutput: Example summarised\n\n123 is numeric\n-123.456 is numeric\n-123.-456 is NOT numeric\n.345 is numeric\nm1k3 is NOT numeric\n\n", "explain": "This simple function is a wrapper around a built-in Delphi function\nThis console application tests the function:\n"}, {"task_name": "Determine if a string is numeric", "task_url": "https://rosettacode.org/wiki/Determine_if_a_string_is_numeric", "task_cat": "Text processing", "lang": "Ruby", "code": "\ndef is_numeric?(s)\n  begin\n    Float(s)\n  rescue\n    false # not numeric\n  else\n    true # numeric\n  end\nend\n\ndef is_numeric?(s)\n   \u00a0!!Float(s) rescue false\nend\n\ndef is_numeric?(s)\n   \u00a0!!Float(s, exception: false)\nend\n\nstrings = %w(0 0.0 -123 abc 0x10 0xABC 123a -123e3 0.1E-5 50e)\nstrings.each do |str|\n  puts \"%9p => %s\"\u00a0% [str, is_numeric?(str)]\nend\n\nOutput:\n      \"0\" => true\n    \"0.0\" => true\n   \"-123\" => true\n    \"abc\" => false\n   \"0x10\" => true\n  \"0xABC\" => true\n   \"123a\" => false\n \"-123e3\" => true\n \"0.1E-5\" => true\n    \"50e\" => false\n\n", "explain": "or more compact:\nNB! Since Ruby 2.6 you no longer need `rescue`:\nAdding `exception: false` will make it return `nil` instead.\nsample\n"}, {"task_name": "Determine if a string is numeric", "task_url": "https://rosettacode.org/wiki/Determine_if_a_string_is_numeric", "task_cat": "Text processing", "lang": "Rust", "code": "\n// This function is not limited to just numeric types but rather anything that implements the FromStr trait.\nfn parsable<T: FromStr>(s: &str) -> bool {\n    s.parse::<T>().is_ok()\n}\n", "explain": ""}, {"task_name": "Determine if a string is numeric", "task_url": "https://rosettacode.org/wiki/Determine_if_a_string_is_numeric", "task_cat": "Text processing", "lang": "Swift", "code": "\nWorks with: Swift version 2.x+\nfunc isNumeric(a: String) -> Bool {\n  return Double(a)\u00a0!= nil\n}\nWorks with: Swift version 1.x\n\nfunc isNumeric(a: String) -> Bool {\n  return a.toInt()\u00a0!= nil\n}\n", "explain": "This one only checks whether it is an integer:\n"}, {"task_name": "Determine if a string is numeric", "task_url": "https://rosettacode.org/wiki/Determine_if_a_string_is_numeric", "task_cat": "Text processing", "lang": "R", "code": "\n> strings <- c(\"152\", \"-3.1415926\", \"Foo123\")\n> suppressWarnings(!is.na(as.numeric(strings)))\n[1]  TRUE  TRUE FALSE\n", "explain": ""}, {"task_name": "Determine if a string is numeric", "task_url": "https://rosettacode.org/wiki/Determine_if_a_string_is_numeric", "task_cat": "Text processing", "lang": "COBOL", "code": "\nIntrinsic Functions[edit]\n\n        program-id. is-numeric.\n        procedure division.\n        display function test-numval-f(\"abc\") end-display\n        display function test-numval-f(\"-123.01E+3\") end-display\n        if function test-numval-f(\"+123.123\") equal zero then\n            display \"is numeric\" end-display\n        else\n            display \"failed numval-f test\" end-display\n        end-if\n        goback.\n\nImplementation[edit]\nWorks with: OpenCOBOL\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. Is-Numeric.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01  Numeric-Chars      PIC X(10) VALUE \"0123456789\".\n       \n       01  Success            CONSTANT 0.\n       01  Failure            CONSTANT 128.\n\n       LOCAL-STORAGE SECTION.\n       01  I                  PIC 99.\n\n       01  Num-Decimal-Points PIC 99.\n       01  Num-Valid-Chars    PIC 99.\n\n       LINKAGE SECTION.\n       01  Str                PIC X(30). \n\n       PROCEDURE DIVISION USING Str.\n           IF Str = SPACES\n               MOVE Failure TO Return-Code\n               GOBACK\n           END-IF\n\n           MOVE FUNCTION TRIM(Str) TO Str\n\n           INSPECT Str TALLYING Num-Decimal-Points FOR ALL \".\"\n           IF Num-Decimal-Points > 1\n               MOVE Failure TO Return-Code\n               GOBACK\n           ELSE\n               ADD Num-Decimal-Points TO Num-Valid-Chars\n           END-IF\n\n           IF Str (1:1) = \"-\" OR \"+\"\n               ADD 1 TO Num-Valid-Chars\n           END-IF\n           \n           PERFORM VARYING I FROM 1 BY 1 UNTIL I > 10\n               INSPECT Str TALLYING Num-Valid-Chars\n                   FOR ALL Numeric-Chars (I:1) BEFORE SPACE\n           END-PERFORM\n\n           INSPECT Str TALLYING Num-Valid-Chars FOR TRAILING SPACES\n\n           IF Num-Valid-Chars = FUNCTION LENGTH(Str) \n               MOVE Success TO Return-Code\n           ELSE\n               MOVE Failure TO Return-Code\n           END-IF\n\n           GOBACK\n           .\n\n", "explain": "COBOL has the intrinsic functions TEST-NUMVAL and TEST-NUMVAL-C to check if a string is numeric (TEST-NUMVAL-C is used to check if it is also a monetary string). Implementations supporting the 20XX draft standard can also use TEST-NUMVAL-F for floating-point numbers. They return 0 if the string is valid, or the position of the first incorrect character.\n"}, {"task_name": "Determine if a string is numeric", "task_url": "https://rosettacode.org/wiki/Determine_if_a_string_is_numeric", "task_cat": "Text processing", "lang": "Ada", "code": "\n\npackage Numeric_Tests is\n   function Is_Numeric (Item : in String) return Boolean;\nend Numeric_Tests;\n\n\npackage body Numeric_Tests is\n   function Is_Numeric (Item : in String) return Boolean is\n      Dummy : Float;\n   begin\n      Dummy := Float'Value (Item);\n      return True;\n   exception\n      when others =>\n         return False;\n   end Is_Numeric;\nend Numeric_Tests;\n\n\nwith Ada.Text_Io; use Ada.Text_Io;\nwith Numeric_Tests; use Numeric_Tests; \n\nprocedure Is_Numeric_Test is\n   S1 : String := \"152\";\n   S2 : String := \"-3.1415926\";\n   S3 : String := \"Foo123\";\nbegin\n   Put_Line(S1 & \" results in \" & Boolean'Image(Is_Numeric(S1)));\n   Put_Line(S2 & \" results in \" & Boolean'Image(Is_Numeric(S2)));\n   Put_Line(S3 & \" results in \" & Boolean'Image(Is_Numeric(S3)));\nend Is_Numeric_Test;\n\n\nOutput:\n 152 results in TRUE\n -3.1415926 results in TRUE\n Foo123 results in FALSE\n\n", "explain": "The first file is the package interface containing the declaration of the Is_Numeric function.\nThe second file is the package body containing the implementation of the Is_Numeric function.\nThe last file shows how the Is_Numeric function can be called.\n"}, {"task_name": "Determine if a string is numeric", "task_url": "https://rosettacode.org/wiki/Determine_if_a_string_is_numeric", "task_cat": "Text processing", "lang": "Julia", "code": "\n\nusing Printf\n\nisnumber(s::AbstractString) = tryparse(Float64, s) isa Number\n\ntests = [\"1\", \"-121\", \"one\", \"pi\", \"1 + 1\", \"NaN\", \"1234567890123456789\", \"1234567890123456789123456789\",\n        \"1234567890123456789123456789.0\", \"1.3\", \"1.4e10\", \"Inf\", \"1//2\", \"1.0 + 1.0im\"]\n\nfor t in tests\n    fl = isnumber(t) ? \"is\" : \"is not\"\n    @printf(\"%35s %s a direct numeric literal.\\n\", t, fl)\nend\n\n\nOutput:\n                                  1 is a direct numeric literal.\n                               -121 is a direct numeric literal.\n                                one is not a direct numeric literal.\n                                 pi is not a direct numeric literal.\n                              1 + 1 is not a direct numeric literal.\n                                NaN is a direct numeric literal.\n                1234567890123456789 is a direct numeric literal.\n       1234567890123456789123456789 is a direct numeric literal.\n     1234567890123456789123456789.0 is a direct numeric literal.\n                                1.3 is a direct numeric literal.\n                             1.4e10 is a direct numeric literal.\n                                Inf is a direct numeric literal.\n                               1//2 is not a direct numeric literal.\n                        1.0 + 1.0im is not a direct numeric literal.\n\n\n", "explain": "The function isnumber tests for strings that parse directly to numbers.  This test excludes symbols, such as \u03c0 and 1 + 1, that evaluate to numbers as well as certain elaborate numbers (large integers, rationals and complex numbers) whose literals parse to expressions that must be evaluated to yield numbers. \n"}, {"task_name": "Determine if a string is numeric", "task_url": "https://rosettacode.org/wiki/Determine_if_a_string_is_numeric", "task_cat": "Text processing", "lang": "Kotlin", "code": "\n// version 1.1\n\nfun isNumeric(input: String): Boolean =\n    try {\n        input.toDouble()\n        true\n    } catch(e: NumberFormatException) {\n        false\n    }\n\nfun main(args: Array<String>) {\n    val inputs = arrayOf(\"152\", \"-3.1415926\", \"Foo123\", \"-0\", \"456bar\", \"1.0E10\")\n    for (input in inputs) println(\"$input is ${if (isNumeric(input)) \"numeric\" else \"not numeric\"}\")\n}\n\n\nOutput:\n152 is numeric\n-3.1415926 is numeric\nFoo123 is not numeric\n-0 is numeric\n456bar is not numeric\n1.0E10 is numeric\n\n", "explain": ""}, {"task_name": "Determine if a string is numeric", "task_url": "https://rosettacode.org/wiki/Determine_if_a_string_is_numeric", "task_cat": "Text processing", "lang": "Perl", "code": "\nWorks with: Perl version 5.8\nuse Scalar::Util qw(looks_like_number);\nprint looks_like_number($str) ? \"numeric\" : \"not numeric\\n\";\n\nWorks with: Perl version 5.8\n\nif (/\\D/)            { print \"has nondigits\\n\" }\nif (/^\\d+\\z/)         { print \"is a whole number\\n\" }\nif (/^-?\\d+\\z/)       { print \"is an integer\\n\" }\nif (/^[+-]?\\d+\\z/)    { print \"is a +/- integer\\n\" }\nif (/^-?\\d+\\.?\\d*\\z/) { print \"is a real number\\n\" }\nif (/^-?(?:\\d+(?:\\.\\d*)?&\\.\\d+)\\z/) { print \"is a decimal number\\n\" }\nif (/^([+-]?)(?=\\d&\\.\\d)\\d*(\\.\\d*)?([Ee]([+-]?\\d+))?\\z/)\n                     { print \"a C float\\n\" }\n\n\nsub getnum {\n    use POSIX;\n    my $str = shift;\n    $str =~ s/^\\s+//;\n    $str =~ s/\\s+$//;\n    $! = 0;\n    my($num, $unparsed) = strtod($str);\n    if (($str eq '') && ($unparsed != 0) && $!) {\n        return undef;\n    } else {\n        return $num;\n    }\n}\n\nsub is_numeric { defined getnum($_[0]) }\n\n\n", "explain": "Quoting from perlfaq4:\nHow do I determine whether a scalar is a number/whole/integer/float?\nAssuming that you don't care about IEEE notations like \"NaN\" or \"Infinity\", you probably just want to use a regular expression.\nThere are also some commonly used modules for the task. Scalar::Util (distributed with 5.8) provides access to Perl's internal function \"looks_like_number\" for determining whether a variable looks like a number. Data::Types exports functions that validate data types using both the above and other regular expressions. Thirdly, there is \"Regexp::Common\" which has regular expressions to match various types of numbers. Those three modules are available from the CPAN.\nIf you're on a POSIX system, Perl supports the \"POSIX::strtod\" function. Its semantics are somewhat cumbersome, so here's a \"getnum\" wrapper function for more convenient access. This function takes a string and returns the number it found, or \"undef\" for input that isn't a C float. The \"is_numeric\" function is a front end to \"getnum\" if you just want to say, Is this a float?\nOr you could check out the String::Scanf module on the CPAN instead. The POSIX module (part of the standard Perl distribution) provides the \"strtod\" and \"strtol\" for converting strings to double and longs, respectively.\n"}, {"task_name": "Determine if a string is numeric", "task_url": "https://rosettacode.org/wiki/Determine_if_a_string_is_numeric", "task_cat": "Text processing", "lang": "Objective-C", "code": "\nWorks with: GCC\nWorks with: OpenStep\nWorks with: GNUstep\n\nif( [[NSScanner scannerWithString:@\"-123.4e5\"] scanFloat:NULL] )\n\tNSLog( @\"\\\"-123.4e5\\\" is numeric\" );\nelse\n\tNSLog( @\"\\\"-123.4e5\\\" is not numeric\" );\nif( [[NSScanner scannerWithString:@\"Not a number\"] scanFloat:NULL] )\n\tNSLog( @\"\\\"Not a number\\\" is numeric\" );\nelse\n\tNSLog( @\"\\\"Not a number\\\" is not numeric\" );\n// prints: \"-123.4e5\" is numeric\n// prints: \"Not a number\" is not numeric\n\n\nBOOL isNumeric(NSString *s)\n{\n   NSScanner *sc = [NSScanner scannerWithString: s];\n   if ( [sc scanFloat:NULL] )\n   {\n      return [sc isAtEnd];\n   }\n   return NO;\n}\n\n\nBOOL isNumericI(NSString *s)\n{\n   NSUInteger len = [s length];\n   NSUInteger i;\n   BOOL status = NO;\n   \n   for(i=0; i < len; i++)\n   {\n       unichar singlechar = [s characterAtIndex: i];\n       if ( (singlechar == ' ') && (!status) )\n       {\n         continue;\n       }\n       if ( ( singlechar == '+' ||\n              singlechar == '-' ) && (!status) ) { status=YES; continue; }\n       if ( ( singlechar >= '0' ) &&\n            ( singlechar <= '9' ) )\n       {\n          status = YES;\n       } else {\n          return NO;\n       }\n   }\n   return (i == len) && status;\n}\n\n\n", "explain": "The NSScanner class supports scanning of strings for various types. The scanFloat method will return YES if the string is numeric, even if the number is actually too long to be contained by the precision of a float.\nThe following function can be used to check if a string is numeric \"totally\"; this is achieved by checking if the scanner reached the end of the string after the float is parsed.\nIf we want to scan by hand, we could use a function like the following, that checks if a number is an integer positive or negative number; spaces can appear at the beginning, but not after the number, and\nthe '+' or '-' can appear only attached to the number (\"+123\" returns YES, but \"+ 123\" returns NO).\nHere we assumed that in the internal encoding of a string (that should be Unicode), 1 comes after 0, 2 after 1 and so on until 9. Another way could be to get the C String from the NSString object, and then the parsing would be the same of the one we could do in standard C, so this path is not given.\n"}, {"task_name": "Determine if a string is numeric", "task_url": "https://rosettacode.org/wiki/Determine_if_a_string_is_numeric", "task_cat": "Text processing", "lang": "Prolog", "code": "\nWorks with: SWI-Prolog version 7\n\nnumeric_string(String)\u00a0:-\n    atom_string(Atom, String),\n    atom_number(Atom, _).\n\ntest_strings(Strings)\u00a0:-\n    forall( member(String, Strings),\n            ( ( numeric_string(String)\n              ->  Result = a\n             \u00a0;   Result = 'not a' ),\n              format('~w is ~w number.~n', [String, Result])\n            )\n          ).\n\n?- test_strings([\"123\", \"0.123\", \"-123.1\", \"NotNum\", \"1.\"]).\n123 is a number.\n0.123 is a number.\n-123.1 is a number.\nNotNum is not a number.\n1. is not a number.\ntrue.\n", "explain": "The code:\nA predicate to test the code:\nExample of using the test predicate:\n"}, {"task_name": "Determine if a string is numeric", "task_url": "https://rosettacode.org/wiki/Determine_if_a_string_is_numeric", "task_cat": "Text processing", "lang": "Lua", "code": "\n\nif tonumber(a) ~= nil then\n   --it's a number\nend;\n\n", "explain": "This will also accept strings like \"0xFF\" or \"314.16e-2\" as numbers.\n"}, {"task_name": "Determine if a string is numeric", "task_url": "https://rosettacode.org/wiki/Determine_if_a_string_is_numeric", "task_cat": "Text processing", "lang": "Scala", "code": "\nimport scala.util.control.Exception.allCatch\n\ndef isNumber(s: String): Boolean = (allCatch opt s.toDouble).isDefined\ndef isNumeric(input: String): Boolean = input.forall(_.isDigit)\n\ndef isNumeric2(str: String): Boolean = {\n  str.matches(s\"\"\"[+-]?((\\d+(e\\d+)?[lL]?)|(((\\d+(\\.\\d*)?)|(\\.\\d+))(e\\d+)?[fF]?))\"\"\")\n}\n\ndef isNumeric(str: String): Boolean = {\n  !throwsNumberFormatException(str.toLong) || !throwsNumberFormatException(str.toDouble)\n}\n  \ndef throwsNumberFormatException(f: => Any): Boolean = {\n  try { f; false } catch { case e: NumberFormatException => true }\n}\n", "explain": "Or a more complete version, using a complex regular expression:\nOr using the built-in number parsing and catching exceptions:\n"}, {"task_name": "Determine if a string is numeric", "task_url": "https://rosettacode.org/wiki/Determine_if_a_string_is_numeric", "task_cat": "Text processing", "lang": "D", "code": "\nStandard Version[edit]\n\nimport std.stdio, std.string, std.array;\n\nvoid main() {\n    foreach (const s; [\"12\", \" 12\\t\", \"hello12\", \"-12\", \"02\",\n                 \"0-12\", \"+12\", \"1.5\", \"1,000\", \"1_000\",\n                 \"0x10\", \"0b10101111_11110000_11110000_00110011\",\n                 \"-0b10101\", \"0x10.5\"])\n        writefln(`isNumeric(\"%s\"): %s`, s, s.strip().isNumeric(true));\n}\n\n\nOutput:\nisNumeric(\"12\"): true\nisNumeric(\" 12  \"): true\nisNumeric(\"hello12\"): false\nisNumeric(\"-12\"): true\nisNumeric(\"02\"): true\nisNumeric(\"0-12\"): false\nisNumeric(\"+12\"): true\nisNumeric(\"1.5\"): true\nisNumeric(\"1,000\"): true\nisNumeric(\"1_000\"): true\nisNumeric(\"0x10\"): false\nisNumeric(\"0b10101111_11110000_11110000_00110011\"): false\nisNumeric(\"-0b10101\"): false\nisNumeric(\"0x10.5\"): false\nAn Implementation[edit]\nimport std.stdio, std.string, std.conv, std.array, std.exception;\n\nbool isNumeric(in string s) pure {\n    immutable s2 = s.strip.toLower.replace(\"_\", \"\").replace(\",\", \"\");\n    try {\n        s2.to!real;\n    } catch (ConvException e) {\n        if (s2.startsWith(\"0x\"))\n            return !s2[2 .. $].to!ulong(16)\n                    .collectException!ConvException;\n        else if (s2.startsWith(\"0b\"))\n            return !s2[2 .. $].to!ulong(2)\n                    .collectException!ConvException;\n        else\n            return false;\n    }\n\n    return true;\n}\n\nvoid main() {\n    foreach (immutable s; [\"12\", \" 12\\t\", \"hello12\", \"-12\", \"02\",\n                 \"0-12\", \"+12\", \"1.5\", \"1,000\", \"1_000\",\n                 \"0x10\", \"0b10101111_11110000_11110000_00110011\",\n                 \"-0b10101\", \"0x10.5\"])\n        writefln(`isNumeric(\"%s\"): %s`, s, s.isNumeric);\n}\n\n\nOutput:\nisNumeric(\"12\"): true\nisNumeric(\" 12  \"): true\nisNumeric(\"hello12\"): false\nisNumeric(\"-12\"): true\nisNumeric(\"02\"): true\nisNumeric(\"0-12\"): false\nisNumeric(\"+12\"): true\nisNumeric(\"1.5\"): true\nisNumeric(\"1,000\"): true\nisNumeric(\"1_000\"): true\nisNumeric(\"0x10\"): true\nisNumeric(\"0b10101111_11110000_11110000_00110011\"): true\nisNumeric(\"-0b10101\"): false\nisNumeric(\"0x10.5\"): false\n", "explain": "Using the standard Phobos function (currently binary and hex literals are not recognized):\n"}, {"task_name": "Determine if a string is numeric", "task_url": "https://rosettacode.org/wiki/Determine_if_a_string_is_numeric", "task_cat": "Text processing", "lang": "Haskell", "code": "\n\nisInteger s = case reads s :: [(Integer, String)] of\n  [(_, \"\")] -> True\n  _         -> False\n\nisDouble s = case reads s :: [(Double, String)] of\n  [(_, \"\")] -> True\n  _         -> False\n\nisNumeric :: String -> Bool\nisNumeric s = isInteger s || isDouble s\n\n\nareDigits = all isDigit\nisDigit  selects ASCII digits i.e. '0'..'9'\nisOctDigit selects '0'..'7'\nisHexDigit selects '0'..'9','A'..'F','a'..'f'\n\n\n", "explain": "This function is not particularly useful in a statically typed language. Instead, one would just attempt to convert the string\nto the desired type with read or reads, and handle parsing failure appropriately.\nThe task doesn't define which strings are considered \"numeric\", so we do Integers and Doubles, which should catch the most common cases (including hexadecimal 0x notation):\nOne can easily add isRational, isComplex etc. following the same pattern.\nAnother way would be to use the Data.Char module, allowing code such as:\nso read s::Int (for instance) could be reliably used if string s passed these tests.\n"}, {"task_name": "Determine if a string is numeric", "task_url": "https://rosettacode.org/wiki/Determine_if_a_string_is_numeric", "task_cat": "Text processing", "lang": "PL/SQL", "code": "\nFUNCTION IsNumeric( value IN VARCHAR2 )\nRETURN BOOLEAN\nIS\n  help NUMBER;\nBEGIN\n  help := to_number( value );\n  return( TRUE );\nEXCEPTION\n  WHEN others THEN\n    return( FALSE );\nEND;\n\nValue VARCHAR2( 10 ) := '123';\nIF( IsNumeric( Value ) )\n  THEN\n    NULL;\nEND  IF;\n\n", "explain": ""}, {"task_name": "Determine if a string is numeric", "task_url": "https://rosettacode.org/wiki/Determine_if_a_string_is_numeric", "task_cat": "Text processing", "lang": "VBScript", "code": "\nIsNumeric(Expr)\n\n", "explain": "Returns a True if numeric and a false if not.\n"}, {"task_name": "Determine if a string is numeric", "task_url": "https://rosettacode.org/wiki/Determine_if_a_string_is_numeric", "task_cat": "Text processing", "lang": "Scheme", "code": "\n\n(define (numeric? s) (string->number s))\n", "explain": "string->number returns #f when the string is not numeric and otherwise the number, which is non-#f and therefore true.\n"}, {"task_name": "Determine if a string is numeric", "task_url": "https://rosettacode.org/wiki/Determine_if_a_string_is_numeric", "task_cat": "Text processing", "lang": "Apex", "code": "\n\nString numericString = '123456';\nString partlyNumericString = '123DMS';\nString decimalString = '123.456';\n\nSystem.debug(numericString.isNumeric()); // this will be true\nSystem.debug(partlyNumericString.isNumeric()); // this will be false\nSystem.debug(decimalString.isNumeric()); // this will be false\nSystem.debug(decimalString.remove('.').isNumeric()); // this will be true\n", "explain": "The isNumeric() method is part of the Apex String Class. Note that it will return false if applied to a decimal, because the '.' character is not a Unicode digit.\n"}, {"task_name": "Determine if a string is numeric", "task_url": "https://rosettacode.org/wiki/Determine_if_a_string_is_numeric", "task_cat": "Text processing", "lang": "PowerShell", "code": "\n\nfunction isNumeric ($x) {\n    try {\n        0 + $x | Out-Null\n        return $true\n    } catch {\n        return $false\n    }\n}\n\nfunction isNumeric ($x) {\n    $x2 = 0\n    $isNum = [System.Int32]::TryParse($x, [ref]$x2)\n    return $isNum\n}\n", "explain": "Note: PowerShell 1.0 does not support 'try'\nTHis simply tries arithmetic with the argument and if that fails, false is returned.\nBut this one doesn't work for strings like \"8.\" though a . is appended it returns true!\nAlternatively, you can use the static System.Int32.TryParse() method in the .NET framework.\n"}, {"task_name": "Determine if a string is numeric", "task_url": "https://rosettacode.org/wiki/Determine_if_a_string_is_numeric", "task_cat": "Text processing", "lang": "Logo", "code": "\nshow number? \"-1.23   \u00a0; true\n", "explain": ""}, {"task_name": "Determine if a string is numeric", "task_url": "https://rosettacode.org/wiki/Determine_if_a_string_is_numeric", "task_cat": "Text processing", "lang": "ColdFusion", "code": "\n\n<cfset TestValue=34>\n  TestValue: <cfoutput>#TestValue#</cfoutput><br>\n<cfif isNumeric(TestValue)>\n  is Numeric.\n<cfelse>\n  is NOT Numeric.\n</cfif>\n\n<cfset TestValue=\"NAS\">\n  TestValue: <cfoutput>#TestValue#</cfoutput><br>\n<cfif isNumeric(TestValue)>\n  is Numeric.\n<cfelse>\n  is NOT Numeric.\n</cfif>\n\nAlternative solution[edit]\n<cfoutput>#isNumeric(42)#</cfoutput>\n\n", "explain": "Adobe's ColdFusion\n"}, {"task_name": "Determine if a string is numeric", "task_url": "https://rosettacode.org/wiki/Determine_if_a_string_is_numeric", "task_cat": "Text processing", "lang": "F#", "code": "\nlet is_numeric a = fst (System.Double.TryParse a)\n\n", "explain": ""}, {"task_name": "Determine if a string is numeric", "task_url": "https://rosettacode.org/wiki/Determine_if_a_string_is_numeric", "task_cat": "Text processing", "lang": "Groovy", "code": "\n\ndef isNumeric = {\n    def formatter = java.text.NumberFormat.instance\n    def pos = [0] as java.text.ParsePosition\n    formatter.parse(it, pos)\n    \n    // if parse position index has moved to end of string\n    // them the whole string was numeric\n    pos.index == it.size()\n}\n\n\nprintln isNumeric('1')\nprintln isNumeric('-.555')\nprintln isNumeric('1,000,000')\nprintln isNumeric(' 1 1 1 1 ')\nprintln isNumeric('abcdef')\n\n\nOutput:\ntrue\ntrue\ntrue\nfalse\nfalse\n", "explain": "Use the positional parser in java.text.NumberFormat. If, after parsing, the parse position is at the end of the string, we can deduce that the entire string was a valid number.\nTest Program:\n"}, {"task_name": "Determine if a string is numeric", "task_url": "https://rosettacode.org/wiki/Determine_if_a_string_is_numeric", "task_cat": "Text processing", "lang": "AWK", "code": "\n\n$ awk 'function isnum(x){return(x==x+0)} BEGIN{print isnum(\"hello\"),isnum(\"-42\")}'\n\n\nOutput:\n0 1\n\n", "explain": "The following function uses the fact that non-numeric strings in AWK are treated as having the value 0 when used in arithmetics, but not in comparison:\n"}]