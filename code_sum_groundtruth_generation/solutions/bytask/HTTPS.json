[{"task_name": "HTTPS", "task_url": "https://rosettacode.org/wiki/HTTPS", "task_cat": "Programming environment operations", "lang": "Python", "code": "\n\nimport urllib.request\nprint(urllib.request.urlopen(\"https://sourceforge.net/\").read())\n\n", "explain": "Python's urllib.request library, has support for SSL if the interpreter's underlying httplib libraries were compiled with SSL support.  By default this will be the enabled for default Python installations on most platforms.\n"}, {"task_name": "HTTPS", "task_url": "https://rosettacode.org/wiki/HTTPS", "task_cat": "Programming environment operations", "lang": "C", "code": "\nLibrary: libcurl\n#include <stdio.h>\n#include <stdlib.h>\n#include <curl/curl.h>\nCURL *curl;\nchar buffer[CURL_ERROR_SIZE];\nint main(void) {\n    if ((curl = curl_easy_init()) != NULL) {\n        curl_easy_setopt(curl, CURLOPT_URL, \"https://sourceforge.net/\");\n        curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1);\n        curl_easy_setopt(curl, CURLOPT_ERRORBUFFER, buffer);\n        if (curl_easy_perform(curl) != CURLE_OK) {\n            fprintf(stderr, \"%s\\n\", buffer);\n            return EXIT_FAILURE;\n        }\n        curl_easy_cleanup(curl);\n    }\n    return EXIT_SUCCESS;\n}\n\n", "explain": ""}, {"task_name": "HTTPS", "task_url": "https://rosettacode.org/wiki/HTTPS", "task_cat": "Programming environment operations", "lang": "Java", "code": "\njavax.net.ssl[edit]\n\nURL url = new URL(\"https://sourceforge.net\");\nHttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\nScanner scanner = new Scanner(connection.getInputStream());\n\nwhile (scanner.hasNext()) {\n    System.out.println(scanner.next());\n}\n\njava.net.http[edit]\n\nimport java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.nio.charset.Charset;\n\npublic class Main {\n    public static void main(String[] args) {\n        var request = HttpRequest.newBuilder(URI.create(\"https://sourceforge.net\"))\n                .GET()\n                .build();\n\n        HttpClient.newHttpClient()\n                .sendAsync(request, HttpResponse.BodyHandlers.ofString(Charset.defaultCharset()))\n                .thenApply(HttpResponse::body)\n                .thenAccept(System.out::println)\n                .join();\n    }\n}\n\n", "explain": "Additional certificate information is available through the javax.net.ssl.HttpsURLConnection interface.\nUsing the standard Java 11 HTTP Client\n"}, {"task_name": "HTTPS", "task_url": "https://rosettacode.org/wiki/HTTPS", "task_cat": "Programming environment operations", "lang": "C#", "code": "\nWorks with: C sharp version 3.0\nusing System;\nusing System.Net;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        var client = new WebClient();\n        var data = client.DownloadString(\"https://www.google.com\");\n\n        Console.WriteLine(data);\n    }\n}\n\n\n", "explain": "This does not work for urls requiring a secure (SSL) connection.\n"}, {"task_name": "HTTPS", "task_url": "https://rosettacode.org/wiki/HTTPS", "task_cat": "Programming environment operations", "lang": "JavaScript", "code": "\nBrowser[edit]\nfetch(\"https://sourceforge.net\").then(function (response) {\n    return response.text();\n}).then(function (body) {\n    return body;\n});\n\nNode.js[edit]\nrequire(\"https\").get(\"https://sourceforge.net\", function (resp) {\n    let body = \"\";\n    resp.on(\"data\", function (chunk) {\n        body += chunk;\n    });\n    resp.on(\"end\", function () {\n        console.log(body);\n    });\n}).on(\"error\", function (err) {\n    console.error(\"Error: \" + err.message);\n});\n\n", "explain": ""}, {"task_name": "HTTPS", "task_url": "https://rosettacode.org/wiki/HTTPS", "task_cat": "Programming environment operations", "lang": "Visual_Basic_.NET", "code": "\nImports System.Net\n\nDim client As WebClient = New WebClient()\nDim content As String = client.DownloadString(\"https://sourceforge.net\")\nConsole.WriteLine(content)\n\n", "explain": ""}, {"task_name": "HTTPS", "task_url": "https://rosettacode.org/wiki/HTTPS", "task_cat": "Programming environment operations", "lang": "PHP", "code": "\necho file_get_contents('https://sourceforge.net');\n\n", "explain": ""}, {"task_name": "HTTPS", "task_url": "https://rosettacode.org/wiki/HTTPS", "task_cat": "Programming environment operations", "lang": "Go", "code": "\npackage main\n\nimport (\n    \"io\"\n    \"log\"\n    \"net/http\"\n    \"os\"\n)\n\nfunc main() {\n    r, err := http.Get(\"https://sourceforge.net/\")\n    if err != nil {\n        log.Fatalln(err)\n    }\n    io.Copy(os.Stdout, r.Body)\n}\n\n", "explain": ""}, {"task_name": "HTTPS", "task_url": "https://rosettacode.org/wiki/HTTPS", "task_cat": "Programming environment operations", "lang": "Delphi", "code": "\nLibrary: OpenSSL\nprogram ShowHTTPS;\n\n{$APPTYPE CONSOLE}\n\nuses IdHttp, IdSSLOpenSSL;\n\nvar\n  s: string;\n  lHTTP: TIdHTTP;\nbegin\n  lHTTP := TIdHTTP.Create(nil);\n  try\n    lHTTP.IOHandler := TIdSSLIOHandlerSocketOpenSSL.Create(lHTTP);\n    lHTTP.HandleRedirects := True;\n    s := lHTTP.Get('https://sourceforge.net/');\n    Writeln(s);\n  finally\n    lHTTP.Free;\n  end;\nend.\n\n", "explain": ""}, {"task_name": "HTTPS", "task_url": "https://rosettacode.org/wiki/HTTPS", "task_cat": "Programming environment operations", "lang": "Ruby", "code": "\n\nrequire 'net/https'\nrequire 'uri'\nrequire 'pp'\n\nuri = URI.parse('https://sourceforge.net')\nhttp = Net::HTTP.new(uri.host,uri.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nhttp.start do\n  content = http.get(uri)\n  p [content.code, content.message]\n  pp content.to_hash\n  puts content.body\nend\n\n\n[\"302\", \"Found\"]\n{\"location\"=>[\"http://sourceforge.net/\"],\n \"content-type\"=>[\"text/html; charset=UTF-8\"],\n \"connection\"=>[\"close\"],\n \"server\"=>[\"nginx/0.7.60\"],\n \"date\"=>[\"Sun, 30 Aug 2009 20:20:07 GMT\"],\n \"content-length\"=>[\"229\"],\n \"set-cookie\"=>\n  [\"sf.consume=89f65c6fadd222338b2f3de6f8e8a17b2c8f67c2gAJ9cQEoVQhfZXhwaXJlc3ECY2RhdGV0aW1lCmRhdGV0aW1lCnEDVQoH9gETAw4HAAAAhVJxBFUDX2lkcQVVIDEyOWI2MmVkOWMwMWYxYWZiYzE5Y2JhYzcwZDMxYTE4cQZVDl9hY2Nlc3NlZF90aW1lcQdHQdKmt73UN21VDl9jcmVhdGlvbl90aW1lcQhHQdKmt73UN2V1Lg==; expires=Tue, 19-Jan-2038 03:14:07 GMT; Path=/\"]}\n<html>\n <head>\n  <title>302 Found</title>\n </head>\n <body>\n  <h1>302 Found</h1>\n  The resource was found at <a href=\"http://sourceforge.net/\">http://sourceforge.net/</a>;\nyou should be redirected automatically.\n\n\n </body>\n</html>\n\n", "explain": "This solution doesn't use the open-uri convenience package that the HTTP Request#Ruby solution uses: the Net::HTTP object must be told to use SSL before the session is started.\noutputs\n"}, {"task_name": "HTTPS", "task_url": "https://rosettacode.org/wiki/HTTPS", "task_cat": "Programming environment operations", "lang": "Rust", "code": "\nextern crate reqwest;\n\nfn main() {\n    let response = match reqwest::blocking::get(\"https://sourceforge.net\") {\n        Ok(response) => response,\n        Err(e) => panic!(\"error encountered while making request: {:?}\", e),\n    };\n\n    println!(\"{}\", response.text().unwrap());\n}\n\n\nOutput:\n<!-- Server: sfs-consume-7 -->\n<html class=\"no-js\" lang=\"en\">\n    <head>\n        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\n\n\n        <script>\n    var __gdpr = true;\n    var __ccpa = false;\n...\n\n", "explain": ""}, {"task_name": "HTTPS", "task_url": "https://rosettacode.org/wiki/HTTPS", "task_cat": "Programming environment operations", "lang": "Swift", "code": "\nimport Foundation\n\n// With https\nlet request = NSURLRequest(URL: NSURL(string: \"https://sourceforge.net\")!)\n\nNSURLConnection.sendAsynchronousRequest(request, queue: NSOperationQueue()) {res, data, err in // callback\n    \n    // data is binary\n    if (data != nil) {\n        let string = NSString(data: data!, encoding: NSUTF8StringEncoding)\n        println(string)\n    }\n}\n\nCFRunLoopRun() // dispatch\n\n", "explain": ""}, {"task_name": "HTTPS", "task_url": "https://rosettacode.org/wiki/HTTPS", "task_cat": "Programming environment operations", "lang": "R", "code": "\nLibrary: RCurl\nLibrary: XML\n\nlibrary(RCurl)\nwebpage <- getURL(\"https://sourceforge.net/\", .opts=list(followlocation=TRUE, ssl.verifyhost=FALSE, ssl.verifypeer=FALSE))\n\n\nwp <- readLines(tc <- textConnection(webpage))\nclose(tc)\n\n\npagetree <- htmlTreeParse(wp)\npagetree$children$html\n\n", "explain": "The basic idea is to use getURL (as with HTTP_Request), but with some extra parameters. \nIn this case, the webpage output contains unprocessed characters, e.g. \\\" instead of \" and \\\\ instead of \\, so we need to process the markup.\nFinally, we parse the HTML and find the interesting bit.\n"}, {"task_name": "HTTPS", "task_url": "https://rosettacode.org/wiki/HTTPS", "task_cat": "Programming environment operations", "lang": "Visual_Basic", "code": "\nLibrary: Microsoft.WinHttp\nWorks with: Visual Basic version 5\nWorks with: Visual Basic version 6\nWorks with: VBA version Access 97\nWorks with: VBA version 6.5\nWorks with: VBA version 7.1\nSub Main()\nDim HttpReq As WinHttp.WinHttpRequest\n'  in the \"references\" dialog of the IDE, check\n'  \"Microsoft WinHTTP Services, version 5.1\" (winhttp.dll)\nConst HTTPREQUEST_PROXYSETTING_PROXY        As Long = 2\nConst WINHTTP_FLAG_SECURE_PROTOCOL_TLS1     As Long = &H80&\nConst WINHTTP_FLAG_SECURE_PROTOCOL_TLS1_1   As Long = &H200&\nConst WINHTTP_FLAG_SECURE_PROTOCOL_TLS1_2   As Long = &H800&\n#Const USE_PROXY = 1\n  Set HttpReq = New WinHttp.WinHttpRequest\n  HttpReq.Open \"GET\", \"https://groups.google.com/robots.txt\"\n  HttpReq.Option(WinHttpRequestOption_SecureProtocols) = WINHTTP_FLAG_SECURE_PROTOCOL_TLS1 Or _\n                                                         WINHTTP_FLAG_SECURE_PROTOCOL_TLS1_1 Or _\n                                                         WINHTTP_FLAG_SECURE_PROTOCOL_TLS1_2\n#If USE_PROXY Then\n  HttpReq.SetProxy HTTPREQUEST_PROXYSETTING_PROXY, \"my_proxy:80\"\n#End If\n  HttpReq.SetTimeouts 1000, 1000, 1000, 1000\n  HttpReq.Send\n  Debug.Print HttpReq.ResponseText\nEnd Sub\n\n", "explain": ""}, {"task_name": "HTTPS", "task_url": "https://rosettacode.org/wiki/HTTPS", "task_cat": "Programming environment operations", "lang": "Ada", "code": "\nLibrary: AWS\n\nwith AWS.Client;\nwith AWS.Response;\nwith Ada.Text_IO; use Ada.Text_IO;\nprocedure GetHttps is\nbegin\n   Put_Line (AWS.Response.Message_Body (AWS.Client.Get (\n      URL => \"https://sourceforge.net/\")));\nend GetHttps;\n\n", "explain": "Exactly the same as the HTTP task, assuming you compiled AWS with openssl support.\n"}, {"task_name": "HTTPS", "task_url": "https://rosettacode.org/wiki/HTTPS", "task_cat": "Programming environment operations", "lang": "Julia", "code": "\n# v0.6.0\n\nusing Requests\n\nstr = readstring(get(\"https://sourceforge.net/\"))\n\n", "explain": ""}, {"task_name": "HTTPS", "task_url": "https://rosettacode.org/wiki/HTTPS", "task_cat": "Programming environment operations", "lang": "Kotlin", "code": "\n// version 1.1.2\nimport java.net.URL\nimport javax.net.ssl.HttpsURLConnection\nimport java.io.InputStreamReader\nimport java.util.Scanner\n\nfun main(args: Array<String>) {\n    val url = URL(\"https://en.wikipedia.org/wiki/Main_Page\")\n    val connection = url.openConnection() as HttpsURLConnection\n    val isr = InputStreamReader(connection.inputStream)\n    val sc = Scanner(isr)\n    while (sc.hasNextLine()) println(sc.nextLine())\n    sc.close()\n}\n\n\nimport java.net.URL\n\nfun main(args: Array<String>){\n    println(URL(\"https://sourceforge.net\").readText())\n}\n\n", "explain": "Or simplier, since Kotlin 1.2\n"}, {"task_name": "HTTPS", "task_url": "https://rosettacode.org/wiki/HTTPS", "task_cat": "Programming environment operations", "lang": "Perl", "code": "\nLibrary: LWP\nuse strict;\nuse LWP::UserAgent;\n\nmy $url = 'https://www.rosettacode.org';\nmy $response = LWP::UserAgent->new->get( $url );\n\n$response->is_success or die \"Failed to GET '$url': \", $response->status_line;\n\nprint $response->as_string;\n\n", "explain": ""}, {"task_name": "HTTPS", "task_url": "https://rosettacode.org/wiki/HTTPS", "task_cat": "Programming environment operations", "lang": "Lua", "code": "\nWorks with: Lua version 5.1 - 5.3\nLibrary: lua-http\nlocal request = require('http.request')\nlocal headers, stream = request.new_from_uri(\"https://sourceforge.net/\"):go()\nlocal body = stream:get_body_as_string()\nlocal status = headers:get(':status')\nio.write(string.format('Status: %d\\nBody: %s\\n', status, body)\n\n\n", "explain": "HTTPS requests can be also done with the much smaller libraries like LuaSec or lua-requests, but it currently don't support redirects, which is why I used lua-http in this example.\n"}, {"task_name": "HTTPS", "task_url": "https://rosettacode.org/wiki/HTTPS", "task_cat": "Programming environment operations", "lang": "Scala", "code": "\nLibrary: Scala\nimport scala.io.Source\n\nobject HttpsTest extends App {\n  System.setProperty(\"http.agent\", \"*\")\n   \n  Source.fromURL(\"https://sourceforge.net\").getLines.foreach(println)\n}\n\n", "explain": ""}, {"task_name": "HTTPS", "task_url": "https://rosettacode.org/wiki/HTTPS", "task_cat": "Programming environment operations", "lang": "D", "code": "\n\nauto data = get(\"https://sourceforge.net\");\nwriteln(data);\n\n", "explain": "Using curl\n"}, {"task_name": "HTTPS", "task_url": "https://rosettacode.org/wiki/HTTPS", "task_cat": "Programming environment operations", "lang": "Haskell", "code": "\nLibrary: http-conduit\nWorks with: GHC version 7.4.1\n\n#!/usr/bin/runhaskell\n\nimport Network.HTTP.Conduit\nimport qualified Data.ByteString.Lazy as L\nimport Network (withSocketsDo)\n\nmain = withSocketsDo\n    $ simpleHttp \"https://sourceforge.net/\" >>= L.putStr\n\n", "explain": "This is just the example from Network.HTTP.Conduit, with the http URL replaced with an https one, since http-conduit natively supports https without needing any additional work.\n"}, {"task_name": "HTTPS", "task_url": "https://rosettacode.org/wiki/HTTPS", "task_cat": "Programming environment operations", "lang": "VBScript", "code": "\nLibrary: Microsoft.XmlHTTP\n\nOption Explicit\n\nConst sURL=\"https://sourceforge.net/\"\n\nDim oHTTP\nSet oHTTP = CreateObject(\"Microsoft.XmlHTTP\")\n\nOn Error Resume Next\noHTTP.Open \"GET\", sURL, False\noHTTP.Send \"\"\nIf Err.Number = 0 Then\n     WScript.Echo oHTTP.responseText\nElse\n     Wscript.Echo \"error \" & Err.Number & \": \" & Err.Description\nEnd If\n\nSet oHTTP = Nothing\n\n", "explain": "Based on code at How to retrieve HTML web pages with VBScript via the Microsoft.XmlHttp object\n"}, {"task_name": "HTTPS", "task_url": "https://rosettacode.org/wiki/HTTPS", "task_cat": "Programming environment operations", "lang": "PowerShell", "code": "\n$wc = New-Object Net.WebClient\n$wc.DownloadString('https://sourceforge.net')\n\n\n", "explain": "If the certificate could not be validated (untrusted, self-signed, expired), then an Exception is thrown with the message \u201cThe underlying connection was closed: Could not establish trust relationship for the SSL/TLS secure channel.\u201d so certificate validation is done automatically by the method.\n"}, {"task_name": "HTTPS", "task_url": "https://rosettacode.org/wiki/HTTPS", "task_cat": "Programming environment operations", "lang": "F#", "code": "\n\n#light\nlet wget (url : string) =\n    let c = new System.Net.WebClient()\n    c.DownloadString(url)\n\n", "explain": "The underlying .NET classes handle secure web connections the same way they manage insecure connections.\n"}, {"task_name": "HTTPS", "task_url": "https://rosettacode.org/wiki/HTTPS", "task_cat": "Programming environment operations", "lang": "Groovy", "code": "\nnew URL(\"https://sourceforge.net\").eachLine { println it }\n\n", "explain": ""}]