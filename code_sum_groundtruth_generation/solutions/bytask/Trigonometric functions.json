[{"task_name": "Trigonometric functions", "task_url": "https://rosettacode.org/wiki/Trigonometric_functions", "task_cat": "Geometry", "lang": "Python", "code": "\n\nPython 3.2.2 (default, Sep  4 2011, 09:51:08) [MSC v.1500 32 bit (Intel)] on win32\nType \"copyright\", \"credits\" or \"license()\" for more information.\n>>> from math import degrees, radians, sin, cos, tan, asin, acos, atan, pi\n>>> rad, deg = pi/4, 45.0\n>>> print(\"Sine:\", sin(rad), sin(radians(deg)))\nSine: 0.7071067811865475 0.7071067811865475\n>>> print(\"Cosine:\", cos(rad), cos(radians(deg)))\nCosine: 0.7071067811865476 0.7071067811865476\n>>> print(\"Tangent:\", tan(rad), tan(radians(deg)))\nTangent: 0.9999999999999999 0.9999999999999999\n>>> arcsine = asin(sin(rad))\n>>> print(\"Arcsine:\", arcsine, degrees(arcsine))\nArcsine: 0.7853981633974482 44.99999999999999\n>>> arccosine = acos(cos(rad))\n>>> print(\"Arccosine:\", arccosine, degrees(arccosine))\nArccosine: 0.7853981633974483 45.0\n>>> arctangent = atan(tan(rad))\n>>> print(\"Arctangent:\", arctangent, degrees(arctangent))\nArctangent: 0.7853981633974483 45.0\n>>>\n\n", "explain": "Python's math module contains all six functions. \nThe functions all accept radians only, so conversion is necessary \nwhen dealing with degrees. \nThe math module also has degrees() and radians() functions for easy conversion. \n"}, {"task_name": "Trigonometric functions", "task_url": "https://rosettacode.org/wiki/Trigonometric_functions", "task_cat": "Geometry", "lang": "C", "code": "\n#include <math.h>\n#include <stdio.h>\n\nint main() {\n  double pi = 4 * atan(1);\n  /*Pi / 4 is 45 degrees. All answers should be the same.*/\n  double radians = pi / 4;\n  double degrees = 45.0;\n  double temp;\n  /*sine*/\n  printf(\"%f %f\\n\", sin(radians), sin(degrees * pi / 180));\n  /*cosine*/\n  printf(\"%f %f\\n\", cos(radians), cos(degrees * pi / 180));\n  /*tangent*/\n  printf(\"%f %f\\n\", tan(radians), tan(degrees * pi / 180));\n  /*arcsine*/\n  temp = asin(sin(radians));\n  printf(\"%f %f\\n\", temp, temp * 180 / pi);\n  /*arccosine*/\n  temp = acos(cos(radians));\n  printf(\"%f %f\\n\", temp, temp * 180 / pi);\n  /*arctangent*/\n  temp = atan(tan(radians));\n  printf(\"%f %f\\n\", temp, temp * 180 / pi);\n\n  return 0;\n}\n\n\nOutput:\n0.707107 0.707107\n0.707107 0.707107\n1.000000 1.000000\n0.785398 45.000000\n0.785398 45.000000\n0.785398 45.000000\n\n", "explain": ""}, {"task_name": "Trigonometric functions", "task_url": "https://rosettacode.org/wiki/Trigonometric_functions", "task_cat": "Geometry", "lang": "C++", "code": "\n#include <iostream>\n#include <cmath>\n\n#ifdef M_PI // defined by all POSIX systems and some non-POSIX ones\ndouble const pi = M_PI;\n#else\ndouble const pi = 4*std::atan(1);\n#endif\n\ndouble const degree = pi/180;\n\nint main()\n{\n  std::cout << \"=== radians ===\\n\";\n  std::cout << \"sin(pi/3) = \" << std::sin(pi/3) << \"\\n\";\n  std::cout << \"cos(pi/3) = \" << std::cos(pi/3) << \"\\n\";\n  std::cout << \"tan(pi/3) = \" << std::tan(pi/3) << \"\\n\";\n  std::cout << \"arcsin(1/2) = \" << std::asin(0.5) << \"\\n\";\n  std::cout << \"arccos(1/2) = \" << std::acos(0.5) << \"\\n\";\n  std::cout << \"arctan(1/2) = \" << std::atan(0.5) << \"\\n\";\n\n  std::cout << \"\\n=== degrees ===\\n\";\n  std::cout << \"sin(60\u00b0) = \" << std::sin(60*degree) << \"\\n\";\n  std::cout << \"cos(60\u00b0) = \" << std::cos(60*degree) << \"\\n\";\n  std::cout << \"tan(60\u00b0) = \" << std::tan(60*degree) << \"\\n\";\n  std::cout << \"arcsin(1/2) = \" << std::asin(0.5)/degree << \"\u00b0\\n\";\n  std::cout << \"arccos(1/2) = \" << std::acos(0.5)/degree << \"\u00b0\\n\";\n  std::cout << \"arctan(1/2) = \" << std::atan(0.5)/degree << \"\u00b0\\n\";\n\n  return 0;\n}\n\n", "explain": ""}, {"task_name": "Trigonometric functions", "task_url": "https://rosettacode.org/wiki/Trigonometric_functions", "task_cat": "Geometry", "lang": "Java", "code": "\n\npublic class Trig {\n        public static void main(String[] args) {\n                //Pi / 4 is 45 degrees. All answers should be the same.\n                double radians = Math.PI / 4;\n                double degrees = 45.0;\n                //sine\n                System.out.println(Math.sin(radians) + \" \" + Math.sin(Math.toRadians(degrees)));\n                //cosine\n                System.out.println(Math.cos(radians) + \" \" + Math.cos(Math.toRadians(degrees)));\n                //tangent\n                System.out.println(Math.tan(radians) + \" \" + Math.tan(Math.toRadians(degrees)));\n                //arcsine\n                double arcsin = Math.asin(Math.sin(radians));\n                System.out.println(arcsin + \" \" + Math.toDegrees(arcsin));\n                //arccosine\n                double arccos = Math.acos(Math.cos(radians));\n                System.out.println(arccos + \" \" + Math.toDegrees(arccos));\n                //arctangent\n                double arctan = Math.atan(Math.tan(radians));\n                System.out.println(arctan + \" \" + Math.toDegrees(arctan));\n        }\n}\n\n\nOutput:\n0.7071067811865475 0.7071067811865475\n0.7071067811865476 0.7071067811865476\n0.9999999999999999 0.9999999999999999\n0.7853981633974482 44.99999999999999\n0.7853981633974483 45.0\n0.7853981633974483 45.0\n\n", "explain": "Java's Math class contains all six functions and is automatically included as part of the language. The functions all accept radians only, so conversion is necessary when dealing with degrees. The Math class also has a PI constant for easy conversion. \n"}, {"task_name": "Trigonometric functions", "task_url": "https://rosettacode.org/wiki/Trigonometric_functions", "task_cat": "Geometry", "lang": "C#", "code": "\nusing System;\n\nnamespace RosettaCode {\n    class Program {\n        static void Main(string[] args) {\n            Console.WriteLine(\"=== radians ===\");\n            Console.WriteLine(\"sin (pi/3) = {0}\", Math.Sin(Math.PI / 3));\n            Console.WriteLine(\"cos (pi/3) = {0}\", Math.Cos(Math.PI / 3));\n            Console.WriteLine(\"tan (pi/3) = {0}\", Math.Tan(Math.PI / 3));\n            Console.WriteLine(\"arcsin (1/2) = {0}\", Math.Asin(0.5));\n            Console.WriteLine(\"arccos (1/2) = {0}\", Math.Acos(0.5));\n            Console.WriteLine(\"arctan (1/2) = {0}\", Math.Atan(0.5));\n            Console.WriteLine(\"\");\n            Console.WriteLine(\"=== degrees ===\");\n            Console.WriteLine(\"sin (60) = {0}\", Math.Sin(60 * Math.PI / 180));\n            Console.WriteLine(\"cos (60) = {0}\", Math.Cos(60 * Math.PI / 180));\n            Console.WriteLine(\"tan (60) = {0}\", Math.Tan(60 * Math.PI / 180));\n            Console.WriteLine(\"arcsin (1/2) = {0}\", Math.Asin(0.5) * 180/ Math.PI);\n            Console.WriteLine(\"arccos (1/2) = {0}\", Math.Acos(0.5) * 180 / Math.PI);\n            Console.WriteLine(\"arctan (1/2) = {0}\", Math.Atan(0.5) * 180 / Math.PI);\n\n            Console.ReadLine();\n        }\n    }\n}\n\n", "explain": ""}, {"task_name": "Trigonometric functions", "task_url": "https://rosettacode.org/wiki/Trigonometric_functions", "task_cat": "Geometry", "lang": "JavaScript", "code": "\n\nvar\n radians = Math.PI / 4, // Pi / 4 is 45 degrees. All answers should be the same.\n degrees = 45.0,\n sine = Math.sin(radians),\n cosine = Math.cos(radians),\n tangent = Math.tan(radians),\n arcsin = Math.asin(sine),\n arccos = Math.acos(cosine),\n arctan = Math.atan(tangent);\n\n// sine\nwindow.alert(sine + \" \" + Math.sin(degrees * Math.PI / 180));\n// cosine\nwindow.alert(cosine + \" \" + Math.cos(degrees * Math.PI / 180));\n// tangent\nwindow.alert(tangent + \" \" + Math.tan(degrees * Math.PI / 180));\n// arcsine\nwindow.alert(arcsin + \" \" + (arcsin * 180 / Math.PI));\n// arccosine\nwindow.alert(arccos + \" \" + (arccos * 180 / Math.PI));\n// arctangent\nwindow.alert(arctan + \" \" + (arctan * 180 / Math.PI));\n\n", "explain": "JavaScript's Math class contains all six functions and is automatically included as part of the language. The functions all accept radians only, so conversion is necessary when dealing with degrees. The Math class also has a PI constant for easy conversion. \n"}, {"task_name": "Trigonometric functions", "task_url": "https://rosettacode.org/wiki/Trigonometric_functions", "task_cat": "Geometry", "lang": "Visual_Basic_.NET", "code": "\nTranslation of: C#\nModule Module1\n\n    Sub Main()\n        Console.WriteLine(\"=== radians ===\")\n        Console.WriteLine(\"  sin (pi/3) = {0}\", Math.Sin(Math.PI / 3))\n        Console.WriteLine(\"  cos (pi/3) = {0}\", Math.Cos(Math.PI / 3))\n        Console.WriteLine(\"  tan (pi/3) = {0}\", Math.Tan(Math.PI / 3))\n        Console.WriteLine(\"arcsin (1/2) = {0}\", Math.Asin(0.5))\n        Console.WriteLine(\"arccos (1/2) = {0}\", Math.Acos(0.5))\n        Console.WriteLine(\"arctan (1/2) = {0}\", Math.Atan(0.5))\n        Console.WriteLine()\n        Console.WriteLine(\"=== degrees ===\")\n        Console.WriteLine(\"    sin (60) = {0}\", Math.Sin(60 * Math.PI / 180))\n        Console.WriteLine(\"    cos (60) = {0}\", Math.Cos(60 * Math.PI / 180))\n        Console.WriteLine(\"    tan (60) = {0}\", Math.Tan(60 * Math.PI / 180))\n        Console.WriteLine(\"arcsin (1/2) = {0}\", Math.Asin(0.5) * 180 / Math.PI)\n        Console.WriteLine(\"arccos (1/2) = {0}\", Math.Acos(0.5) * 180 / Math.PI)\n        Console.WriteLine(\"arctan (1/2) = {0}\", Math.Atan(0.5) * 180 / Math.PI)\n    End Sub\n\nEnd Module\n\n\nOutput:\n=== radians ===\n  sin (pi/3) = 0.866025403784439\n  cos (pi/3) = 0.5\n  tan (pi/3) = 1.73205080756888\narcsin (1/2) = 0.523598775598299\narccos (1/2) = 1.0471975511966\narctan (1/2) = 0.463647609000806\n\n=== degrees ===\n    sin (60) = 0.866025403784439\n    cos (60) = 0.5\n    tan (60) = 1.73205080756888\narcsin (1/2) = 30\narccos (1/2) = 60\narctan (1/2) = 26.565051177078\n", "explain": ""}, {"task_name": "Trigonometric functions", "task_url": "https://rosettacode.org/wiki/Trigonometric_functions", "task_cat": "Geometry", "lang": "PHP", "code": "\n$radians = M_PI / 4;\n$degrees = 45 * M_PI / 180;\necho sin($radians) . \" \" . sin($degrees);\necho cos($radians) . \" \" . cos($degrees);\necho tan($radians) . \" \" . tan($degrees);\necho asin(sin($radians)) . \" \" . asin(sin($radians)) * 180 / M_PI;\necho acos(cos($radians)) . \" \" . acos(cos($radians)) * 180 / M_PI;\necho atan(tan($radians)) . \" \" . atan(tan($radians)) * 180 / M_PI;\n\n", "explain": ""}, {"task_name": "Trigonometric functions", "task_url": "https://rosettacode.org/wiki/Trigonometric_functions", "task_cat": "Geometry", "lang": "MATLAB", "code": "\n\nfunction trigExample(angleDegrees)\n\n    angleRadians = angleDegrees * (pi/180);\n    \n    disp(sprintf('sin(%f)= %f\\nasin(%f)= %f',[angleRadians sin(angleRadians) sin(angleRadians) asin(sin(angleRadians))]));\n    disp(sprintf('sind(%f)= %f\\narcsind(%f)= %f',[angleDegrees sind(angleDegrees) sind(angleDegrees) asind(sind(angleDegrees))]));\n    disp('-----------------------');\n    disp(sprintf('cos(%f)= %f\\nacos(%f)= %f',[angleRadians cos(angleRadians) cos(angleRadians) acos(cos(angleRadians))]));\n    disp(sprintf('cosd(%f)= %f\\narccosd(%f)= %f',[angleDegrees cosd(angleDegrees) cosd(angleDegrees) acosd(cosd(angleDegrees))]));\n    disp('-----------------------');\n    disp(sprintf('tan(%f)= %f\\natan(%f)= %f',[angleRadians tan(angleRadians) tan(angleRadians) atan(tan(angleRadians))]));\n    disp(sprintf('tand(%f)= %f\\narctand(%f)= %f',[angleDegrees tand(angleDegrees) tand(angleDegrees) atand(tand(angleDegrees))]));\nend\n\n\nOutput:\n>> trigExample(78)\nsin(1.361357)= 0.978148\nasin(0.978148)= 1.361357\nsind(78.000000)= 0.978148\narcsind(0.978148)= 78.000000\n-----------------------\ncos(1.361357)= 0.207912\nacos(0.207912)= 1.361357\ncosd(78.000000)= 0.207912\narccosd(0.207912)= 78.000000\n-----------------------\ntan(1.361357)= 4.704630\natan(4.704630)= 1.361357\ntand(78.000000)= 4.704630\narctand(4.704630)= 78.000000\n\n", "explain": "A full list of built-in trig functions can be found in the MATLAB Documentation.\n"}, {"task_name": "Trigonometric functions", "task_url": "https://rosettacode.org/wiki/Trigonometric_functions", "task_cat": "Geometry", "lang": "Fortran", "code": "\n\nPROGRAM Trig\n\n  REAL pi, dtor, rtod, radians, degrees\n \n  pi = 4.0 * ATAN(1.0)\n  dtor = pi / 180.0\n  rtod = 180.0 / pi\n  radians = pi / 4.0\n  degrees = 45.0 \n \n  WRITE(*,*) SIN(radians), SIN(degrees*dtor)\n  WRITE(*,*) COS(radians), COS(degrees*dtor)\n  WRITE(*,*) TAN(radians), TAN(degrees*dtor)\n  WRITE(*,*) ASIN(SIN(radians)), ASIN(SIN(degrees*dtor))*rtod\n  WRITE(*,*) ACOS(COS(radians)), ACOS(COS(degrees*dtor))*rtod\n  WRITE(*,*) ATAN(TAN(radians)), ATAN(TAN(degrees*dtor))*rtod\n\nEND PROGRAM Trig\n\n\nOutput:\n 0.707107   0.707107\n 0.707107   0.707107\n  1.00000    1.00000\n 0.785398    45.0000\n 0.785398    45.0000\n 0.785398    45.0000\n\n\n ATAN2(y,x) ! Arctangent(y/x), ''-pi < result <= +pi'' \n SINH(x)    ! Hyperbolic sine\n COSH(x)    ! Hyperbolic cosine\n TANH(x)    ! Hyperbolic tangent\n\n\nCalculate various trigonometric functions from the Fortran library.\n      INTEGER BIT(32),B,IP\t!Stuff for bit fiddling.\n      INTEGER ENUFF,I\t\t!Step through the test angles.\n      PARAMETER (ENUFF = 17)\t!A selection of special values.\n      INTEGER ANGLE(ENUFF)\t!All in whole degrees.\n      DATA ANGLE/0,30,45,60,90,120,135,150,180,\t!Here they are.\n     1 210,225,240,270,300,315,330,360/\t\t!Thus check angle folding.\n      REAL PI,DEG2RAD\t\t!Special numbers.\n      REAL D,R,FD,FR,AD,AR\t!Degree, Radian, F(D), F(R), inverses.\n      PI = 4*ATAN(1.0)\t\t!SINGLE PRECISION 1\u00b70.\n      DEG2RAD = PI/180\t\t!Limited precision here too for a transcendental number.\nCase the first: sines.\n      WRITE (6,10) (\"Sin\", I = 1,4)\t!Supply some names.\n   10 FORMAT (\" Deg.\",A7,\"(Deg)\",A7,\"(Rad)   Rad - Deg\",\t!Ah, layout.\n     1 6X,\"Arc\",A3,\"D\",6X,\"Arc\",A3,\"R\",9X,\"Diff\")\n      DO I = 1,ENUFF\t\t!Step through the test values.\n        D = ANGLE(I)\t\t\t!The angle in degrees, in floating point.\n        R = D*DEG2RAD\t\t\t!Approximation, in radians.\n        FD = SIND(D); AD = ASIND(FD)\t\t!Functions working in degrees.\n        FR = SIN(R);  AR = ASIN(FR)/DEG2RAD\t!Functions working in radians.\n        WRITE (6,11) INT(D),FD,FR,FR - FD,AD,AR,AR - AD\t!Results.\n   11   FORMAT (I4,\":\",3F12.8,3F13.7)\t!Ah, alignment with FORMAT 10...\n      END DO\t\t\t!On to the next test value.\nCase the second: cosines.\n      WRITE (6,10) (\"Cos\", I = 1,4)\n      DO I = 1,ENUFF\n        D = ANGLE(I)\n        R = D*DEG2RAD\n        FD = COSD(D); AD = ACOSD(FD)\n        FR = COS(R);  AR = ACOS(FR)/DEG2RAD\n        WRITE (6,11) INT(D),FD,FR,FR - FD,AD,AR,AR - AD\n      END DO\nCase the third: tangents.\n      WRITE (6,10) (\"Tan\", I = 1,4)\n      DO I = 1,ENUFF\n        D = ANGLE(I)\n        R = D*DEG2RAD\n        FD = TAND(D); AD = ATAND(FD)\n        FR = TAN(R);  AR = ATAN(FR)/DEG2RAD\n        WRITE (6,11) INT(D),FD,FR,FR - FD,AD,AR,AR - AD\n      END DO\n      WRITE (6,*) \"...Special deal for 90 degrees...\"\n      D = 90\n      R = D*DEG2RAD\n      FD = TAND(D); AD = ATAND(FD)\n      FR = TAN(R);  AR = ATAN(FR)/DEG2RAD\n      WRITE (6,*) \"TanD =\",FD,\"Atan =\",AD\n      WRITE (6,*) \"TanR =\",FR,\"Atan =\",AR\nConvert PI to binary...\n      PI = PI - 3\t!I know it starts with three, and I need the fractional part.\n      BIT(1:2) = 1\t!So, the binary is 11. something.\n      B = 2\t\t!Two bits known.\n      DO I = 1,26\t!For single precision, more than enough additional bits.\n        PI = PI*2\t\t!Hoist a bit to the hot spot.\n        IP = PI\t\t\t!The integral part.\n        PI = PI - IP\t\t!Remove it from the work in progress.\n        B = B + 1\t\t!Another bit bitten.\n        BIT(B) = IP\t\t!Place it.\n      END DO\t\t!On to the next.\n      WRITE (6,20) BIT(1:B)\t!Reveal the bits.\n   20 FORMAT (\" Pi ~ \",2I1,\".\",66I1)\t!A known format.\n      WRITE (6,*) \"   = 11.00100100001111110110101010001000100001...\"\t!But actually...\n      END\t\t!So much for that.\n\n\nDeg.    Sin(Deg)    Sin(Rad)   Rad - Deg      ArcSinD      ArcSinR         Diff\n  0:  0.00000000  0.00000000  0.00000000    0.0000000    0.0000000    0.0000000\n 30:  0.50000000  0.50000000  0.00000000   30.0000000   30.0000000    0.0000000\n 45:  0.70710677  0.70710677  0.00000000   45.0000000   45.0000000    0.0000000\n 60:  0.86602539  0.86602545  0.00000006   60.0000000   60.0000038    0.0000038\n 90:  1.00000000  1.00000000  0.00000000   90.0000000   90.0000000    0.0000000\n120:  0.86602539  0.86602539  0.00000000   60.0000000   60.0000000    0.0000000\n135:  0.70710677  0.70710677  0.00000000   45.0000000   45.0000000    0.0000000\n150:  0.50000000  0.50000006  0.00000006   30.0000000   30.0000038    0.0000038\n180:  0.00000000 -0.00000009 -0.00000009    0.0000000   -0.0000050   -0.0000050\n210: -0.50000000 -0.49999997  0.00000003  -30.0000000  -29.9999981    0.0000019\n225: -0.70710677 -0.70710671  0.00000006  -45.0000000  -44.9999962    0.0000038\n240: -0.86602539 -0.86602545 -0.00000006  -60.0000000  -60.0000038   -0.0000038\n270: -1.00000000 -1.00000000  0.00000000  -90.0000000  -90.0000000    0.0000000\n300: -0.86602539 -0.86602545 -0.00000006  -60.0000000  -60.0000038   -0.0000038\n315: -0.70710677 -0.70710689 -0.00000012  -45.0000000  -45.0000076   -0.0000076\n330: -0.50000000 -0.50000018 -0.00000018  -30.0000000  -30.0000114   -0.0000114\n360:  0.00000000  0.00000017  0.00000017    0.0000000    0.0000100    0.0000100\nDeg.    Cos(Deg)    Cos(Rad)   Rad - Deg      ArcCosD      ArcCosR         Diff\n  0:  1.00000000  1.00000000  0.00000000    0.0000000    0.0000000    0.0000000\n 30:  0.86602539  0.86602539  0.00000000   30.0000019   30.0000019    0.0000000\n 45:  0.70710677  0.70710677  0.00000000   45.0000000   45.0000000    0.0000000\n 60:  0.50000000  0.49999997 -0.00000003   60.0000000   60.0000038    0.0000038\n 90:  0.00000000 -0.00000004 -0.00000004   90.0000000   90.0000000    0.0000000\n120: -0.50000000 -0.50000006 -0.00000006  120.0000000  120.0000076    0.0000076\n135: -0.70710677 -0.70710677  0.00000000  135.0000000  135.0000000    0.0000000\n150: -0.86602539 -0.86602539  0.00000000  150.0000000  150.0000000    0.0000000\n180: -1.00000000 -1.00000000  0.00000000  180.0000000  180.0000000    0.0000000\n210: -0.86602539 -0.86602539  0.00000000  150.0000000  150.0000000    0.0000000\n225: -0.70710677 -0.70710683 -0.00000006  135.0000000  135.0000000    0.0000000\n240: -0.50000000 -0.49999991  0.00000009  120.0000000  119.9999924   -0.0000076\n270:  0.00000000  0.00000001  0.00000001   90.0000000   90.0000000    0.0000000\n300:  0.50000000  0.49999991 -0.00000009   60.0000000   60.0000076    0.0000076\n315:  0.70710677  0.70710665 -0.00000012   45.0000000   45.0000114    0.0000114\n330:  0.86602539  0.86602533 -0.00000006   30.0000019   30.0000095    0.0000076\n360:  1.00000000  1.00000000  0.00000000    0.0000000    0.0000000    0.0000000\nDeg.    Tan(Deg)    Tan(Rad)   Rad - Deg      ArcTanD      ArcTanR         Diff\n  0:  0.00000000  0.00000000  0.00000000    0.0000000    0.0000000    0.0000000\n 30:  0.57735026  0.57735026  0.00000000   30.0000000   30.0000000    0.0000000\n 45:  1.00000000  1.00000000  0.00000000   45.0000000   45.0000000    0.0000000\n 60:  1.73205078  1.73205090  0.00000012   60.0000000   60.0000000    0.0000000\n 90:************************************   90.0000000  -90.0000000 -180.0000000\n120: -1.73205078 -1.73205054  0.00000024  -60.0000000  -59.9999962    0.0000038\n135: -1.00000000 -1.00000000  0.00000000  -45.0000000  -45.0000000    0.0000000\n150: -0.57735026 -0.57735032 -0.00000006  -30.0000000  -30.0000019   -0.0000019\n180:  0.00000000  0.00000009  0.00000009    0.0000000    0.0000050    0.0000050\n210:  0.57735026  0.57735026  0.00000000   30.0000000   30.0000000    0.0000000\n225:  1.00000000  0.99999988 -0.00000012   45.0000000   44.9999962   -0.0000038\n240:  1.73205078  1.73205125  0.00000048   60.0000000   60.0000076    0.0000076\n270:************************************   90.0000000  -90.0000000 -180.0000000\n300: -1.73205078 -1.73205113 -0.00000036  -60.0000000  -60.0000038   -0.0000038\n315: -1.00000000 -1.00000024 -0.00000024  -45.0000000  -45.0000076   -0.0000076\n330: -0.57735026 -0.57735056 -0.00000030  -30.0000000  -30.0000134   -0.0000134\n360:  0.00000000  0.00000017  0.00000017    0.0000000    0.0000100    0.0000100\n...Special deal for 90 degrees...\nTanD =  1.6331778E+16 Atan =   90.00000    \nTanR = -2.2877332E+07 Atan =  -90.00000    \nPi ~ 11.00100100001111110110110000\n   = 11.00100100001111110110101010001000100001...\n\n\n", "explain": "Trigonometic functions expect arguments in radians so degrees require conversion\nThe following trigonometric functions are also available\nBut, for those with access to fatter Fortran function libraries, trigonometrical functions working in degrees are also available.\nOutput:\nNotice that the calculations in radians are less accurate. Firstly, pi cannot be represented exactly and secondly, the conversion factor of pi/180 or 180/pi adds further to the error. The degree-based functions obviously can fold their angles using exact arithmetic (though ACosD has surprising trouble with 30\u00b0) and so 360\u00b0 is the same as 0\u00b0, unlike the case with radians. TanD(90\u00b0) should yield Infinity (but, which sign?) but perhaps this latter-day feature of computer floating-point was not included. In any case, Tan(90\u00b0 in radians) faces the problem that its parameter will not in fact be pi/2 but some value just over (or under), and likewise with double precision and quadruple precision and any other finite precision.\n"}, {"task_name": "Trigonometric functions", "task_url": "https://rosettacode.org/wiki/Trigonometric_functions", "task_cat": "Geometry", "lang": "Go", "code": "\n\npackage main\n\nimport (\n    \"fmt\"\n    \"math\"\n)\n\nconst d = 30.\nconst r = d * math.Pi / 180\n\nvar s = .5\nvar c = math.Sqrt(3) / 2\nvar t = 1 / math.Sqrt(3)\n\nfunc main() {\n    fmt.Printf(\"sin(%9.6f deg) = %f\\n\", d, math.Sin(d*math.Pi/180))\n    fmt.Printf(\"sin(%9.6f rad) = %f\\n\", r, math.Sin(r))\n    fmt.Printf(\"cos(%9.6f deg) = %f\\n\", d, math.Cos(d*math.Pi/180))\n    fmt.Printf(\"cos(%9.6f rad) = %f\\n\", r, math.Cos(r))\n    fmt.Printf(\"tan(%9.6f deg) = %f\\n\", d, math.Tan(d*math.Pi/180))\n    fmt.Printf(\"tan(%9.6f rad) = %f\\n\", r, math.Tan(r))\n    fmt.Printf(\"asin(%f) = %9.6f deg\\n\", s, math.Asin(s)*180/math.Pi)\n    fmt.Printf(\"asin(%f) = %9.6f rad\\n\", s, math.Asin(s))\n    fmt.Printf(\"acos(%f) = %9.6f deg\\n\", c, math.Acos(c)*180/math.Pi)\n    fmt.Printf(\"acos(%f) = %9.6f rad\\n\", c, math.Acos(c))\n    fmt.Printf(\"atan(%f) = %9.6f deg\\n\", t, math.Atan(t)*180/math.Pi)\n    fmt.Printf(\"atan(%f) = %9.6f rad\\n\", t, math.Atan(t))\n}\n\n\nOutput:\nsin(30.000000 deg) = 0.500000\nsin( 0.523599 rad) = 0.500000\ncos(30.000000 deg) = 0.866025\ncos( 0.523599 rad) = 0.866025\ntan(30.000000 deg) = 0.577350\ntan( 0.523599 rad) = 0.577350\nasin(0.500000) = 30.000000 deg\nasin(0.500000) =  0.523599 rad\nacos(0.866025) = 30.000000 deg\nacos(0.866025) =  0.523599 rad\natan(0.577350) = 30.000000 deg\natan(0.577350) =  0.523599 rad\n\n", "explain": "The Go math package provides the constant pi and the six trigonometric functions called for by the task.  The functions all use the float64 type and work in radians.  It also provides a Sincos function.\n"}, {"task_name": "Trigonometric functions", "task_url": "https://rosettacode.org/wiki/Trigonometric_functions", "task_cat": "Geometry", "lang": "Delphi", "code": "\nWorks with: Delphi version 6.0\nLibrary: SysUtils,StdCtrls\n\nprocedure ShowTrigFunctions(Memo: TMemo);\nconst AngleDeg = 45.0;\nvar AngleRad,ArcSine,ArcCosine,ArcTangent: double;\nbegin\nAngleRad:=DegToRad(AngleDeg);\n\nMemo.Lines.Add(Format('Angle:      Degrees: %3.5f   Radians: %3.6f',[AngleDeg,AngleRad]));\nMemo.Lines.Add('-------------------------------------------------');\nMemo.Lines.Add(Format('Sine:       Degrees: %3.6f   Radians: %3.6f',[sin(DegToRad(AngleDeg)),sin(AngleRad)]));\nMemo.Lines.Add(Format('Cosine:     Degrees: %3.6f   Radians: %3.6f',[cos(DegToRad(AngleDeg)),cos(AngleRad)]));\nMemo.Lines.Add(Format('Tangent:    Degrees: %3.6f   Radians: %3.6f',[tan(DegToRad(AngleDeg)),tan(AngleRad)]));\nArcSine:=ArcSin(Sin(AngleRad));\nMemo.Lines.Add(Format('Arcsine:    Degrees: %3.6f   Radians: %3.6f',[DegToRad(ArcSine),ArcSine]));\nArcCosine:=ArcCos(cos(AngleRad));\nMemo.Lines.Add(Format('Arccosine:  Degrees: %3.6f   Radians: %3.6f',[DegToRad(ArcCosine),ArcCosine]));\nArcTangent:=ArcTan(tan(AngleRad));\nMemo.Lines.Add(Format('Arctangent: Degrees: %3.6f   Radians: %3.6f',[DegToRad(ArcTangent),ArcTangent]));\nend;\n\n\nOutput:\nAngle:      Degrees: 45.00000   Radians: 0.785398\n-------------------------------------------------\nSine:       Degrees: 0.707107   Radians: 0.707107\nCosine:     Degrees: 0.707107   Radians: 0.707107\nTangent:    Degrees: 1.000000   Radians: 1.000000\nArcsine:    Degrees: 0.013708   Radians: 0.785398\nArccosine:  Degrees: 0.013708   Radians: 0.785398\nArctangent: Degrees: 0.013708   Radians: 0.785398\n\nElapsed Time: 9.118 ms.\n\n\n\n", "explain": "\n\n"}, {"task_name": "Trigonometric functions", "task_url": "https://rosettacode.org/wiki/Trigonometric_functions", "task_cat": "Geometry", "lang": "Ruby", "code": "\n\nradians = Math::PI / 4\ndegrees = 45.0\n\ndef deg2rad(d)\n  d * Math::PI / 180\nend\n\ndef rad2deg(r)\n  r * 180 / Math::PI\nend\n\n#sine\nputs \"#{Math.sin(radians)} #{Math.sin(deg2rad(degrees))}\"\n#cosine\nputs \"#{Math.cos(radians)} #{Math.cos(deg2rad(degrees))}\"\n#tangent\nputs \"#{Math.tan(radians)} #{Math.tan(deg2rad(degrees))}\"\n#arcsine\narcsin = Math.asin(Math.sin(radians))\nputs \"#{arcsin} #{rad2deg(arcsin)}\"\n#arccosine\narccos = Math.acos(Math.cos(radians))\nputs \"#{arccos} #{rad2deg(arccos)}\"\n#arctangent\narctan = Math.atan(Math.tan(radians))\nputs \"#{arctan} #{rad2deg(arctan)}\"\n\n\nOutput:\n0.7071067811865475 0.7071067811865475\n0.7071067811865476 0.7071067811865476\n0.9999999999999999 0.9999999999999999\n0.7853981633974482 44.99999999999999\n0.7853981633974483 45.0\n0.7853981633974483 45.0\n\nBigDecimal[edit]\n\nTranslation of: bc\nWorks with: Ruby version 1.9\nrequire 'bigdecimal'       # BigDecimal\nrequire 'bigdecimal/math'  # BigMath\n\ninclude BigMath  # Allow sin(x, prec) instead of BigMath.sin(x, prec).\n\n# Tangent of _x_.\ndef tan(x, prec)\n  sin(x, prec) / cos(x, prec)\nend\n\n# Arcsine of _y_, domain [-1, 1], range [-pi/2, pi/2].\ndef asin(y, prec)\n  # Handle angles with no tangent.\n  return -PI / 2 if y == -1\n  return PI / 2 if y == 1\n  \n  # Tangent of angle is y / x, where x^2 + y^2 = 1.\n  atan(y / sqrt(1 - y * y, prec), prec)\nend\n\n# Arccosine of _x_, domain [-1, 1], range [0, pi].\ndef acos(x, prec)\n  # Handle angle with no tangent.\n  return PI / 2 if x == 0\n  \n  # Tangent of angle is y / x, where x^2 + y^2 = 1.\n  a = atan(sqrt(1 - x * x, prec) / x, prec)\n  if a < 0\n    a + PI(prec)\n  else\n    a\n  end\nend\n\n\nprec = 52\npi = PI(prec)\ndegrees = pi / 180  # one degree in radians\n\nb1 = BigDecimal.new \"1\"\nb2 = BigDecimal.new \"2\"\nb3 = BigDecimal.new \"3\"\n\nf = proc { |big| big.round(50).to_s('F') }\nprint(\"Using radians:\",\n      \"\\n  sin(-pi / 6) = \", f[ sin(-pi / 6, prec) ],\n      \"\\n  cos(3 * pi / 4) = \", f[ cos(3 * pi / 4, prec) ],\n      \"\\n  tan(pi / 3) = \", f[ tan(pi / 3, prec) ],\n      \"\\n  asin(-1 / 2) = \", f[ asin(-b1 / 2, prec) ],\n      \"\\n  acos(-sqrt(2) / 2) = \", f[ acos(-sqrt(b2, prec) / 2, prec) ],\n      \"\\n  atan(sqrt(3)) = \", f[ atan(sqrt(b3, prec), prec) ],\n      \"\\n\")\nprint(\"Using degrees:\",\n      \"\\n  sin(-30) = \", f[ sin(-30 * degrees, prec) ],\n      \"\\n  cos(135) = \", f[ cos(135 * degrees, prec) ],\n      \"\\n  tan(60) = \", f[ tan(60 * degrees, prec) ],\n      \"\\n  asin(-1 / 2) = \",\n      f[ asin(-b1 / 2, prec) / degrees ],\n      \"\\n  acos(-sqrt(2) / 2) = \",\n      f[ acos(-sqrt(b2, prec) / 2, prec) / degrees ],\n      \"\\n  atan(sqrt(3)) = \",\n      f[ atan(sqrt(b3, prec), prec) / degrees ],\n      \"\\n\")\n\n\nOutput:\nUsing radians:\n  sin(-pi / 6) = -0.5\n  cos(3 * pi / 4) = -0.70710678118654752440084436210484903928483593768847\n  tan(pi / 3) = 1.73205080756887729352744634150587236694280525381038\n  asin(-1 / 2) = -0.52359877559829887307710723054658381403286156656252\n  acos(-sqrt(2) / 2) = 2.35619449019234492884698253745962716314787704953133\n  atan(sqrt(3)) = 1.04719755119659774615421446109316762806572313312504\nUsing degrees:\n  sin(-30) = -0.5\n  cos(135) = -0.70710678118654752440084436210484903928483593768847\n  tan(60) = 1.73205080756887729352744634150587236694280525381038\n  asin(-1 / 2) = -30.0\n  acos(-sqrt(2) / 2) = 135.0\n  atan(sqrt(3)) = 60.0\n\n", "explain": "Ruby's Math module contains all six functions. The functions all accept radians only, so conversion is necessary when dealing with degrees.\nIf you want more digits in the answer, then you can use the BigDecimal class. BigMath only has big versions of sine, cosine, and arctangent; so we must implement tangent, arcsine and arccosine.\n"}, {"task_name": "Trigonometric functions", "task_url": "https://rosettacode.org/wiki/Trigonometric_functions", "task_cat": "Geometry", "lang": "Rust", "code": "\nTranslation of: Perl\n// 20210221 Rust programming solution\n\nuse std::f64::consts::PI;\n\nfn main() {\n   let angle_radians: f64 = PI/4.0;\n   let angle_degrees: f64 = 45.0;\n\n   println!(\"{} {}\", angle_radians.sin(), angle_degrees.to_radians().sin());\n   println!(\"{} {}\", angle_radians.cos(), angle_degrees.to_radians().cos());\n   println!(\"{} {}\", angle_radians.tan(), angle_degrees.to_radians().tan());\n\n   let asin = angle_radians.sin().asin();\n   println!(\"{} {}\", asin, asin.to_degrees());\n   let acos = angle_radians.cos().acos();\n   println!(\"{} {}\", acos, acos.to_degrees());\n   let atan = angle_radians.tan().atan();\n   println!(\"{} {}\", atan, atan.to_degrees());\n}\n\n\nOutput:\n0.7071067811865475 0.7071067811865475\n0.7071067811865476 0.7071067811865476\n0.9999999999999999 0.9999999999999999\n0.7853981633974482 44.99999999999999\n0.7853981633974483 45\n0.7853981633974483 45\n\n", "explain": ""}, {"task_name": "Trigonometric functions", "task_url": "https://rosettacode.org/wiki/Trigonometric_functions", "task_cat": "Geometry", "lang": "R", "code": "\ndeg <- function(radians) 180*radians/pi\nrad <- function(degrees) degrees*pi/180\nsind <- function(ang) sin(rad(ang))\ncosd <- function(ang) cos(rad(ang))\ntand <- function(ang) tan(rad(ang))\nasind <- function(v) deg(asin(v))\nacosd <- function(v) deg(acos(v))\natand <- function(v) deg(atan(v))\n\nr <- pi/3\nrd <- deg(r)\n\nprint( c( sin(r), sind(rd)) )\nprint( c( cos(r), cosd(rd)) )\nprint( c( tan(r), tand(rd)) )\n\nS <- sin(pi/4)\nC <- cos(pi/3)\nT <- tan(pi/4)\n\nprint( c( asin(S), asind(S) ) )\nprint( c( acos(C), acosd(C) ) )\nprint( c( atan(T), atand(T) ) )\n\n", "explain": ""}, {"task_name": "Trigonometric functions", "task_url": "https://rosettacode.org/wiki/Trigonometric_functions", "task_cat": "Geometry", "lang": "COBOL", "code": "\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. Trig.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01  Pi-Third   USAGE COMP-2.\n       01  Degree     USAGE COMP-2.\n\n       01  60-Degrees USAGE COMP-2.\n\n       01  Result     USAGE COMP-2.\n\n       PROCEDURE DIVISION.\n           COMPUTE Pi-Third = FUNCTION PI / 3\n\n           DISPLAY \"Radians:\"\n           DISPLAY \"  Sin(\u03c0 / 3)  = \" FUNCTION SIN(Pi-Third)\n           DISPLAY \"  Cos(\u03c0 / 3)  = \" FUNCTION COS(Pi-Third)\n           DISPLAY \"  Tan(\u03c0 / 3)  = \" FUNCTION TAN(Pi-Third)\n           DISPLAY \"  Asin(0.5)   = \" FUNCTION ASIN(0.5)\n           DISPLAY \"  Acos(0.5)   = \" FUNCTION ACOS(0.5)\n           DISPLAY \"  Atan(0.5)   = \" FUNCTION ATAN(0.5)\n\n           COMPUTE Degree = FUNCTION PI / 180\n           COMPUTE 60-Degrees = Degree * 60\n\n           DISPLAY \"Degrees:\"\n           DISPLAY \"  Sin(60\u00b0)  = \" FUNCTION SIN(60-Degrees)\n           DISPLAY \"  Cos(60\u00b0)  = \" FUNCTION COS(60-Degrees)\n           DISPLAY \"  Tan(60\u00b0)  = \" FUNCTION TAN(60-Degrees)\n           COMPUTE Result = FUNCTION ASIN(0.5) / 60\n           DISPLAY \"  Asin(0.5) = \" Result\n           COMPUTE Result = FUNCTION ACOS(0.5) / 60\n           DISPLAY \"  Acos(0.5) = \" Result\n           COMPUTE Result = FUNCTION ATAN(0.5) / 60\n           DISPLAY \"  Atan(0.5) = \" Result\n\n           GOBACK\n           .\n\n\nOutput:\nRadians:\n  Sin(\u03c0 / 3)  = +0.86602540368613976\n  Cos(\u03c0 / 3)  = +0.50000000017025856\n  Tan(\u03c0 / 3)  = 1.732050806782486241\n  Asin(0.5) = +0.52359877559829897\n  Acos(0.5) = 1.04719755119659785\n  Atan(0.5) = +0.52359877559829897\nDegrees:\n  Sin(60\u00b0)  = +0.86602538768613932\n  Cos(60\u00b0)  = +0.50000002788307131\n  Tan(60\u00b0)  = 1.732050678782493636\n  Asin(0.5) = 0.008726645999999999\n  Acos(0.5) = 0.017453291999999999\n  Atan(0.5) = 0.007727460000000000\n\n", "explain": ""}, {"task_name": "Trigonometric functions", "task_url": "https://rosettacode.org/wiki/Trigonometric_functions", "task_cat": "Geometry", "lang": "Ada", "code": "\n\nwith Ada.Numerics.Elementary_Functions;\nuse Ada.Numerics.Elementary_Functions;\nwith Ada.Float_Text_Io; use Ada.Float_Text_Io;\nwith Ada.Text_IO; use Ada.Text_IO;\n\nprocedure Trig is\n   Degrees_Cycle : constant Float := 360.0;\n   Radians_Cycle : constant Float := 2.0 * Ada.Numerics.Pi;\n   Angle_Degrees : constant Float := 45.0;\n   Angle_Radians : constant Float := Ada.Numerics.Pi / 4.0;\n   procedure Put (V1, V2 : Float) is\n   begin\n      Put (V1, Aft => 5, Exp => 0);\n      Put (\" \");\n      Put (V2, Aft => 5, Exp => 0);\n      New_Line;\n   end Put;\nbegin\n   Put (Sin (Angle_Degrees, Degrees_Cycle), \n        Sin (Angle_Radians, Radians_Cycle));\n   Put (Cos (Angle_Degrees, Degrees_Cycle), \n        Cos (Angle_Radians, Radians_Cycle));\n   Put (Tan (Angle_Degrees, Degrees_Cycle), \n        Tan (Angle_Radians, Radians_Cycle));\n   Put (Cot (Angle_Degrees, Degrees_Cycle), \n        Cot (Angle_Radians, Radians_Cycle));\n   Put (ArcSin (Sin (Angle_Degrees, Degrees_Cycle), Degrees_Cycle), \n        ArcSin (Sin (Angle_Radians, Radians_Cycle), Radians_Cycle));\n   Put (Arccos (Cos (Angle_Degrees, Degrees_Cycle), Degrees_Cycle), \n        Arccos (Cos (Angle_Radians, Radians_Cycle), Radians_Cycle));\n   Put (Arctan (Y => Tan (Angle_Degrees, Degrees_Cycle)),\n        Arctan (Y => Tan (Angle_Radians, Radians_Cycle)));\n   Put (Arccot (X => Cot (Angle_Degrees, Degrees_Cycle)), \n        Arccot (X => Cot (Angle_Degrees, Degrees_Cycle)));\nend Trig;\n\n\nOutput:\n 0.70711  0.70711\n 0.70711  0.70711\n 1.00000  1.00000\n 1.00000  1.00000\n45.00000  0.78540\n45.00000  0.78540\n45.00000  0.78540\n45.00000  0.78540\n\n", "explain": "Ada provides library trig functions which default to radians along with corresponding library functions for which the cycle can be specified. \nThe examples below specify the cycle for degrees and for radians. \nThe output of the inverse trig functions is in units of the specified cycle (degrees or radians).\n"}, {"task_name": "Trigonometric functions", "task_url": "https://rosettacode.org/wiki/Trigonometric_functions", "task_cat": "Geometry", "lang": "Julia", "code": "\n# v0.6.0\n\nrad = \u03c0 / 4\ndeg = 45.0\n\n@show rad deg\n@show sin(rad) sin(deg2rad(deg))\n@show cos(rad) cos(deg2rad(deg))\n@show tan(rad) tan(deg2rad(deg))\n@show asin(sin(rad)) asin(sin(rad)) |> rad2deg\n@show acos(cos(rad)) acos(cos(rad)) |> rad2deg\n@show atan(tan(rad)) atan(tan(rad)) |> rad2deg\n\n\nOutput:\nrad = 0.7853981633974483\ndeg = 45.0\nsin(rad) = 0.7071067811865475\nsin(deg2rad(deg)) = 0.7071067811865475\ncos(rad) = 0.7071067811865476\ncos(deg2rad(deg)) = 0.7071067811865476\ntan(rad) = 0.9999999999999999\ntan(deg2rad(deg)) = 0.9999999999999999\nasin(sin(rad)) = 0.7853981633974482\nasin(sin(rad)) |> rad2deg = 44.99999999999999\nacos(cos(rad)) = 0.7853981633974483\nacos(cos(rad)) |> rad2deg = 45.0\natan(tan(rad)) = 0.7853981633974483\natan(tan(rad)) |> rad2deg = 45.0\n", "explain": ""}, {"task_name": "Trigonometric functions", "task_url": "https://rosettacode.org/wiki/Trigonometric_functions", "task_cat": "Geometry", "lang": "SAS", "code": "\ndata _null_;\npi = 4*atan(1);\ndeg = 30;\nrad = pi/6;\nk = pi/180;\nx = 0.2;\n\na = sin(rad);\nb = sin(deg*k);\nput a b;\n\na = cos(rad);\nb = cos(deg*k);\nput a b;\n\na = tan(rad);\nb = tan(deg*k);\nput a b;\n\na=arsin(x);\nb=arsin(x)/k;\nput a b;\n\na=arcos(x);\nb=arcos(x)/k;\nput a b;\n\na=atan(x);\nb=atan(x)/k;\nput a b;\nrun;\n\n", "explain": ""}, {"task_name": "Trigonometric functions", "task_url": "https://rosettacode.org/wiki/Trigonometric_functions", "task_cat": "Geometry", "lang": "Kotlin", "code": "\nimport kotlin.math.*\n\nfun main() {\n    fun Double.toDegrees() = this * 180 / PI\n    val angle = PI / 4\n    \n    println(\"angle = $angle rad = ${angle.toDegrees()}\u00b0\")\n    val sine = sin(angle)\n    println(\"sin(angle) = $sine\")\n    val cosine = cos(angle)\n    println(\"cos(angle) = $cosine\")\n    val tangent = tan(angle)\n    println(\"tan(angle) = $tangent\")\n    println()\n\n    val asin = asin(sine)\n    println(\"asin(sin(angle)) = $asin rad = ${asin.toDegrees()}\u00b0\")\n    val acos = acos(cosine)\n    println(\"acos(cos(angle)) = $acos rad = ${acos.toDegrees()}\u00b0\")\n    val atan = atan(tangent)\n    println(\"atan(tan(angle)) = $atan rad = ${atan.toDegrees()}\u00b0\")\n}\n\n\nOutput:\nangle = 0.7853981633974483 rad = 45.0\u00b0\nsin(angle) = 0.7071067811865475\ncos(angle) = 0.7071067811865476\ntan(angle) = 0.9999999999999999\n\nasin(sin(angle)) = 0.7853981633974482 rad = 44.99999999999999\u00b0\nacos(cos(angle)) = 0.7853981633974483 rad = 45.0\u00b0\natan(tan(angle)) = 0.7853981633974483 rad = 45.0\u00b0\n\n", "explain": ""}, {"task_name": "Trigonometric functions", "task_url": "https://rosettacode.org/wiki/Trigonometric_functions", "task_cat": "Geometry", "lang": "Perl", "code": "\nWorks with: Perl version 5.8.8\nuse Math::Trig;\n\nmy $angle_degrees = 45;\nmy $angle_radians = pi / 4;\n\nprint sin($angle_radians), ' ', sin(deg2rad($angle_degrees)), \"\\n\";\nprint cos($angle_radians), ' ', cos(deg2rad($angle_degrees)), \"\\n\";\nprint tan($angle_radians), ' ', tan(deg2rad($angle_degrees)), \"\\n\";\nprint cot($angle_radians), ' ', cot(deg2rad($angle_degrees)), \"\\n\";\nmy $asin = asin(sin($angle_radians));\nprint $asin, ' ', rad2deg($asin), \"\\n\";\nmy $acos = acos(cos($angle_radians));\nprint $acos, ' ', rad2deg($acos), \"\\n\";\nmy $atan = atan(tan($angle_radians));\nprint $atan, ' ', rad2deg($atan), \"\\n\";\nmy $acot = acot(cot($angle_radians));\nprint $acot, ' ', rad2deg($acot), \"\\n\";\n\n\nOutput:\n0.707106781186547 0.707106781186547\n0.707106781186548 0.707106781186548\n1 1\n1 1\n0.785398163397448 45\n0.785398163397448 45\n0.785398163397448 45\n0.785398163397448 45\n\n", "explain": ""}, {"task_name": "Trigonometric functions", "task_url": "https://rosettacode.org/wiki/Trigonometric_functions", "task_cat": "Geometry", "lang": "Lua", "code": "\nprint(math.cos(1), math.sin(1), math.tan(1), math.atan(1), math.atan2(3, 4))\n\n", "explain": ""}, {"task_name": "Trigonometric functions", "task_url": "https://rosettacode.org/wiki/Trigonometric_functions", "task_cat": "Geometry", "lang": "Scala", "code": "\nLibrary: Scalaimport scala.math._\n\nobject Gonio extends App {\n  //Pi / 4 rad is 45 degrees. All answers should be the same.\n  val radians = Pi / 4\n  val degrees = 45.0\n\n  println(s\"${sin(radians)} ${sin(toRadians(degrees))}\")\n  //cosine\n  println(s\"${cos(radians)} ${cos(toRadians(degrees))}\")\n  //tangent\n  println(s\"${tan(radians)} ${tan(toRadians(degrees))}\")\n  //arcsine\n  val bgsin = asin(sin(radians))\n  println(s\"$bgsin ${toDegrees(bgsin)}\")\n  val bgcos = acos(cos(radians))\n  println(s\"$bgcos ${toDegrees(bgcos)}\")\n  //arctangent\n  val bgtan = atan(tan(radians))\n  println(s\"$bgtan ${toDegrees(bgtan)}\")\n  val bgtan2 = atan2(1, 1)\n  println(s\"$bgtan ${toDegrees(bgtan)}\")\n}\n\n", "explain": ""}, {"task_name": "Trigonometric functions", "task_url": "https://rosettacode.org/wiki/Trigonometric_functions", "task_cat": "Geometry", "lang": "D", "code": "\nTranslation of: C\nvoid main() {\n    import std.stdio, std.math;\n\n    enum degrees = 45.0L;\n    enum t0 = degrees * PI / 180.0L;\n    writeln(\"Reference:  0.7071067811865475244008\");\n    writefln(\"Sine:      \u00a0%.20f \u00a0%.20f\", PI_4.sin, t0.sin);\n    writefln(\"Cosine:    \u00a0%.20f \u00a0%.20f\", PI_4.cos, t0.cos);\n    writefln(\"Tangent:   \u00a0%.20f \u00a0%.20f\", PI_4.tan, t0.tan);\n\n    writeln;\n    writeln(\"Reference:  0.7853981633974483096156\");\n    immutable real t1 = PI_4.sin.asin;\n    writefln(\"Arcsine:   \u00a0%.20f\u00a0%.20f\", t1, t1 * 180.0L / PI);\n\n    immutable real t2 = PI_4.cos.acos;\n    writefln(\"Arccosine: \u00a0%.20f\u00a0%.20f\", t2, t2 * 180.0L / PI);\n\n    immutable real t3 = PI_4.tan.atan;\n    writefln(\"Arctangent:\u00a0%.20f\u00a0%.20f\", t3, t3 * 180.0L / PI);\n}\n\n\nOutput:\nReference:  0.7071067811865475244008\nSine:       0.70710678118654752442  0.70710678118654752442\nCosine:     0.70710678118654752438  0.70710678118654752438\nTangent:    1.00000000000000000000  1.00000000000000000000\n\nReference:  0.7853981633974483096156\nArcsine:    0.78539816339744830970 45.00000000000000000400\nArccosine:  0.78539816339744830961 45.00000000000000000000\nArctangent: 0.78539816339744830961 45.00000000000000000000\n", "explain": ""}, {"task_name": "Trigonometric functions", "task_url": "https://rosettacode.org/wiki/Trigonometric_functions", "task_cat": "Geometry", "lang": "Haskell", "code": "\n\nfromDegrees :: Floating a => a -> a\nfromDegrees deg = deg * pi / 180\n\ntoDegrees :: Floating a => a -> a\ntoDegrees rad = rad * 180 / pi\n\nmain :: IO ()\nmain =\n  mapM_\n    print\n    [ sin (pi / 6)\n    , sin (fromDegrees 30)\n    , cos (pi / 6)\n    , cos (fromDegrees 30)\n    , tan (pi / 6)\n    , tan (fromDegrees 30)\n    , asin 0.5\n    , toDegrees (asin 0.5)\n    , acos 0.5\n    , toDegrees (acos 0.5)\n    , atan 0.5\n    , toDegrees (atan 0.5)\n    ]\n\n\nOutput:\n0.49999999999999994\n0.49999999999999994\n0.8660254037844387\n0.8660254037844387\n0.5773502691896256\n0.5773502691896256\n0.5235987755982988\n29.999999999999996\n1.0471975511965976\n59.99999999999999\n0.46364760900080615\n26.56505117707799\n", "explain": "Trigonometric functions use radians; degrees require conversion.\n"}, {"task_name": "Trigonometric functions", "task_url": "https://rosettacode.org/wiki/Trigonometric_functions", "task_cat": "Geometry", "lang": "PL/SQL", "code": "\n\nDECLARE\n  pi NUMBER := 4 * atan(1);\n  radians NUMBER := pi / 4;\n  degrees NUMBER := 45.0;\nBEGIN\n  DBMS_OUTPUT.put_line(SIN(radians) || ' ' || SIN(degrees * pi/180) );\n  DBMS_OUTPUT.put_line(COS(radians) || ' ' || COS(degrees * pi/180) );\n  DBMS_OUTPUT.put_line(TAN(radians) || ' ' || TAN(degrees * pi/180) );\n  DBMS_OUTPUT.put_line(ASIN(SIN(radians)) || ' ' || ASIN(SIN(degrees * pi/180)) * 180/pi);\n  DBMS_OUTPUT.put_line(ACOS(COS(radians)) || ' ' || ACOS(COS(degrees * pi/180)) * 180/pi);\n  DBMS_OUTPUT.put_line(ATAN(TAN(radians)) || ' ' || ATAN(TAN(degrees * pi/180)) * 180/pi);\nend;\n\n\nOutput:\n,7071067811865475244008443621048490392889 ,7071067811865475244008443621048490392893\n,7071067811865475244008443621048490392783 ,7071067811865475244008443621048490392779\n1,00000000000000000000000000000000000001 1,00000000000000000000000000000000000002\n,7853981633974483096156608458198656891236 44,99999999999999999999999999999942521259\n,7853981633974483096156608458198857529988 45,00000000000000000000000000000057478811\n,7853981633974483096156608458198757210578 45,00000000000000000000000000000000000067\n\nATAN2(n1,n2) --Arctangent(y/x), -pi < result <= +pi\nSINH(n) --Hyperbolic sine\nCOSH(n) --Hyperbolic cosine\nTANH(n) --Hyperbolic tangent\n\n", "explain": "The transcendental functions COS, COSH, EXP, LN, LOG, SIN, SINH, SQRT, TAN, and TANH\nare accurate to 36 decimal digits. The transcendental functions ACOS, ASIN, ATAN, and\nATAN2 are accurate to 30 decimal digits.\nThe following trigonometric functions are also available\n"}, {"task_name": "Trigonometric functions", "task_url": "https://rosettacode.org/wiki/Trigonometric_functions", "task_cat": "Geometry", "lang": "Scheme", "code": "\n(define pi (* 4 (atan 1)))\n\n(define radians (/ pi 4))\n(define degrees 45)\n\n(display (sin radians))\n(display \" \")\n(display (sin (* degrees (/ pi 180))))\n(newline)\n\n(display (cos radians))\n(display \" \")\n(display (cos (* degrees (/ pi 180))))\n(newline)\n\n(display (tan radians))\n(display \" \")\n(display (tan (* degrees (/ pi 180))))\n(newline)\n \n(define arcsin (asin (sin radians)))\n(display arcsin)\n(display \" \")\n(display (* arcsin (/ 180 pi)))\n(newline)\n\n(define arccos (acos (cos radians)))\n(display arccos)\n(display \" \")\n(display (* arccos (/ 180 pi)))\n(newline)\n\n(define arctan (atan (tan radians)))\n(display arctan)\n(display \" \")\n(display (* arctan (/ 180 pi)))\n(newline)\n\n", "explain": ""}, {"task_name": "Trigonometric functions", "task_url": "https://rosettacode.org/wiki/Trigonometric_functions", "task_cat": "Geometry", "lang": "PowerShell", "code": "\nTranslation of: C\n$rad = [Math]::PI / 4\n$deg = 45\n'{0,10} {1,10}' -f 'Radians','Degrees'\n'{0,10:N6} {1,10:N6}' -f [Math]::Sin($rad), [Math]::Sin($deg * [Math]::PI / 180)\n'{0,10:N6} {1,10:N6}' -f [Math]::Cos($rad), [Math]::Cos($deg * [Math]::PI / 180)\n'{0,10:N6} {1,10:N6}' -f [Math]::Tan($rad), [Math]::Tan($deg * [Math]::PI / 180)\n$temp = [Math]::Asin([Math]::Sin($rad))\n'{0,10:N6} {1,10:N6}' -f $temp, ($temp * 180 / [Math]::PI)\n$temp = [Math]::Acos([Math]::Cos($rad))\n'{0,10:N6} {1,10:N6}' -f $temp, ($temp * 180 / [Math]::PI)\n$temp = [Math]::Atan([Math]::Tan($rad))\n'{0,10:N6} {1,10:N6}' -f $temp, ($temp * 180 / [Math]::PI)\n\n\nOutput:\n   Radians    Degrees\n  0,707107   0,707107\n  0,707107   0,707107\n  1,000000   1,000000\n  0,785398  45,000000\n  0,785398  45,000000\n  0,785398  45,000000\nA More \"PowerShelly\" Way[edit]\n\n$radians = [Math]::PI / 4\n$degrees = 45\n\n[PSCustomObject]@{Radians=[Math]::Sin($radians); Degrees=[Math]::Sin($degrees * [Math]::PI / 180)}\n[PSCustomObject]@{Radians=[Math]::Cos($radians); Degrees=[Math]::Cos($degrees * [Math]::PI / 180)}\n[PSCustomObject]@{Radians=[Math]::Tan($radians); Degrees=[Math]::Tan($degrees * [Math]::PI / 180)}\n\n[double]$tempVar = [Math]::Asin([Math]::Sin($radians))\n[PSCustomObject]@{Radians=$tempVar; Degrees=$tempVar * 180 / [Math]::PI}\n\n[double]$tempVar = [Math]::Acos([Math]::Cos($radians))\n[PSCustomObject]@{Radians=$tempVar; Degrees=$tempVar * 180 / [Math]::PI}\n\n[double]$tempVar = [Math]::Atan([Math]::Tan($radians))\n[PSCustomObject]@{Radians=$tempVar; Degrees=$tempVar * 180 / [Math]::PI}\n\n\nOutput:\n          Radians           Degrees\n          -------           -------\n0.707106781186547 0.707106781186547\n0.707106781186548 0.707106781186548\n                1                 1\n0.785398163397448                45\n0.785398163397448                45\n0.785398163397448                45\n\n", "explain": "I would send the output as an array of objects containing the ([double]) properties: Radians and Degrees.\nNotice the difference between the last decimal place in the first two objects.  If you were calculating coordinates as a civil engineer or land surveyor this difference could affect your measurments.  Additionally, the output is an array of objects containing [double] values rather than an array of strings.\n"}, {"task_name": "Trigonometric functions", "task_url": "https://rosettacode.org/wiki/Trigonometric_functions", "task_cat": "Geometry", "lang": "Logo", "code": "\n\nprint sin 45\nprint cos 45\nprint arctan 1\nmake \"pi (radarctan 0 1) * 2\u00a0; based on quadrant if uses two parameters\nprint radsin :pi / 4\nprint radcos :pi / 4\nprint 4 * radarctan 1\n\nprint sin 45\nprint cos 45\nprint arctan 1\nprint radsin pi / 4\nprint radcos pi / 4\nprint 4 * radarctan 1\n", "explain": "UCB Logo has sine, cosine, and arctangent; each having variants for degrees or radians.\n\nLhogho has pi defined in its trigonometric functions. Otherwise the same as UCB Logo.\n"}, {"task_name": "Trigonometric functions", "task_url": "https://rosettacode.org/wiki/Trigonometric_functions", "task_cat": "Geometry", "lang": "F#", "code": "\nopen NUnit.Framework\nopen FsUnit\n\n// radian\n\n[<Test>]\nlet ``Verify that sin pi returns 0`` () =\n  let x = System.Math.Sin System.Math.PI\n  System.Math.Round(x,5) |> should equal 0\n\n[<Test>]\nlet ``Verify that cos pi returns -1`` () =\n  let x = System.Math.Cos System.Math.PI\n  System.Math.Round(x,5) |> should equal -1\n\n[<Test>]\nlet ``Verify that tan pi returns 0`` () =\n  let x = System.Math.Tan System.Math.PI\n  System.Math.Round(x,5) |> should equal 0\n\n[<Test>]\nlet ``Verify that sin pi/2 returns 1`` () =\n  let x = System.Math.Sin (System.Math.PI / 2.0)\n  System.Math.Round(x,5) |> should equal 1\n\n[<Test>]\nlet ``Verify that cos pi/2 returns -1`` () =\n  let x = System.Math.Cos (System.Math.PI / 2.0)\n  System.Math.Round(x,5) |> should equal 0\n\n[<Test>]\nlet ``Verify that sin pi/3 returns sqrt 3/2`` () =\n  let actual = System.Math.Sin (System.Math.PI / 3.0)\n  let expected = System.Math.Round((System.Math.Sqrt 3.0) / 2.0, 5)\n  System.Math.Round(actual,5) |> should equal expected\n\n[<Test>]\nlet ``Verify that cos pi/3 returns -1`` () =\n  let x = System.Math.Cos (System.Math.PI / 3.0)\n  System.Math.Round(x,5) |> should equal 0.5\n\n[<Test>]\nlet ``Verify that cos and sin of pi/4 return same value`` () =\n  let c = System.Math.Cos (System.Math.PI / 4.0)\n  let s = System.Math.Sin (System.Math.PI / 4.0)\n  System.Math.Round(c,5) = System.Math.Round(s,5) |> should be True\n\n[<Test>]\nlet ``Verify that acos pi/3 returns 1/2`` () =\n  let actual = System.Math.Acos 0.5\n  let expected = System.Math.Round((System.Math.PI / 3.0),5)\n  System.Math.Round(actual,5) |> should equal expected\n\n[<Test>]\nlet ``Verify that asin 1 returns pi/2`` () =\n  let actual = System.Math.Asin 1.0\n  let expected = System.Math.Round((System.Math.PI / 2.0),5)\n  System.Math.Round(actual,5) |> should equal expected\n\n[<Test>]\nlet ``Verify that atan 0 returns 0`` () =\n  let actual = System.Math.Atan 0.0\n  let expected = System.Math.Round(0.0,5)\n  System.Math.Round(actual,5) |> should equal expected\n\n// degree\n\nlet toRadians d = d * System.Math.PI / 180.0\n\n[<Test>]\nlet ``Verify that pi is 180 degrees`` () =\n  toRadians 180.0 |> should equal System.Math.PI\n\n[<Test>]\nlet ``Verify that pi/2 is 90 degrees`` () =\n  toRadians 90.0 |> should equal (System.Math.PI / 2.0)\n\n[<Test>]\nlet ``Verify that pi/3 is 60 degrees`` () =\n  toRadians 60.0 |> should equal (System.Math.PI / 3.0)\n\n[<Test>]\nlet ``Verify that sin 180 returns 0`` () =\n  let x = System.Math.Sin (toRadians 180.0)\n  System.Math.Round(x,5) |> should equal 0\n\n[<Test>]\nlet ``Verify that cos 180 returns -1`` () =\n  let x = System.Math.Cos (toRadians 180.0)\n  System.Math.Round(x,5) |> should equal -1\n\n[<Test>]\nlet ``Verify that tan 180 returns 0`` () =\n  let x = System.Math.Tan (toRadians 180.0)\n  System.Math.Round(x,5) |> should equal 0\n\n[<Test>]\nlet ``Verify that sin 90 returns 1`` () =\n  let x = System.Math.Sin (toRadians 90.0)\n  System.Math.Round(x,5) |> should equal 1\n\n[<Test>]\nlet ``Verify that cos 90 returns -1`` () =\n  let x = System.Math.Cos (toRadians 90.0)\n  System.Math.Round(x,5) |> should equal 0\n\n[<Test>]\nlet ``Verify that sin 60 returns sqrt 3/2`` () =\n  let actual = System.Math.Sin (toRadians 60.0)\n  let expected = System.Math.Round((System.Math.Sqrt 3.0) / 2.0, 5)\n  System.Math.Round(actual,5) |> should equal expected\n\n[<Test>]\nlet ``Verify that cos 60 returns -1`` () =\n  let x = System.Math.Cos (toRadians 60.0)\n  System.Math.Round(x,5) |> should equal 0.5\n\n[<Test>]\nlet ``Verify that cos and sin of 45 return same value`` () =\n  let c = System.Math.Cos (toRadians 45.0)\n  let s = System.Math.Sin (toRadians 45.0)\n  System.Math.Round(c,5) = System.Math.Round(s,5) |> should be True\n\n", "explain": ""}, {"task_name": "Trigonometric functions", "task_url": "https://rosettacode.org/wiki/Trigonometric_functions", "task_cat": "Geometry", "lang": "Groovy", "code": "\n\ndef radians = Math.PI/4\ndef degrees = 45\n\ndef d2r = { it*Math.PI/180 }\ndef r2d = { it*180/Math.PI }\n\nprintln \"sin(\\u03C0/4) = ${Math.sin(radians)}  == sin(45\\u00B0) = ${Math.sin(d2r(degrees))}\"\nprintln \"cos(\\u03C0/4) = ${Math.cos(radians)}  == cos(45\\u00B0) = ${Math.cos(d2r(degrees))}\"\nprintln \"tan(\\u03C0/4) = ${Math.tan(radians)}  == tan(45\\u00B0) = ${Math.tan(d2r(degrees))}\"\nprintln \"asin(\\u221A2/2) = ${Math.asin(2**(-0.5))} == asin(\\u221A2/2)\\u00B0 = ${r2d(Math.asin(2**(-0.5)))}\\u00B0\"\nprintln \"acos(\\u221A2/2) = ${Math.acos(2**(-0.5))} == acos(\\u221A2/2)\\u00B0 = ${r2d(Math.acos(2**(-0.5)))}\\u00B0\"\nprintln \"atan(1) = ${Math.atan(1)} == atan(1)\\u00B0 = ${r2d(Math.atan(1))}\\u00B0\"\n\n\nOutput:\nsin(\u03c0/4) = 0.7071067811865475  == sin(45\u00b0) = 0.7071067811865475\ncos(\u03c0/4) = 0.7071067811865476  == cos(45\u00b0) = 0.7071067811865476\ntan(\u03c0/4) = 0.9999999999999999  == tan(45\u00b0) = 0.9999999999999999\nasin(\u221a2/2) = 0.7853981633974482 == asin(\u221a2/2)\u00b0 = 44.99999999999999\u00b0\nacos(\u221a2/2) = 0.7853981633974484 == acos(\u221a2/2)\u00b0 = 45.00000000000001\u00b0\natan(1) = 0.7853981633974483 == atan(1)\u00b0 = 45.0\u00b0\n", "explain": "Trig functions use radians, degrees must be converted to/from radians\n"}, {"task_name": "Trigonometric functions", "task_url": "https://rosettacode.org/wiki/Trigonometric_functions", "task_cat": "Geometry", "lang": "AWK", "code": "\n\n\n\ntangent\n\narcsine\n\narccosine\n\n\n\n\n\n\ntan\n\u2061\n\u03b8\n=\n\n\nsin\n\u2061\n\u03b8\n\n\ncos\n\u2061\n\u03b8\n\n\n\n\n{\\displaystyle \\tan \\theta = \\frac{\\sin \\theta}{\\cos \\theta}}\n\n\n\n\n\n\n\ntan\n\u2061\n(\narcsin\n\u2061\ny\n)\n=\n\ny\n\n1\n\u2212\n\ny\n2\n\n\n\n\n\n{\\displaystyle \\tan(\\arcsin y) = \\frac{y}{\\sqrt{1 - y^2}}}\n\n\n\n\n\n\n\ntan\n\u2061\n(\narccos\n\u2061\nx\n)\n=\n\n\n1\n\u2212\n\nx\n2\n\n\nx\n\n\n\n{\\displaystyle \\tan(\\arccos x) = \\frac{\\sqrt{1 - x^2}}{x}}\n\n\n\n\n# tan(x) = tangent of x\nfunction tan(x) {\n\treturn sin(x) / cos(x)\n}\n\n# asin(y) = arcsine of y, domain [-1, 1], range [-pi/2, pi/2]\nfunction asin(y) {\n\treturn atan2(y, sqrt(1 - y * y))\n}\n\n# acos(x) = arccosine of x, domain [-1, 1], range [0, pi]\nfunction acos(x) {\n\treturn atan2(sqrt(1 - x * x), x)\n}\n\n# atan(y) = arctangent of y, range (-pi/2, pi/2)\nfunction atan(y) {\n\treturn atan2(y, 1)\n}\n\nBEGIN {\n\tpi = atan2(0, -1)\n\tdegrees = pi / 180\n\n\tprint \"Using radians:\"\n\tprint \"  sin(-pi / 6) =\", sin(-pi / 6)\n\tprint \"  cos(3 * pi / 4) =\", cos(3 * pi / 4)\n\tprint \"  tan(pi / 3) =\", tan(pi / 3)\n\tprint \"  asin(-1 / 2) =\", asin(-1 / 2)\n\tprint \"  acos(-sqrt(2) / 2) =\", acos(-sqrt(2) / 2)\n\tprint \"  atan(sqrt(3)) =\", atan(sqrt(3))\n\n\tprint \"Using degrees:\"\n\tprint \"  sin(-30) =\", sin(-30 * degrees)\n\tprint \"  cos(135) =\", cos(135 * degrees)\n\tprint \"  tan(60) =\", tan(60 * degrees)\n\tprint \"  asin(-1 / 2) =\", asin(-1 / 2) / degrees\n\tprint \"  acos(-sqrt(2) / 2) =\", acos(-sqrt(2) / 2) / degrees\n\tprint \"  atan(sqrt(3)) =\", atan(sqrt(3)) / degrees\n}\n\n\nOutput:\nUsing radians:\n  sin(-pi / 6) = -0.5\n  cos(3 * pi / 4) = -0.707107\n  tan(pi / 3) = 1.73205\n  asin(-1 / 2) = -0.523599\n  acos(-sqrt(2) / 2) = 2.35619\n  atan(sqrt(3)) = 1.0472\nUsing degrees:\n  sin(-30) = -0.5\n  cos(135) = -0.707107\n  tan(60) = 1.73205\n  asin(-1 / 2) = -30\n  acos(-sqrt(2) / 2) = 135\n  atan(sqrt(3)) = 60\n", "explain": "Awk only provides sin(), cos() and atan2(), the three bare necessities for trigonometry. They all use radians. To calculate the other functions, we use these three trigonometric identities:\nWith the magic of atan2(), arcsine of y is just atan2(y, sqrt(1 - y * y)), and arccosine of x is just atan2(sqrt(1 - x * x), x). This magic handles the angles arcsin(-1), arcsin 1 and arccos 0 that have no tangent. This magic also picks the angle in the correct range, so arccos(-1/2) is 2*pi/3 and not some wrong answer like -pi/3 (though tan(2*pi/3) = tan(-pi/3) = -sqrt(3).)\natan2(y, x) actually computes the angle of the point (x, y), in the range [-pi, pi]. When x > 0, this angle is the principle arctangent of y/x, in the range (-pi/2, pi/2). The calculations for arcsine and arccosine use points on the unit circle at x2 + y2 = 1. To calculate arcsine in the range [-pi/2, pi/2], we take the angle of points on the half-circle x = sqrt(1 - y2). To calculate arccosine in the range [0, pi], we take the angle of points on the half-circle y = sqrt(1 - x2).\n"}]