[{"task_name": "User input/Graphical", "task_url": "https://rosettacode.org/wiki/User_input/Graphical", "task_cat": "Text processing", "lang": "Python", "code": "\nWorks with: Python version 2.5\nLibrary: Tkinter\nimport Tkinter,tkSimpleDialog\n\nroot = Tkinter.Tk()\nroot.withdraw()\n\nnumber = tkSimpleDialog.askinteger(\"Integer\", \"Enter a Number\")\nstring = tkSimpleDialog.askstring(\"String\", \"Enter a String\")\n\nWorks with: Python version 3.7\nLibrary: Tkinter\nimport tkinter\nimport tkinter.simpledialog as tks\n \nroot = tkinter.Tk()\nroot.withdraw()\n \nnumber = tks.askinteger(\"Integer\", \"Enter a Number\")\nstring = tks.askstring(\"String\", \"Enter a String\")\n\ntkinter.messagebox.showinfo(\"Results\", f\"Your input:\\n {number} {string}\")\n\n", "explain": ""}, {"task_name": "User input/Graphical", "task_url": "https://rosettacode.org/wiki/User_input/Graphical", "task_cat": "Text processing", "lang": "C", "code": "\nLibrary: GTK\n#include <gtk/gtk.h>\n\nvoid ok_hit(GtkButton *o, GtkWidget **w)\n{\n  GtkMessageDialog *msg;\n\n  gdouble v = gtk_spin_button_get_value((GtkSpinButton *)w[1]);\n  const gchar *c = gtk_entry_get_text((GtkEntry *)w[0]);\n\n  msg = (GtkMessageDialog *)\n    gtk_message_dialog_new(NULL,\n\t\t\t   GTK_DIALOG_MODAL,\n\t\t\t   (v==75000) ? GTK_MESSAGE_INFO : GTK_MESSAGE_ERROR,\n\t\t\t   GTK_BUTTONS_OK,\n\t\t\t   \"You wrote '%s' and selected the number %d%s\",\n\t\t\t   c, (gint)v,\n\t\t\t   (v==75000) ? \"\" : \" which is wrong (75000 expected)!\");\n  gtk_widget_show_all(GTK_WIDGET(msg));\n  (void)gtk_dialog_run(GTK_DIALOG(msg));\n  gtk_widget_destroy(GTK_WIDGET(msg));\n  if ( v==75000 ) gtk_main_quit();\n}\n\nint main(int argc, char **argv)\n{\n  GtkWindow *win;\n  GtkEntry *entry;\n  GtkSpinButton *spin;\n  GtkButton *okbutton;\n  GtkLabel *entry_l, *spin_l;\n  GtkHBox *hbox[2];\n  GtkVBox *vbox;\n  GtkWidget *widgs[2];\n\n  gtk_init(&argc, &argv);\n  \n  win = (GtkWindow *)gtk_window_new(GTK_WINDOW_TOPLEVEL);\n  gtk_window_set_title(win, \"Insert values\");\n  \n  entry_l = (GtkLabel *)gtk_label_new(\"Insert a string\");\n  spin_l =  (GtkLabel *)gtk_label_new(\"Insert 75000\");\n\n  entry = (GtkEntry *)gtk_entry_new();\n  spin = (GtkSpinButton *)gtk_spin_button_new_with_range(0, 80000, 1);\n\n  widgs[0] = GTK_WIDGET(entry);\n  widgs[1] = GTK_WIDGET(spin);\n\n  okbutton = (GtkButton *)gtk_button_new_with_label(\"Ok\");\n  \n  hbox[0] = (GtkHBox *)gtk_hbox_new(FALSE, 1);\n  hbox[1] = (GtkHBox *)gtk_hbox_new(FALSE, 1);\n\n  vbox = (GtkVBox *)gtk_vbox_new(TRUE, 1);\n\n  gtk_container_add(GTK_CONTAINER(hbox[0]), GTK_WIDGET(entry_l));\n  gtk_container_add(GTK_CONTAINER(hbox[0]), GTK_WIDGET(entry));\n  gtk_container_add(GTK_CONTAINER(hbox[1]), GTK_WIDGET(spin_l));\n  gtk_container_add(GTK_CONTAINER(hbox[1]), GTK_WIDGET(spin));\n\n  gtk_container_add(GTK_CONTAINER(vbox), GTK_WIDGET(hbox[0]));\n  gtk_container_add(GTK_CONTAINER(vbox), GTK_WIDGET(hbox[1]));\n  gtk_container_add(GTK_CONTAINER(vbox), GTK_WIDGET(okbutton));\n\n  gtk_container_add(GTK_CONTAINER(win), GTK_WIDGET(vbox));\n\n  g_signal_connect(G_OBJECT(win), \"delete-event\", (GCallback)gtk_main_quit, NULL);\n  g_signal_connect(G_OBJECT(okbutton), \"clicked\", (GCallback)ok_hit, widgs);\n\n  gtk_widget_show_all(GTK_WIDGET(win));\n  gtk_main();\n\n  return 0;\n}\n\n", "explain": ""}, {"task_name": "User input/Graphical", "task_url": "https://rosettacode.org/wiki/User_input/Graphical", "task_cat": "Text processing", "lang": "C++", "code": "\n\ntask.h\n\n#ifndef TASK_H\n#define TASK_H\n\n#include <QWidget>\n\nclass QLabel ;\nclass QLineEdit ;\nclass QVBoxLayout ;\nclass QHBoxLayout ;\n\nclass EntryWidget : public QWidget {\n\n   Q_OBJECT \npublic :\n   EntryWidget( QWidget *parent = 0 ) ;\nprivate :\n   QHBoxLayout *upperpart , *lowerpart ;\n   QVBoxLayout *entryLayout ;\n   QLineEdit *stringinput ;\n   QLineEdit *numberinput ;\n   QLabel *stringlabel ;\n   QLabel *numberlabel ;\n} ;\n\n#endif\n\ntask.cpp\n\n#include <QLineEdit>\n#include <QLabel>\n#include <QHBoxLayout>\n#include <QVBoxLayout>\n#include <QString>\n#include \"task.h\"\n\nEntryWidget::EntryWidget ( QWidget *parent ) \n   : QWidget( parent ) {\n      entryLayout = new QVBoxLayout( this ) ;\n      stringlabel = new QLabel( \"Enter a string!\" ) ;\n      stringinput = new QLineEdit( \"\" ) ;\n      stringinput->setMaxLength( 20 ) ;\n      stringinput->setInputMask( QString( \"AAAAAAAAAAAAAAAAAAA\" ) ) ;\n      upperpart = new QHBoxLayout ;\n      upperpart->addWidget( stringlabel ) ;\n      upperpart->addWidget( stringinput ) ;\n      numberlabel = new QLabel( \"Enter a number!\" ) ;\n      numberinput = new QLineEdit( \"0\" ) ;\n      numberinput->setMaxLength( 5 ) ;\n      numberinput->setInputMask( QString( \"99999\" ) ) ;\n      lowerpart = new QHBoxLayout ;\n      lowerpart->addWidget( numberlabel ) ;\n      lowerpart->addWidget( numberinput ) ;\n      entryLayout->addLayout( upperpart ) ;\n      entryLayout->addLayout( lowerpart ) ;\n      setLayout( entryLayout ) ;\n}\n\nmain.cpp\n\n#include <QApplication>\n#include \"task.h\"\n\nint main( int argc , char *argv[ ] ) {\n   QApplication app( argc , argv ) ;\n   EntryWidget theWidget ;\n   theWidget.show( ) ;\n   return app.exec( ) ;\n}\n\n", "explain": "using library Qt 4.4 , first using qmake -project, then qmake -o Makefile <projectfile> and then make\n"}, {"task_name": "User input/Graphical", "task_url": "https://rosettacode.org/wiki/User_input/Graphical", "task_cat": "Text processing", "lang": "Java", "code": "\nLibrary: Swing\nimport javax.swing.*;\n\npublic class GetInputSwing {\n    public static void main(String[] args) throws Exception {\n        int number = Integer.parseInt(\n                JOptionPane.showInputDialog (\"Enter an Integer\"));\n        String string = JOptionPane.showInputDialog (\"Enter a String\");\n    }\n}\n\n", "explain": ""}, {"task_name": "User input/Graphical", "task_url": "https://rosettacode.org/wiki/User_input/Graphical", "task_cat": "Text processing", "lang": "JavaScript", "code": "\nWorks with: FireFox or any JavaScript-enabled browser\nvar str = prompt(\"Enter a string\");\nvar value = 0;\nwhile (value != 75000) {\n    value = parseInt( prompt(\"Enter the number 75000\") );\n}\n\n", "explain": ""}, {"task_name": "User input/Graphical", "task_url": "https://rosettacode.org/wiki/User_input/Graphical", "task_cat": "Text processing", "lang": "Scratch", "code": "\n\n", "explain": "The Sensing block \"ask _____ and wait\" pops up a word balloon with a question in it and waits for user input. The input is returned in \"answer,\" essentially a special variable. It can be treated as a string or a number, depending on context. \"Answer\" cannot be modified, but its value can be stored in other variables.\nA slightly fancier version of this example can be tried on-line and downloaded.\n\n"}, {"task_name": "User input/Graphical", "task_url": "https://rosettacode.org/wiki/User_input/Graphical", "task_cat": "Text processing", "lang": "Go", "code": "\nLibrary: gotk3\npackage main\n\nimport (\n    \"github.com/gotk3/gotk3/gtk\"\n    \"log\"\n    \"math/rand\"\n    \"strconv\"\n    \"time\"\n)\n\nfunc validateInput(window *gtk.Window, str1, str2 string) bool {\n    n, err := strconv.ParseFloat(str2, 64)\n    if len(str1) == 0 || err != nil || n != 75000 {\n        dialog := gtk.MessageDialogNew(\n            window,\n            gtk.DIALOG_MODAL,\n            gtk.MESSAGE_ERROR,\n            gtk.BUTTONS_OK,\n            \"Invalid input\",\n        )\n        dialog.Run()\n        dialog.Destroy()\n        return false\n    }\n    return true\n}\n\nfunc check(err error, msg string) {\n    if err != nil {\n        log.Fatal(msg, err)\n    }\n}\n\nfunc main() {\n    rand.Seed(time.Now().UnixNano())\n    gtk.Init(nil)\n\n    window, err := gtk.WindowNew(gtk.WINDOW_TOPLEVEL)\n    check(err, \"Unable to create window:\")\n    window.SetTitle(\"Rosetta Code\")\n    window.SetPosition(gtk.WIN_POS_CENTER)\n    window.Connect(\"destroy\", func() {\n        gtk.MainQuit()\n    })\n\n    vbox, err := gtk.BoxNew(gtk.ORIENTATION_VERTICAL, 1)\n    check(err, \"Unable to create vertical box:\")\n    vbox.SetBorderWidth(1)\n\n    hbox1, err := gtk.BoxNew(gtk.ORIENTATION_HORIZONTAL, 1)\n    check(err, \"Unable to create first horizontal box:\")\n\n    hbox2, err := gtk.BoxNew(gtk.ORIENTATION_HORIZONTAL, 1)\n    check(err, \"Unable to create second horizontal box:\")\n\n    label, err := gtk.LabelNew(\"Enter a string and the number 75000   \\n\")\n    check(err, \"Unable to create label:\")\n\n    sel, err := gtk.LabelNew(\"String:      \")\n    check(err, \"Unable to create string entry label:\")\n\n    nel, err := gtk.LabelNew(\"Number: \")\n    check(err, \"Unable to create number entry label:\")\n\n    se, err := gtk.EntryNew()\n    check(err, \"Unable to create string entry:\")\n\n    ne, err := gtk.EntryNew()\n    check(err, \"Unable to create number entry:\")\n\n    hbox1.PackStart(sel, false, false, 2)\n    hbox1.PackStart(se, false, false, 2)\n\n    hbox2.PackStart(nel, false, false, 2)\n    hbox2.PackStart(ne, false, false, 2)\n\n    // button to accept\n    ab, err := gtk.ButtonNewWithLabel(\"Accept\")\n    check(err, \"Unable to create accept button:\")\n    ab.Connect(\"clicked\", func() {\n        // read and validate the entered values\n        str1, _ := se.GetText()\n        str2, _ := ne.GetText()\n        if validateInput(window, str1, str2) {\n            window.Destroy() // close window if input is OK\n        }\n    })\n\n    vbox.Add(label)\n    vbox.Add(hbox1)\n    vbox.Add(hbox2)\n    vbox.Add(ab)\n    window.Add(vbox)\n\n    window.ShowAll()\n    gtk.Main()\n}\n\n", "explain": ""}, {"task_name": "User input/Graphical", "task_url": "https://rosettacode.org/wiki/User_input/Graphical", "task_cat": "Text processing", "lang": "Delphi", "code": "\nprogram UserInputGraphical;\n\n{$APPTYPE CONSOLE}\n\nuses SysUtils, Dialogs;\n\nvar\n  s: string;\n  lStringValue: string;\n  lIntegerValue: Integer;\nbegin\n  lStringValue := InputBox('User input/Graphical', 'Enter a string', '');\n\n  repeat\n    s := InputBox('User input/Graphical', 'Enter the number 75000', '75000');\n    lIntegerValue := StrToIntDef(s, 0);\n    if lIntegerValue <> 75000 then\n      ShowMessage('Invalid entry: ' + s);\n  until lIntegerValue = 75000;\nend.\n\n", "explain": ""}, {"task_name": "User input/Graphical", "task_url": "https://rosettacode.org/wiki/User_input/Graphical", "task_cat": "Text processing", "lang": "Ruby", "code": "\n\nLibrary: Ruby/Tk\nrequire 'tk'\n\ndef main\n  root = TkRoot.new\n  l1 = TkLabel.new(root, \"text\" => \"input a string\")\n  e1 = TkEntry.new(root)\n  l2 = TkLabel.new(root, \"text\" => \"input the number 75000\")\n  e2 = TkEntry.new(root) do\n    validate \"focusout\"\n    validatecommand lambda {e2.value.to_i == 75_000}\n    invalidcommand  lambda {focus_number_entry(e2)}\n  end\n  ok = TkButton.new(root) do\n    text \"OK\"\n    command lambda {validate_input(e1, e2)}\n  end\n  Tk.grid(l1, e1)\n  Tk.grid(l2, e2)\n  Tk.grid(\"x\",ok, \"sticky\" => \"w\")  \n  Tk.mainloop\nend\n\ndef validate_input(text_entry, number_entry)\n  if number_entry.value.to_i != 75_000\n    focus_number_entry(number_entry)\n  else\n    puts %Q{You entered: \"#{text_entry.value}\" and \"#{number_entry.value}\"}\n    root.destroy\n  end\nend\n\ndef focus_number_entry(widget)\n  widget \\\n    .configure(\"background\" => \"red\", \"foreground\" => \"white\") \\\n    .selection_range(0, \"end\") \\\n    .focus\nend\n\nmain\n\nLibrary: Shoes\nShoes.app do\n  string = ask('Enter a string:')\n  begin\n    number = ask('Enter the number 75000:')\n  end while number.to_i != 75000\n  para %Q{you entered the string \"#{string}\" and the number #{number}}\nend\n\n", "explain": "Unlike most other solutions, this validates the input number to be 75,000.\n"}, {"task_name": "User input/Graphical", "task_url": "https://rosettacode.org/wiki/User_input/Graphical", "task_cat": "Text processing", "lang": "R", "code": "\nlibrary(gWidgets)\noptions(guiToolkit=\"RGtk2\") ## using gWidgtsRGtk2\n\nw <- gwindow(\"Enter a string and a number\")\nlyt <- glayout(cont=w)\nlyt[1,1] <- \"Enter a string\"\nlyt[1,2] <- gedit(\"\", cont=lyt)\nlyt[2,1] <- \"Enter 75000\"\nlyt[2,2] <- gedit(\"\", cont=lyt)\nlyt[3,2] <- gbutton(\"validate\", cont=lyt, handler=function(h,...) {\n  txt <- svalue(lyt[1,2])\n  x <- svalue(lyt[2,2])\n  x <- gsub(\",\", \"\", x)\n  x <- as.integer(x)\n\n  if(nchar(txt) > 0 && x == 75000)\n    gmessage(\"Congratulations, you followed directions\", parent=w)\n  else\n    gmessage(\"You failed this simple task\", parent=w)\n})\n\n", "explain": ""}, {"task_name": "User input/Graphical", "task_url": "https://rosettacode.org/wiki/User_input/Graphical", "task_cat": "Text processing", "lang": "Visual_Basic", "code": "\n\n", "explain": "Visual Basic can use the above VBScript or PowerBASIC examples unchanged (aside from changing PB's FUNCTION PBMAIN to Sub Main).\nAlternately, a form could be easily created (using the form designer) to get both values at once, but that is a task almost never done at runtime, instead being done within the IDE while creating the program.\n"}, {"task_name": "User input/Graphical", "task_url": "https://rosettacode.org/wiki/User_input/Graphical", "task_cat": "Text processing", "lang": "Ada", "code": "\nLibrary: GTK\u00a0version GtkAda\nLibrary: GtkAda\nwith Gtk.Button;  use Gtk.Button;\nwith Gtk.GEntry;  use Gtk.GEntry;\nwith Gtk.Label;   use Gtk.Label;\nwith Gtk.Window;  use Gtk.Window;\nwith Gtk.Widget;  use Gtk.Widget;\nwith Gtk.Table;   use Gtk.Table;\n \nwith Gtk.Handlers;\nwith Gtk.Main;\n \nprocedure Graphic_Input is\n   Window  : Gtk_Window;\n   Grid    : Gtk_Tnetable;\n   Label   : Gtk_Label;\n   Message : Gtk_Label;\n   Edit    : Gtk_GEntry;\n   Button  : Gtk_Button;\n \n   package Handlers is new Gtk.Handlers.Callback (Gtk_Widget_Record);\n   package Return_Handlers is\n      new Gtk.Handlers.Return_Callback (Gtk_Widget_Record, Boolean);\n \n   function Delete_Event (Widget : access Gtk_Widget_Record'Class)\n      return Boolean is\n   begin\n      return False;\n   end Delete_Event;\n \n   procedure Destroy (Widget : access Gtk_Widget_Record'Class) is\n   begin\n      Gtk.Main.Main_Quit;\n   end Destroy;\n \n   procedure Clicked (Widget : access Gtk_Widget_Record'Class) is\n   begin\n      if Get_Text (Label) = \"Enter integer:\" then\n         Set_Text (Message, \"Entered:\" & Integer'Image (Integer'Value (Get_Text (Edit))));\n         Set_Sensitive (Button, False);\n      else\n         Set_Text (Message, \"Entered:\" & Get_Text (Edit));\n         Set_Text (Label, \"Enter integer:\");\n      end if;\n   exception\n      when Constraint_Error =>\n         Set_Text (Message, \"Error integer input\");\n   end Clicked;\n \nbegin\n   Gtk.Main.Init;\n   Gtk.Window.Gtk_New (Window);\n   Gtk_New (Grid, 2, 3, False);\n   Add (Window, Grid);\n   Gtk_New (Label, \"Enter string:\");\n   Attach (Grid, Label, 0, 1, 0, 1);\n   Gtk_New (Edit);   \n   Attach (Grid, Edit, 1, 2, 0, 1);\n   Gtk_New (Button, \"OK\");   \n   Attach (Grid, Button, 2, 3, 0, 1);\n   Gtk_New (Message);\n   Attach (Grid, Message, 0, 3, 1, 2);\n   Return_Handlers.Connect\n   (  Window,\n      \"delete_event\",\n      Return_Handlers.To_Marshaller (Delete_Event'Access)\n   );\n   Handlers.Connect\n   (  Window,\n      \"destroy\",\n      Handlers.To_Marshaller (Destroy'Access)\n   );\n   Handlers.Connect\n   (  Button,\n      \"clicked\",\n      Handlers.To_Marshaller (Clicked'Access)\n   );\n   Show_All (Grid);\n   Show (Window);\n \n   Gtk.Main.Main;\nend Graphic_Input;\n\n", "explain": ""}, {"task_name": "User input/Graphical", "task_url": "https://rosettacode.org/wiki/User_input/Graphical", "task_cat": "Text processing", "lang": "Julia", "code": "\nusing Gtk\n\nfunction twoentrywindow()\n    txt = \"Enter Text Here\"\n    txtchanged = false\n    \n    win = GtkWindow(\"Keypress Test\", 500, 100) |> (GtkFrame() |> (vbox = GtkBox(:v)))\n    lab = GtkLabel(\"Enter some text in the first box and 7500 into the second box.\")\n    txtent = GtkEntry()\n    set_gtk_property!(txtent,:text,\"Enter Some Text Here\")\n    nument = GtkEntry()\n    set_gtk_property!(nument,:text,\"Enter the number seventy-five thousand here\")\n    push!(vbox, lab, txtent, nument)\n    \n    function keycall(w, event)\n        strtxt = get_gtk_property(txtent, :text, String)\n        numtxt = get_gtk_property(nument, :text, String)\n        if strtxt != txt && occursin(\"75000\", numtxt)\n            set_gtk_property!(lab, :label, \"You have accomplished the task.\")\n        end\n    end\n    signal_connect(keycall, win, \"key-press-event\")\n\n    cond = Condition()\n    endit(w) = notify(cond)\n    signal_connect(endit, win, :destroy)\n    showall(win)\n    wait(cond)\nend\n\ntwoentrywindow()\n\n", "explain": ""}, {"task_name": "User input/Graphical", "task_url": "https://rosettacode.org/wiki/User_input/Graphical", "task_cat": "Text processing", "lang": "Kotlin", "code": "\n// version 1.1\n\nimport javax.swing.JOptionPane\n\nfun main(args: Array<String>) {\n    do {\n        val number = JOptionPane.showInputDialog(\"Enter 75000\").toInt()\n    } while (number != 75000)\n}\n\n", "explain": ""}, {"task_name": "User input/Graphical", "task_url": "https://rosettacode.org/wiki/User_input/Graphical", "task_cat": "Text processing", "lang": "Perl", "code": "\nuse Wx;\n\npackage MyApp;\nuse base 'Wx::App';\nuse Wx qw(wxHORIZONTAL wxVERTICAL wxALL wxALIGN_CENTER);\nuse Wx::Event 'EVT_BUTTON';\n\nour ($frame, $text_input, $integer_input);\n\nsub OnInit\n   {$frame = new Wx::Frame\n       (undef, -1, 'Input window', [-1, -1], [250, 150]);\n\n    my $panel = new Wx::Panel($frame, -1);\n    $text_input = new Wx::TextCtrl($panel, -1, '');\n    $integer_input = new Wx::SpinCtrl\n       ($panel, -1, '', [-1, -1], [-1, -1],\n        0, 0, 100_000);\n\n    my $okay_button = new Wx::Button($panel, -1, 'OK');\n    EVT_BUTTON($frame, $okay_button, \\&OnQuit);\n\n    my $sizer = new Wx::BoxSizer(wxVERTICAL);\n    $sizer->Add($_, 0, wxALL | wxALIGN_CENTER, 5)\n        foreach $text_input, $integer_input, $okay_button;\n    $panel->SetSizer($sizer);\n\n    $frame->Show(1);}\n\nsub OnQuit\n   {print 'String: ', $text_input->GetValue, \"\\n\";\n    print 'Integer: ', $integer_input->GetValue, \"\\n\";\n    $frame->Close;}\n\n# ---------------------------------------------------------------\n\npackage main;\n\nMyApp->new->MainLoop;\n\n", "explain": ""}, {"task_name": "User input/Graphical", "task_url": "https://rosettacode.org/wiki/User_input/Graphical", "task_cat": "Text processing", "lang": "Scala", "code": "\nLibrary: Scala\nimport swing.Dialog.{Message, showInput}\nimport scala.swing.Swing\n \nobject UserInput extends App {\n  def responce = showInput(null,\n    \"Complete the sentence:\\n\\\"Green eggs and...\\\"\",\n    \"Customized Dialog\",\n    Message.Plain,\n    Swing.EmptyIcon,\n    Nil, \"ham\")\n  println(responce)\n}\n\n", "explain": ""}, {"task_name": "User input/Graphical", "task_url": "https://rosettacode.org/wiki/User_input/Graphical", "task_cat": "Text processing", "lang": "Dart", "code": "\nLibrary: Flutter\n\nimport 'package:flutter/material.dart';\n\nmain() => runApp( OutputLabel() );\n\nclass OutputLabel extends StatefulWidget {\n  @override\n  _OutputLabelState createState() => _OutputLabelState();\n}\n\nclass _OutputLabelState extends State<OutputLabel> {\n  String output = \"output\"; // This will be displayed in an output text field\n\n  TextEditingController _stringInputController = TextEditingController(); // Allows us to get the text from a text field \n  TextEditingController _numberInputController = TextEditingController();\n\n  @override\n  Widget build( BuildContext context ) {\n    return MaterialApp(\n      debugShowCheckedModeBanner: false, // Disable debug banner in top right\n      home: Scaffold ( // Scaffold provides a layout for the app\n        body: Center ( // Everything in the center widget will be centered\n          child: Column ( // All the widgets will be in a column\n            children: <Widget> [\n              SizedBox( height: 25 ), // Space between top and text field\n\n              TextField ( // String input Text Field\n                controller: _stringInputController, // Add input controller so we can grab text\n                textAlign: TextAlign.center, // Center text\n                decoration: InputDecoration( border: OutlineInputBorder(), labelText: 'Enter a string...'), // Border and default text\n              ), // end TextField\n\n              SizedBox( height: 10 ), // Space between text fields\n\n              TextField ( // Number input Text Field\n                controller: _numberInputController, // Add input controller so we can grab text\n                textAlign: TextAlign.center, // Center text\n                decoration: InputDecoration( border: OutlineInputBorder(), labelText: 'Enter 75000'), // Border and default text\n              ), // end TextField\n\n              FlatButton ( // Submit Button\n                child: Text('Submit Data'), // Button Text\n                color: Colors.blue[400] // button color\n                onPressed: () { // On pressed Callback for button\n                  setState( () {\n                    output = ''; // Reset output\n\n                    int number; // Int to store number in\n      \n                    var stringInput = _stringInputController.text ?? ''; // Get the input from the first field, if it is null set it to an empty string\n\n                    var numberString = _numberInputController.text ?? ''; // Get the input from the second field, if it is null set it to an empty string\n\n                    if ( stringInput == '')  { // If first field is empty\n                      output = 'Please enter something in field 1\\n';\n                      return;\n                    }\n\n                    if (_numberInputController.text == '') { // If second field is empty\n                      output += 'Please enter something in field 2';\n                      return;\n                    } else { // If we got an input in the second field\n\n                      try {\n                        number = int.parse( numberString ); // Parse numberString into an int\n\n                        if ( number == 75000 )\n                          output = 'text output: $stringInput\\nnumber: $number'; // Grabs the text from the input controllers and changes the string\n                        else\n                          output = '$number is not 75000!';\n\n                      } on FormatException { // If a number is not entered in second field\n                          output = '$numberString is not a number!';\n                      }\n\n                    }\n                    \n                  });\n                }   \n              ), // End FlatButton\n\n              Text( output ) // displays output\n\n            ]\n          )\n        )\n      )\n    );\n  }\n}\n\n", "explain": "Displays two text fields, a button and an output label, copy paste it into dartpad for viewing! - https://dartpad.github.io\n"}, {"task_name": "User input/Graphical", "task_url": "https://rosettacode.org/wiki/User_input/Graphical", "task_cat": "Text processing", "lang": "Haskell", "code": "\nUsing Library: gtk from HackageDB\nimport Graphics.UI.Gtk\nimport Control.Monad\n\nmain = do\n  initGUI\n\n  window <- windowNew\n  set window [windowTitle := \"Graphical user input\", containerBorderWidth := 10]\n\n  vb <- vBoxNew False 0\n  containerAdd window vb\n\n  hb1 <- hBoxNew False 0\n  boxPackStart vb hb1 PackNatural 0\n  hb2 <- hBoxNew False 0\n  boxPackStart vb hb2 PackNatural 0\n\n  lab1 <- labelNew (Just \"Enter number 75000\")\n  boxPackStart hb1 lab1 PackNatural 0\n  nrfield <- entryNew\n  entrySetText nrfield \"75000\"\n  boxPackStart hb1 nrfield PackNatural 5\n\n  strfield <- entryNew\n  boxPackEnd hb2 strfield PackNatural 5\n  lab2 <- labelNew (Just \"Enter a text\")\n  boxPackEnd hb2 lab2 PackNatural 0\n  \n  accbox    <- hBoxNew False 0\n  boxPackStart vb accbox PackNatural 5\n  im <- imageNewFromStock stockApply IconSizeButton\n  acceptButton <- buttonNewWithLabel \"Accept\"\n  buttonSetImage acceptButton im\n  boxPackStart accbox acceptButton PackRepel 0\n\n  txtstack <- statusbarNew\n  boxPackStart vb txtstack PackNatural 0\n  id <- statusbarGetContextId txtstack \"Line\"\n\n  widgetShowAll window\n\n  onEntryActivate nrfield (showStat nrfield txtstack id)\n  onEntryActivate strfield (showStat strfield txtstack id)\n    \n  onPressed acceptButton $ do\n    g <- entryGetText nrfield\n    if g==\"75000\" then\n      widgetDestroy window\n     else do\n       msgid <- statusbarPush txtstack id \"You didn't enter 75000. Try again\"\n       return ()\n  \n  onDestroy window mainQuit\n  mainGUI\n\nshowStat :: Entry -> Statusbar -> ContextId -> IO ()\nshowStat fld stk id = do\n    txt <- entryGetText fld\n    let mesg = \"You entered \\\"\" ++ txt ++ \"\\\"\"\n    msgid <- statusbarPush stk id mesg\n    return ()\n\n\n*Main> main\n\n", "explain": "Run in GHCi:\n"}, {"task_name": "User input/Graphical", "task_url": "https://rosettacode.org/wiki/User_input/Graphical", "task_cat": "Text processing", "lang": "VBScript", "code": "\nWorks with: Windows Script Host\nstrUserIn = InputBox(\"Enter Data\")\nWscript.Echo strUserIn\n\n", "explain": ""}, {"task_name": "User input/Graphical", "task_url": "https://rosettacode.org/wiki/User_input/Graphical", "task_cat": "Text processing", "lang": "PowerShell", "code": "\n\n#region Define the Windows Form\n[Void][Reflection.Assembly]::LoadWithPartialName(\"System.Windows.Forms\")\n\n$Form1 = New-Object System.Windows.Forms.Form\n$label1 = New-Object System.Windows.Forms.Label\n$label2 = New-Object System.Windows.Forms.Label\n$txtInputText = New-Object System.Windows.Forms.TextBox\n$txtInputNumber = New-Object System.Windows.Forms.TextBox\n$btnAccept = New-Object System.Windows.Forms.Button\n$label3 = New-Object System.Windows.Forms.Label\n$btnCancel = New-Object System.Windows.Forms.Button\n$SuspendLayout\n# \n# label1\n# \n$label1.AutoSize = $true\n$label1.Location = New-Object System.Drawing.Point(23, 36)\n$label1.Name = \"label1\"\n$label1.Size = New-Object System.Drawing.Size(34, 13)\n$label1.TabIndex = 0\n$label1.Text = \"String\"\n# \n# label2\n# \n$label2.AutoSize = $true\n$label2.Location = New-Object System.Drawing.Point(13, 62)\n$label2.Name = \"label2\"\n$label2.Size = New-Object System.Drawing.Size(44, 13)\n$label2.TabIndex = 1\n$label2.Text = \"Number\"\n# \n# txtInputText\n# \n$txtInputText.Location = New-Object System.Drawing.Point(63, 33)\n$txtInputText.Name = \"txtInputText\"\n$txtInputText.Size = New-Object System.Drawing.Size(100, 20)\n$txtInputText.TabIndex = 0\n# \n# txtInputNumber\n# \n$txtInputNumber.Location = New-Object System.Drawing.Point(63, 59)\n$txtInputNumber.Name = \"txtInputNumber\"\n$txtInputNumber.Size = New-Object System.Drawing.Size(100, 20)\n$txtInputNumber.TabIndex = 1\n$txtInputNumber.Text = \"75000\"\n# \n# btnAccept\n# \n$btnAccept.DialogResult = [System.Windows.Forms.DialogResult]::OK\n$btnAccept.Location = New-Object System.Drawing.Point(16, 94)\n$btnAccept.Name = \"btnAccept\"\n$btnAccept.Size = New-Object System.Drawing.Size(75, 23)\n$btnAccept.TabIndex = 2\n$btnAccept.Text = \"Accept\"\n$btnAccept.UseVisualStyleBackColor = $true\n$btnAccept.add_Click({$rc=\"Accept\"; $Form1.Close()})\n# \n# label3\n# \n$label3.AutoSize = $true\n$label3.Location = New-Object System.Drawing.Point(13, 9)\n$label3.Name = \"label3\"\n$label3.Size = New-Object System.Drawing.Size(173, 13)\n$label3.TabIndex = 5\n$label3.Text = \"Please input a string and a number:\"\n# \n# btnCancel\n# \n$btnCancel.DialogResult = [System.Windows.Forms.DialogResult]::Cancel\n$btnCancel.Location = New-Object System.Drawing.Point(97, 94)\n$btnCancel.Name = \"btnCancel\"\n$btnCancel.Size = New-Object System.Drawing.Size(75, 23)\n$btnCancel.TabIndex = 3\n$btnCancel.Text = \"Cancel\"\n$btnCancel.UseVisualStyleBackColor = $true\n# \n# Form1\n# \n$Form1.AcceptButton = $btnAccept\n$Form1.CancelButton = $btnCancel\n$Form1.ClientSize = New-Object System.Drawing.Size(196, 129)\n$Form1.ControlBox = $false\n$Form1.Controls.Add($btnCancel)\n$Form1.Controls.Add($label3)\n$Form1.Controls.Add($btnAccept)\n$Form1.Controls.Add($txtInputNumber)\n$Form1.Controls.Add($txtInputText)\n$Form1.Controls.Add($label2)\n$Form1.Controls.Add($label1)\n$Form1.Name = \"Form1\"\n$Form1.Text = \"RosettaCode\"\n\n#endregion Define the Windows Form\n\n### Show the input form\n$f = $Form1.ShowDialog()\nif ( $f -eq [System.Windows.Forms.DialogResult]::Cancel ) { \"User selected Cancel\" }\nelse { \"User entered `\"{0}`\" for the text and {1} for the number\" -f $txtInputText.Text, $txtInputNumber.Text }\n\n", "explain": "As a scripting/console language PowerShell was not designed for graphical interfaces.\nHowever, since PowerShell is a fully qualified .NET language the full functionality of the\nSystem.Windows.Forms assembly is available.\n\n"}, {"task_name": "User input/Graphical", "task_url": "https://rosettacode.org/wiki/User_input/Graphical", "task_cat": "Text processing", "lang": "Groovy", "code": "\nTranslation of: Java\nLibrary: Swing\n\nimport javax.swing.JOptionPane\n\ndef number = JOptionPane.showInputDialog (\"Enter an Integer\") as Integer\ndef string = JOptionPane.showInputDialog (\"Enter a String\")\n\nassert number instanceof Integer\nassert string instanceof String\n\n", "explain": "Solution:\n"}]