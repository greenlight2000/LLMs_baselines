[{"task_name": "Sierpinski carpet", "task_url": "https://rosettacode.org/wiki/Sierpinski_carpet", "task_cat": "Geometry", "lang": "Python", "code": "\n\ndef in_carpet(x, y):\n    while True:\n        if x == 0 or y == 0:\n            return True\n        elif x % 3 == 1 and y % 3 == 1:\n            return False\n        \n        x /= 3\n        y /= 3\n\ndef carpet(n):\n    for i in xrange(3 ** n):\n        for j in xrange(3 ** n):\n            if in_carpet(i, j):\n                print '*',\n            else:\n                print ' ',\n        print\n\n\nTranslation of: Ruby\ndef sierpinski_carpet(n):\n  carpet = [\"#\"]\n  for i in xrange(n):\n    carpet = [x + x + x for x in carpet] + \\\n             [x + x.replace(\"#\",\" \") + x for x in carpet] + \\\n             [x + x + x for x in carpet]\n  return \"\\n\".join(carpet)\n\nprint sierpinski_carpet(3)\n\n\nTranslation of: Haskell\nWorks with: Python version 3.7\n'''Iterations of the Sierpinski carpet'''\n\nfrom itertools import chain, islice\nfrom inspect import signature\nfrom operator import add\n\n\n# sierpinskiCarpet\u00a0:: Int -> [String]\ndef sierpinskiCarpet(n):\n    '''A string representing the nth\n       iteration of a Sierpinski carpet.\n    '''\n    f = zipWith(add)\n    g = flip(f)\n\n    # weave\u00a0:: [String] -> [String]\n    def weave(xs):\n        return bind([\n            xs,\n            [' ' * len(s) for s in xs],\n            xs\n        ])(compose(g(xs))(f(xs)))\n\n    return index(\n        iterate(weave)(['\u2593\u2593'])\n    )(n)\n\n\n# TEST ----------------------------------------------------\ndef main():\n    '''Test iteration of the Sierpinski carpet'''\n\n    levels = enumFromTo(0)(3)\n    t = ' ' * (\n        len(' -> ') +\n        max(map(compose(len)(str), levels))\n    )\n    print(\n        fTable(__doc__ + ':')(lambda x: '\\n' + str(x))(\n            lambda xs: xs[0] + '\\n' + (\n                unlines(map(lambda x: t + x, xs[1:])))\n        )\n        (sierpinskiCarpet)(levels)\n    )\n\n\n# GENERIC -------------------------------------------------\n\n# bind (>>=)\u00a0:: [a] -> (a -> [b]) -> [b]\ndef bind(xs):\n    '''List monad injection operator.\n       Two computations sequentially composed,\n       with any value produced by the first\n       passed as an argument to the second.'''\n    return lambda f: list(chain.from_iterable(\n        map(f, xs)\n    ))\n\n\n# compose (<<<)\u00a0:: (b -> c) -> (a -> b) -> a -> c\ndef compose(g):\n    '''Right to left function composition.'''\n    return lambda f: lambda x: g(f(x))\n\n\n# enumFromTo\u00a0:: (Int, Int) -> [Int]\ndef enumFromTo(m):\n    '''Integer enumeration from m to n.'''\n    return lambda n: list(range(m, 1 + n))\n\n\n# flip\u00a0:: (a -> b -> c) -> b -> a -> c\ndef flip(f):\n    '''The (curried or uncurried) function f with its\n       arguments reversed.'''\n    if 1 < len(signature(f).parameters):\n        return lambda a, b: f(b, a)\n    else:\n        return lambda a: lambda b: f(b)(a)\n\n\n# index (!!)\u00a0:: [a] -> Int -> a\ndef index(xs):\n    '''Item at given (zero-based) index.'''\n    return lambda n: None if 0 > n else (\n        xs[n] if (\n            hasattr(xs, \"__getitem__\")\n        ) else next(islice(xs, n, None))\n    )\n\n\n# iterate\u00a0:: (a -> a) -> a -> Gen [a]\ndef iterate(f):\n    '''An infinite list of repeated\n       applications of f to x.\n    '''\n    def go(x):\n        v = x\n        while True:\n            yield v\n            v = f(v)\n    return lambda x: go(x)\n\n\n# unlines\u00a0:: [String] -> String\ndef unlines(xs):\n    '''A single string derived by the intercalation\n       of a list of strings with the newline character.'''\n    return '\\n'.join(xs)\n\n\n# zipWith\u00a0:: (a -> b -> c) -> [a] -> [b] -> [c]\ndef zipWith(f):\n    '''A list constructed by zipping with a\n       custom function, rather than with the\n       default tuple constructor.'''\n    return lambda xs: lambda ys: (\n        map(f, xs, ys)\n    )\n\n\n# OUTPUT FORMATTING ---------------------------------------\n\n# fTable\u00a0:: String -> (a -> String) ->\n#                     (b -> String) -> (a -> b) -> [a] -> String\ndef fTable(s):\n    '''Heading -> x display function -> fx display function ->\n                     f -> xs -> tabular string.\n    '''\n    def go(xShow, fxShow, f, xs):\n        ys = [xShow(x) for x in xs]\n        w = max(map(len, ys))\n        return s + '\\n' + '\\n'.join(map(\n            lambda x, y: y.rjust(w, ' ') + ' -> ' + fxShow(f(x)),\n            xs, ys\n        ))\n    return lambda xShow: lambda fxShow: lambda f: lambda xs: go(\n        xShow, fxShow, f, xs\n    )\n\n\n# MAIN ---\nif __name__ == '__main__':\n    main()\n\n\nOutput:\nIterations of the Sierpinski carpet:\n\n0 -> \u2593\u2593\n\n\n1 -> \u2593\u2593\u2593\u2593\u2593\u2593\n     \u2593\u2593  \u2593\u2593\n     \u2593\u2593\u2593\u2593\u2593\u2593\n\n2 -> \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\n     \u2593\u2593  \u2593\u2593\u2593\u2593  \u2593\u2593\u2593\u2593  \u2593\u2593\n     \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\n     \u2593\u2593\u2593\u2593\u2593\u2593      \u2593\u2593\u2593\u2593\u2593\u2593\n     \u2593\u2593  \u2593\u2593      \u2593\u2593  \u2593\u2593\n     \u2593\u2593\u2593\u2593\u2593\u2593      \u2593\u2593\u2593\u2593\u2593\u2593\n     \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\n     \u2593\u2593  \u2593\u2593\u2593\u2593  \u2593\u2593\u2593\u2593  \u2593\u2593\n     \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\n\n3 -> \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\n     \u2593\u2593  \u2593\u2593\u2593\u2593  \u2593\u2593\u2593\u2593  \u2593\u2593\u2593\u2593  \u2593\u2593\u2593\u2593  \u2593\u2593\u2593\u2593  \u2593\u2593\u2593\u2593  \u2593\u2593\u2593\u2593  \u2593\u2593\u2593\u2593  \u2593\u2593\n     \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\n     \u2593\u2593\u2593\u2593\u2593\u2593      \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593      \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593      \u2593\u2593\u2593\u2593\u2593\u2593\n     \u2593\u2593  \u2593\u2593      \u2593\u2593  \u2593\u2593\u2593\u2593  \u2593\u2593      \u2593\u2593  \u2593\u2593\u2593\u2593  \u2593\u2593      \u2593\u2593  \u2593\u2593\n     \u2593\u2593\u2593\u2593\u2593\u2593      \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593      \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593      \u2593\u2593\u2593\u2593\u2593\u2593\n     \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\n     \u2593\u2593  \u2593\u2593\u2593\u2593  \u2593\u2593\u2593\u2593  \u2593\u2593\u2593\u2593  \u2593\u2593\u2593\u2593  \u2593\u2593\u2593\u2593  \u2593\u2593\u2593\u2593  \u2593\u2593\u2593\u2593  \u2593\u2593\u2593\u2593  \u2593\u2593\n     \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\n     \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593                  \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\n     \u2593\u2593  \u2593\u2593\u2593\u2593  \u2593\u2593\u2593\u2593  \u2593\u2593                  \u2593\u2593  \u2593\u2593\u2593\u2593  \u2593\u2593\u2593\u2593  \u2593\u2593\n     \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593                  \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\n     \u2593\u2593\u2593\u2593\u2593\u2593      \u2593\u2593\u2593\u2593\u2593\u2593                  \u2593\u2593\u2593\u2593\u2593\u2593      \u2593\u2593\u2593\u2593\u2593\u2593\n     \u2593\u2593  \u2593\u2593      \u2593\u2593  \u2593\u2593                  \u2593\u2593  \u2593\u2593      \u2593\u2593  \u2593\u2593\n     \u2593\u2593\u2593\u2593\u2593\u2593      \u2593\u2593\u2593\u2593\u2593\u2593                  \u2593\u2593\u2593\u2593\u2593\u2593      \u2593\u2593\u2593\u2593\u2593\u2593\n     \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593                  \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\n     \u2593\u2593  \u2593\u2593\u2593\u2593  \u2593\u2593\u2593\u2593  \u2593\u2593                  \u2593\u2593  \u2593\u2593\u2593\u2593  \u2593\u2593\u2593\u2593  \u2593\u2593\n     \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593                  \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\n     \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\n     \u2593\u2593  \u2593\u2593\u2593\u2593  \u2593\u2593\u2593\u2593  \u2593\u2593\u2593\u2593  \u2593\u2593\u2593\u2593  \u2593\u2593\u2593\u2593  \u2593\u2593\u2593\u2593  \u2593\u2593\u2593\u2593  \u2593\u2593\u2593\u2593  \u2593\u2593\n     \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\n     \u2593\u2593\u2593\u2593\u2593\u2593      \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593      \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593      \u2593\u2593\u2593\u2593\u2593\u2593\n     \u2593\u2593  \u2593\u2593      \u2593\u2593  \u2593\u2593\u2593\u2593  \u2593\u2593      \u2593\u2593  \u2593\u2593\u2593\u2593  \u2593\u2593      \u2593\u2593  \u2593\u2593\n     \u2593\u2593\u2593\u2593\u2593\u2593      \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593      \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593      \u2593\u2593\u2593\u2593\u2593\u2593\n     \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\n     \u2593\u2593  \u2593\u2593\u2593\u2593  \u2593\u2593\u2593\u2593  \u2593\u2593\u2593\u2593  \u2593\u2593\u2593\u2593  \u2593\u2593\u2593\u2593  \u2593\u2593\u2593\u2593  \u2593\u2593\u2593\u2593  \u2593\u2593\u2593\u2593  \u2593\u2593\n     \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\n", "explain": "This inserts a space after every character; but this makes the spacing look better anyway.\nThis version is elegant:\n\nWe can also define a Sierpinski carpet weave declaratively, in terms of generic abstractions like zipWith and bind:\n"}, {"task_name": "Sierpinski carpet", "task_url": "https://rosettacode.org/wiki/Sierpinski_carpet", "task_cat": "Geometry", "lang": "C", "code": "\n\n#include <stdio.h>\n\nint main()\n{\n\tint i, j, dim, d;\n\tint depth = 3;\n\n\tfor (i = 0, dim = 1; i < depth; i++, dim *= 3);\n\n\tfor (i = 0; i < dim; i++) {\n\t\tfor (j = 0; j < dim; j++) {\n\t\t\tfor (d = dim / 3; d; d /= 3)\n\t\t\t\tif ((i % (d * 3)) / d == 1 && (j % (d * 3)) / d == 1)\n\t\t\t\t\tbreak;\n\t\t\tprintf(d ? \"  \" : \"##\");\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n\n\treturn 0;\n}\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct sCarpet {\n    int dim;      // dimension\n    char *data;   // character data\n    char **rows;  // pointers to data rows\n} *Carpet;\n\n/* Clones a tile into larger carpet, or blank if center */\nvoid TileCarpet( Carpet d, int r, int c, Carpet tile )\n{\n    int y0 = tile->dim*r;\n    int x0 = tile->dim*c;\n    int k,m;\n\n    if ((r==1) && (c==1)) {\n        for(k=0; k < tile->dim; k++) {\n           for (m=0; m < tile->dim; m++) {\n               d->rows[y0+k][x0+m] = ' ';\n           }\n        }\n    }\n    else {\n        for(k=0; k < tile->dim; k++) {\n           for (m=0; m < tile->dim; m++) {\n               d->rows[y0+k][x0+m] = tile->rows[k][m];\n           }\n        }\n    }\n}\n\n/* define a 1x1 starting carpet */\nstatic char s1[]= \"#\";\nstatic char *r1[] = {s1};\nstatic struct sCarpet single = { 1, s1, r1};\n\nCarpet Sierpinski( int n )\n{\n   Carpet carpet;\n   Carpet subCarpet;\n   int row,col, rb;\n   int spc_rqrd;\n\n   subCarpet = (n > 1) ? Sierpinski(n-1) : &single;\n\n   carpet = malloc(sizeof(struct sCarpet));\n   carpet->dim = 3*subCarpet->dim;\n   spc_rqrd = (2*subCarpet->dim) * (carpet->dim);\n   carpet->data = malloc(spc_rqrd*sizeof(char));\n   carpet->rows = malloc( carpet->dim*sizeof(char *));\n   for (row=0; row<subCarpet->dim; row++) {\n       carpet->rows[row] = carpet->data + row*carpet->dim;\n       rb = row+subCarpet->dim;\n       carpet->rows[rb] = carpet->data + rb*carpet->dim;\n       rb = row+2*subCarpet->dim;\n       carpet->rows[rb] = carpet->data + row*carpet->dim;\n   }\n \n    for (col=0; col < 3; col++) {\n      /* 2 rows of tiles to copy - third group points to same data a first */\n      for (row=0; row < 2; row++)\n         TileCarpet( carpet, row, col, subCarpet );\n    }\n    if (subCarpet != &single ) {\n       free(subCarpet->rows);\n       free(subCarpet->data);\n       free(subCarpet);\n    }\n\n    return carpet;\n}\n\nvoid CarpetPrint( FILE *fout, Carpet carp)\n{\n    char obuf[730];\n    int row;\n    for (row=0; row < carp->dim; row++) {\n       strncpy(obuf, carp->rows[row], carp->dim);\n       fprintf(fout, \"%s\\n\", obuf);\n    }\n    fprintf(fout,\"\\n\");\n}\n\nint main(int argc, char *argv[])\n{\n//    FILE *f = fopen(\"sierp.txt\",\"w\");\n    CarpetPrint(stdout, Sierpinski(3));\n//    fclose(f);\n    return 0;\n}\n\n\n#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct _PartialGrid{\n        char** base;\n        int xbegin, xend, ybegin, yend; // yend strictly not used\n} PartialGrid;\n\nvoid sierpinski_hollow(PartialGrid G){\n        int len = G.xend - G.xbegin+1;\n        int unit = len/3;\n        for(int i = G.xbegin+unit; i <G.xbegin+2*unit;i++){\n        for(int j = G.ybegin+unit; j <G.ybegin+2*unit;j++){\n                G.base[j][i] = ' ';\n        }}  \n}\n\nvoid sierpinski(PartialGrid G, int iterations){\n        if(iterations==0)\n                return;\n        if((iterations)==1){\n                sierpinski_hollow(G);\n                sierpinski(G,0);\n        }   \n        sierpinski_hollow(G);\n        for(int i=0;i<3;i++){\n                for(int j=0;j<3;j++){\n                        int length = G.xend-G.xbegin+1;\n                        int unit = length/3;\n                        PartialGrid q = {G.base, G.xbegin + i*unit, G.xbegin+(i+1)*unit-1, \n                                G.ybegin+j*unit, G.ybegin+(j+1)*unit-1};\n                        sierpinski(q, iterations-1);\n                }   \n        }   \n}\n\nint intpow(int base, int expo){\n        if(expo==0){\n                return 1;\n        }   \n        return base*intpow(base,expo-1);\n}\n\nint allocate_grid(char*** g, int n, const char sep){\n        int size = intpow(3,n+1);\n        *g = (char**)calloc(size, sizeof(char*));\n        if(*g==NULL)\n                return -1;\n\n        for(int i = 0; i < size; ++i){\n                (*g)[i] = (char*)calloc(size, sizeof(char));\n                if((*g)[i] == NULL)\n                        return -1; \n                for(int j = 0; j < size; j++){\n                        (*g)[i][j] = sep;\n                }\n        }\n\n        return size;\n}\n\nvoid print_grid(char** b, int size){\n        for(int i = 0; i < size; i++){\n                printf(\"%s\\n\",b[i]);\n        }\n}\n\nint main(){\n        int n = 3;\n\n        char** basegrid;\n        int size = allocate_grid(&basegrid, n, '#');\n        if(size == -1)\n                return 1; //bad alloc\n        PartialGrid b = {basegrid, 0, size-1, 0, size-1};\n        sierpinski(b, n);\n        print_grid(basegrid, size);\n        free(basegrid);\n\n        return 0;\n}\n\n", "explain": "If you write coordinates of any point on the carpet in base 3, the pixel is blank if and only if any matching pair of digits are (1, 1).\nRecursive version:\n"}, {"task_name": "Sierpinski carpet", "task_url": "https://rosettacode.org/wiki/Sierpinski_carpet", "task_cat": "Geometry", "lang": "C++", "code": "\n\n// contributed to rosettacode.org by Peter Helcmanovsky\n// BCT = Binary-Coded Ternary: pairs of bits form one digit [0,1,2] (0b11 is invalid digit)\n\n#include <cstdint>\n#include <cstdlib>\n#include <cstdio>\n\nstatic constexpr int32_t bct_low_bits = 0x55555555;\n\nstatic int32_t bct_decrement(int32_t v) {\n    --v;            // either valid BCT (v-1), or block of bottom 0b00 digits becomes invalid 0b11\n    return v ^ (v & (v>>1) & bct_low_bits);     // fix all 0b11 to 0b10 (digit \"2\")\n}\n\nint main (int argc, char *argv[])\n{\n    // parse N from first argument, if no argument, use 3 as default value\n    const int32_t n = (1 < argc) ? std::atoi(argv[1]) : 3;\n    // check for valid N (0..9) - 16 requires 33 bits for BCT form 1<<(n*2) => hard limit\n    if (n < 0 || 9 < n) {                       // but N=9 already produces 370MB output\n        std::printf(\"N out of range (use 0..9): %ld\\n\", long(n));\n        return 1;\n    }\n\n    const int32_t size_bct = 1<<(n*2);          // 3**n in BCT form (initial value for loops)\n    // draw the carpet, two nested loops counting down in BCT form of values\n    int32_t y = size_bct;\n    do {                                        // all lines loop\n        y = bct_decrement(y);                   // --Y (in BCT)\n        int32_t x = size_bct;\n        do {                                    // line loop\n            x = bct_decrement(x);               // --X (in BCT)\n            // check if x has ternary digit \"1\" at same position(s) as y -> output space (hole)\n            std::putchar((x & y & bct_low_bits) ? ' ' : '#');\n        } while (0 < x);\n        std::putchar('\\n');\n    } while (0 < y);\n\n    return 0;\n}\n\n\n#include <windows.h>\n#include <math.h>\n\n//--------------------------------------------------------------------------------------------------\nconst int BMP_SIZE = 738;\n\n//--------------------------------------------------------------------------------------------------\nclass Sierpinski\n{\npublic:\n    void draw( HDC wdc, int wid, int hei, int ord )\n    {\n\t_wdc = wdc;\n        _ord = wid / static_cast<int>( pow( 3.0, ord ) );\n\tdrawIt( 0, 0, wid, hei );\n    }\n\n    void setHWND( HWND hwnd ) { _hwnd = hwnd; }\n\nprivate:\n    void drawIt( int x, int y, int wid, int hei )\n    {\n\tif( wid < _ord || hei < _ord ) return;\n\tint w = wid / 3, h = hei / 3;\n\tRECT rc;\n\tSetRect( &rc, x + w, y + h, x + w + w, y + h + h );\n\tFillRect( _wdc, &rc, static_cast<HBRUSH>( GetStockObject( BLACK_BRUSH ) ) );\n\t\t\n\tfor( int a = 0; a < 3; a++ )\n\t    for( int b = 0; b < 3; b++ )\n\t    {\n\t\tif( a == 1 && b == 1 ) continue;\n\t\tdrawIt( x + b * w, y + a * h, w, h );\n\t    }\n    }\n\n    HWND     _hwnd;\n    HDC      _wdc;\n    int      _ord;\n};\n//--------------------------------------------------------------------------------------------------\nclass wnd\n{\npublic:\n    wnd() { _inst = this; }\n    int wnd::Run( HINSTANCE hInst )\n    {\n\t_hInst = hInst;\n\t_hwnd = InitAll();\n\n\t_carpet.setHWND( _hwnd );\n\n\tShowWindow( _hwnd, SW_SHOW );\n\tUpdateWindow( _hwnd );\n\n\tMSG msg;\n\tZeroMemory( &msg, sizeof( msg ) );\n\twhile( msg.message != WM_QUIT )\n\t{\n\t    if( PeekMessage( &msg, NULL, 0, 0, PM_REMOVE ) != 0 )\n\t    {\n\t\tTranslateMessage( &msg );\n\t\tDispatchMessage( &msg );\n\t    }\n\t}\n\treturn UnregisterClass( \"_SIERPINSKI_\", _hInst );\n    }\nprivate:\n    void wnd::doPaint( HDC dc ) { _carpet.draw( dc, BMP_SIZE, BMP_SIZE, 5 ); }\n\n    static int WINAPI wnd::WndProc( HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam )\n    {\n\tswitch( msg )\n\t{\n\t    case WM_DESTROY: PostQuitMessage( 0 ); break;\n\t    case WM_PAINT:\n\t    {\n\t\tPAINTSTRUCT ps;\n\t\tHDC dc = BeginPaint( hWnd, &ps );\n\t\t_inst->doPaint( dc ); \n\t\tEndPaint( hWnd, &ps );\n\t    }\t\t\n\t    default:\n\t        return DefWindowProc( hWnd, msg, wParam, lParam );\n\t}\n\treturn 0;\n    }\n\n    HWND InitAll()\n    {\n\tWNDCLASSEX wcex;\n\tZeroMemory( &wcex, sizeof( wcex ) );\n\twcex.cbSize\t       = sizeof( WNDCLASSEX );\n\twcex.style\t       = CS_HREDRAW | CS_VREDRAW;\n\twcex.lpfnWndProc   = ( WNDPROC )WndProc;\n\twcex.hInstance     = _hInst;\n\twcex.hCursor       = LoadCursor( NULL, IDC_ARROW );\n\twcex.hbrBackground = ( HBRUSH )( COLOR_WINDOW + 1 );\n\twcex.lpszClassName = \"_SIERPINSKI_\";\n\n\tRegisterClassEx( &wcex );\n\n\tRECT rc = { 0, 0, BMP_SIZE, BMP_SIZE };\n\tAdjustWindowRect( &rc, WS_SYSMENU | WS_CAPTION, FALSE );\n\tint w = rc.right - rc.left,\n\t    h = rc.bottom - rc.top;\n\treturn CreateWindow( \"_SIERPINSKI_\", \".: Sierpinski carpet -- PJorente\u00a0:.\", WS_SYSMENU, CW_USEDEFAULT, 0, w, h, NULL, NULL, _hInst, NULL );\n    }\n\n    static wnd* _inst;\n    HINSTANCE  _hInst;\n    HWND       _hwnd;\n    Sierpinski _carpet;\n};\nwnd* wnd::_inst = 0;\n//--------------------------------------------------------------------------------------------------\nint APIENTRY _tWinMain( HINSTANCE hInstance, HINSTANCE hPrevInstance, LPTSTR lpCmdLine, int nCmdShow )\n{\n    wnd myWnd;\n    return myWnd.Run( hInstance );\n}\n//--------------------------------------------------------------------------------------------------\n\n", "explain": "Performance focused variant (about 7x faster than the div/mod solutions at AMD Ryzen 7 4800H)\n\n"}, {"task_name": "Sierpinski carpet", "task_url": "https://rosettacode.org/wiki/Sierpinski_carpet", "task_cat": "Geometry", "lang": "Java", "code": "\nTranslation of: Python\npublic static boolean inCarpet(long x, long y) {\n    while (x!=0 && y!=0) {\n        if (x % 3 == 1 && y % 3 == 1)\n            return false;\n        x /= 3;\n        y /= 3;\n    }\n    return true;\n}\n \npublic static void carpet(final int n) {\n    final double power = Math.pow(3,n);\n    for(long i = 0; i < power; i++) {\n        for(long j = 0; j < power; j++) {\n            System.out.print(inCarpet(i, j) ? \"*\" : \" \");\n        }\n        System.out.println();\n    }\n}\n\nAnimated version[edit]\n\nWorks with: java version 8\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport javax.swing.*;\n\npublic class SierpinskiCarpet extends JPanel {\n    private final int dim = 513;\n    private final int margin = 20;\n\n    private int limit = dim;\n\n    public SierpinskiCarpet() {\n        setPreferredSize(new Dimension(dim + 2 * margin, dim + 2 * margin));\n        setBackground(Color.white);\n        setForeground(Color.orange);\n\n        new Timer(2000, (ActionEvent e) -> {\n            limit /= 3;\n            if (limit <= 3)\n                limit = dim;\n            repaint();\n        }).start();\n    }\n\n    void drawCarpet(Graphics2D g, int x, int y, int size) {\n        if (size < limit)\n            return;\n        size /= 3;\n        for (int i = 0; i < 9; i++) {\n            if (i == 4) {\n                g.fillRect(x + size, y + size, size, size);\n            } else {\n                drawCarpet(g, x + (i % 3) * size, y + (i / 3) * size, size);\n            }\n        }\n    }\n\n    @Override\n    public void paintComponent(Graphics gg) {\n        super.paintComponent(gg);\n        Graphics2D g = (Graphics2D) gg;\n        g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,\n                RenderingHints.VALUE_ANTIALIAS_ON);\n        g.translate(margin, margin);\n        drawCarpet(g, 0, 0, dim);\n    }\n\n    public static void main(String[] args) {\n        SwingUtilities.invokeLater(() -> {\n            JFrame f = new JFrame();\n            f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n            f.setTitle(\"Sierpinski Carpet\");\n            f.setResizable(false);\n            f.add(new SierpinskiCarpet(), BorderLayout.CENTER);\n            f.pack();\n            f.setLocationRelativeTo(null);\n            f.setVisible(true);\n        });\n    }\n}\n\n", "explain": ""}, {"task_name": "Sierpinski carpet", "task_url": "https://rosettacode.org/wiki/Sierpinski_carpet", "task_cat": "Geometry", "lang": "C#", "code": "\nTranslation of: Ruby\nWorks with: C# version 3.0+\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Program\n{\n    static List<string> NextCarpet(List<string> carpet)\n    {\n        return carpet.Select(x => x + x + x)\n                     .Concat(carpet.Select(x => x + x.Replace('#', ' ') + x))\n                     .Concat(carpet.Select(x => x + x + x)).ToList();\n    }\n\n    static List<string> SierpinskiCarpet(int n)\n    {\n        return Enumerable.Range(1, n).Aggregate(new List<string> { \"#\" }, (carpet, _) => NextCarpet(carpet));\n    }\n\n    static void Main(string[] args)\n    {\n        foreach (string s in SierpinskiCarpet(3))\n            Console.WriteLine(s);\n    }\n}\n\n", "explain": ""}, {"task_name": "Sierpinski carpet", "task_url": "https://rosettacode.org/wiki/Sierpinski_carpet", "task_cat": "Geometry", "lang": "JavaScript", "code": "\nES5[edit]\n\nTranslation of: Ruby\nWorks with: JavaScript version 1.6\nWorks with: Firefox version 1.5+\n\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\">\n<title>Sierpinski Carpet</title>\n<script type='text/javascript'>\n\nvar black_char = \"#\";\nvar white_char = \" \";\n\nvar SierpinskiCarpet = function(size) {\n    this.carpet = [black_char];\n    for (var i = 1; i <= size; i++) {\n        this.carpet = [].concat(\n            this.carpet.map(this.sier_top),\n            this.carpet.map(this.sier_middle),\n            this.carpet.map(this.sier_top)\n        );\n    }\n}\n\nSierpinskiCarpet.prototype.sier_top = function(x) {\n    var str = new String(x);\n    return new String(str+str+str);\n}\n\nSierpinskiCarpet.prototype.sier_middle = function (x) {\n    var str = new String(x);\n    var spacer = str.replace(new RegExp(black_char, 'g'), white_char);\n    return new String(str+spacer+str);\n}\n\nSierpinskiCarpet.prototype.to_string = function() {\n    return this.carpet.join(\"\\n\")\n}\n\nSierpinskiCarpet.prototype.to_html = function(target) {\n    var table = document.createElement('table');\n    for (var i = 0; i < this.carpet.length; i++) {\n        var row = document.createElement('tr');\n        for (var j = 0; j < this.carpet[i].length; j++) {\n            var cell = document.createElement('td');\n            cell.setAttribute('class', this.carpet[i][j] == black_char ? 'black' : 'white');\n            cell.appendChild(document.createTextNode('\\u00a0'));\n            row.appendChild(cell);\n        }\n        table.appendChild(row);\n    }\n    target.appendChild(table);\n}\n\n</script>\n<style type='text/css'>\n    table {border-collapse: collapse;}\n    td {width: 1em;}\n    .black {background-color: black;}\n    .white {background-color: white;}\n</style>\n</head>\n<body>\n\n<pre id='to_string' style='float:left; margin-right:0.25in'></pre>\n<div id='to_html'></div>\n    \n<script type='text/javascript'>\n    var sc = new SierpinskiCarpet(3);\n    document.getElementById('to_string').appendChild(document.createTextNode(sc.to_string()));\n    sc.to_html(document.getElementById('to_html'));\n</script>\n\n</body>\n</html>\n\n\nOutput:\n\n// Orders 1, 2 and 3 of the Sierpinski Carpet\n// as lines of text.\n\n// Generic text output for use in any JavaScript environment\n// Browser JavaScripts may use console.log() to return textual output\n// others use print() or analogous functions.\n\n[1, 2, 3].map(function sierpinskiCarpetOrder(n) {\n\n    // An (n * n) grid of (filled or empty) sub-rectangles\n    // n --> [[s]]\n    var carpet = function (n) {\n            var lstN = range(0, Math.pow(3, n) - 1);\n\n            // State of each cell in an N * N grid\n            return lstN.map(function (x) {\n                return lstN.map(function (y) {\n                    return inCarpet(x, y);\n                });\n            });\n        },\n\n        // State of a given coordinate in the grid:\n        // Filled or not\u00a0?\n        // (See https://en.wikipedia.org/wiki/Sierpinski_carpet#Construction)\n        // n --> n --> bool\n        inCarpet = function (x, y) {\n            return (!x || !y) ? true :\n                !(\n                    (x % 3 === 1) &&\n                    (y % 3 === 1)\n                ) && inCarpet(\n                    x / 3 | 0,\n                    y / 3 | 0\n                );\n        },\n\n        // Sequence of integers from m to n\n        // n --> n --> [n]\n        range = function (m, n) {\n            return Array.apply(null, Array(n - m + 1)).map(\n                function (x, i) {\n                    return m + i;\n                }\n            );\n        };\n\n    // Grid of booleans mapped to lines of characters\n    // [[bool]] --> s\n    return carpet(n).map(function (line) {\n        return line.map(function (bool) {\n            return bool ? '\\u2588' : ' ';\n        }).join('');\n    }).join('\\n');\n\n}).join('\\n\\n');\n\n\n\u2588\u2588\u2588\n\u2588 \u2588\n\u2588\u2588\u2588\n\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\u2588 \u2588\u2588 \u2588\u2588 \u2588\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\u2588\u2588\u2588   \u2588\u2588\u2588\n\u2588 \u2588   \u2588 \u2588\n\u2588\u2588\u2588   \u2588\u2588\u2588\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\u2588 \u2588\u2588 \u2588\u2588 \u2588\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\u2588 \u2588\u2588 \u2588\u2588 \u2588\u2588 \u2588\u2588 \u2588\u2588 \u2588\u2588 \u2588\u2588 \u2588\u2588 \u2588\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\u2588\u2588\u2588   \u2588\u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\n\u2588 \u2588   \u2588 \u2588\u2588 \u2588   \u2588 \u2588\u2588 \u2588   \u2588 \u2588\n\u2588\u2588\u2588   \u2588\u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\u2588 \u2588\u2588 \u2588\u2588 \u2588\u2588 \u2588\u2588 \u2588\u2588 \u2588\u2588 \u2588\u2588 \u2588\u2588 \u2588\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588         \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\u2588 \u2588\u2588 \u2588\u2588 \u2588         \u2588 \u2588\u2588 \u2588\u2588 \u2588\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588         \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\u2588\u2588\u2588   \u2588\u2588\u2588         \u2588\u2588\u2588   \u2588\u2588\u2588\n\u2588 \u2588   \u2588 \u2588         \u2588 \u2588   \u2588 \u2588\n\u2588\u2588\u2588   \u2588\u2588\u2588         \u2588\u2588\u2588   \u2588\u2588\u2588\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588         \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\u2588 \u2588\u2588 \u2588\u2588 \u2588         \u2588 \u2588\u2588 \u2588\u2588 \u2588\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588         \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\u2588 \u2588\u2588 \u2588\u2588 \u2588\u2588 \u2588\u2588 \u2588\u2588 \u2588\u2588 \u2588\u2588 \u2588\u2588 \u2588\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\u2588\u2588\u2588   \u2588\u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\n\u2588 \u2588   \u2588 \u2588\u2588 \u2588   \u2588 \u2588\u2588 \u2588   \u2588 \u2588\n\u2588\u2588\u2588   \u2588\u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\u2588 \u2588\u2588 \u2588\u2588 \u2588\u2588 \u2588\u2588 \u2588\u2588 \u2588\u2588 \u2588\u2588 \u2588\u2588 \u2588\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\nES6[edit]\n(() => {\n    'use strict';\n\n    // sierpinskiCarpet\u00a0:: Int -> String\n    let sierpinskiCarpet = n => {\n\n        // carpet\u00a0:: Int -> [[String]]\n        let carpet = n => {\n                let xs = range(0, Math.pow(3, n) - 1);\n                return xs.map(x => xs.map(y => inCarpet(x, y)));\n            },\n\n            // https://en.wikipedia.org/wiki/Sierpinski_carpet#Construction\n\n            // inCarpet\u00a0:: Int -> Int -> Bool\n            inCarpet = (x, y) =>\n                (!x || !y) ? true : !(\n                    (x % 3 === 1) &&\n                    (y % 3 === 1)\n                ) && inCarpet(\n                    x / 3 | 0,\n                    y / 3 | 0\n                );\n\n        return carpet(n)\n            .map(line => line.map(bool => bool ? '\\u2588' : ' ')\n                .join(''))\n            .join('\\n');\n    };\n\n    // GENERIC\n\n    // range\u00a0:: Int -> Int -> [Int]\n    let range = (m, n) =>\n            Array.from({\n                length: Math.floor(n - m) + 1\n            }, (_, i) => m + i);\n\n    // TEST\n\n    return [1, 2, 3]\n        .map(sierpinskiCarpet);\n})();\n\n\nOutput:\n\u2588\u2588\u2588\n\u2588 \u2588\n\u2588\u2588\u2588\n\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\u2588 \u2588\u2588 \u2588\u2588 \u2588\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\u2588\u2588\u2588   \u2588\u2588\u2588\n\u2588 \u2588   \u2588 \u2588\n\u2588\u2588\u2588   \u2588\u2588\u2588\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\u2588 \u2588\u2588 \u2588\u2588 \u2588\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\u2588 \u2588\u2588 \u2588\u2588 \u2588\u2588 \u2588\u2588 \u2588\u2588 \u2588\u2588 \u2588\u2588 \u2588\u2588 \u2588\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\u2588\u2588\u2588   \u2588\u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\n\u2588 \u2588   \u2588 \u2588\u2588 \u2588   \u2588 \u2588\u2588 \u2588   \u2588 \u2588\n\u2588\u2588\u2588   \u2588\u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\u2588 \u2588\u2588 \u2588\u2588 \u2588\u2588 \u2588\u2588 \u2588\u2588 \u2588\u2588 \u2588\u2588 \u2588\u2588 \u2588\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588         \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\u2588 \u2588\u2588 \u2588\u2588 \u2588         \u2588 \u2588\u2588 \u2588\u2588 \u2588\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588         \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\u2588\u2588\u2588   \u2588\u2588\u2588         \u2588\u2588\u2588   \u2588\u2588\u2588\n\u2588 \u2588   \u2588 \u2588         \u2588 \u2588   \u2588 \u2588\n\u2588\u2588\u2588   \u2588\u2588\u2588         \u2588\u2588\u2588   \u2588\u2588\u2588\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588         \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\u2588 \u2588\u2588 \u2588\u2588 \u2588         \u2588 \u2588\u2588 \u2588\u2588 \u2588\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588         \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\u2588 \u2588\u2588 \u2588\u2588 \u2588\u2588 \u2588\u2588 \u2588\u2588 \u2588\u2588 \u2588\u2588 \u2588\u2588 \u2588\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\u2588\u2588\u2588   \u2588\u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\n\u2588 \u2588   \u2588 \u2588\u2588 \u2588   \u2588 \u2588\u2588 \u2588   \u2588 \u2588\n\u2588\u2588\u2588   \u2588\u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\u2588 \u2588\u2588 \u2588\u2588 \u2588\u2588 \u2588\u2588 \u2588\u2588 \u2588\u2588 \u2588\u2588 \u2588\u2588 \u2588\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n(() => {\n    'use strict';\n\n    // weave\u00a0:: [String] -> [String]\n    const weave = xs => {\n        const f = zipWith(append);\n        return concatMap(\n            x => f(f(xs)(x))(xs)\n        )([\n            xs,\n            map(x => replicate(length(x))(' '))(\n                xs\n            ),\n            xs\n        ]);\n    };\n\n    // TEST -----------------------------------------------\n    const main = () => {\n        const\n            sierp = n => unlines(\n                take(1 + n, iterate(weave, ['\\u2588']))[n]\n            ),\n            carpet = sierp(2);\n        return (\n            // console.log(carpet),\n            carpet\n        );\n    };\n\n\n    // GENERIC ABSTRACTIONS -------------------------------\n\n    // append (++)\u00a0:: [a] -> [a] -> [a]\n    // append (++)\u00a0:: String -> String -> String\n    const append = xs => ys => xs.concat(ys);\n\n    // concatMap\u00a0:: (a -> [b]) -> [a] -> [b]\n    const concatMap = f => xs =>\n        xs.reduce((a, x) => a.concat(f(x)), []);\n\n    // iterate\u00a0:: (a -> a) -> a -> Gen [a]\n    function* iterate(f, x) {\n        let v = x;\n        while (true) {\n            yield(v);\n            v = f(v);\n        }\n    }\n\n    // Returns Infinity over objects without finite length\n    // this enables zip and zipWith to choose the shorter\n    // argument when one is non-finite, like cycle, repeat etc\n\n    // length\u00a0:: [a] -> Int\n    const length = xs => xs.length || Infinity;\n\n    // map\u00a0:: (a -> b) -> [a] -> [b]\n    const map = f => xs => xs.map(f);\n\n    // replicate\u00a0:: Int -> String -> String\n    const replicate = n => s => s.repeat(n);\n\n    // take\u00a0:: Int -> [a] -> [a]\n    // take\u00a0:: Int -> String -> String\n    const take = (n, xs) =>\n        xs.constructor.constructor.name !== 'GeneratorFunction' ? (\n            xs.slice(0, n)\n        ) : [].concat.apply([], Array.from({\n            length: n\n        }, () => {\n            const x = xs.next();\n            return x.done ? [] : [x.value];\n        }));\n\n    // unlines\u00a0:: [String] -> String\n    const unlines = xs => xs.join('\\n');\n\n    // zipWith\u00a0:: (a -> b -> c) -> [a] -> [b] -> [c]\n    const zipWith = f => xs => ys => {\n        const\n            lng = Math.min(length(xs), length(ys)),\n            as = take(lng, xs),\n            bs = take(lng, ys);\n        return Array.from({\n            length: lng\n        }, (_, i) => f(as[i])(bs[i]));\n    };\n\n    // MAIN -----------------------------------------------\n    return main();\n})();\n\n\nOutput:\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\u2588 \u2588\u2588 \u2588\u2588 \u2588\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\u2588\u2588\u2588   \u2588\u2588\u2588\n\u2588 \u2588   \u2588 \u2588\n\u2588\u2588\u2588   \u2588\u2588\u2588\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\u2588 \u2588\u2588 \u2588\u2588 \u2588\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n", "explain": "In-browser JavaScript (HTML output)\nThis version also produces a \"graphic\" via HTML and CSS.\n\n\nOr, in a functional idiom, generating plain text, and suitable for use in any ES5 JavaScript, whether in a browser or some other environment.\nCreates an N by N array of boolean values, which are mapped to lines of characters for output.\nOutput (orders 1, 2 and 3):\n\nOr, defining the Sierpinksi carpet weave declaratively, in terms of zipWith and concatMap:\n"}, {"task_name": "Sierpinski carpet", "task_url": "https://rosettacode.org/wiki/Sierpinski_carpet", "task_cat": "Geometry", "lang": "PHP", "code": "\n<?php\n\nfunction isSierpinskiCarpetPixelFilled($x, $y) {\n    while (($x > 0) or ($y > 0)) {\n        if (($x % 3 == 1) and ($y % 3 == 1)) {\n            return false;\n        }\n        $x /= 3;\n        $y /= 3;\n    }\n    return true;\n}\n\nfunction sierpinskiCarpet($order) {\n    $size = pow(3, $order);\n    for ($y = 0 ; $y < $size ; $y++) {\n        for ($x = 0 ; $x < $size ; $x++) {\n            echo isSierpinskiCarpetPixelFilled($x, $y) ? '#' : ' ';\n        }\n        echo PHP_EOL;\n    }\n}\n\nfor ($order = 0 ; $order <= 3 ; $order++) {\n    echo 'N=', $order, PHP_EOL;\n    sierpinskiCarpet($order);\n    echo PHP_EOL;\n}\n\n\nOutput:\nN=0\n#\n\nN=1\n###\n# #\n###\n\nN=2\n#########\n# ## ## #\n#########\n###   ###\n# #   # #\n###   ###\n#########\n# ## ## #\n#########\n\nN=3\n###########################\n# ## ## ## ## ## ## ## ## #\n###########################\n###   ######   ######   ###\n# #   # ## #   # ## #   # #\n###   ######   ######   ###\n###########################\n# ## ## ## ## ## ## ## ## #\n###########################\n#########         #########\n# ## ## #         # ## ## #\n#########         #########\n###   ###         ###   ###\n# #   # #         # #   # #\n###   ###         ###   ###\n#########         #########\n# ## ## #         # ## ## #\n#########         #########\n###########################\n# ## ## ## ## ## ## ## ## #\n###########################\n###   ######   ######   ###\n# #   # ## #   # ## #   # #\n###   ######   ######   ###\n###########################\n# ## ## ## ## ## ## ## ## #\n###########################\n\n", "explain": ""}, {"task_name": "Sierpinski carpet", "task_url": "https://rosettacode.org/wiki/Sierpinski_carpet", "task_cat": "Geometry", "lang": "MATLAB", "code": "\nn = 3;\nc = string('#');\nfor k = 1 : n\n  c = [c + c + c, c + c.replace('#', ' ') + c, c + c + c];\nend\ndisp(c.join(char(10)))\n\n\nOutput:\n###########################\n# ## ## ## ## ## ## ## ## #\n###########################\n###   ######   ######   ###\n# #   # ## #   # ## #   # #\n###   ######   ######   ###\n###########################\n# ## ## ## ## ## ## ## ## #\n###########################\n#########         #########\n# ## ## #         # ## ## #\n#########         #########\n###   ###         ###   ###\n# #   # #         # #   # #\n###   ###         ###   ###\n#########         #########\n# ## ## #         # ## ## #\n#########         #########\n###########################\n# ## ## ## ## ## ## ## ## #\n###########################\n###   ######   ######   ###\n# #   # ## #   # ## #   # #\n###   ######   ######   ###\n###########################\n# ## ## ## ## ## ## ## ## #\n###########################\n", "explain": ""}, {"task_name": "Sierpinski carpet", "task_url": "https://rosettacode.org/wiki/Sierpinski_carpet", "task_cat": "Geometry", "lang": "Fortran", "code": "\nWorks with: Fortran version 90 and later\nTranslation of: Python\nprogram Sierpinski_carpet\n  implicit none\n  \n  call carpet(4)\n\ncontains\n\nfunction In_carpet(a, b)\n  logical :: in_carpet\n  integer, intent(in) :: a, b\n  integer :: x, y\n\n  x = a ; y = b\n  do \n    if(x == 0 .or. y == 0) then\n      In_carpet = .true.\n      return\n    else if(mod(x, 3) == 1 .and. mod(y, 3) == 1) then\n      In_carpet = .false.\n      return\n    end if\n    x = x / 3\n    y = y / 3\n  end do\nend function\n\nsubroutine Carpet(n)\n  integer, intent(in) :: n\n  integer :: i, j\n \n  do i = 0, 3**n - 1 \n    do j = 0, 3**n - 1\n      if(In_carpet(i, j)) then\n        write(*, \"(a)\", advance=\"no\") \"#\"\n      else\n        write(*, \"(a)\", advance=\"no\") \" \"\n      end if\n    end do\n    write(*,*)\n  end do\nend subroutine Carpet\nend program Sierpinski_carpet\n\n", "explain": ""}, {"task_name": "Sierpinski carpet", "task_url": "https://rosettacode.org/wiki/Sierpinski_carpet", "task_cat": "Geometry", "lang": "Go", "code": "\n\npackage main\n\nimport (\n    \"fmt\"\n    \"strings\"\n    \"unicode/utf8\"\n)\n\nvar order = 3\nvar grain = \"#\"\n\nfunc main() {\n    carpet := []string{grain}\n    for ; order > 0; order-- {\n        // repeat expression allows for multiple character\n        // grain and for multi-byte UTF-8 characters.\n        hole := strings.Repeat(\" \", utf8.RuneCountInString(carpet[0]))\n        middle := make([]string, len(carpet))\n        for i, s := range carpet {\n            middle[i] = s + hole + s\n            carpet[i] = strings.Repeat(s, 3)\n        }\n        carpet = append(append(carpet, middle...), carpet...)\n    }\n    for _, r := range carpet {\n        fmt.Println(r)\n    }\n}\n\n", "explain": "Variable \"grain\" shown set to \"#\" here, but it's fun to experiment with other values. \"|\", \". \", \"[]\", \"___\", \"\u2588\u2588\", \"\u2591\u2591\"...\n"}, {"task_name": "Sierpinski carpet", "task_url": "https://rosettacode.org/wiki/Sierpinski_carpet", "task_cat": "Geometry", "lang": "X86_Assembly", "code": "\n\n;x86-64 assembly code for Microsoft Windows\n;Tested in windows 7 Enterprise Service Pack 1 64 bit\n;With the AMD FX(tm)-6300 processor\n;Assembled with NASM version 2.11.06 \n;Linked to C library with gcc version 4.9.2 (x86_64-win32-seh-rev1, Built by MinGW-W64 project)\n\n;Assembled and linked with the following commands:\n;nasm -f win64 <filename>.asm -o <filename>.obj\n;gcc <filename>.obj -o <filename>\n\n;Takes magnitude of Sierpinski Carpet as command line argument.\n\nextern atoi,puts,putchar,exit\n\nsection .data\nerrmsg_noarg: db \"Magnitude of Sierpinski Carpet was not specified.\",0\nerrmsg_argnumber: db \"There should be no more than one argument.\",0\n\nsection .bss\n\nsection .text\nglobal main\n\nmain:\n\n;check for argument\ncmp rcx,1\njle err_noarg\n\n;ensure that only one argument was entered\ncmp rcx,2\njg err_argnumber\n\n;column in rsi\n;row in rdi\n;x in r8\n;y in r9\n;width in r13\n;magic number in r14\n\nmov r14,2863311531\n\n;get magnitude in rbx from first arg\nmov rcx,[rdx + 8]\ncall atoi\nmov rbx,rax\n\ncmp rbx,0\njz magnitude_zero \n\n\n;determine dimensions of square\nmov rax,1\n\nfind_width:\n\nlea rax,[rax * 3]\n\ndec rbx\njg find_width\n\nsub rax,1\n\nmov r13,rax\nmov rdi,rax\n\n\nnext_row:\n\nmov rsi,r13\n\nfill_row:\n\n;x in r8, y in r9\nmov r8,rsi\nmov r9,rdi\n\nis_filled:\n\n;if(x%3==1 && y%3==1)\n;x%3 in rbx\nmov rax,r8\nmov rbx,r8\nmul r14\nshr rax,33\nmov r8,rax\nlea rax,[rax * 3]\nsub rbx,rax\n\n;y%3 in rcx\nmov rax,r9\nmov rcx,r9\nmul r14\nshr rax,33\nmov r9,rax\nlea rax,[rax * 3]\nsub rcx,rax\n\n;x%3==1 && y%3==1\nxor rbx,1\nxor rcx,1\nor rbx,rcx\nmov rcx,' '\ncmp rbx,0\njz dont_fill\n\n;x>0 || y>0\nmov rax,r8\nor rax,r9\ncmp rax,0\njg is_filled\n\nmov rcx,'#'\ndont_fill:\n\ncall putchar\n\ndec rsi\njge fill_row\n\n;put newline at the end of each row\nmov rcx,0xa\ncall putchar\n\ndec rdi\njge next_row\n\nxor rcx,rcx\ncall exit\n\nmagnitude_zero:\n\nmov rcx,'#'\ncall putchar\n\nmov rcx,0xa\ncall putchar\n\nxor rcx,rcx\ncall exit\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;error message\n\nerr_noarg:\n\nmov rcx,errmsg_noarg\ncall puts\n\nmov rcx,1\ncall exit\n\n\nerr_argnumber:\n\nmov rcx,errmsg_argnumber\ncall puts\n\nmov rcx,1\ncall exit\n\nSample:\nF:\\>asciisierpinski.exe\nMagnitude of Sierpinski Carpet was not specified.\n\nF:\\>asciisierpinski.exe 1 1 1\nThere should be no more than one arguement.\n\nF:\\>asciisierpinski.exe 0\n#\n\nF:\\>asciisierpinski.exe 1\n###\n# #\n###\n\nF:\\>asciisierpinski.exe 2\n#########\n# ## ## #\n#########\n###   ###\n# #   # #\n###   ###\n#########\n# ## ## #\n#########\n\nF:\\>asciisierpinski.exe 3\n###########################\n# ## ## ## ## ## ## ## ## #\n###########################\n###   ######   ######   ###\n# #   # ## #   # ## #   # #\n###   ######   ######   ###\n###########################\n# ## ## ## ## ## ## ## ## #\n###########################\n#########         #########\n# ## ## #         # ## ## #\n#########         #########\n###   ###         ###   ###\n# #   # #         # #   # #\n###   ###         ###   ###\n#########         #########\n# ## ## #         # ## ## #\n#########         #########\n###########################\n# ## ## ## ## ## ## ## ## #\n###########################\n###   ######   ######   ###\n# #   # ## #   # ## #   # #\n###   ######   ######   ###\n###########################\n# ## ## ## ## ## ## ## ## #\n###########################\n\n", "explain": "Uses magic number division to avoid repeatedly using the div instruction in a loop.\n"}, {"task_name": "Sierpinski carpet", "task_url": "https://rosettacode.org/wiki/Sierpinski_carpet", "task_cat": "Geometry", "lang": "Delphi", "code": "\n\n", "explain": "See Pascal.\n"}, {"task_name": "Sierpinski carpet", "task_url": "https://rosettacode.org/wiki/Sierpinski_carpet", "task_cat": "Geometry", "lang": "Ruby", "code": "\nTranslation of: Tcl\ndef sierpinski_carpet(n)\n  carpet = [\"#\"]\n  n.times do\n    carpet = carpet.collect {|x| x + x + x} +\n             carpet.collect {|x| x + x.tr(\"#\",\" \") + x} +\n             carpet.collect {|x| x + x + x}\n  end\n  carpet\nend\n\n4.times{|i| puts \"\\nN=#{i}\", sierpinski_carpet(i)}\n\nOutput:\nN=0\n#\n\nN=1\n###\n# #\n###\n\nN=2\n#########\n# ## ## #\n#########\n###   ###\n# #   # #\n###   ###\n#########\n# ## ## #\n#########\n\nN=3\n###########################\n# ## ## ## ## ## ## ## ## #\n###########################\n###   ######   ######   ###\n# #   # ## #   # ## #   # #\n###   ######   ######   ###\n###########################\n# ## ## ## ## ## ## ## ## #\n###########################\n#########         #########\n# ## ## #         # ## ## #\n#########         #########\n###   ###         ###   ###\n# #   # #         # #   # #\n###   ###         ###   ###\n#########         #########\n# ## ## #         # ## ## #\n#########         #########\n###########################\n# ## ## ## ## ## ## ## ## #\n###########################\n###   ######   ######   ###\n# #   # ## #   # ## #   # #\n###   ######   ######   ###\n###########################\n# ## ## ## ## ## ## ## ## #\n###########################\n\n\nLibrary: RubyGems\nLibrary: JRubyArt\nattr_reader :limit\n\ndef setup\n  sketch_title 'Sierpinski Carpet'\n  n = 4\n  @limit = width / 3**n\n  fill 0\n  background 255\n  no_stroke\n  holes(0, 0, width / 3)\nend\n\ndef in_carpet?(xpos, ypos)\n \u00a0!(xpos == 1 && ypos == 1)\nend\n\ndef holes(xpos, ypos, dim)\n  return if dim < limit\n\n  grid(3, 3) do |row, col|\n    offset_x = xpos + row * dim\n    offset_y = ypos + col * dim\n    rect(offset_x, offset_y, dim, dim) unless in_carpet?(row, col)\n    holes(offset_x, offset_y, dim / 3)\n  end\nend\n\ndef settings\n  size(729, 729)\nend\n", "explain": "Graphical Version using JRubyArt\n"}, {"task_name": "Sierpinski carpet", "task_url": "https://rosettacode.org/wiki/Sierpinski_carpet", "task_cat": "Geometry", "lang": "Rust", "code": "\nTranslation of: Ruby\nfn main() {\n    for i in 0..4 {\n        println!(\"\\nN={}\", i);\n        println!(\"{}\", sierpinski_carpet(i));\n    }\n}\n\nfn sierpinski_carpet(n: u32) -> String {\n    let mut carpet = vec![\"#\".to_string()];\n    for _ in 0..n {\n        let mut top: Vec<_> = carpet.iter().map(|x| x.repeat(3)).collect();\n        let middle: Vec<_> = carpet\n            .iter()\n            .map(|x| x.to_string() + &x.replace(\"#\", \" \") + x)\n            .collect();\n        let bottom = top.clone();\n\n        top.extend(middle);\n        top.extend(bottom);\n        carpet = top;\n    }\n    carpet.join(\"\\n\")\n}\n", "explain": ""}, {"task_name": "Sierpinski carpet", "task_url": "https://rosettacode.org/wiki/Sierpinski_carpet", "task_cat": "Geometry", "lang": "Swift", "code": "\nTranslation of: Ruby\nimport Foundation\nfunc sierpinski_carpet(n:Int) -> String {\n    func middle(str:String) -> String {\n        let spacer = str.stringByReplacingOccurrencesOfString(\"#\", withString:\" \", options:nil, range:nil)\n        return str + spacer + str\n    }\n    \n    var carpet = [\"#\"]\n    for i in 1...n {\n        let a = carpet.map{$0 + $0 + $0}\n        let b = carpet.map(middle)\n        carpet = a + b + a\n    }\n    return \"\\n\".join(carpet)\n}\n\nprintln(sierpinski_carpet(3))\n", "explain": ""}, {"task_name": "Sierpinski carpet", "task_url": "https://rosettacode.org/wiki/Sierpinski_carpet", "task_cat": "Geometry", "lang": "R", "code": "\nVersion #1.[edit]\n\nTranslation of: PARI/GP\nWorks with: R version 3.3.3 and above\nFile:SierpCRo5.pngOutput SierpCRo5.png\n## Are x,y inside Sierpinski carpet (and where)? (1-yes, 0-no)\ninSC <- function(x, y) {\n  while(TRUE) {\n    if(!x||!y) {return(1)}\n    if(x%%3==1&&y%%3==1) {return(0)}\n    x=x%/%3; y=y%/%3;\n  } return(0);\n}\n## Plotting Sierpinski carpet fractal. aev 4/1/17\n## ord - order, fn - file name, ttl - plot title, clr - color\npSierpinskiC <- function(ord, fn=\"\", ttl=\"\", clr=\"navy\") {\n  m=640; abbr=\"SCR\"; dftt=\"Sierpinski carpet fractal\";\n  n=3^ord-1; M <- matrix(c(0), ncol=n, nrow=n, byrow=TRUE);\n  cat(\" *** START\", abbr, date(), \"\\n\");\n  if(fn==\"\") {pf=paste0(abbr,\"o\", ord)} else {pf=paste0(fn, \".png\")};\n  if(ttl!=\"\") {dftt=ttl}; ttl=paste0(dftt,\", order \", ord);\n  cat(\" *** Plot file:\", pf,\".png\", \"title:\", ttl, \"\\n\");\n  for(i in 0:n) {\n    for(j in 0:n) {if(inSC(i,j)) {M[i,j]=1}\n  }}\n  plotmat(M, pf, clr, ttl);\n  cat(\" *** END\", abbr, date(), \"\\n\");\n}  \n## Executing:\npSierpinskiC(5);\n\n\nOutput:\n> pSierpinskiC(5);\n *** START SCR Sun Apr 02 12:39:21 2017 \n *** Plot file: SCRo5 .png title: Sierpinski carpet fractal, order 5 \n *** Matrix( 242 x 242 ) 32283 DOTS\n *** END SCR Sun Apr 02 12:39:28 2017 \n\nVersion #2.[edit]\n\nWorks with: R version 3.3.3 and above\nFile:SierpCR2o5.pngOutput SierpCR2o5.png\n## Plotting Sierpinski carpet fractal v.2. aev 4/2/17\n## ord - order, fn - file name, ttl - plot title, clr - color\npSierpinskiC2 <- function(ord, fn=\"\", ttl=\"\", clr=\"brown\") {\n  m=640; abbr=\"SCR2\"; dftt=\"Sierpinski carpet fractal v.2\";\n  cat(\" *** START\", abbr, date(), \"\\n\");\n  if(fn==\"\") {pf=paste0(abbr,\"o\", ord)} else {pf=paste0(fn, \".png\")};\n  if(ttl!=\"\") {dftt=ttl}; ttl=paste0(dftt,\", order \", ord);\n  cat(\" *** Plot file:\", pf,\".png\", \"title:\", ttl, \"\\n\");\n  S = matrix(1,1,1);\n  for (i in 1:ord) {\n    Q = cbind(S,S,S); R = cbind(S,0*S,S); S = rbind(Q,R,Q);\n  }\n  plotmat(S, pf, clr, ttl);\n  cat(\" *** END\", abbr, date(), \"\\n\");\n}  \n## Executing:\npSierpinskiC2(5);\n\n\nOutput:\n> pSierpinskiC2(5);\n *** START SCR2 Sun Apr 02 14:44:17 2017 \n *** Plot file: SCR2o5 .png title: Sierpinski carpet fractal v.2, order 5 \n *** Matrix( 243 x 243 ) 32768 DOTS\n *** END SCR2 Sun Apr 02 14:44:24 2017 \n\n", "explain": "Note: Find plotmat() here on RC  R Helper Functions page.\nNote: Find plotmat() here on RC  R Helper Functions page.\n"}, {"task_name": "Sierpinski carpet", "task_url": "https://rosettacode.org/wiki/Sierpinski_carpet", "task_cat": "Geometry", "lang": "Ada", "code": "\nwith Ada.Text_Io; use Ada.Text_Io;\n\nprocedure Sierpinski_Carpet is\n   subtype Index_Type is Integer range 1..81;\n   type Pattern_Array is array(Index_Type range <>, Index_Type range <>) of Boolean;\n   Pattern : Pattern_Array(1..81,1..81) := (Others =>(others => true));\n   procedure Clear_Center(P : in out Pattern_Array; X1 : Index_Type; X2 : Index_Type;\n         Y1 : Index_Type; Y2 : Index_Type) is\n      Xfirst : Index_Type;\n      Xlast  : Index_Type;\n      Yfirst : Index_Type;\n      Ylast  : Index_Type;\n      Diff   : Integer;\n   begin\n      Xfirst :=(X2 - X1 + 1) / 3 + X1;\n      Diff := Xfirst - X1;\n      Xlast  := Xfirst + Diff;\n      Yfirst := (Y2 - Y1) / 3 + Y1;\n      YLast  := YFirst + Diff;\n\n      for I in XFirst..XLast loop\n         for J in YFirst..YLast loop\n            P(I, J) := False;\n         end loop;\n      end loop;\n   end Clear_Center;\n   \n   procedure Print(P : Pattern_Array) is\n   begin\n      for I in P'range(1) loop\n         for J in P'range(2) loop\n            if P(I,J) then\n               Put('*');\n            else\n               Put(' ');\n            end if;\n         end loop;\n         New_Line;\n      end loop;\n   end Print;\n   \n   procedure Divide_Square(P : in out Pattern_Array; Order : Positive) is\n      Factor : Natural := 0;\n      X1, X2 : Index_Type;\n      Y1, Y2  : Index_Type;\n      Division : Index_Type;\n      Num_Sections : Index_Type;\n   begin\n      while Factor < Order loop\n         Num_Sections := 3**Factor;\n         Factor := Factor + 1;\n         X1  := P'First;\n         Division   := P'Last / Num_Sections;\n         X2 := Division;\n         Y1 := X1;\n         Y2 := X2;\n         loop\n            loop\n               Clear_Center(P, X1, X2, Y1, Y2);\n               exit when X2 = P'Last;\n               X1 := X2;\n               X2 := X2 + Division;\n            end loop;\n            exit when Y2 = P'Last;\n            Y1 := Y2;\n            Y2 := Y2 + Division;\n            X1 := P'First;\n            X2 := Division;\n         end loop;\n      end loop;\n   end Divide_Square;\n   \nbegin\n   Divide_Square(Pattern, 3);\n   Print(Pattern);\nend Sierpinski_Carpet;\n\n", "explain": ""}, {"task_name": "Sierpinski carpet", "task_url": "https://rosettacode.org/wiki/Sierpinski_carpet", "task_cat": "Geometry", "lang": "Julia", "code": "\nWorks with: Julia version 0.6\nfunction sierpinski(n::Integer, token::AbstractString=\"*\")\n    x = fill(token, 1, 1)\n    for _ in 1:n\n        t = fill(\" \", size(x))\n        x = [x x x; x t x; x x x]\n    end\n    return x\nend\n\nfunction printsierpinski(m::Matrix)\n    for r in 1:size(m, 1)\n        println(join(m[r, :]))\n    end\nend\n\nsierpinski(2, \"#\") |> printsierpinski\n\n", "explain": ""}, {"task_name": "Sierpinski carpet", "task_url": "https://rosettacode.org/wiki/Sierpinski_carpet", "task_cat": "Geometry", "lang": "Kotlin", "code": "\nASCII Art Version[edit]\nTranslation of: Python\n// version 1.1.2\n\nfun inCarpet(x: Int, y: Int): Boolean {\n    var xx = x\n    var yy = y\n    while (xx != 0 && yy != 0) {\n        if (xx % 3 == 1 && yy % 3 == 1) return false\n        xx /= 3\n        yy /= 3\n    }\n    return true\n}\n\nfun carpet(n: Int) {\n    val power = Math.pow(3.0, n.toDouble()).toInt()\n    for(i in 0 until power) {\n        for(j in 0 until power) print(if (inCarpet(i, j)) \"*\" else \" \")\n        println()\n    }\n}\n\nfun main(args: Array<String>) = carpet(3)\n\n\nOutput:\n***************************\n* ** ** ** ** ** ** ** ** *\n***************************\n***   ******   ******   ***\n* *   * ** *   * ** *   * *\n***   ******   ******   ***\n***************************\n* ** ** ** ** ** ** ** ** *\n***************************\n*********         *********\n* ** ** *         * ** ** *\n*********         *********\n***   ***         ***   ***\n* *   * *         * *   * *\n***   ***         ***   ***\n*********         *********\n* ** ** *         * ** ** *\n*********         *********\n***************************\n* ** ** ** ** ** ** ** ** *\n***************************\n***   ******   ******   ***\n* *   * ** *   * ** *   * *\n***   ******   ******   ***\n***************************\n* ** ** ** ** ** ** ** ** *\n***************************\n\nGraphical Animated Version[edit]\nTranslation of: Java\n// version 1.1.2\n\nimport java.awt.*\nimport javax.swing.*\n\npublic class SierpinskiCarpet : JPanel() {\n    private val dim = 513\n    private val margin = 20\n    private var limit = dim\n\n    init {\n        val size = dim + 2 * margin\n        preferredSize = Dimension(size, size)\n        background = Color.blue\n        foreground = Color.yellow\n        Timer(2000) {\n            limit /= 3\n            if (limit <= 3) limit = dim\n            repaint()\n        }.start()\n    }\n\n    private fun drawCarpet(g: Graphics2D, x: Int, y: Int, s: Int) {\n        var size = s\n        if (s < limit) return\n        size /= 3\n        for (i in 0 until 9) {\n            if (i == 4) {\n                g.fillRect(x + size, y + size, size, size)\n            }\n            else {\n                drawCarpet(g, x + (i % 3) * size, y + (i / 3) * size, size)\n            }\n        }\n    }\n\n    override fun paintComponent(gg: Graphics) {\n        super.paintComponent(gg)\n        val g = gg as Graphics2D\n        g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON)\n        g.translate(margin, margin)\n        drawCarpet(g, 0, 0, dim)\n    }\n}\n\nfun main(args: Array<String>) {\n    SwingUtilities.invokeLater {\n        val f = JFrame()\n        f.defaultCloseOperation = JFrame.EXIT_ON_CLOSE\n        f.title = \"Sierpinski Carpet\"\n        f.isResizable = false\n        f.add(SierpinskiCarpet(), BorderLayout.CENTER)\n        f.pack()\n        f.setLocationRelativeTo(null)\n        f.isVisible = true\n    }\n}\n\n", "explain": ""}, {"task_name": "Sierpinski carpet", "task_url": "https://rosettacode.org/wiki/Sierpinski_carpet", "task_cat": "Geometry", "lang": "Perl", "code": "\nmy @c = '##'; \n@c = (map($_ x 3, @c), map($_.(' ' x length).$_, @c), map($_ x 3, @c)) \n        for 1 .. 3;\nprint join(\"\\n\", @c), \"\\n\";\n\n", "explain": ""}, {"task_name": "Sierpinski carpet", "task_url": "https://rosettacode.org/wiki/Sierpinski_carpet", "task_cat": "Geometry", "lang": "Prolog", "code": "\nWorks with: SWI Prolog\n\nmain:-\n    write_sierpinski_carpet('sierpinski_carpet.svg', 486, 4).\n\nwrite_sierpinski_carpet(File, Size, Order):-\n    open(File, write, Stream),\n    format(Stream,\n           \"<svg xmlns='http://www.w3.org/2000/svg' width='~d' height='~d'>\\n\",\n           [Size, Size]),\n    write(Stream, \"<rect width='100%' height='100%' fill='white'/>\\n\"),\n    Side is Size/3.0,\n    sierpinski_carpet(Stream, 0, 0, Side, Order),\n    write(Stream, \"</svg>\\n\"),\n    close(Stream).\n\nsierpinski_carpet(Stream, X, Y, Side, 0):-\n    !,\n    X0 is X + Side,\n    Y0 is Y + Side,\n    write_square(Stream, X0, Y0, Side).\nsierpinski_carpet(Stream, X, Y, Side, Order):-\n    Order1 is Order - 1,\n    Side1 is Side / 3.0,\n    X0 is X + Side,\n    Y0 is Y + Side,\n    X1 is X0 + Side,\n    Y1 is Y0 + Side,\n    write_square(Stream, X0, Y0, Side),\n    sierpinski_carpet(Stream, X, Y, Side1, Order1),\n    sierpinski_carpet(Stream, X0, Y, Side1, Order1),\n    sierpinski_carpet(Stream, X1, Y, Side1, Order1),\n    sierpinski_carpet(Stream, X, Y0, Side1, Order1),\n    sierpinski_carpet(Stream, X1, Y0, Side1, Order1),\n    sierpinski_carpet(Stream, X, Y1, Side1, Order1),\n    sierpinski_carpet(Stream, X0, Y1, Side1, Order1),\n    sierpinski_carpet(Stream, X1, Y1, Side1, Order1).\n\nwrite_square(Stream, X, Y, Side):-\n    format(Stream,\n           \"<rect fill='black' x='~g' y='~g' width='~g' height='~g'/>\\n\",\n           [X, Y, Side, Side]).\n\n\nOutput:\n\n", "explain": "This program produces an image file in SVG format.\nMedia:Sierpinski_carpet_prolog.svg\n"}, {"task_name": "Sierpinski carpet", "task_url": "https://rosettacode.org/wiki/Sierpinski_carpet", "task_cat": "Geometry", "lang": "Lua", "code": "\n\nlocal function carpet(n, f)\n  print(\"n = \" .. n)\n  local function S(x, y)\n    if x==0 or y==0 then return true\n    elseif x%3==1 and y%3==1 then return false end\n    return S(x//3, y//3)\n  end\n  for y = 0, 3^n-1 do\n    for x = 0, 3^n-1 do\n      io.write(f(S(x, y)))\n    end\n    print()\n  end\n  print()\nend\n\nfor n = 0, 4 do\n  carpet(n, function(b) return b and \"\u25a0 \" or \"  \" end)\nend\n\n\nOutput:\nn = 0\n\u25a0\n\nn = 1\n\u25a0 \u25a0 \u25a0\n\u25a0   \u25a0\n\u25a0 \u25a0 \u25a0\n\nn = 2\n\u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0\n\u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0\n\u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0\n\u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0\n\u25a0   \u25a0       \u25a0   \u25a0\n\u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0\n\u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0\n\u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0\n\u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0\n\nn = 3\n\u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0\n\u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0\n\u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0\n\u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0\n\u25a0   \u25a0       \u25a0   \u25a0 \u25a0   \u25a0       \u25a0   \u25a0 \u25a0   \u25a0       \u25a0   \u25a0\n\u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0\n\u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0\n\u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0\n\u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0\n\u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0                   \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0\n\u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0                   \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0\n\u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0                   \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0\n\u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0                   \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0\n\u25a0   \u25a0       \u25a0   \u25a0                   \u25a0   \u25a0       \u25a0   \u25a0\n\u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0                   \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0\n\u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0                   \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0\n\u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0                   \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0\n\u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0                   \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0\n\u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0\n\u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0\n\u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0\n\u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0\n\u25a0   \u25a0       \u25a0   \u25a0 \u25a0   \u25a0       \u25a0   \u25a0 \u25a0   \u25a0       \u25a0   \u25a0\n\u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0\n\u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0\n\u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0\n\u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0\n\nn = 4\n\u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0\n\u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0\n\u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0\n\u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0\n\u25a0   \u25a0       \u25a0   \u25a0 \u25a0   \u25a0       \u25a0   \u25a0 \u25a0   \u25a0       \u25a0   \u25a0 \u25a0   \u25a0       \u25a0   \u25a0 \u25a0   \u25a0       \u25a0   \u25a0 \u25a0   \u25a0       \u25a0   \u25a0 \u25a0   \u25a0       \u25a0   \u25a0 \u25a0   \u25a0       \u25a0   \u25a0 \u25a0   \u25a0       \u25a0   \u25a0\n\u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0\n\u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0\n\u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0\n\u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0\n\u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0                   \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0                   \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0                   \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0\n\u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0                   \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0                   \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0                   \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0\n\u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0                   \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0                   \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0                   \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0\n\u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0                   \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0                   \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0                   \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0\n\u25a0   \u25a0       \u25a0   \u25a0                   \u25a0   \u25a0       \u25a0   \u25a0 \u25a0   \u25a0       \u25a0   \u25a0                   \u25a0   \u25a0       \u25a0   \u25a0 \u25a0   \u25a0       \u25a0   \u25a0                   \u25a0   \u25a0       \u25a0   \u25a0\n\u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0                   \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0                   \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0                   \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0\n\u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0                   \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0                   \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0                   \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0\n\u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0                   \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0                   \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0                   \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0\n\u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0                   \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0                   \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0                   \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0\n\u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0\n\u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0\n\u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0\n\u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0\n\u25a0   \u25a0       \u25a0   \u25a0 \u25a0   \u25a0       \u25a0   \u25a0 \u25a0   \u25a0       \u25a0   \u25a0 \u25a0   \u25a0       \u25a0   \u25a0 \u25a0   \u25a0       \u25a0   \u25a0 \u25a0   \u25a0       \u25a0   \u25a0 \u25a0   \u25a0       \u25a0   \u25a0 \u25a0   \u25a0       \u25a0   \u25a0 \u25a0   \u25a0       \u25a0   \u25a0\n\u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0\n\u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0\n\u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0\n\u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0\n\u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0                                                       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0\n\u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0                                                       \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0\n\u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0                                                       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0\n\u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0                                                       \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0\n\u25a0   \u25a0       \u25a0   \u25a0 \u25a0   \u25a0       \u25a0   \u25a0 \u25a0   \u25a0       \u25a0   \u25a0                                                       \u25a0   \u25a0       \u25a0   \u25a0 \u25a0   \u25a0       \u25a0   \u25a0 \u25a0   \u25a0       \u25a0   \u25a0\n\u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0                                                       \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0\n\u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0                                                       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0\n\u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0                                                       \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0\n\u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0                                                       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0\n\u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0                   \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0                                                       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0                   \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0\n\u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0                   \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0                                                       \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0                   \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0\n\u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0                   \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0                                                       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0                   \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0\n\u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0                   \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0                                                       \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0                   \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0\n\u25a0   \u25a0       \u25a0   \u25a0                   \u25a0   \u25a0       \u25a0   \u25a0                                                       \u25a0   \u25a0       \u25a0   \u25a0                   \u25a0   \u25a0       \u25a0   \u25a0\n\u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0                   \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0                                                       \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0                   \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0\n\u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0                   \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0                                                       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0                   \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0\n\u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0                   \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0                                                       \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0                   \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0\n\u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0                   \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0                                                       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0                   \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0\n\u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0                                                       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0\n\u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0                                                       \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0\n\u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0                                                       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0\n\u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0                                                       \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0\n\u25a0   \u25a0       \u25a0   \u25a0 \u25a0   \u25a0       \u25a0   \u25a0 \u25a0   \u25a0       \u25a0   \u25a0                                                       \u25a0   \u25a0       \u25a0   \u25a0 \u25a0   \u25a0       \u25a0   \u25a0 \u25a0   \u25a0       \u25a0   \u25a0\n\u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0                                                       \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0\n\u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0                                                       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0\n\u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0                                                       \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0\n\u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0                                                       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0\n\u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0\n\u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0\n\u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0\n\u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0\n\u25a0   \u25a0       \u25a0   \u25a0 \u25a0   \u25a0       \u25a0   \u25a0 \u25a0   \u25a0       \u25a0   \u25a0 \u25a0   \u25a0       \u25a0   \u25a0 \u25a0   \u25a0       \u25a0   \u25a0 \u25a0   \u25a0       \u25a0   \u25a0 \u25a0   \u25a0       \u25a0   \u25a0 \u25a0   \u25a0       \u25a0   \u25a0 \u25a0   \u25a0       \u25a0   \u25a0\n\u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0\n\u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0\n\u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0\n\u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0\n\u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0                   \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0                   \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0                   \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0\n\u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0                   \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0                   \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0                   \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0\n\u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0                   \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0                   \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0                   \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0\n\u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0                   \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0                   \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0                   \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0\n\u25a0   \u25a0       \u25a0   \u25a0                   \u25a0   \u25a0       \u25a0   \u25a0 \u25a0   \u25a0       \u25a0   \u25a0                   \u25a0   \u25a0       \u25a0   \u25a0 \u25a0   \u25a0       \u25a0   \u25a0                   \u25a0   \u25a0       \u25a0   \u25a0\n\u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0                   \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0                   \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0                   \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0\n\u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0                   \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0                   \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0                   \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0\n\u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0                   \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0                   \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0                   \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0\n\u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0                   \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0                   \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0                   \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0\n\u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0\n\u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0\n\u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0\n\u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0\n\u25a0   \u25a0       \u25a0   \u25a0 \u25a0   \u25a0       \u25a0   \u25a0 \u25a0   \u25a0       \u25a0   \u25a0 \u25a0   \u25a0       \u25a0   \u25a0 \u25a0   \u25a0       \u25a0   \u25a0 \u25a0   \u25a0       \u25a0   \u25a0 \u25a0   \u25a0       \u25a0   \u25a0 \u25a0   \u25a0       \u25a0   \u25a0 \u25a0   \u25a0       \u25a0   \u25a0\n\u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0       \u25a0 \u25a0 \u25a0\n\u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0\n\u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0 \u25a0   \u25a0\n\u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0\n", "explain": "An excellent opportunity to show off tail calls, so, recursively..\n"}, {"task_name": "Sierpinski carpet", "task_url": "https://rosettacode.org/wiki/Sierpinski_carpet", "task_cat": "Geometry", "lang": "Scala", "code": "\nTranslation of: Ruby\ndef nextCarpet(carpet: List[String]): List[String] = (\n  carpet.map(x => x + x + x)\u00a0:::\n  carpet.map(x => x + x.replace('#', ' ') + x)\u00a0:::\n  carpet.map(x => x + x + x))\n\ndef sierpinskiCarpets(n: Int) = (Iterator.iterate(List(\"#\"))(nextCarpet) drop n next) foreach println\n", "explain": ""}, {"task_name": "Sierpinski carpet", "task_url": "https://rosettacode.org/wiki/Sierpinski_carpet", "task_cat": "Geometry", "lang": "D", "code": "\nTranslation of: Python\nimport std.stdio, std.string, std.algorithm, std.array;\n\nauto sierpinskiCarpet(in int n) pure nothrow @safe {\n    auto r = [\"#\"];\n    foreach (immutable _; 0 .. n) {\n        const p = r.map!q{a ~ a ~ a}.array;\n        r = p ~ r.map!q{a ~ a.replace(\"#\", \" \") ~ a}.array ~ p;\n    }\n    return r.join('\\n');\n}\n\nvoid main() {\n    3.sierpinskiCarpet.writeln;\n}\n\n\nimport std.stdio, std.algorithm, std.range, std.functional;\n\nauto nextCarpet(in string[] c) pure nothrow {\n    /*immutable*/ const b = c.map!q{a ~ a ~ a}.array;\n    return b ~ c.map!q{a ~ a.replace(\"#\", \" \") ~ a}.array ~ b;\n}\n\nvoid main() {\n    [\"#\"]\n    .recurrence!((a, n) => a[n - 1].nextCarpet)\n    .dropExactly(3)\n    .front\n    .binaryReverseArgs!writefln(\"%-(%s\\n%)\");\n}\n\n\nimport std.stdio, std.array;\n\nchar[][] sierpinskiCarpet(in size_t n) pure nothrow @safe {\n    auto mat = uninitializedArray!(typeof(return))(3 ^^ n, 3 ^^ n);\n\n    foreach (immutable r, row; mat) {\n        row[] = '#';\n        foreach (immutable c, ref cell; row) {\n            size_t r2 = r, c2 = c;\n            while (r2 && c2) {\n                if (r2 % 3 == 1 && c2 % 3 == 1) {\n                    cell = ' ';\n                    break;\n                }\n                r2 /= 3;\n                c2 /= 3;\n            }\n        }\n    }\n\n    return mat;\n}\n\nvoid main() {\n    writefln(\"%-(%s\\n%)\", 3.sierpinskiCarpet);\n    7.sierpinskiCarpet.length.writeln;\n}\n\n", "explain": "More functional style:\nA more direct and efficient version:\n"}, {"task_name": "Sierpinski carpet", "task_url": "https://rosettacode.org/wiki/Sierpinski_carpet", "task_cat": "Geometry", "lang": "Haskell", "code": "\ninCarpet :: Int -> Int -> Bool\ninCarpet 0 _ = True\ninCarpet _ 0 = True\ninCarpet x y = not ((xr == 1) && (yr == 1)) && inCarpet xq yq\n  where ((xq, xr), (yq, yr)) = (x `divMod` 3, y `divMod` 3)\n\ncarpet :: Int -> [String]\ncarpet n = map\n            (zipWith\n              (\\x y -> if inCarpet x y then '#' else ' ')\n              [0..3^n-1]\n             . repeat)\n            [0..3^n-1]\n\nprintCarpet :: Int -> IO ()\nprintCarpet = mapM_ putStrLn . carpet\n\nTranslation of: Ruby\nnextCarpet :: [String] -> [String]\nnextCarpet carpet = border ++ map f carpet ++ border\n  where border = map (concat . replicate 3) carpet\n        f x = x ++ map (const ' ') x ++ x\n \nsierpinskiCarpet :: Int -> [String]\nsierpinskiCarpet n = iterate nextCarpet [\"#\"] !! n\n \nmain :: IO ()\nmain = mapM_ putStrLn $ sierpinskiCarpet 3\n\n\nmain :: IO ()\nmain = putStr . unlines . (!!3) $ iterate next [\"#\"]\n\nnext :: [String] -> [String]\nnext block = \n    block ! block  ! block\n              ++\n    block ! center ! block\n              ++\n    block ! block  ! block\n    where\n      (!)    = zipWith (++)\n      center = map (map $ const ' ') block\n\n\ncarpet :: Int -> String\ncarpet = unlines . (iterate weave [\"\u2588\u2588\"] !!)\n\nweave :: [String] -> [String]\nweave xs =\n  let f = zipWith (<>)\n      g = flip f\n   in concatMap\n        (g xs . f xs)\n        [ xs,\n          fmap (const ' ') <$> xs,\n          xs\n        ]\n\nmain :: IO ()\nmain = mapM_ (putStrLn . carpet) [0 .. 2]\n\n\ncarpet :: Int -> String\ncarpet = unlines . (iterate weave [\"\u2588\u2588\"] !!)\n\nweave :: [String] -> [String]\nweave =\n  let thread = zipWith (<>)\n   in ( (>>=)\n          . ( (:)\n                <*> ( ((:) . fmap (fmap (const ' ')))\n                        <*> return\n                    )\n            )\n      )\n        <*> ((.) <$> flip thread <*> thread)\n\nmain :: IO ()\nmain = mapM_ (putStrLn . carpet) [0 .. 2]\n\n\nOutput:\n\u2588\u2588\n\n\u2588\u2588\u2588\u2588\u2588\u2588\n\u2588\u2588  \u2588\u2588\n\u2588\u2588\u2588\u2588\u2588\u2588\n\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\u2588\u2588  \u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588  \u2588\u2588\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\u2588\u2588\u2588\u2588\u2588\u2588      \u2588\u2588\u2588\u2588\u2588\u2588\n\u2588\u2588  \u2588\u2588      \u2588\u2588  \u2588\u2588\n\u2588\u2588\u2588\u2588\u2588\u2588      \u2588\u2588\u2588\u2588\u2588\u2588\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\u2588\u2588  \u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588  \u2588\u2588\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\nGUI variant[edit]\n\nWorks with: GHC\nLibrary: diagrams\n{-# LANGUAGE DoRec #-}\nimport Control.Monad.Trans (lift)\nimport Data.Colour (Colour)\n \nimport Diagrams.Prelude hiding (after)\nimport Diagrams.Backend.Cairo (Cairo)\nimport Diagrams.Backend.Cairo.Gtk (defaultRender)\n \nimport Graphics.Rendering.Diagrams.Points ()\nimport Graphics.UI.Gtk\nimport Graphics.UI.Gtk.Gdk.GC (gcNew)\n \n \nmain :: IO ()\nmain = do\n  _ <- initGUI\n  window <- windowNew\n  _ <- window `onDestroy` mainQuit\n  window `windowSetResizable` False\n \n  area <- drawingAreaNew\n  _ <- area `on` sizeRequest $ return (Requisition 500 500)\n  _ <- window `containerAdd` area\n  widgetShowAll window\n \n  rec con <- area `on` exposeEvent $ do\n                lift $ signalDisconnect con\n                lift $ area `defaultRender` carpet 5\n                switchToPixBuf area\n  mainGUI\n \n \n-- just workaround for slow redrawing\nswitchToPixBuf :: DrawingArea -> EventM EExpose Bool\nswitchToPixBuf area =\n    eventArea >>= \\ea -> lift $ do\n        dw      <- widgetGetDrawWindow area\n        (w,h)   <- drawableGetSize dw\n        Just pb <- pixbufGetFromDrawable dw ea\n        gc      <- gcNew dw\n        _ <- area `on` exposeEvent $ lift $\n              False <$ drawPixbuf dw gc pb 0 0 0 0 w h RgbDitherNone 0 0\n        return False\n \n\ncarpet :: Int -> Diagram Cairo R2\ncarpet = (iterate next (cell white) !!)\n\n-- of course, one can use hcat / vcat - combinators\nnext :: Diagram Cairo R2 -> Diagram Cairo R2\nnext block =\n    scale (1/3) . centerXY  $\n\n\t(block ||| block ||| block)\n    \t            ===\n    \t(block ||| centr ||| block)\n    \t            ===\n    \t(block ||| block ||| block)\n    where\n      centr = cell black\n \ncell :: Colour Float -> Diagram Cairo R2\ncell color = square 1 # lineWidth 0 # fillColor color\n\n", "explain": "Seems not very different from version above,\nwhich we could also read as:\nOr more applicatively, representing different phases of the weaving shuttle as <*> and <>:\nVia high-level vector graphics (diagrams -> cairo -> gtk), very slow.\n"}, {"task_name": "Sierpinski carpet", "task_url": "https://rosettacode.org/wiki/Sierpinski_carpet", "task_cat": "Geometry", "lang": "Scheme", "code": "\n(define (carpet n)\n  (define (in-carpet? x y)\n    (cond ((or (zero? x) (zero? y))\n              #t)\n          ((and (= 1 (remainder x 3)) (= 1 (remainder y 3)))\n              #f)\n          (else\n              (in-carpet? (quotient x 3) (quotient y 3)))))\n\n  (do ((i 0 (+ i 1))) ((not (< i (expt 3 n))))\n    (do ((j 0 (+ j 1))) ((not (< j (expt 3 n))))\n      (display (if (in-carpet? i j)\n                   #\\*\n                   #\\space)))\n    (newline)))\n", "explain": ""}, {"task_name": "Sierpinski carpet", "task_url": "https://rosettacode.org/wiki/Sierpinski_carpet", "task_cat": "Geometry", "lang": "PowerShell", "code": "\nText based solution\nWorks with: PowerShell version 2\nfunction Draw-SierpinskiCarpet ( [int]$N )\n    {\n    $Carpet = @( '#' ) * [math]::Pow( 3, $N )\n    ForEach ( $i in 1..$N )\n        {\n        $S = [math]::Pow( 3, $i - 1 )\n        ForEach ( $Row in 0..($S-1) )\n            {\n            $Carpet[$Row+$S+$S] = $Carpet[$Row] * 3\n            $Carpet[$Row+$S]    = $Carpet[$Row] + ( \" \" * $Carpet[$Row].Length ) + $Carpet[$Row]\n            $Carpet[$Row]       = $Carpet[$Row] * 3\n            }\n        }\n    $Carpet\n    }\n \nDraw-SierpinskiCarpet 3\n\n\nOutput:\n###########################\n# ## ## ## ## ## ## ## ## #\n###########################\n###   ######   ######   ###\n# #   # ## #   # ## #   # #\n###   ######   ######   ###\n###########################\n# ## ## ## ## ## ## ## ## #\n###########################\n#########         #########\n# ## ## #         # ## ## #\n#########         #########\n###   ###         ###   ###\n# #   # #         # #   # #\n###   ###         ###   ###\n#########         #########\n# ## ## #         # ## ## #\n#########         #########\n###########################\n# ## ## ## ## ## ## ## ## #\n###########################\n###   ######   ######   ###\n# #   # ## #   # ## #   # #\n###   ######   ######   ###\n###########################\n# ## ## ## ## ## ## ## ## #\n###########################\nGraphics based solution\nWorks with: PowerShell version 3\nFunction Draw-SierpinskiCarpet ( [int]$N )\n    {\n    #  Define form\n    $Form = [System.Windows.Forms.Form]@{ Size = '300, 300' }\n    $Form.Controls.Add(( $PictureBox = [System.Windows.Forms.PictureBox]@{ Size = $Form.ClientSize; Anchor = 'Top, Bottom, Left, Right' } ))\n \n    #  Main code to draw Sierpinski carpet\n    $Draw = {\n \n        #  Create graphics objects to use\n        $PictureBox.Image = ( $Canvas = New-Object System.Drawing.Bitmap ( $PictureBox.Size.Width, $PictureBox.Size.Height ) )\n        $Graphics = [System.Drawing.Graphics]::FromImage( $Canvas )\n \n        #  Draw single pixel\n        $Graphics.FillRectangle( [System.Drawing.Brushes]::Black, 0, 0, 1, 1 )\n \n        #  If N was not specified, use an N that will fill the form\n        If ( -not $N ) { $N = [math]::Ceiling( [math]::Log( [math]::Max( $PictureBox.Size.Height, $PictureBox.Size.Width ) ) / [math]::Log( 3 ) ) }\n \n        #  Define the shape of the fractal\n        $P  = @( @( 0, 0 ), @( 0, 1 ), @( 0, 2 ) )\n        $P += @( @( 1, 0 ),            @( 1, 2 ) )\n        $P += @( @( 2, 0 ), @( 2, 1 ), @( 2, 2 ) )\n \n        #  For each iteration\n        ForEach ( $i in 0..$N )\n            {\n            #  Copy the result of the previous iteration\n            $Copy = New-Object System.Drawing.TextureBrush ( $Canvas )\n \n            #  Calulate the size of the copy\n            $S = [math]::Pow( 3, $i )\n \n            #  For each position in the next layer of the fractal\n            ForEach ( $i in 1..7 )\n                {\n                #  Adjust the copy for the new location\n                $Copy.TranslateTransform( - $P[$i-1][0] * $S + $P[$i][0] * $S, - $P[$i-1][1] * $S + $P[$i][1] * $S )\n \n                #  Paste the copy of the previous iteration into the new location\n                $Graphics.FillRectangle( $Copy, $P[$i][0] * $S, $P[$i][1] * $S, $S, $S )\n                }\n            }\n        }\n \n    #  Add the main drawing code to the appropriate events to be drawn when the form is first shown and redrawn when the form size is changed\n    $Form.Add_Shown(  $Draw )\n    $Form.Add_Resize( $Draw )\n \n    #  Launch the form\n    $Null = $Form.ShowDialog()\n    }\n \nDraw-SierpinskiCarpet 4\n\n\nOutput:\n\n\nThis example is incomplete. Upload of files currently blocked. Needs output screenshot once file uploading is again allowed. Please ensure that it meets all task requirements and remove this message.\n\n", "explain": ""}, {"task_name": "Sierpinski carpet", "task_url": "https://rosettacode.org/wiki/Sierpinski_carpet", "task_cat": "Geometry", "lang": "F#", "code": "\nTranslation of: OCamlTranslation of: Ruby\nopen System\n\nlet blank x = new String(' ', String.length x)\n\nlet nextCarpet carpet = \n  List.map (fun x -> x + x + x) carpet @\n  List.map (fun x -> x + (blank x) + x) carpet @\n  List.map (fun x -> x + x + x) carpet\n \nlet rec sierpinskiCarpet n =\n  let rec aux n carpet =\n    if n = 0 then carpet\n             else aux (n-1) (nextCarpet carpet)\n  aux n [\"#\"]\n \nList.iter (printfn \"%s\") (sierpinskiCarpet 3)\n\n", "explain": ""}, {"task_name": "Sierpinski carpet", "task_url": "https://rosettacode.org/wiki/Sierpinski_carpet", "task_cat": "Geometry", "lang": "Groovy", "code": "\n\ndef base3 = { BigInteger i -> i.toString(3) }\n\ndef sierpinskiCarpet = { int order ->\n    StringBuffer sb = new StringBuffer()\n    def positions = 0..<(3**order)\n    def digits = 0..<([order,1].max())\n\n    positions.each { i ->\n        String i3 = base3(i).padLeft(order, '0')\n\n        positions.each { j ->\n            String j3 = base3(j).padLeft(order, '0')\n\n            sb << (digits.any{ i3[it] == '1' && j3[it] == '1' } ? '  ' : order.toString().padRight(2) )\n        }\n        sb << '\\n'\n    }\n    sb.toString()\n}\n\n\n(0..4).each { println sierpinskiCarpet(it) }\n\n\nOutput:\n0 \n\n1 1 1 \n1   1 \n1 1 1 \n\n2 2 2 2 2 2 2 2 2 \n2   2 2   2 2   2 \n2 2 2 2 2 2 2 2 2 \n2 2 2       2 2 2 \n2   2       2   2 \n2 2 2       2 2 2 \n2 2 2 2 2 2 2 2 2 \n2   2 2   2 2   2 \n2 2 2 2 2 2 2 2 2 \n\n3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 \n3   3 3   3 3   3 3   3 3   3 3   3 3   3 3   3 3   3 \n3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 \n3 3 3       3 3 3 3 3 3       3 3 3 3 3 3       3 3 3 \n3   3       3   3 3   3       3   3 3   3       3   3 \n3 3 3       3 3 3 3 3 3       3 3 3 3 3 3       3 3 3 \n3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 \n3   3 3   3 3   3 3   3 3   3 3   3 3   3 3   3 3   3 \n3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 \n3 3 3 3 3 3 3 3 3                   3 3 3 3 3 3 3 3 3 \n3   3 3   3 3   3                   3   3 3   3 3   3 \n3 3 3 3 3 3 3 3 3                   3 3 3 3 3 3 3 3 3 \n3 3 3       3 3 3                   3 3 3       3 3 3 \n3   3       3   3                   3   3       3   3 \n3 3 3       3 3 3                   3 3 3       3 3 3 \n3 3 3 3 3 3 3 3 3                   3 3 3 3 3 3 3 3 3 \n3   3 3   3 3   3                   3   3 3   3 3   3 \n3 3 3 3 3 3 3 3 3                   3 3 3 3 3 3 3 3 3 \n3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 \n3   3 3   3 3   3 3   3 3   3 3   3 3   3 3   3 3   3 \n3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 \n3 3 3       3 3 3 3 3 3       3 3 3 3 3 3       3 3 3 \n3   3       3   3 3   3       3   3 3   3       3   3 \n3 3 3       3 3 3 3 3 3       3 3 3 3 3 3       3 3 3 \n3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 \n3   3 3   3 3   3 3   3 3   3 3   3 3   3 3   3 3   3 \n3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 \n\n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 \n4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 \n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 \n4 4 4       4 4 4 4 4 4       4 4 4 4 4 4       4 4 4 4 4 4       4 4 4 4 4 4       4 4 4 4 4 4       4 4 4 4 4 4       4 4 4 4 4 4       4 4 4 4 4 4       4 4 4 \n4   4       4   4 4   4       4   4 4   4       4   4 4   4       4   4 4   4       4   4 4   4       4   4 4   4       4   4 4   4       4   4 4   4       4   4 \n4 4 4       4 4 4 4 4 4       4 4 4 4 4 4       4 4 4 4 4 4       4 4 4 4 4 4       4 4 4 4 4 4       4 4 4 4 4 4       4 4 4 4 4 4       4 4 4 4 4 4       4 4 4 \n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 \n4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 \n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 \n4 4 4 4 4 4 4 4 4                   4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4                   4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4                   4 4 4 4 4 4 4 4 4 \n4   4 4   4 4   4                   4   4 4   4 4   4 4   4 4   4 4   4                   4   4 4   4 4   4 4   4 4   4 4   4                   4   4 4   4 4   4 \n4 4 4 4 4 4 4 4 4                   4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4                   4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4                   4 4 4 4 4 4 4 4 4 \n4 4 4       4 4 4                   4 4 4       4 4 4 4 4 4       4 4 4                   4 4 4       4 4 4 4 4 4       4 4 4                   4 4 4       4 4 4 \n4   4       4   4                   4   4       4   4 4   4       4   4                   4   4       4   4 4   4       4   4                   4   4       4   4 \n4 4 4       4 4 4                   4 4 4       4 4 4 4 4 4       4 4 4                   4 4 4       4 4 4 4 4 4       4 4 4                   4 4 4       4 4 4 \n4 4 4 4 4 4 4 4 4                   4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4                   4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4                   4 4 4 4 4 4 4 4 4 \n4   4 4   4 4   4                   4   4 4   4 4   4 4   4 4   4 4   4                   4   4 4   4 4   4 4   4 4   4 4   4                   4   4 4   4 4   4 \n4 4 4 4 4 4 4 4 4                   4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4                   4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4                   4 4 4 4 4 4 4 4 4 \n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 \n4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 \n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 \n4 4 4       4 4 4 4 4 4       4 4 4 4 4 4       4 4 4 4 4 4       4 4 4 4 4 4       4 4 4 4 4 4       4 4 4 4 4 4       4 4 4 4 4 4       4 4 4 4 4 4       4 4 4 \n4   4       4   4 4   4       4   4 4   4       4   4 4   4       4   4 4   4       4   4 4   4       4   4 4   4       4   4 4   4       4   4 4   4       4   4 \n4 4 4       4 4 4 4 4 4       4 4 4 4 4 4       4 4 4 4 4 4       4 4 4 4 4 4       4 4 4 4 4 4       4 4 4 4 4 4       4 4 4 4 4 4       4 4 4 4 4 4       4 4 4 \n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 \n4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 \n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 \n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4                                                       4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 \n4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4                                                       4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 \n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4                                                       4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 \n4 4 4       4 4 4 4 4 4       4 4 4 4 4 4       4 4 4                                                       4 4 4       4 4 4 4 4 4       4 4 4 4 4 4       4 4 4 \n4   4       4   4 4   4       4   4 4   4       4   4                                                       4   4       4   4 4   4       4   4 4   4       4   4 \n4 4 4       4 4 4 4 4 4       4 4 4 4 4 4       4 4 4                                                       4 4 4       4 4 4 4 4 4       4 4 4 4 4 4       4 4 4 \n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4                                                       4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 \n4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4                                                       4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 \n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4                                                       4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 \n4 4 4 4 4 4 4 4 4                   4 4 4 4 4 4 4 4 4                                                       4 4 4 4 4 4 4 4 4                   4 4 4 4 4 4 4 4 4 \n4   4 4   4 4   4                   4   4 4   4 4   4                                                       4   4 4   4 4   4                   4   4 4   4 4   4 \n4 4 4 4 4 4 4 4 4                   4 4 4 4 4 4 4 4 4                                                       4 4 4 4 4 4 4 4 4                   4 4 4 4 4 4 4 4 4 \n4 4 4       4 4 4                   4 4 4       4 4 4                                                       4 4 4       4 4 4                   4 4 4       4 4 4 \n4   4       4   4                   4   4       4   4                                                       4   4       4   4                   4   4       4   4 \n4 4 4       4 4 4                   4 4 4       4 4 4                                                       4 4 4       4 4 4                   4 4 4       4 4 4 \n4 4 4 4 4 4 4 4 4                   4 4 4 4 4 4 4 4 4                                                       4 4 4 4 4 4 4 4 4                   4 4 4 4 4 4 4 4 4 \n4   4 4   4 4   4                   4   4 4   4 4   4                                                       4   4 4   4 4   4                   4   4 4   4 4   4 \n4 4 4 4 4 4 4 4 4                   4 4 4 4 4 4 4 4 4                                                       4 4 4 4 4 4 4 4 4                   4 4 4 4 4 4 4 4 4 \n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4                                                       4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 \n4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4                                                       4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 \n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4                                                       4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 \n4 4 4       4 4 4 4 4 4       4 4 4 4 4 4       4 4 4                                                       4 4 4       4 4 4 4 4 4       4 4 4 4 4 4       4 4 4 \n4   4       4   4 4   4       4   4 4   4       4   4                                                       4   4       4   4 4   4       4   4 4   4       4   4 \n4 4 4       4 4 4 4 4 4       4 4 4 4 4 4       4 4 4                                                       4 4 4       4 4 4 4 4 4       4 4 4 4 4 4       4 4 4 \n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4                                                       4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 \n4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4                                                       4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 \n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4                                                       4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 \n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 \n4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 \n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 \n4 4 4       4 4 4 4 4 4       4 4 4 4 4 4       4 4 4 4 4 4       4 4 4 4 4 4       4 4 4 4 4 4       4 4 4 4 4 4       4 4 4 4 4 4       4 4 4 4 4 4       4 4 4 \n4   4       4   4 4   4       4   4 4   4       4   4 4   4       4   4 4   4       4   4 4   4       4   4 4   4       4   4 4   4       4   4 4   4       4   4 \n4 4 4       4 4 4 4 4 4       4 4 4 4 4 4       4 4 4 4 4 4       4 4 4 4 4 4       4 4 4 4 4 4       4 4 4 4 4 4       4 4 4 4 4 4       4 4 4 4 4 4       4 4 4 \n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 \n4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 \n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 \n4 4 4 4 4 4 4 4 4                   4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4                   4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4                   4 4 4 4 4 4 4 4 4 \n4   4 4   4 4   4                   4   4 4   4 4   4 4   4 4   4 4   4                   4   4 4   4 4   4 4   4 4   4 4   4                   4   4 4   4 4   4 \n4 4 4 4 4 4 4 4 4                   4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4                   4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4                   4 4 4 4 4 4 4 4 4 \n4 4 4       4 4 4                   4 4 4       4 4 4 4 4 4       4 4 4                   4 4 4       4 4 4 4 4 4       4 4 4                   4 4 4       4 4 4 \n4   4       4   4                   4   4       4   4 4   4       4   4                   4   4       4   4 4   4       4   4                   4   4       4   4 \n4 4 4       4 4 4                   4 4 4       4 4 4 4 4 4       4 4 4                   4 4 4       4 4 4 4 4 4       4 4 4                   4 4 4       4 4 4 \n4 4 4 4 4 4 4 4 4                   4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4                   4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4                   4 4 4 4 4 4 4 4 4 \n4   4 4   4 4   4                   4   4 4   4 4   4 4   4 4   4 4   4                   4   4 4   4 4   4 4   4 4   4 4   4                   4   4 4   4 4   4 \n4 4 4 4 4 4 4 4 4                   4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4                   4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4                   4 4 4 4 4 4 4 4 4 \n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 \n4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 \n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 \n4 4 4       4 4 4 4 4 4       4 4 4 4 4 4       4 4 4 4 4 4       4 4 4 4 4 4       4 4 4 4 4 4       4 4 4 4 4 4       4 4 4 4 4 4       4 4 4 4 4 4       4 4 4 \n4   4       4   4 4   4       4   4 4   4       4   4 4   4       4   4 4   4       4   4 4   4       4   4 4   4       4   4 4   4       4   4 4   4       4   4 \n4 4 4       4 4 4 4 4 4       4 4 4 4 4 4       4 4 4 4 4 4       4 4 4 4 4 4       4 4 4 4 4 4       4 4 4 4 4 4       4 4 4 4 4 4       4 4 4 4 4 4       4 4 4 \n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 \n4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 4   4 \n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 \n", "explain": "Solution, uses list-indexing of base 3 string representation:\nTest Program:\n"}, {"task_name": "Sierpinski carpet", "task_url": "https://rosettacode.org/wiki/Sierpinski_carpet", "task_cat": "Geometry", "lang": "AWK", "code": "\n# WSC.AWK - Waclaw Sierpinski's carpet contributed by Dan Nielsen\n#\n# syntax: GAWK -f WSC.AWK [-v o={a|A}{b|B}] [-v X=anychar] iterations\n#\n#   -v o=ab default\n#      a|A  loose weave | tight weave\n#      b|B  don't show | show how the carpet is built\n#   -v X=?  Carpet is built with X's. The character assigned to X replaces all X's.\n#\n#   iterations\n#      The number of iterations. The default is 0 which produces one carpet.\n#\n# what is the difference between a loose weave and a tight weave:\n#   loose                tight\n#   X X X X X X X X X    XXXXXXXXX\n#   X   X X   X X   X    X XX XX X\n#   X X X X X X X X X    XXXXXXXXX\n#   X X X       X X X    XXX   XXX\n#   X   X       X   X    X X   X X\n#   X X X       X X X    XXX   XXX\n#   X X X X X X X X X    XXXXXXXXX\n#   X   X X   X X   X    X XX XX X\n#   X X X X X X X X X    XXXXXXXXX\n#\n# examples:\n#   GAWK -f WSC.AWK 2\n#   GAWK -f WSC.AWK -v o=Ab -v X=# 2\n#   GAWK -f WSC.AWK -v o=Ab -v X=\\xDB 2\n#\nBEGIN {\n    optns = (o == \"\") ? \"ab\" : o\n    n = ARGV[1] + 0 # iterations\n    if (n !~ /^[0-9]+$/) { exit(1) }\n    seed = (optns ~ /A/) ? \"XXX,X X,XXX\" : \"X X X ,X   X ,X X X \" # tight/loose weave\n    leng = row = split(seed,A,\",\") # seed the array\n    for (i=1; i<=n; i++) { # build carpet\n      for (a=1; a<=3; a++) {\n        row = 0\n        for (b=1; b<=3; b++) {\n          for (c=1; c<=leng; c++) {\n            row++\n            tmp = (a == 2 && b == 2) ? sprintf(\"%*s\",length(A[c]),\"\") : A[c]\n            B[row] = B[row] tmp\n          }\n          if (optns ~ /B/) { # show how the carpet is built\n            if (max_row < row+0) { max_row = row }\n            for (r=1; r<=max_row; r++) {\n              printf(\"i=%d row=%02d a=%d b=%d '%s'\\n\",i,r,a,b,B[r])\n            }\n            print(\"\")\n          }\n        }\n      }\n      leng = row\n      for (j=1; j<=row; j++) { A[j] = B[j] } # re-seed the array\n      for (j in B) { delete B[j] } # delete work array\n    }\n    for (j=1; j<=row; j++) { # print carpet\n      if (X != \"\") { gsub(/X/,substr(X,1,1),A[j]) }\n      sub(/ +$/,\"\",A[j])\n      printf(\"%s\\n\",A[j])\n    }\n    exit(0)\n}\n\n\nSample:\nGAWK -f WSC.AWK 1\n\nX X X X X X X X X\nX   X X   X X   X\nX X X X X X X X X\nX X X       X X X\nX   X       X   X\nX X X       X X X\nX X X X X X X X X\nX   X X   X X   X\nX X X X X X X X X\n\nGAWK -f WSC.AWK -v o=A 1\n\nXXXXXXXXX\nX XX XX X\nXXXXXXXXX\nXXX   XXX\nX X   X X\nXXX   XXX\nXXXXXXXXX\nX XX XX X\nXXXXXXXXX\n\n", "explain": ""}]