[{"task_name": "Loops/Foreach", "task_url": "https://rosettacode.org/wiki/Loops/Foreach", "task_cat": "Iteration", "lang": "Python", "code": "\nfor i in collection:\n   print i\n\nlines = words = characters = 0\nf = open('somefile','r')\nfor eachline in f:\n    lines += 1\n    for eachword in eachline.split():\n        words += 1\n        for eachchar in eachword:\n            characters += 1\n\nprint lines, words, characters\n\nd = {3: \"Earth\", 1: \"Mercury\", 4: \"Mars\", 2: \"Venus\"}\nfor k in sorted(d):\n    print(\"%i: %s\"\u00a0% (k, d[k]))\n\nd = {\"London\": \"United Kingdom\", \"Berlin\": \"Germany\", \"Rome\": \"Italy\", \"Paris\": \"France\"}\nfor k in sorted(d):\n    print(\"%s: %s\"\u00a0% (k, d[k]))\nWorks with: Python version 2.x\nd = {\"fortytwo\": 42, 3.14159: \"pi\", 23: \"twentythree\", \"zero\": 0, 13: \"thirteen\"}\nfor k in sorted(d):\n    print(\"%s: %s\"\u00a0% (k, d[k]))\n", "explain": "Note: The Python for statement is always a \"foreach\" ... and the range() and xrange() built-in functions are used to generate lists of indexes over which it will iterate as necessary.  The majority of Python objects support iteration.  Lists and tuples iterate over each item, strings iterate over each character, dictionaries iterate over keys, files iterate over lines, and so on.\nFor example:\nWhether for loops over the elements of the collection in order depends on the collection having an inherent order or not. Elements of strings (i.e. characters), tuples and lists, for example, are ordered but the order of elements in dictionaries and sets is not defined.\nOne can loop over the key/value pairs of a dictionary in alphabetic or numeric key order by sorting the sequence of keys, provided that the keys are all of comparable types. In Python 3.x a sequence of mixed numeric and string elements is not sortable (at least not with the default invocation of sorted()), whereas in Python 2.x numeric types are sorted according to their string representation by default:\n"}, {"task_name": "Loops/Foreach", "task_url": "https://rosettacode.org/wiki/Loops/Foreach", "task_cat": "Iteration", "lang": "C", "code": "\n\n#include <stdio.h>\n...\n\nconst char *list[] = {\"Red\",\"Green\",\"Blue\",\"Black\",\"White\"};\n#define LIST_SIZE (sizeof(list)/sizeof(list[0]))\n\nint ix;\nfor(ix=0; ix<LIST_SIZE; ix++) {\n   printf(\"%s\\n\", list[ix]);\n}\n\n\n#include <stdio.h>\n#include <stdlib.h>\n/* foreach macro for using a string as a collection of char */\n#define foreach( ptrvar , strvar ) char* ptrvar; for( ptrvar=strvar\u00a0; (*ptrvar)\u00a0!= '\\0'\u00a0; *ptrvar++)\n\nint main(int argc,char* argv[]){\nchar* s1=\"abcdefg\";\nchar* s2=\"123456789\";\nforeach( p1 , s1 ) {\n printf(\"loop 1 %c\\n\",*p1);\n}\nforeach( p2 , s2 ){\n printf(\"loop 2 %c\\n\",*p2);\n}\nexit(0);\nreturn(0);\n}\n\n\n#include <stdio.h>\n#include <stdlib.h>\nint main(int argc,char* argv[]){\n/* foreach macro viewing an array of int values as a collection of int values */\n#define foreach( intpvar , intary ) int* intpvar; for( intpvar=intary; intpvar < (intary+(sizeof(intary)/sizeof(intary[0])))\u00a0; intpvar++)\nint a1[]={ 1 , 1 , 2 , 3 , 5 , 8 };\nint a2[]={ 3 , 1 , 4 , 1, 5, 9 };\nforeach( p1 , a1 ) {\n printf(\"loop 1 %d\\n\",*p1);\n}\nforeach( p2 , a2 ){\n printf(\"loop 2 %d\\n\",*p2);\n}\nexit(0);\nreturn(0);\n}\n\n\nNote: idxtype can be removed and typeof(col[0]) can be used in it's place with GCC\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nint main(int argc,char* argv[]){\n#define foreach( idxtype , idxpvar , col , colsiz ) idxtype* idxpvar; for( idxpvar=col\u00a0; idxpvar < (col+(colsiz))\u00a0; idxpvar++)\n#define arraylen( ary ) ( sizeof(ary)/sizeof(ary[0]) )\nchar* c1=\"collection\";\nint c2[]={ 3 , 1 , 4 , 1, 5, 9 };\ndouble* c3;\nint c3len=4;\nc3=(double*)calloc(c3len,sizeof(double)); \nc3[0]=1.2;c3[1]=3.4;c3[2]=5.6;c3[3]=7.8;  \nforeach( char,p1   , c1, strlen(c1) ) {\n printf(\"loop 1\u00a0: %c\\n\",*p1);\n}\nforeach( int,p2    , c2, arraylen(c2) ){\n printf(\"loop 2\u00a0: %d\\n\",*p2);\n}\nforeach( double,p3 , c3, c3len ){\n printf(\"loop 3\u00a0: %3.1lf\\n\",*p3);\n}\nexit(0);\nreturn(0);\n}\n\n", "explain": "C does not really have a native 'container' type, nor does it have a 'for each' type statement.  The following shows how to loop through an array and print each element.\nThe C language does, however, have a number of standard data structures that can be thought of as collections, and foreach can easily be made with a macro.\nC string as a collection of char\nC int array as a collection of int (array size known at compile-time)\nMost general: string or array as collection (collection size known at run-time)\n"}, {"task_name": "Loops/Foreach", "task_url": "https://rosettacode.org/wiki/Loops/Foreach", "task_cat": "Iteration", "lang": "C++", "code": "\n\nfor (container_type::iterator i = container.begin(); i != container.end(); ++i)\n{\n  std::cout << *i << \"\\n\";\n}\n\n\nstd::copy(container.begin(), container.end(),\n          std::ostream_iterator<container_type::value_type>(std::cout, \"\\n\"));\n\n\nvoid print_element(container_type::value_type const& v)\n{\n  std::cout << v << \"\\n\";\n}\n\n...\n  std::for_each(container.begin(), container.end(), print_element);\n\nWorks with: C++11\nfor (auto element: container)\n{\n  std::cout << element << \"\\n\";\n}\n\n\nfor (auto const& element: container)\n{\n  std::cout << element << \"\\n\";\n}\n\n\nfor (auto&& element: container) //use a 'universal reference'\n{\n  element += 42;\n}\n\n", "explain": "C++03 did not have a \"for each\" loop. The following is a generic loop which works with any standard container except for built-in arrays. The code snippet below assumes that the container type in question is typedef'd to container_type and the actual container object is named container.\nHowever the idiomatic way to output a container would be\nThere's also an algorithm named for_each. However, you need a function or function object to use it, e.g.\nHere container is the container variable, element is the loop variable (initialized with each container element in turn), and auto means that the compiler should determine the correct type of that variable automatically. If the type is expensive to copy, a const reference can be used instead:\nOf course the container elements can also be changed by using a non-const reference (provided the container isn't itself constant):\n"}, {"task_name": "Loops/Foreach", "task_url": "https://rosettacode.org/wiki/Loops/Foreach", "task_cat": "Iteration", "lang": "Java", "code": "\nWorks with: Java version 1.5+\nIterable<Type> collect;\n...\nfor(Type i:collect){\n   System.out.println(i);\n}\n\n\nWorks with: Java version 1.8+\nIterable collect;\n...\ncollect.forEach(o -> System.out.println(o));\n\n\n", "explain": "This works for any array type as well as any type that implements the Iterable interface (including all Collections).\nThis works with any Iterable, but not with arrays.\n"}, {"task_name": "Loops/Foreach", "task_url": "https://rosettacode.org/wiki/Loops/Foreach", "task_cat": "Iteration", "lang": "C#", "code": "\nstring[] things = {\"Apple\", \"Banana\", \"Coconut\"};\n\nforeach (string thing in things)\n{\n    Console.WriteLine(thing);\n}\n\n", "explain": ""}, {"task_name": "Loops/Foreach", "task_url": "https://rosettacode.org/wiki/Loops/Foreach", "task_cat": "Iteration", "lang": "JavaScript", "code": "\n\n\"alpha beta gamma delta\".split(\" \").forEach(function (x) {\n    console.log(x);\n});\n\n\nconsole.log(\"alpha beta gamma delta\".split(\" \").map(function (x) {\n    return x.toUpperCase(x);\n}).join(\"\\n\"));\n\n\nconsole.log(\"alpha beta gamma delta\".split(\" \").reduce(function (a, x, i, lst) {\n    return lst.length - i + \". \" + x + \"\\n\" + a;\n}, \"\"));\n\n\nfor (var a in o) {\n    print(o[a]);\n}\n\n\nfor (var a in o) {\n    if (o.hasOwnProperty(a)) {\n        print(o[a]);\n    }\n}\n\nWorks with: JavaScript version 1.6\nDeprecated\n\nh = {\"one\":1, \"two\":2, \"three\":3}\nfor (x in h) print(x);\nfor each (y in h) print(y);\n\nWorks with: ECMAScript version 6th edition\n\nh = {\"one\":1, \"two\":2, \"three\":3}\nfor (x in h) print(x);\nfor (y of h) print(y);\n\n", "explain": "For arrays in ES5, we can use Array.forEach():\nthough it will probably be more natural \u2013 dispensing with side-effects, and allowing for easier composition of nested functions \u2013 to simply use Array.map(),\nor, more flexibly, and with greater generality, obtain an accumulating fold from Array.reduce()\nMore generally, the following works for any object, including an array.  It iterates over the keys of an object.\nHowever, it has the often unwanted feature that it lists inherited properties and methods of objects as well as the ones directly set on the object -- consider whether to filter out such properties inside the loop, for example:\nThere is also a for each in construct that iterates over the values of an object:\nThere is also a for of construct that iterates over the values of an object:\n"}, {"task_name": "Loops/Foreach", "task_url": "https://rosettacode.org/wiki/Loops/Foreach", "task_cat": "Iteration", "lang": "PHP", "code": "\nforeach ($collect as $i) {\n   echo \"$i\\n\";\n}\n\nforeach ($collect as $key => $i) {\n   echo \"\\$collect[$key] = $i\\n\";\n}\n\n", "explain": "foreach can also iterate over objects. By default it iterates over all visible fields of an object.\n"}, {"task_name": "Loops/Foreach", "task_url": "https://rosettacode.org/wiki/Loops/Foreach", "task_cat": "Iteration", "lang": "Fortran", "code": "\nprogram main\n\n implicit none\n\n integer :: i\n character(len=5),dimension(5),parameter :: colors = ['Red  ','Green','Blue ','Black','White']\n\n !using a do loop:\n do i=1,size(colors)\n   write(*,'(A)') colors(i) \n end do\n\n !this will also print each element:\n write(*,'(A)') colors\n\nend program main\n\n", "explain": ""}, {"task_name": "Loops/Foreach", "task_url": "https://rosettacode.org/wiki/Loops/Foreach", "task_cat": "Iteration", "lang": "Go", "code": "\n\nfunc printAll(values []int) {\n   for i, x := range values {\n      fmt.Printf(\"Item %d = %d\\n\", i, x)\n   }\n}\n\n", "explain": "range works with all of the built-in container-types. With one variable (i), it gives you the key/index of every item. With two variables (i, x), it gives you both the key/index and value/item. For channels, only the single-variable variant is allowed.\n"}, {"task_name": "Loops/Foreach", "task_url": "https://rosettacode.org/wiki/Loops/Foreach", "task_cat": "Iteration", "lang": "Delphi", "code": "\n\nprogram LoopForEach;\n\n{$APPTYPE CONSOLE}\n\nvar\n  s: string;\nbegin\n  for s in 'Hello' do\n    Writeln(s);\nend.\n\n\nH\ne\nl\nl\no\n", "explain": "for..in loops were added in Delphi 2005.\nSupports arrays (single, multidimensional, and dynamic), sets, strings, collections and any class or interface that implements GetEnumerator().\nOutput:\n"}, {"task_name": "Loops/Foreach", "task_url": "https://rosettacode.org/wiki/Loops/Foreach", "task_cat": "Iteration", "lang": "Ruby", "code": "\nfor i in collection do\n  puts i\nend\n\ncollection.each do |i|\n  puts i\nend\n\n", "explain": "This is syntactic sugar for:\nThere are various flavours of each that may be class-dependent: String#each_char, Array#each_index, Hash#each_key, etc\n"}, {"task_name": "Loops/Foreach", "task_url": "https://rosettacode.org/wiki/Loops/Foreach", "task_cat": "Iteration", "lang": "Rust", "code": "\n\nlet collection = vec![1,2,3,4,5];\nfor elem in collection {\n    println!(\"{}\", elem);\n}\n\nlet mut collection = vec![1,2,3,4,5];\nfor mut_ref in &mut collection {\n// alternatively:\n// for mut_ref in collection.iter_mut() {\n    *mut_ref *= 2;\n    println!(\"{}\", *mut_ref);\n}\n\n// immutable borrow\nfor immut_ref in &collection {\n// alternatively:\n// for immut_ref in collection.iter() {\n    println!(\"{}\", *immut_ref);\n}\n\nlet collection = vec![1, 2, 3, 4, 5];\ncollection.iter().for_each(|elem| println!(\"{}\", elem));\n", "explain": "Rust's for-loop already is a foreach-loop.\nDo note that Rust moves values by default and doesn't copy them. A vector would be unusable after looping over it like above. To preserve it, borrow it or use an Iter, to mutate values do a mutable borrow or create an IterMut. To get an immutable reference omit the mut-part.\nSince Rust 1.21 foreach can be used explicitly executing a closure on each element.\n"}, {"task_name": "Loops/Foreach", "task_url": "https://rosettacode.org/wiki/Loops/Foreach", "task_cat": "Iteration", "lang": "Swift", "code": "\nfor i in [1,2,3] {\n   print(i)\n}\n\nWorks with: Swift version 2.x+\n[1,2,3].forEach {\n   print($0)\n}\n", "explain": "This works for any type that conforms to the SequenceType protocol (including arrays, collections, generators, ranges).\nAlternately:\n"}, {"task_name": "Loops/Foreach", "task_url": "https://rosettacode.org/wiki/Loops/Foreach", "task_cat": "Iteration", "lang": "R", "code": "\na <- list(\"First\", \"Second\", \"Third\", 5, 6)\nfor(i in a) print(i)\n", "explain": ""}, {"task_name": "Loops/Foreach", "task_url": "https://rosettacode.org/wiki/Loops/Foreach", "task_cat": "Iteration", "lang": "COBOL", "code": "\n\nTranslation of: C#\nWorks with: Visual COBOL\n01  things occurs 3.\n...\nset content of things to (\"Apple\", \"Banana\", \"Coconut\")\nperform varying thing as string through things\n    display thing\nend-perform\n\n", "explain": "The following is in the Managed COBOL dialect:\n"}, {"task_name": "Loops/Foreach", "task_url": "https://rosettacode.org/wiki/Loops/Foreach", "task_cat": "Iteration", "lang": "Ada", "code": "\narrays[edit]\nwith Ada.Integer_Text_IO;\nuse  Ada.Integer_Text_IO;\n\nprocedure For_Each is\n\n   A : array (1..5) of Integer := (-1, 0, 1, 2, 3);\n\nbegin\n\n   for Num in A'Range loop\n      Put( A (Num) );\n   end loop;\n\nend For_Each;\n\n\n   for Item of A loop\n      Put( Item );\n   end loop;\n\ndoubly linked lists[edit]\nWorks with: Ada 2005\nwith Ada.Integer_Text_IO, Ada.Containers.Doubly_Linked_Lists;\nuse  Ada.Integer_Text_IO, Ada.Containers;\n\nprocedure Doubly_Linked_List is\n\n   package DL_List_Pkg is new Doubly_Linked_Lists (Integer);\n   use     DL_List_Pkg;\n\n   procedure Print_Node (Position : Cursor) is\n   begin\n      Put (Element (Position));\n   end Print_Node;\n   \n   DL_List : List;\n   \nbegin\n   \n   DL_List.Append (1);\n   DL_List.Append (2);\n   DL_List.Append (3);\n   \n   -- Iterates through every node of the list.\n   DL_List.Iterate (Print_Node'Access);\n   \nend Doubly_Linked_List;\n\nvectors[edit]\nWorks with: Ada 2005\nwith Ada.Integer_Text_IO, Ada.Containers.Vectors;\nuse  Ada.Integer_Text_IO, Ada.Containers;\n\nprocedure Vector_Example is\n\n   package Vector_Pkg is new Vectors (Natural, Integer);\n   use     Vector_Pkg;\n\n   procedure Print_Element (Position : Cursor) is\n   begin\n      Put (Element (Position));\n   end Print_Element;\n   \n   V : Vector;\n   \nbegin\n   \n   V.Append (1);\n   V.Append (2);\n   V.Append (3);\n      \n   -- Iterates through every element of the vector.\n   V.Iterate (Print_Element'Access);\n   \nend Vector_Example;\n\n", "explain": "Alternative solution (Ada 2012):\n"}, {"task_name": "Loops/Foreach", "task_url": "https://rosettacode.org/wiki/Loops/Foreach", "task_cat": "Iteration", "lang": "Julia", "code": "\nTranslation of: Python\nfor i in collection\n   println(i)\nend\n\n\n", "explain": "The Julia for statement is always a \"foreach\", and the built-in start:end or start:step:end \"range\" syntax can be used for iteration over arithmetic sequences. Many Julia objects support iteration: arrays and tuples iterate over each item, strings iterate over each character, dictionaries iterate over (key,value) pairs, numeric scalars provide a length-1 iteration over their value, and so on.\n"}, {"task_name": "Loops/Foreach", "task_url": "https://rosettacode.org/wiki/Loops/Foreach", "task_cat": "Iteration", "lang": "SAS", "code": "\n/* Initialize an array with integers 1 to 10, and print their sum */\ndata _null_;\narray a a1-a10;\nn=1;\ndo over a;\n  a=n;\n  n=n+1;\nend;\ns=sum(of a{*});\nput s;\nrun;\n", "explain": ""}, {"task_name": "Loops/Foreach", "task_url": "https://rosettacode.org/wiki/Loops/Foreach", "task_cat": "Iteration", "lang": "Kotlin", "code": "\n// version 1.0.6\n\nfun main(args: Array<String>) {\n    val greek = arrayOf(\"alpha\", \"beta\", \"gamma\", \"delta\")\n    for (letter in greek) print(\"$letter \")\n    println()\n    // or alternatively\n    greek.forEach { print(\"$it \") }\n    println()\n}\n\n\nOutput:\nalpha beta gamma delta\nalpha beta gamma delta\n\n", "explain": ""}, {"task_name": "Loops/Foreach", "task_url": "https://rosettacode.org/wiki/Loops/Foreach", "task_cat": "Iteration", "lang": "Perl", "code": "\nforeach my $i (@collection) {\n   print \"$i\\n\";\n}\n\nprint \"$_\\n\"  foreach @collection\n\nforeach $l ( \"apples\", \"bananas\", \"cherries\" ) {\n  print \"I like $l\\n\";\n}\n", "explain": "The keyword for can be used instead of foreach. If a loop variable (here $i) is not given, then $_ is used.\nA more compact notation using perl statement modifier:\nIn perl, it is possible to loop against an explicit list, so there is no need to define a container:\n"}, {"task_name": "Loops/Foreach", "task_url": "https://rosettacode.org/wiki/Loops/Foreach", "task_cat": "Iteration", "lang": "Objective-C", "code": "\nWorks with: Objective-C version 2.0+\nWorks with: GNUstep\nWorks with: Cocoa\nNSArray *collect;\n//...\nfor(Type i in collect){\n   NSLog(@\"%@\", i);\n}\n\nWorks with: Objective-C version <2.0\nNSArray *collect;\n//...\nNSEnumerator *enm = [collect objectEnumerator];\nid i;\nwhile( (i = [enm nextObject]) ) {\n  // do something with object i\n}\n", "explain": "collect can be any object that adopts the NSFastEnumeration protocol.\nOr (always using OpenStep compatible frameworks):\n"}, {"task_name": "Loops/Foreach", "task_url": "https://rosettacode.org/wiki/Loops/Foreach", "task_cat": "Iteration", "lang": "Prolog", "code": "\n\n?- foreach(member(X, [red,green,blue,black,white]), writeln(X)).\nred\ngreen\nblue\nblack\nwhite\ntrue.\n", "explain": "For example\u00a0:\n"}, {"task_name": "Loops/Foreach", "task_url": "https://rosettacode.org/wiki/Loops/Foreach", "task_cat": "Iteration", "lang": "Lua", "code": "\n\nt={monday=1, tuesday=2, wednesday=3, thursday=4, friday=5, saturday=6, sunday=0, [7]=\"fooday\"}\nfor key, value in pairs(t) do                       \n  print(value, key)\nend\n\n\n0\tsunday\nfooday\t7\n2\ttuesday\n3\twednesday\n5\tfriday\n4\tthursday\n6\tsaturday\n1\tmonday\n\n\nl={'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday', not_a_number='fooday', [0]='today', [-1]='yesterday' }\nfor key, value in ipairs(l) do                                                                         \n  print(key, value)\nend\n\n\n1\tmonday\n2\ttuesday\n3\twednesday\n4\tthursday\n5\tfriday\n6\tsaturday\n7\tsunday\n\n\n", "explain": "Lua has 2 built-in iterators over tables.\npairs() iterates over all entries in a table, but in no particular order:\nOutput:\nipairs() iterates over table entries with positive integer keys,\nand is used to iterate over lists in order.\nOutput:\nNote that ipairs() ignores non-numeric and non-positive integer keys.\n"}, {"task_name": "Loops/Foreach", "task_url": "https://rosettacode.org/wiki/Loops/Foreach", "task_cat": "Iteration", "lang": "Scala", "code": "\nval collection = Array(1, 2, 3, 4)\ncollection.foreach(println)\n\n(element <- 1 to 4).foreach(println)\n", "explain": "Alternatively:\n"}, {"task_name": "Loops/Foreach", "task_url": "https://rosettacode.org/wiki/Loops/Foreach", "task_cat": "Iteration", "lang": "D", "code": "\n\nimport std.stdio: writeln;\n\nvoid main() {\n    auto collection1 = \"ABC\";\n    foreach (element; collection1) \n        writeln(element);\n\n    auto collection2 = [1, 2, 3];\n    foreach (element; collection1) \n        writeln(element);\n\n    auto collection3 = [1:10, 2:20, 3:30];\n    foreach (element; collection3) \n        writeln(element);\n\n    foreach (key, value; collection3)\n        writeln(key, \" \", value);        \n}\n\n\nOutput:\nA\nB\nC\nA\nB\nC\n10\n20\n30\n1 10\n2 20\n3 30\n", "explain": "This works if collection is a string/array/associative array, or if implements an appropriate opApply function, or if it has the basic Range methods.\n"}, {"task_name": "Loops/Foreach", "task_url": "https://rosettacode.org/wiki/Loops/Foreach", "task_cat": "Iteration", "lang": "Haskell", "code": "\nimport Control.Monad (forM_)\nforM_ collect print\n\n\nmapM_ print collect\n\n", "explain": "which is the same as\n"}, {"task_name": "Loops/Foreach", "task_url": "https://rosettacode.org/wiki/Loops/Foreach", "task_cat": "Iteration", "lang": "Scheme", "code": "\n\n(for-each\n  (lambda (i) (display i) (newline))\n  the_list)\n", "explain": "List:\n"}, {"task_name": "Loops/Foreach", "task_url": "https://rosettacode.org/wiki/Loops/Foreach", "task_cat": "Iteration", "lang": "Apex", "code": "\nInteger[] myInts = new Integer[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n\nfor (Integer i\u00a0: myInts) {\n    System.debug(i);\n}\n", "explain": ""}, {"task_name": "Loops/Foreach", "task_url": "https://rosettacode.org/wiki/Loops/Foreach", "task_cat": "Iteration", "lang": "PowerShell", "code": "\n$colors = \"Black\",\"Blue\",\"Cyan\",\"Gray\",\"Green\",\"Magenta\",\"Red\",\"White\",\"Yellow\",\n          \"DarkBlue\",\"DarkCyan\",\"DarkGray\",\"DarkGreen\",\"DarkMagenta\",\"DarkRed\",\"DarkYellow\"\n\nforeach ($color in $colors)\n{\n    Write-Host \"$color\" -ForegroundColor $color\n}\n\nOutput:\nBlack\nBlue\nCyan\nGray\nGreen\nMagenta\nRed\nWhite\nYellow\nDarkBlue\nDarkCyan\nDarkGray\nDarkGreen\nDarkMagenta\nDarkRed\nDarkYellow\n\n", "explain": ""}, {"task_name": "Loops/Foreach", "task_url": "https://rosettacode.org/wiki/Loops/Foreach", "task_cat": "Iteration", "lang": "Logo", "code": "\nforeach [red green blue] [print\u00a0?]\n", "explain": ""}, {"task_name": "Loops/Foreach", "task_url": "https://rosettacode.org/wiki/Loops/Foreach", "task_cat": "Iteration", "lang": "ColdFusion", "code": "\n<Cfloop list=\"Fee, Fi, Foe, Fum\" index=\"i\">\n  <Cfoutput>#i#!</Cfoutput>\n</Cfloop>\n\n", "explain": ""}, {"task_name": "Loops/Foreach", "task_url": "https://rosettacode.org/wiki/Loops/Foreach", "task_cat": "Iteration", "lang": "F#", "code": "\n\nfor i in [1 .. 10] do printfn \"%d\" i\n\nList.iter (fun i -> printfn \"%d\" i) [1 .. 10]\n\n", "explain": "We can use for directly or list iteration.\n"}, {"task_name": "Loops/Foreach", "task_url": "https://rosettacode.org/wiki/Loops/Foreach", "task_cat": "Iteration", "lang": "Groovy", "code": "\n\ndef beatles = [\"John\", \"Paul\", \"George\", \"Ringo\"]\n\nfor(name in beatles) {\n    println name\n}\n\n\nbeatles.each {\n    println it\n}\n\n\nJohn\nPaul\nGeorge\nRingo\n", "explain": "\"for\" loop:\n\"each()\" method:\nThough technically not a loop, most Groovy programmers would use the somewhat more terse \"each()\" method on the list itself in preference to the \"for\" loop construct. \nOutput (same for either):\n"}, {"task_name": "Loops/Foreach", "task_url": "https://rosettacode.org/wiki/Loops/Foreach", "task_cat": "Iteration", "lang": "AWK", "code": "\n\nBEGIN {\n  split(\"Mary had a little lamb\", strs, \" \")\n  for(el in strs) {\n    print strs[el]\n  }\n}\n\n\nBEGIN {\n  n = split(\"Mary had a little lamb\", strs, \" \")\n  for(i=1; i <= n; i++) {\n    print strs[i]\n  }\n}\n\n\n# This will not work\nBEGIN {\n  for (el in \"apples\",\"bananas\",\"cherries\") {\n    print \"I like \" el\n  }\n}\n\n", "explain": "The for (element_index in array) can be used, but it does not give elements' indexes in the order inside the array (AWK indexes in array are indeed more like hashes).\nIf elements must be returned in some order, keys must be generated in that order. \nIn the example above the array is filled through the split function, \nwhich uses indexes from 1. \nSo to iterate over the array's elements in the right order, \na normal loop can be used:\nNote that in awk, foreach loops can only be performed against an associative container. \nIt is not possible to loop against an explicit list, so the following will not work:\n"}, {"task_name": "Loops/Foreach", "task_url": "https://rosettacode.org/wiki/Loops/Foreach", "task_cat": "Iteration", "lang": "Zig", "code": "const warn = @import(\"std\").debug.warn;\n\npub fn main() void {\n    const items = [_]i16{ 0, 1, 1, 2, 3, 5, 8 };\n\n     for (items) |i| {\n        warn(\"{}\\n\", .{i});\n    }\n}", "explain": ""}]