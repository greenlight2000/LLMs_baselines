[{"task_name": "SEDOLs", "task_url": "https://rosettacode.org/wiki/SEDOLs", "task_cat": "Checksums", "lang": "Python", "code": "\ndef char2value(c):\n  assert c not in 'AEIOU', \"No vowels\"\n  return int(c, 36)\n\nsedolweight = [1,3,1,7,3,9]\n\ndef checksum(sedol):\n    tmp = sum(map(lambda ch, weight: char2value(ch) * weight,\n                  sedol, sedolweight)\n               )\n    return str((10 - (tmp % 10)) % 10)\n\nfor sedol in '''\n    710889\n    B0YBKJ\n    406566\n    B0YBLH\n    228276\n    B0YBKL\n    557910\n    B0YBKR\n    585284\n    B0YBKT\n    '''.split():\n    print sedol + checksum(sedol)\n\n\nWorks with: Python version 3.7\n'''SEDOL checksum digits'''\n\nfrom functools import reduce\n\n\n# sedolCheckSumDigitLR\u00a0:: String -> Either String Char\ndef sedolCheckSumDigitLR(s):\n    '''Either an explanatory message, or a\n       checksum digit character to append\n       to a given six-character SEDOL string.\n    '''\n    def goLR(lr, cn):\n        c, n = cn\n        return bindLR(lr)(\n            lambda a: bindLR(sedolValLR(c))(\n                lambda x: Right(a + x * n)\n            )\n        )\n    return bindLR(\n        reduce(\n            goLR,\n            zip(s, [1, 3, 1, 7, 3, 9]),\n            Right(0)\n        )\n    )(lambda d: Right(str((10 - (d % 10)) % 10)))\n\n\n# sedolValLR\u00a0:: Char -> Either String Char\ndef sedolValLR(c):\n    '''Either an explanatory message, or the\n       SEDOL value of a given character.\n    '''\n    return Right(int(c, 36)) if (\n        c not in 'AEIOU'\n    ) else Left('Unexpected vowel in SEDOL string: ' + c)\n\n\n# TEST -------------------------------------------------\ndef main():\n    '''Append checksums where valid.'''\n\n    print(\n        fTable(__doc__ + ':\\n')(str)(\n            either(str)(str)\n        )(sedolCheckSumDigitLR)(\n            '''710889\n               B0YBKJ\n               406566\n               B0YBLH\n               228276\n               B0YBKL\n               BOYBKL\n               557910\n               B0YBKR\n               585284\n               B0YBKT\n               B00030\n            '''.split()\n        )\n    )\n\n\n# GENERIC -------------------------------------------------\n\n\n# Left\u00a0:: a -> Either a b\ndef Left(x):\n    '''Constructor for an empty Either (option type) value\n       with an associated string.'''\n    return {'type': 'Either', 'Right': None, 'Left': x}\n\n\n# Right\u00a0:: b -> Either a b\ndef Right(x):\n    '''Constructor for a populated Either (option type) value'''\n    return {'type': 'Either', 'Left': None, 'Right': x}\n\n\n# bindLR (>>=)\u00a0:: Either a -> (a -> Either b) -> Either b\ndef bindLR(m):\n    '''Either monad injection operator.\n       Two computations sequentially composed,\n       with any value produced by the first\n       passed as an argument to the second.'''\n    return lambda mf: (\n        mf(m.get('Right')) if None is m.get('Left') else m\n    )\n\n\n# compose (<<<)\u00a0:: (b -> c) -> (a -> b) -> a -> c\ndef compose(g):\n    '''Right to left function composition.'''\n    return lambda f: lambda x: g(f(x))\n\n\n# either\u00a0:: (a -> c) -> (b -> c) -> Either a b -> c\ndef either(fl):\n    '''The application of fl to e if e is a Left value,\n       or the application of fr to e if e is a Right value.'''\n    return lambda fr: lambda e: fl(e['Left']) if (\n        None is e['Right']\n    ) else fr(e['Right'])\n\n\n# fTable\u00a0:: String -> (a -> String) ->\n#                     (b -> String) ->\n#        (a -> b) -> [a] -> String\ndef fTable(s):\n    '''Heading -> x display function -> fx display function ->\n          f -> value list -> tabular string.'''\n    def go(xShow, fxShow, f, xs):\n        w = max(map(compose(len)(xShow), xs))\n        return s + '\\n' + '\\n'.join([\n            xShow(x).rjust(w, ' ') + ' -> ' + fxShow(f(x)) for x in xs\n        ])\n    return lambda xShow: lambda fxShow: (\n        lambda f: lambda xs: go(\n            xShow, fxShow, f, xs\n        )\n    )\n\n\n# MAIN ---\nif __name__ == '__main__':\n    main()\n\n\nOutput:\nSEDOL checksum digits:\n\n710889 -> 9\nB0YBKJ -> 7\n406566 -> 3\nB0YBLH -> 2\n228276 -> 5\nB0YBKL -> 9\nBOYBKL -> Unexpected vowel in SEDOL string: O\n557910 -> 7\nB0YBKR -> 5\n585284 -> 2\nB0YBKT -> 7\nB00030 -> 0\n", "explain": "\nOr, combining reduce with an option type \u2013 handling disallowed characters without assertion errors:\n"}, {"task_name": "SEDOLs", "task_url": "https://rosettacode.org/wiki/SEDOLs", "task_cat": "Checksums", "lang": "C", "code": "\n\n#include <stdio.h>\n#include <ctype.h>\n#include <string.h>\n\nint sedol_weights[] = {1, 3, 1, 7, 3, 9}; \nconst char *reject = \"AEIOUaeiou\";\n\nint sedol_checksum(const char *sedol6)\n{\n  int len = strlen(sedol6);\n  int sum = 0, i;\n\n  if ( len == 7 ) {\n    fprintf(stderr, \"SEDOL code already checksummed? (%s)\\n\", sedol6);\n    return sedol6[6] & 0x7f;\n  }\n  if ( (len > 7) || (len < 6) || ( strcspn(sedol6, reject) != 6 )) {\n    fprintf(stderr, \"not a SEDOL code? (%s)\\n\", sedol6);\n    return -1;\n  }\n  for(i=0; i < 6; i++) {\n    if ( isdigit(sedol6[i]) ) {\n      sum += (sedol6[i]-'0')*sedol_weights[i];\n    } else if ( isalpha(sedol6[i]) ) {\n      sum += ((toupper(sedol6[i])-'A') + 10)*sedol_weights[i];\n    } else {\n      fprintf(stderr, \"SEDOL with not alphanumeric digit\\n\");\n      return -1;\n    }\n  }\n  return (10 - (sum%10))%10 + '0'; \n}\n\n\n#define MAXLINELEN 10\nint main()\n{\n  char line[MAXLINELEN];\n  int sr, len;\n  while( fgets(line, MAXLINELEN, stdin) != NULL ) {\n    len = strlen(line);\n    if ( line[len-1] == '\\n' ) line[len-1]='\\0';\n    sr = sedol_checksum(line);\n    if ( sr > 0 )\n      printf(\"%s%c\\n\", line, sr);\n  }\n  return 0;\n}\n\n\n7108899\nB0YBKJ7\n4065663\nB0YBLH2\n2282765\nB0YBKL9\n5579107\nB0YBKR5\n5852842\nB0YBKT7\n", "explain": "Notes: it reads the codes from standard input, one per line (linefeed terminated); the input encoding must meet the following specifications: single byte encoding, digits (0-9) must have codes that follow the same order of the digits (0, 1, 2, ...) and similar for letters, the encoding must match the one used with the compiled source (likely, ASCII based encodings). This should happen 99% of the time (for ASCII, ISO-8859 family and UTF-8 have the same byte encoding for alphanumeric characters).\nFed the input list from the task description, the output is:\n"}, {"task_name": "SEDOLs", "task_url": "https://rosettacode.org/wiki/SEDOLs", "task_cat": "Checksums", "lang": "C++", "code": "\n#include <numeric>\n#include <cctype>\n#include <iostream>\n#include <string>\n\n \ntemplate<typename result_sink_t>\nauto sedol_checksum(std::string const& sedol, result_sink_t result_sink)\n{\n    if(sedol.size() != 6) \n        return result_sink(0, \"length of sedol string\u00a0!= 6\");\n        \n    const char * valid_chars = \"BCDFGHJKLMNPQRSTVWXYZ0123456789\";\n    if(sedol.find_first_not_of(valid_chars) != std::string::npos)\n        return result_sink(0, \"sedol string contains disallowed characters\");\n   \n    const int weights[] = {1,3,1,7,3,9};    \n    auto weighted_sum = std::inner_product(sedol.begin(), sedol.end(), weights, 0\n                                           , [](int acc, int prod){ return acc + prod; }\n                                           , [](char c, int weight){ return (std::isalpha(c) ? c -'A' + 10 : c - '0') * weight; }\n                                             );\n    return result_sink((10 - (weighted_sum % 10)) % 10, nullptr);\n}\n\nint main()\n{\n    using namespace std; \n    string inputs[] = {\n       \"710889\", \"B0YBKJ\", \"406566\", \"B0YBLH\", \"228276\", \"B0YBKL\", \n       \"557910\", \"B0YBKR\", \"585284\", \"B0YBKT\", \"B00030\"\n   }; \n   for(auto const & sedol : inputs)\n   {\n        sedol_checksum(sedol, [&](auto sum, char const * errorMessage)\n        {\n            if(errorMessage)\n                cout << \"error for sedol: \" << sedol << \" message: \" <<  errorMessage << \"\\n\";\n            else\n                cout << sedol << sum << \"\\n\"; \n        });\n   }\n   return 0;\n}\n\n", "explain": ""}, {"task_name": "SEDOLs", "task_url": "https://rosettacode.org/wiki/SEDOLs", "task_cat": "Checksums", "lang": "Java", "code": "\nimport java.util.Scanner;\n\npublic class SEDOL{\n\tpublic static void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\twhile(sc.hasNext()){\n\t\t\tString sedol = sc.next();\n\t\t\tSystem.out.println(sedol + getSedolCheckDigit(sedol));\n\t\t}\n\t}\n\t\n\tprivate static final int[] mult = {1, 3, 1, 7, 3, 9};\n\t\n\tpublic static int getSedolCheckDigit(String str){\n\t    if(!validateSedol(str)){\n\t    \tSystem.err.println(\"SEDOL strings must contain six characters with no vowels.\");\n\t    \treturn -1;\n\t    }\n\t    str = str.toUpperCase();\n\t    int total = 0;\n\t    for(int i = 0;i < 6; i++){\n\t        char s = str.charAt(i);\n\t        total += Character.digit(s, 36) * mult[i];\n\t    }\n\t    return (10 - (total % 10)) % 10;\n\t}\n\n\tpublic static boolean validateSedol(String str){\n\t\treturn (str.length() == 6) && !str.toUpperCase().matches(\".*?[AEIOU].*?\");\n\t}\n}\n\n", "explain": ""}, {"task_name": "SEDOLs", "task_url": "https://rosettacode.org/wiki/SEDOLs", "task_cat": "Checksums", "lang": "C#", "code": "\nstatic int[] sedol_weights = { 1, 3, 1, 7, 3, 9 };\nstatic int sedolChecksum(string sedol)\n{\n    int len = sedol.Length;\n    int sum = 0;\n\n    if (len == 7) //SEDOL code already checksummed?\n        return (int)sedol[6];\n\n    if ((len > 7) || (len < 6) || System.Text.RegularExpressions.Regex.IsMatch(sedol, \"[AEIOUaeiou]+\")) //invalid SEDOL\n        return -1;\n\n    for (int i = 0; i < 6; i++)\n    {\n        if (Char.IsDigit(sedol[i]))\n            sum += (((int)sedol[i] - 48) * sedol_weights[i]);\n\n        else if (Char.IsLetter(sedol[i]))\n            sum += (((int)Char.ToUpper(sedol[i]) - 55) * sedol_weights[i]);\n\n        else\n            return -1;\n\n    }\n\n    return (10 - (sum % 10)) % 10;\n}\n\n", "explain": ""}, {"task_name": "SEDOLs", "task_url": "https://rosettacode.org/wiki/SEDOLs", "task_cat": "Checksums", "lang": "JavaScript", "code": "\nImperative[edit]\nfunction sedol(input) {\n    return input + sedol_check_digit(input);\n}\n\nvar weight = [1, 3, 1, 7, 3, 9, 1];\nfunction sedol_check_digit(char6) {\n    if (char6.search(/^[0-9BCDFGHJKLMNPQRSTVWXYZ]{6}$/) == -1)\n        throw \"Invalid SEDOL number '\" + char6 + \"'\";\n    var sum = 0;\n    for (var i = 0; i < char6.length; i++)\n        sum += weight[i] * parseInt(char6.charAt(i), 36);\n    var check = (10 - sum%10) % 10;\n    return check.toString();\n}\n\nvar input = [ \n    '710889', 'B0YBKJ', '406566', 'B0YBLH', '228276',\n    'B0YBKL', '557910', 'B0YBKR', '585284', 'B0YBKT',\n    \"BOATER\" , \"12345\", \"123456\", \"1234567\"\n];\n\nvar expected = [ \n    '7108899', 'B0YBKJ7', '4065663', 'B0YBLH2', '2282765',\n    'B0YBKL9', '5579107', 'B0YBKR5', '5852842', 'B0YBKT7',\n    null, null, '1234563', null\n];\n\nfor (var i in input) {\n    try {\n        var sedolized = sedol(input[i]);\n        if (sedolized == expected[i]) \n            print(sedolized);\n        else\n            print(\"error: calculated sedol for input \" + input[i] + \n                  \" is \" + sedolized + \", but it should be \" + expected[i]\n            );\n    }\n    catch (e) {\n        print(\"error: \" + e);\n    }\n}\n\n\n7108899\nB0YBKJ7\n4065663\nB0YBLH2\n2282765\nB0YBKL9\n5579107\nB0YBKR5\n5852842\nB0YBKT7\nerror: Invalid SEDOL number 'BOATER'\nerror: Invalid SEDOL number '12345'\n1234563\nerror: Invalid SEDOL number '1234567'\nFunctional[edit]\n(() => {\n    'use strict';\n\n    const main = () => {\n\n        // checkSumLR\u00a0:: String -> Either String String\n        const checkSumLR = s => {\n            const\n                tpl = partitionEithers(map(charValueLR, s));\n            return 0 < tpl[0].length ? (\n                Left(s + ' -> ' + unwords(tpl[0]))\n            ) : Right(rem(10 - rem(\n                sum(zipWith(\n                    (a, b) => a * b,\n                    [1, 3, 1, 7, 3, 9],\n                    tpl[1]\n                )), 10\n            ), 10).toString());\n        };\n\n        // charValue\u00a0:: Char -> Either String Int\n        const charValueLR = c =>\n            isAlpha(c) ? (\n                isUpper(c) ? (\n                    elem(c, 'AEIOU') ? Left(\n                        'Unexpected vowel: ' + c\n                    ) : Right(ord(c) - ord('A') + 10)\n                ) : Left('Unexpected lower case character: ' + c)\n            ) : isDigit(c) ? Right(\n                parseInt(c, 10)\n            ) : Left('Unexpected character: ' + c);\n\n        // TESTS ------------------------------------------\n        const [problems, checks] = Array.from(\n            partitionEithers(map(s => bindLR(\n                    checkSumLR(s),\n                    c => Right(s + c)\n                ),\n                [\n                    \"710889\", \"B0YBKJ\", \"406566\",\n                    \"B0YBLH\", \"228276\", \"B0YBKL\",\n                    \"557910\", \"B0YBKR\", \"585284\",\n                    \"B0YBKT\", \"B00030\"\n                ]\n            ))\n        );\n        return unlines(\n            0 < problems.length ? (\n                problems\n            ) : checks\n        );\n    };\n\n    // GENERIC FUNCTIONS ----------------------------\n\n    // Left\u00a0:: a -> Either a b\n    const Left = x => ({\n        type: 'Either',\n        Left: x\n    });\n\n    // Right\u00a0:: b -> Either a b\n    const Right = x => ({\n        type: 'Either',\n        Right: x\n    });\n\n    // Tuple (,)\u00a0:: a -> b -> (a, b)\n    const Tuple = (a, b) => ({\n        type: 'Tuple',\n        '0': a,\n        '1': b,\n        length: 2\n    });\n\n    // bindLR (>>=)\u00a0:: Either a -> (a -> Either b) -> Either b\n    const bindLR = (m, mf) =>\n        undefined !== m.Left ? (\n            m\n        ) : mf(m.Right);\n\n    // elem\u00a0:: Eq a => a -> [a] -> Bool\n    const elem = (x, xs) => xs.includes(x);\n\n    // isAlpha\u00a0:: Char -> Bool\n    const isAlpha = c =>\n        /[A-Za-z\\u00C0-\\u00FF]/.test(c);\n\n    // isDigit\u00a0:: Char -> Bool\n    const isDigit = c => {\n        const n = ord(c);\n        return 48 <= n && 57 >= n;\n    };\n\n    // isUpper\u00a0:: Char -> Bool\n    const isUpper = c =>\n        /[A-Z]/.test(c);\n\n    // Returns Infinity over objects without finite length.\n    // This enables zip and zipWith to choose the shorter\n    // argument when one is non-finite, like cycle, repeat etc\n\n    // length\u00a0:: [a] -> Int\n    const length = xs =>\n        (Array.isArray(xs) || 'string' === typeof xs) ? (\n            xs.length\n        ) : Infinity;\n\n    // map\u00a0:: (a -> b) -> [a] -> [b]\n    const map = (f, xs) =>\n        (Array.isArray(xs) ? (\n            xs\n        ) : xs.split('')).map(f);\n\n    // ord\u00a0:: Char -> Int\n    const ord = c => c.codePointAt(0);\n\n    // partitionEithers\u00a0:: [Either a b] -> ([a],[b])\n    const partitionEithers = xs =>\n        xs.reduce(\n            (a, x) => undefined !== x.Left ? (\n                Tuple(a[0].concat(x.Left), a[1])\n            ) : Tuple(a[0], a[1].concat(x.Right)),\n            Tuple([], [])\n        );\n\n    // rem\u00a0:: Int -> Int -> Int\n    const rem = (n, m) => n % m;\n\n    // sum\u00a0:: [Num] -> Num\n    const sum = xs => xs.reduce((a, x) => a + x, 0);\n\n    // take\u00a0:: Int -> [a] -> [a]\n    // take\u00a0:: Int -> String -> String\n    const take = (n, xs) =>\n        'GeneratorFunction' !== xs.constructor.constructor.name ? (\n            xs.slice(0, n)\n        ) : [].concat.apply([], Array.from({\n            length: n\n        }, () => {\n            const x = xs.next();\n            return x.done ? [] : [x.value];\n        }));\n\n    // unlines\u00a0:: [String] -> String\n    const unlines = xs => xs.join('\\n');\n\n    // unwords\u00a0:: [String] -> String\n    const unwords = xs => xs.join(' ');\n\n    // zipWith\u00a0:: (a -> b -> c) -> [a] -> [b] -> [c]\n    const zipWith = (f, xs, ys) => {\n        const\n            lng = Math.min(length(xs), length(ys)),\n            as = take(lng, xs),\n            bs = take(lng, ys);\n        return Array.from({\n            length: lng\n        }, (_, i) => f(as[i], bs[i], i));\n    };\n\n    // MAIN ---\n    return main();\n})();\n\n\nOutput:\n7108899\nB0YBKJ7\n4065663\nB0YBLH2\n2282765\nB0YBKL9\n5579107\nB0YBKR5\n5852842\nB0YBKT7\nB000300\n", "explain": "output\n"}, {"task_name": "SEDOLs", "task_url": "https://rosettacode.org/wiki/SEDOLs", "task_cat": "Checksums", "lang": "PHP", "code": "\nfunction char2value($c) {\n  assert(stripos('AEIOU', $c) === FALSE);\n  return intval($c, 36);\n}\n\n$sedolweight = array(1,3,1,7,3,9);\n\nfunction checksum($sedol) {\n    global $sedolweight;\n    $tmp = array_sum(array_map(create_function('$ch, $weight', 'return char2value($ch) * $weight;'),\n                               str_split($sedol), $sedolweight)\n                    );\n    return strval((10 - ($tmp % 10)) % 10);\n}\n\nforeach (array('710889',\n               'B0YBKJ',\n               '406566',\n               'B0YBLH',\n               '228276',\n               'B0YBKL',\n               '557910',\n               'B0YBKR',\n               '585284',\n               'B0YBKT') as $sedol)\n    echo $sedol, checksum($sedol), \"\\n\";\n\n", "explain": ""}, {"task_name": "SEDOLs", "task_url": "https://rosettacode.org/wiki/SEDOLs", "task_cat": "Checksums", "lang": "Fortran", "code": "\nWorks with: Fortran version 90 and later\nMODULE SEDOL_CHECK\n  IMPLICIT NONE\n  CONTAINS\n \n  FUNCTION Checkdigit(c)\n    CHARACTER :: Checkdigit\n    CHARACTER(6), INTENT(IN) :: c\n    CHARACTER(36) :: alpha = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    INTEGER, DIMENSION(6) :: weights = (/ 1, 3, 1, 7, 3, 9 /), temp\n    INTEGER :: i, n\n\n    DO i = 1, 6\n      temp(i) = INDEX(alpha, c(i:i)) - 1\n    END DO\n    temp = temp * weights\n    n = MOD(10 - (MOD(SUM(temp), 10)), 10)  \n    Checkdigit = ACHAR(n + 48)\n  END FUNCTION Checkdigit\n \nEND MODULE SEDOL_CHECK\n\nPROGRAM SEDOLTEST\n  USE SEDOL_CHECK\n  IMPLICIT NONE\n \n  CHARACTER(31) :: valid = \"0123456789BCDFGHJKLMNPQRSTVWXYZ\"\n  CHARACTER(6) :: codes(10) = (/ \"710889\", \"B0YBKJ\", \"406566\", \"B0YBLH\", \"228276\" ,  &\n                                 \"B0YBKL\", \"557910\", \"B0YBKR\", \"585284\", \"B0YBKT\" /)\n  CHARACTER(7) :: sedol\n  INTEGER :: i, invalid\n\n  DO i = 1, 10\n    invalid = VERIFY(codes(i), valid)\n    IF (invalid == 0) THEN\n      sedol = codes(i)\n      sedol(7:7) = Checkdigit(codes(i))\n    ELSE\n      sedol = \"INVALID\"\n    END IF\n    WRITE(*, \"(2A9)\") codes(i), sedol\n  END DO\n   \nEND PROGRAM SEDOLTEST\n\n\n  710889  7108899\n  B0YBKJ  B0YBKJ7\n  406566  4065663\n  B0YBLH  B0YBLH2\n  228276  2282765\n  B0YBKL  B0YBKL9\n  557910  5579107\n  B0YBKR  B0YBKR5\n  585284  5852842\n  B0YBKT  B0YBKT7\n\n", "explain": "Output\n"}, {"task_name": "SEDOLs", "task_url": "https://rosettacode.org/wiki/SEDOLs", "task_cat": "Checksums", "lang": "Go", "code": "\npackage main\n\nimport (\n    \"fmt\"\n    \"strings\"\n    \"strconv\"\n)\n\nconst input = `710889\nB0YBKJ\n406566\nB0YBLH\n228276\nB0YBKL\n557910\nB0YBKR\n585284\nB0YBKT\nB00030\n\nB\nB0003\nB000300\nA00030\nE00030\nI00030\nO00030\nU00030\n\u03b200030\n\u03b20003`\n\nvar weight = [...]int{1,3,1,7,3,9}\n\nfunc csd(code string) string {\n    switch len(code) {\n    case 6:\n    case 0:\n        return \"No data\"\n    default:\n        return \"Invalid length\"\n    }\n    sum := 0\n    for i, c := range code {\n        n, err := strconv.ParseInt(string(c), 36, 0)\n        if err != nil || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' {\n            return \"Invalid character\"\n        }\n        sum += int(n)*weight[i]\n    }\n    return strconv.Itoa(9-(sum-1)%10)\n}   \n    \nfunc main() {\n    for _, s := range strings.Split(input, \"\\n\") {\n        d := csd(s)\n        if len(d) > 1 {\n            fmt.Printf(\":%s: %s\\n\", s, d)\n        } else {\n            fmt.Println(s + d)\n        }\n    }\n}\n\n\n7108899\nB0YBKJ7\n4065663\nB0YBLH2\n2282765\nB0YBKL9\n5579107\nB0YBKR5\n5852842\nB0YBKT7\nB000300\n:: No data\n:B: Invalid length\n:B0003: Invalid length\n:B000300: Invalid length\n:A00030: Invalid character\n:E00030: Invalid character\n:I00030: Invalid character\n:O00030: Invalid character\n:U00030: Invalid character\n:\u03b200030: Invalid length\n:\u03b20003: Invalid character\n\n", "explain": "Output:\n"}, {"task_name": "SEDOLs", "task_url": "https://rosettacode.org/wiki/SEDOLs", "task_cat": "Checksums", "lang": "Delphi", "code": "\nprogram Sedol;\n\n{$APPTYPE CONSOLE}\n\nuses\n  SysUtils;\n\n\nconst\n  SEDOL_CHR_COUNT = 6;\n  DIGITS = ['0'..'9'];\n  LETTERS = ['A'..'Z'];\n  VOWELS = ['A', 'E', 'I', 'O', 'U'];\n  ACCEPTABLE_CHRS = DIGITS + LETTERS - VOWELS;\n  WEIGHTS : ARRAY [1..SEDOL_CHR_COUNT] of integer = (1, 3, 1, 7, 3, 9);\n  LETTER_OFFSET = 9;\n\n\nfunction AddSedolCheckDigit(Sedol : string) : string;\nvar\n  iChr : integer;\n  Checksum : integer;\n  CheckDigit : char;\nbegin\n  if Sedol <> uppercase(Sedol) then\n    raise ERangeError.CreateFmt('%s contains lower case characters',[Sedol]);\n  if length(Sedol) <> SEDOL_CHR_COUNT then\n    raise ERangeError.CreateFmt('\"%s\" length is invalid. Should be 6 characters',[Sedol]);\n\n  Checksum := 0;\n  for iChr := 1 to SEDOL_CHR_COUNT do\n  begin\n\n    if Sedol[iChr] in Vowels then\n      raise ERangeError.CreateFmt('%s contains a vowel (%s) at chr %d',[Sedol, Sedol[iChr], iChr]);\n    if not (Sedol[iChr] in ACCEPTABLE_CHRS) then\n      raise ERangeError.CreateFmt('%s contains an invalid chr (%s) at position %d',[Sedol, Sedol[iChr], iChr]);\n\n    if Sedol[iChr] in DIGITS then\n      Checksum := Checksum + (ord(Sedol[iChr]) - ord('0')) * WEIGHTS[iChr]\n    else\n      Checksum := Checksum + (ord(Sedol[iChr]) - ord('A') + 1 + LETTER_OFFSET) * WEIGHTS[iChr];\n\n  end;\n\n  Checksum := (Checksum mod 10);\n  if Checksum <> 0 then\n    Checksum := 10 - Checksum;\n  CheckDigit := chr(CheckSum + ord('0'));\n\n  Result := Sedol + CheckDigit;\nend;\n\n\nprocedure Test(First6 : string);\nbegin\n  writeln(First6, ' becomes ', AddSedolCheckDigit(First6));\nend;\n\n\nbegin\n  try\n    Test('710889');\n    Test('B0YBKJ');\n    Test('406566');\n    Test('B0YBLH');\n    Test('228276');\n    Test('B0YBKL');\n    Test('557910');\n    Test('B0YBKR');\n    Test('585284');\n    Test('B0YBKT');\n    Test('B00030');\n  except\n    on E : Exception do\n      writeln(E.Message);\n  end;\n  readln;\nend.\n\n\n710889 becomes 7108899\nB0YBKJ becomes B0YBKJ7\n406566 becomes 4065663\nB0YBLH becomes B0YBLH2\n228276 becomes 2282765\nB0YBKL becomes B0YBKL9\n557910 becomes 5579107\nB0YBKR becomes B0YBKR5\n585284 becomes 5852842\nB0YBKT becomes B0YBKT7\nB00030 becomes B000300\n", "explain": "Output:\n"}, {"task_name": "SEDOLs", "task_url": "https://rosettacode.org/wiki/SEDOLs", "task_cat": "Checksums", "lang": "Ruby", "code": "\nSedol_char = \"0123456789BCDFGHJKLMNPQRSTVWXYZ\"\nSedolweight = [1,3,1,7,3,9]\n\ndef char2value(c)\n  raise ArgumentError, \"Invalid char #{c}\" unless Sedol_char.include?(c)\n  c.to_i(36)\nend\n \ndef checksum(sedol)\n  raise ArgumentError, \"Invalid length\" unless sedol.size == Sedolweight.size\n  sum = sedol.chars.zip(Sedolweight).sum{|ch, weight| char2value(ch) * weight }\n  ((10 - (sum % 10)) % 10).to_s\nend\n \ndata = %w(710889\n          B0YBKJ\n          406566\n          B0YBLH\n          228276\n          B0YBKL\n          557910\n          B0YBKR\n          585284\n          B0YBKT\n          B00030\n          C0000\n          1234567\n          00000A)\n \ndata.each do |sedol|\n  print \"%-8s \" % sedol\n  begin\n    puts sedol + checksum(sedol)\n  rescue => e\n    p e\n  end\nend\n\n\nOutput:\n710889   7108899\nB0YBKJ   B0YBKJ7\n406566   4065663\nB0YBLH   B0YBLH2\n228276   2282765\nB0YBKL   B0YBKL9\n557910   5579107\nB0YBKR   B0YBKR5\n585284   5852842\nB0YBKT   B0YBKT7\nB00030   B000300\nC0000    #<ArgumentError: Invalid length>\n1234567  #<ArgumentError: Invalid length>\n00000A   #<ArgumentError: No vowels>\n\n", "explain": ""}, {"task_name": "SEDOLs", "task_url": "https://rosettacode.org/wiki/SEDOLs", "task_cat": "Checksums", "lang": "Rust", "code": "\nfn sedol(input: &str) -> Option<String> {\n    let weights = vec![1, 3, 1, 7, 3, 9, 1];\n    let valid_chars = \"0123456789BCDFGHJKLMNPQRSTVWXYZ\";\n\n    if input.len() != 6 {\n        return None;\n    }\n\n    // could be done by regex if needed\n    for c in input.chars() {\n        if !valid_chars.contains(c) {\n            return None;\n        }\n    }\n\n    let mut result: u32 = input\n        .chars()\n        .map(|c| {\n            if c.is_digit(10) {\n                c as u32 - 48\n            } else {\n                c as u32 - 55\n            }\n        })\n        .zip(weights)\n        .map(|(cnum, w)| w * cnum)\n        .collect::<Vec<u32>>()\n        .iter()\n        .sum();\n\n    result = (10 - result % 10) % 10;\n\n    Some(input.to_owned() + &result.to_string())\n}\n\nfn main() {\n    let inputs = vec![\n        \"710889\", \"B0YBKJ\", \"406566\", \"B0YBLH\", \"228276\", \"B0YBKL\", \"557910\", \"B0YBKR\", \"585284\",\n        \"B0YBKT\", \"B00030\",\n    ];\n\n    for input in inputs {\n        println!(\"{} SEDOL: {:?}\", &input, sedol(&input).unwrap());\n    }\n}\n\n\nOutput:\n710889 SEDOL: \"7108899\"\nB0YBKJ SEDOL: \"B0YBKJ7\"\n406566 SEDOL: \"4065663\"\nB0YBLH SEDOL: \"B0YBLH2\"\n228276 SEDOL: \"2282765\"\nB0YBKL SEDOL: \"B0YBKL9\"\n557910 SEDOL: \"5579107\"\nB0YBKR SEDOL: \"B0YBKR5\"\n585284 SEDOL: \"5852842\"\nB0YBKT SEDOL: \"B0YBKT7\"\nB00030 SEDOL: \"B000300\"\n\n", "explain": ""}, {"task_name": "SEDOLs", "task_url": "https://rosettacode.org/wiki/SEDOLs", "task_cat": "Checksums", "lang": "R", "code": "\n# Read in data from text connection\ndatalines <- readLines(tc <- textConnection(\"710889\nB0YBKJ\n406566\nB0YBLH\n228276\nB0YBKL\n557910\nB0YBKR\n585284\nB0YBKT\")); close(tc)\n\n# Check data valid\ncheckSedol <- function(datalines)\n{\n   ok <- grep(\"^[[:digit:][:upper:]]{6}$\", datalines)\n   if(length(ok) < length(datalines))\n   {\n      stop(\"there are invalid lines\") \n   }\n}\ncheckSedol(datalines)\n\n# Append check digit\nappendCheckDigit <- function(x) \n{   \n   if(length(x) > 1) return(sapply(x, appendCheckDigit)) \n   ascii <- as.integer(charToRaw(x))\n   scores <- ifelse(ascii < 65, ascii - 48, ascii - 55)\n   weights <- c(1, 3, 1, 7, 3, 9)\n   chkdig <- (10 - sum(scores * weights) %% 10) %% 10\n   paste(x, as.character(chkdig), sep=\"\")\n}\nwithchkdig <- appendCheckDigit(datalines)\n\n#Print in format requested\nwriteLines(withchkdig)\n\n", "explain": ""}, {"task_name": "SEDOLs", "task_url": "https://rosettacode.org/wiki/SEDOLs", "task_cat": "Checksums", "lang": "COBOL", "code": "\nWorks with: GNU Cobol version 2.0\n       >>SOURCE FREE\nIDENTIFICATION DIVISION.\nPROGRAM-ID. sedol.\n\nENVIRONMENT DIVISION.\nINPUT-OUTPUT SECTION.\nFILE-CONTROL.\n    SELECT sedol-file ASSIGN \"sedol.txt\"\n        ORGANIZATION LINE SEQUENTIAL\n        FILE STATUS sedol-file-status.\n\nDATA DIVISION.\nFILE SECTION.\nFD  sedol-file.\n01  sedol                               PIC X(6).\n\nWORKING-STORAGE SECTION.\n01  sedol-file-status                   PIC XX.\n    88  sedol-file-ok                   VALUE \"00\".\n\n01  digit-num                           PIC 9 COMP.\n    \n01  digit-weights-area                  VALUE \"1317391\".\n    03  digit-weights                   PIC 9 OCCURS 7 TIMES.\n    \n01  weighted-sum-parts-area.\n    03  weighted-sum-parts              PIC 9(3) COMP OCCURS 6 TIMES.\n\n01  weighted-sum                        PIC 9(3) COMP.\n\n01  check-digit                         PIC 9.\n\nPROCEDURE DIVISION.\n    OPEN INPUT sedol-file\n    PERFORM UNTIL NOT sedol-file-ok\n        READ sedol-file\n            AT END\n                EXIT PERFORM\n        END-READ\n\n        MOVE FUNCTION UPPER-CASE(sedol) TO sedol\n        \n        PERFORM VARYING digit-num FROM 1 BY 1 UNTIL digit-num > 6\n            EVALUATE TRUE\n                WHEN sedol (digit-num:1) IS ALPHABETIC-UPPER\n                    IF sedol (digit-num:1) = \"A\" OR \"E\" OR \"I\" OR \"O\" OR \"U\"\n                        DISPLAY \"Invalid SEDOL: \" sedol\n                        EXIT PERFORM CYCLE\n                    END-IF\n                \n                    COMPUTE weighted-sum-parts (digit-num) =\n                        (FUNCTION ORD(sedol (digit-num:1)) - FUNCTION ORD(\"A\")\n                        + 10) * digit-weights (digit-num)\n                        \n                WHEN sedol (digit-num:1) IS NUMERIC\n                    MULTIPLY FUNCTION NUMVAL(sedol (digit-num:1))\n                        BY digit-weights (digit-num)\n                        GIVING weighted-sum-parts (digit-num)\n                        \n                WHEN OTHER\n                    DISPLAY \"Invalid SEDOL: \" sedol\n                    EXIT PERFORM CYCLE\n            END-EVALUATE\n        END-PERFORM\n\n        INITIALIZE weighted-sum\n        PERFORM VARYING digit-num FROM 1 BY 1 UNTIL digit-num > 6\n            ADD weighted-sum-parts (digit-num) TO weighted-sum\n        END-PERFORM\n        \n        COMPUTE check-digit =\n            FUNCTION MOD(10 - FUNCTION MOD(weighted-sum, 10), 10)\n\n        DISPLAY sedol check-digit\n    END-PERFORM\n    \n    CLOSE sedol-file\n    .\nEND PROGRAM sedol.\n\n", "explain": ""}, {"task_name": "SEDOLs", "task_url": "https://rosettacode.org/wiki/SEDOLs", "task_cat": "Checksums", "lang": "Visual_FoxPro", "code": "\n#DEFINE ALPHABET \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n#DEFINE VOWELS \"AEIOU\"\n#DEFINE VALIDCHARS \"0123456789\" + ALPHABET\nLOCAL cMsg As String, cCode As String \nLOCAL ARRAY codes[12]\ncodes[1] = \"710889\"\ncodes[2] = \"B0YBKJ\"\ncodes[3] = \"406566\"\ncodes[4] = \"B0YBLH\"\ncodes[5] = \"228276\"\ncodes[6] = \"B0YBKL\"\ncodes[7] = \"557910\"\ncodes[8] = \"B0YBKR\"\ncodes[9] = \"585284\"\ncodes[10] = \"B0YBKT\"\ncodes[11] = \"B00030\"\ncodes[12] = \"B0030A\"\nDIMENSION w[6]\nw[1] = 1\nw[2] = 3\nw[3] = 1\nw[4] = 7\nw[5] = 3\nw[6] = 9\nCLEAR\nFOR EACH cCode IN codes\n    cMsg = \"\"\n    IF IsValidCode(@cCode, @cMsg)\t&& Parameters passed by reference\n\tcCode = cCode + GetCheckDigit(cCode)\n\t? cCode\n    ELSE\n\t? cCode, cMsg\n    ENDIF\t\t\t\nENDFOR\n\nFUNCTION GetCheckDigit(tcCode As String) As String\nLOCAL i As Integer, c As String, s As Integer, k As Integer\ns = 0\nFOR i = 1 TO 6\n    c = SUBSTR(tcCode, i, 1)\n    IF ISDIGIT(c)\n\tk = VAL(c)\n    ELSE\n\tk = 9 + AT(c, ALPHABET)\n    ENDIF\n    s = s + k*w[i]\nENDFOR\nRETURN TRANSFORM((10 - s%10)%10)\nENDFUNC \n\nFUNCTION IsValidCode(tcCode As String, tcMsg As String) As Boolean\nLOCAL n As Integer, c As String, i As Integer\n*!* Get rid of any spaces and convert to upper case\ntcCode = UPPER(STRTRAN(tcCode, \" \"))\nn = LEN(tcCode)\nIF LEN(tcCode) # 6\n    tcMsg = \"Code must be 6 characters.\"\nELSE\n    FOR i = 1 TO n\n\tc = SUBSTR(tcCode, i, 1)\n\tIF NOT c $ VALIDCHAR\n\t    tcMsg = c + \" is not a valid character.\"\n\t    EXIT \n\tELSE\n\t    IF c $ VOWELS\n\t\ttcMsg = \"Vowels are not allowed.\"\n\t\tEXIT \n\t    ENDIF\n\tENDIF \t\t\t\n    ENDFOR\nENDIF\nRETURN EMPTY(tcMsg)\nENDFUNC\n\n\nOutput:\nOutput as in task description.\nThe last code is printed as BOO30A Vowels are not allowed.\n\n", "explain": ""}, {"task_name": "SEDOLs", "task_url": "https://rosettacode.org/wiki/SEDOLs", "task_cat": "Checksums", "lang": "Ada", "code": "\nwith Ada.Text_IO;  use Ada.Text_IO;\n\nprocedure Test_SEDOL is\n\n   subtype SEDOL_String is String (1..6);\n   type SEDOL_Sum is range 0..9;\n\n   function Check (SEDOL : SEDOL_String) return SEDOL_Sum is\n      Weight : constant array (SEDOL_String'Range) of Integer := (1,3,1,7,3,9);\n      Sum    : Integer := 0;\n      Item   : Integer;\n   begin\n      for Index in SEDOL'Range loop\n         Item := Character'Pos (SEDOL (Index));\n         case Item is\n            when Character'Pos ('0')..Character'Pos ('9') =>\n               Item := Item - Character'Pos ('0');\n            when Character'Pos ('B')..Character'Pos ('D') |\n                 Character'Pos ('F')..Character'Pos ('H') |\n                 Character'Pos ('J')..Character'Pos ('N') |\n                 Character'Pos ('P')..Character'Pos ('T') |\n                 Character'Pos ('V')..Character'Pos ('Z') =>\n               Item := Item - Character'Pos ('A') + 10;\n            when others =>\n               raise Constraint_Error;\n         end case;\n         Sum := Sum + Item * Weight (Index);\n      end loop;\n      return SEDOL_Sum ((-Sum) mod 10);\n   end Check;\n\n   Test : constant array (1..10) of SEDOL_String :=\n             (  \"710889\", \"B0YBKJ\", \"406566\", \"B0YBLH\", \"228276\",\n                \"B0YBKL\", \"557910\", \"B0YBKR\", \"585284\", \"B0YBKT\"\n             );\nbegin\n   for Index in Test'Range loop\n      Put_Line (Test (Index) & Character'Val (Character'Pos ('0') + Check (Test (Index))));\n   end loop;\nend Test_SEDOL;\n\n\n7108899\nB0YBKJ7\n4065663\nB0YBLH2\n2282765\nB0YBKL9\n5579107\nB0YBKR5\n5852842\nB0YBKT7\n", "explain": "The function Check raises Constraint_Error upon an invalid input. The calculated sum is trimmed using (-sum) mod 10, which is mathematically equivalent to (10 - (sum mod 10)) mod 10.\nSample output:\n"}, {"task_name": "SEDOLs", "task_url": "https://rosettacode.org/wiki/SEDOLs", "task_cat": "Checksums", "lang": "Julia", "code": "\nWorks with: Julia version 0.6\nusing Base.Test\n\nfunction appendchecksum(chars::AbstractString)\n    if !all(isalnum, chars) throw(ArgumentError(\"invalid SEDOL number '$chars'\")) end\n    weights = [1, 3, 1, 7, 3, 9, 1]\n\n    s = 0\n    for (w, c) in zip(weights, chars)\n        s += w * parse(Int, c, 36)\n    end\n    return string(chars, (10 - s % 10) % 10)\nend\n\ntests = [\"710889\", \"B0YBKJ\", \"406566\", \"B0YBLH\", \"228276\", \"B0YBKL\", \"557910\", \"B0YBKR\", \"585284\", \"B0YBKT\", \"B00030\"]\ncsums = [\"7108899\", \"B0YBKJ7\", \"4065663\", \"B0YBLH2\", \"2282765\", \"B0YBKL9\", \"5579107\", \"B0YBKR5\", \"5852842\", \"B0YBKT7\", \"B000300\"]\n\n@testset \"Checksums\" begin\n    for (t, c) in zip(tests, csums)\n        @test appendchecksum(t) == c\n    end\nend\n\n\nOutput:\nTest Summary: | Pass  Total\nChecksums     |   11     11\n", "explain": ""}, {"task_name": "SEDOLs", "task_url": "https://rosettacode.org/wiki/SEDOLs", "task_cat": "Checksums", "lang": "Kotlin", "code": "\n// version 1.1.0\n\nval weights = listOf(1, 3, 1, 7, 3, 9, 1)\n\nfun sedol7(sedol6: String): String {\n    if (sedol6.length != 6) throw IllegalArgumentException(\"Length of argument string must be 6\")\n    var sum = 0\n    for (i in 0..5) {\n        val c = sedol6[i] \n        val v = when (c) {\n            in '0'..'9' -> c.toInt() - 48  \n            in 'A'..'Z' -> c.toInt() - 55\n            else        -> throw IllegalArgumentException(\"Argument string contains an invalid character\")\n        }\n        sum += v * weights[i]\n    }\n    val check = (10 - (sum % 10)) % 10 \n    return sedol6 + (check + 48).toChar()\n}\n\nfun main(args: Array<String>) {\n    val sedol6s = listOf(\"710889\", \"B0YBKJ\", \"406566\", \"B0YBLH\", \"228276\", \"B0YBKL\",\n                         \"557910\", \"B0YBKR\", \"585284\", \"B0YBKT\", \"B00030\")\n    for (sedol6 in sedol6s) println(\"$sedol6 -> ${sedol7(sedol6)}\")\n}\n\n\nOutput:\n710889 -> 7108899\nB0YBKJ -> B0YBKJ7\n406566 -> 4065663\nB0YBLH -> B0YBLH2\n228276 -> 2282765\nB0YBKL -> B0YBKL9\n557910 -> 5579107\nB0YBKR -> B0YBKR5\n585284 -> 5852842\nB0YBKT -> B0YBKT7\nB00030 -> B000300\n\n", "explain": ""}, {"task_name": "SEDOLs", "task_url": "https://rosettacode.org/wiki/SEDOLs", "task_cat": "Checksums", "lang": "Perl", "code": "\n\nuse List::Util qw(sum);\nuse POSIX qw(strtol);\n\nsub zip :prototype(&\\@\\@) {\n  my $f = shift;\n  my @a = @{shift()};\n  my @b = @{shift()};\n  my @result;\n  push(@result, $f->(shift @a, shift @b)) while @a && @b;\n  return @result;\n}\n\nmy @weights = (1, 3, 1, 7, 3, 9);\nsub sedan :prototype($) {\n  my $s = shift;\n  $s =~ /[AEIOU]/ and die \"No vowels\";\n  my @vs = map {(strtol $_, 36)[0]} split //, $s;\n  my $checksum = sum (zip {$_[0] * $_[1]} @vs, @weights);\n  my $check_digit = (10 - $checksum % 10) % 10;\n  return $s . $check_digit;\n}\n\nwhile (<>) {\n    chomp;\n    print sedol($_), \"\\n\";\n}\n\n", "explain": "This program reads from standard input.\n"}, {"task_name": "SEDOLs", "task_url": "https://rosettacode.org/wiki/SEDOLs", "task_cat": "Checksums", "lang": "Scala", "code": "\nclass SEDOL(s: String) {\n  require(s.size == 6 || s.size == 7, \"SEDOL length must be 6 or 7 characters\")\n  require(s.size == 6 || s(6).asDigit == chksum, \"Incorrect SEDOL checksum\")\n  require(s forall (c => !(\"aeiou\" contains c.toLower)), \"Vowels not allowed in SEDOL\")\n  def chksum = 10 - ((s zip List(1, 3, 1, 7, 3, 9) map { case (c, w) => c.asDigit * w } sum) % 10)\n  override def toString = s.take(6) + chksum\n}\n\n\nscala> \"\"\"710889\n     | B0YBKJ\n     | 406566\n     | B0YBLH\n     | 228276\n     | B0YBKL\n     | 557910\n     | B0YBKR\n     | 585284\n     | B0YBKT\"\"\".lines.map(_.trim).foreach(s => println(new SEDOL(s)))\n7108899\nB0YBKJ7\n4065663\nB0YBLH2\n2282765\nB0YBKL9\n5579107\nB0YBKR5\n5852842\nB0YBKT7\n\n\nscala> new SEDOL(\"12\")\njava.lang.IllegalArgumentException: requirement failed: SEDOL length must be 6 or 7 characters\n\nscala> new SEDOL(\"7108890\")\njava.lang.IllegalArgumentException: requirement failed: Incorrect SEDOL checksum\n\nscala> new SEDOL(\"71088A\")\njava.lang.IllegalArgumentException: requirement failed: Vowels not allowed in SEDOL\n\n", "explain": "Test cases:\nValidations:\n"}, {"task_name": "SEDOLs", "task_url": "https://rosettacode.org/wiki/SEDOLs", "task_cat": "Checksums", "lang": "Transact-SQL", "code": "\n\nCREATE FUNCTION [dbo].[fn_CheckSEDOL]\n( @SEDOL varchar(50) )\nRETURNS varchar(7)\nAS\nBEGIN\n\tdeclare\t@true bit = 1,\n\t\t@false bit = 0,\n\t\t@isSEDOL bit,\t\t\n\t\t@sedol_weights varchar(6) ='131739',\n\t\t@sedol_len int = LEN(@SEDOL),\n\t\t@sum int = 0\n\t\t\n\t\t\t\t\t\n\tif ((@sedol_len = 6)) \n\tbegin\n\t\tselect @SEDOL = UPPER(@SEDOL)\n\t\tDeclare\t@vowels varchar(5) = 'AEIOU', \n\t\t\t@letters varchar(21) = 'BCDFGHJKLMNPQRSTVWXYZ',\n\t\t\t@i int=1,\n\t\t\t@isStillGood bit = @true,\t\t\t\t\t\n\t\t\t@char char = '',\n\t\t\t@weighting int =0\n\t\t\t\t\t\n\t\tselect @isSEDOL = @false\n    \n\t\twhile ((@i < 7) and (@isStillGood = @true))\n\t\tbegin\n\t\t\tselect\t@char = SUBSTRING(@SEDOL,@i,1), \n\t\t\t\t@weighting = CONVERT (INT,SUBSTRING(@sedol_weights, @i, 1))\n\t\t\tif (CHARINDEX(@char, @vowels) > 0) -- no vowels please\n\t\t\tbegin\n\t\t\t\tselect @isStillGood=@false\n\t\t\tend\n\t\t\telse\n\t\t\tbegin\n\t\t\t\tif (ISNUMERIC(@char) = @true) -- is a number\n\t\t\t\tbegin\n\t\t\t\t\tselect @sum = @sum + (ASCII(@char) - 48) * @weighting\n\t\t\t\tend\n\t\t\t\telse if (CHARINDEX(@char, @letters) = 0) -- test for the rest of the alphabet\n\t\t\t\tbegin\n\t\t\t\t\tselect @isStillGood=@false\n\t\t\t\tend\n\t\t\t\telse\n\t\t\t\tbegin\n\t\t\t\t\tselect @sum = @sum + (ASCII(@char) - 55) * @weighting\n\t\t\t\tend\n\t\t\tend \n\t\t\tselect @i = @i +1  \n\t\tend -- of while loop\n\t\tif (@isStillGood = @true) \n\t\tbegin\n\t\t\tdeclare @checksum int = (10 - (@sum%10))%10 \n\t\t\tselect @SEDOL = @SEDOL + CONVERT(CHAR,@checksum)\n\t\tend\n\tend\n\telse\n\tbegin\n\t\tselect @SEDOL = ''\n\tend \n\t-- Return the result of the function\n\tRETURN @SEDOL\nEND\n\n\nprint dbo.fn_CheckSEDOL('710889')\nprint dbo.fn_CheckSEDOL('B0YBKJ')\nprint dbo.fn_CheckSEDOL('406566')\nprint dbo.fn_CheckSEDOL('B0YBLH')\nprint dbo.fn_CheckSEDOL('228276')\nprint dbo.fn_CheckSEDOL('B0YBKL')\nprint dbo.fn_CheckSEDOL('557910')\nprint dbo.fn_CheckSEDOL('B0YBKR')\nprint dbo.fn_CheckSEDOL('585284')\nprint dbo.fn_CheckSEDOL('B0YBKT')\nprint dbo.fn_CheckSEDOL('B00030')\n\n7108899\nB0YBKJ7\n4065663\nB0YBLH2\n2282765\nB0YBKL9\n5579107\nB0YBKR5\n5852842\nB0YBKT7\nB000300\n", "explain": "SQL Server transact-SQL implementation. Compatible with all versions from 6.5 to 2008.\nReturns empty string if invalid.\nExamples:\n"}, {"task_name": "SEDOLs", "task_url": "https://rosettacode.org/wiki/SEDOLs", "task_cat": "Checksums", "lang": "D", "code": "\nFunctional Version[edit]\nimport std.stdio, std.algorithm, std.string, std.numeric, std.ascii;\n\nchar checksum(in char[] sedol) pure @safe /*@nogc*/\nin {\n    assert(sedol.length == 6);\n    foreach (immutable c; sedol)\n        assert(c.isDigit || (c.isUpper && !\"AEIOU\".canFind(c)));\n} out (result) {\n    assert(result.isDigit);\n} body {\n    static immutable c2v = (in dchar c) => c.isDigit ? c - '0' : (c - 'A' + 10);\n    immutable int d = sedol.map!c2v.dotProduct([1, 3, 1, 7, 3, 9]);\n    return digits[10 - (d % 10)];\n}\n\nvoid main() {\n    foreach (const sedol; \"710889 B0YBKJ 406566 B0YBLH 228276\n                          B0YBKL 557910 B0YBKR 585284 B0YBKT\".split)\n        writeln(sedol, sedol.checksum);\n}\n\n\nOutput:\n7108899\nB0YBKJ7\n4065663\nB0YBLH2\n2282765\nB0YBKL9\n5579107\nB0YBKR5\n5852842\nB0YBKT7\nImperative Version[edit]\n\nimport std.stdio, std.algorithm, std.string, std.numeric, std.ascii;\n\nchar sedolChecksum(in char[] sedol) pure nothrow @safe /*@nogc*/\nin {\n    assert(sedol.length == 6, \"SEDOL must be 6 chars long.\");\n    enum uint mask = 0b11_1110_1111_1011_1110_1110_1110;\n\n    foreach (immutable c; sedol)\n        assert(c.isDigit ||\n               (c > 'A' && c <= 'Z' && ((1U << (c - 'A')) & mask)),\n               \"SEDOL with wrong char.\");\n} out(result) {\n    assert(result.isDigit);\n    static int c2v(in dchar c) pure nothrow @safe @nogc {\n        return c.isDigit ? c - '0' : c - 'A' + 10;\n    }\n    immutable int d = sedol.map!c2v.dotProduct([1, 3, 1, 7, 3, 9]);\n    assert((d + result - '0') % 10 == 0);\n} body {\n    static immutable int[] weights = [1, 3, 1, 7, 3, 9];\n\n    int sum = 0;\n    foreach (immutable i, immutable c; sedol) {\n        if (c.isDigit)\n            sum += (c - '0') * weights[i];\n        else\n            sum += (c - 'A' + 10) * weights[i];\n    }\n\n    return '0' + 10 - (sum % 10);\n}\n\nvoid main() {\n    foreach (immutable s; [\"710889\", \"B0YBKJ\", \"406566\", \"B0YBLH\",\n                           \"228276\", \"B0YBKL\", \"557910\", \"B0YBKR\",\n                           \"585284\", \"B0YBKT\"])\n        writeln(s, s.sedolChecksum);\n}\n\nShort Version[edit]\n\nvoid main() {\n    import std.stdio, std.algorithm, std.string, std.numeric,std.ascii;\n\n    foreach (const s; \"710889 B0YBKJ 406566 B0YBLH 228276\n                       B0YBKL 557910 B0YBKR 585284 B0YBKT\".split)\n        writeln(s, '0' + 10 - s\n                   .map!(c => c.isDigit ? c - '0' : c - 'A' + 10)\n                   .dotProduct([1, 3, 1, 7, 3, 9]) % 10);\n}\n\n", "explain": "Longer, faster lower-level version, same output.\nSame output.\n"}, {"task_name": "SEDOLs", "task_url": "https://rosettacode.org/wiki/SEDOLs", "task_cat": "Checksums", "lang": "Haskell", "code": "\nimport Data.Char (isAsciiUpper, isDigit, ord)\n\n-------------------------- SEDOLS ------------------------\n\ncheckSum :: String -> String\ncheckSum x =\n  case traverse sedolValue x of\n    Right xs -> (show . checkSumFromSedolValues) xs\n    Left annotated -> annotated\n\ncheckSumFromSedolValues :: [Int] -> Int\ncheckSumFromSedolValues xs =\n  rem\n    ( 10\n        - rem\n          ( sum $\n              zipWith\n                (*)\n                [1, 3, 1, 7, 3, 9]\n                xs\n          )\n          10\n    )\n    10\n\nsedolValue :: Char -> Either String Int\nsedolValue c\n  | c `elem` \"AEIOU\" = Left \" \u2190 Unexpected vowel.\"\n  | isDigit c = Right (ord c - ord '0')\n  | isAsciiUpper c = Right (ord c - ord 'A' + 10)\n\n--------------------------- TEST -------------------------\nmain :: IO ()\nmain =\n  mapM_\n    (putStrLn . ((<>) <*> checkSum))\n    [ \"710889\",\n      \"B0YBKJ\",\n      \"406566\",\n      \"B0YBLH\",\n      \"228276\",\n      \"B0YBKL\",\n      \"557910\",\n      \"B0YBKR\",\n      \"585284\",\n      \"B0YBKT\",\n      \"BOYBKT\", -- Ill formed test case - illegal vowel.\n      \"B00030\"\n    ]\n\n\nOutput:\n7108899\nB0YBKJ7\n4065663\nB0YBLH2\n2282765\nB0YBKL9\n5579107\nB0YBKR5\n5852842\nB0YBKT7\nBOYBKT \u2190 Unexpected vowel.\nB000300\n", "explain": ""}, {"task_name": "SEDOLs", "task_url": "https://rosettacode.org/wiki/SEDOLs", "task_cat": "Checksums", "lang": "VBScript", "code": "\n\narr = Array(\"710889\",_\n            \"B0YBKJ\",_\n\t    \"406566\",_\n\t    \"B0YBLH\",_\n\t    \"228276\",_\n\t    \"B0YBKL\",_\n\t    \"557910\",_\n            \"B0YBKR\",_\n\t    \"585284\",_\n\t    \"B0YBKT\",_\n\t    \"12345\",_\n\t    \"A12345\",_\n\t    \"B00030\")\n\nFor j = 0 To UBound(arr)\n\tWScript.StdOut.Write arr(j) & getSEDOLCheckDigit(arr(j))\n\tWScript.StdOut.WriteLine\nNext \n\nFunction getSEDOLCheckDigit(str)\n\tIf Len(str) <> 6 Then\n\t\tgetSEDOLCheckDigit = \" is invalid. Only 6 character strings are allowed.\"\n\t\tExit Function\n\tEnd If\n\tSet mult = CreateObject(\"Scripting.Dictionary\")\n\tWith mult\n\t\t.Add \"1\",\"1\" : .Add \"2\", \"3\" : .Add \"3\", \"1\"\n\t\t.Add \"4\",\"7\" : .Add \"5\", \"3\" : .Add \"6\", \"9\"\n\tEnd With\n\ttotal = 0\n\tFor i = 1 To 6\n\t\ts  = Mid(str,i,1)\n\t\tIf s = \"A\" Or s = \"E\" Or s = \"I\" Or s = \"O\" Or s = \"U\" Then\n\t\t\tgetSEDOLCheckDigit = \" is invalid. Vowels are not allowed.\"\n\t\t\tExit Function\n\t\tEnd If\n\t\tIf Asc(s) >= 48 And Asc(s) <=57 Then\n\t\t\ttotal = total + CInt(s) * CInt(mult.Item(CStr(i)))\n\t\tElse\n\t\t\ttotal = total + (Asc(s) - 55) * CInt(mult.Item(CStr(i)))\n\t\tEnd If\n\tNext\n\tgetSEDOLCheckDigit = (10 - total Mod 10) Mod 10\nEnd Function\n\n\nOutput:\n7108899\nB0YBKJ7\n4065663\nB0YBLH2\n2282765\nB0YBKL9\n5579107\nB0YBKR5\n5852842\nB0YBKT7\n12345 is invalid. Only 6 character strings are allowed.\nA12345 is invalid. Vowels are not allowed.\nB000300\n", "explain": "Derived from the BASIC version.\n"}, {"task_name": "SEDOLs", "task_url": "https://rosettacode.org/wiki/SEDOLs", "task_cat": "Checksums", "lang": "PowerShell", "code": "\nfunction Add-SEDOLCheckDigit\n    {\n    Param ( #  Validate input as six-digit SEDOL number\n            [ValidatePattern( \"^[0123456789bcdfghjklmnpqrstvwxyz]{6}$\" )]\n            [parameter ( Mandatory = $True ) ]\n            [string]\n            $SixDigitSEDOL )\n \n    #  Convert to array of single character strings, using type char as an intermediary\n    $SEDOL = [string[]][char[]]$SixDigitSEDOL\n \n    #  Define place weights\n    $Weight = @( 1, 3, 1, 7, 3, 9 )\n \n    #  Define character values (implicit in 0-based location within string)\n    $Characters = \"0123456789abcdefghijklmnopqrstuvwxyz\"\n \n    $CheckSum = 0\n   \n    #  For each digit, multiply the character value by the weight and add to check sum\n    0..5 | ForEach { $CheckSum += $Characters.IndexOf( $SEDOL[$_].ToLower() ) * $Weight[$_] }\n \n    #  Derive the check digit from the partial check sum\n    $CheckDigit = ( 10 - $CheckSum % 10 ) % 10\n \n    #  Return concatenated result\n    return ( $SixDigitSEDOL + $CheckDigit )\n    }\n \n#  Test\n$List = @(\n    \"710889\"\n    \"B0YBKJ\"\n    \"406566\"\n    \"B0YBLH\"\n    \"228276\"\n    \"B0YBKL\"\n    \"557910\"\n    \"B0YBKR\"\n    \"585284\"\n    \"B0YBKT\"\n    \"B00030\"\n    )\n \nForEach ( $PartialSEDOL in $List )\n    {\n    Add-SEDOLCheckDigit -SixDigitSEDOL $PartialSEDOL\n    }\n\n\nOutput:\n7108899\nB0YBKJ7\n4065663\nB0YBLH2\n2282765\nB0YBKL9\n5579107\nB0YBKR5\n5852842\nB0YBKT7\nB000300\n", "explain": ""}, {"task_name": "SEDOLs", "task_url": "https://rosettacode.org/wiki/SEDOLs", "task_cat": "Checksums", "lang": "F#", "code": "\nopen System\nlet Inputs = [\"710889\"; \"B0YBKJ\"; \"406566\"; \"B0YBLH\"; \"228276\"; \"B0YBKL\"\n              \"557910\"; \"B0YBKR\"; \"585284\"; \"B0YBKT\"; \"B00030\"]\n\nlet Vowels = set ['A'; 'E'; 'I'; 'O'; 'U']\nlet Weights = [1; 3; 1; 7; 3; 9; 1]\n\nlet inline isVowel c = Vowels.Contains (Char.ToUpper c)\n\nlet char2value c =   \n    if Char.IsDigit c then int c - 0x30 \n    else (['A'..'Z'] |> List.findIndex ((=) (Char.ToUpper c))) + 10\n        \nlet sedolCheckDigit (input: string) =\n    if input.Length <> 6 || input |> Seq.exists isVowel then \n        failwithf \"Input must be six characters long and not contain vowels: %s\" input\n\n    let sum = Seq.map2 (fun ch weight -> (char2value ch) * weight) input Weights |> Seq.sum\n    (10 - sum%10)%10              \n\nlet addCheckDigit inputs =\n    inputs |> List.map (fun s -> s + (sedolCheckDigit s).ToString())\n\nlet processDigits() =\n    try\n        addCheckDigit Inputs |> List.iter (printfn \"%s\")\n    with \n        ex -> printfn \"ERROR: %s\" ex.Message\n\n", "explain": ""}, {"task_name": "SEDOLs", "task_url": "https://rosettacode.org/wiki/SEDOLs", "task_cat": "Checksums", "lang": "Groovy", "code": "\ndef checksum(text) {\n    assert text.size() == 6 && !text.toUpperCase().find(/[AEIOU]+/) : \"Invalid SEDOL text: $text\"\n\n    def sum = 0\n    (0..5).each { index ->\n        sum +=  Character.digit(text.charAt(index), 36) * [1, 3, 1, 7, 3, 9][index]\n    }\n    text + (10 - (sum % 10)) % 10\n}\nString.metaClass.sedol = { this.&checksum(delegate) }\n\n\n[ '710889': '7108899', 'B0YBKJ': 'B0YBKJ7', '406566': '4065663', 'B0YBLH': 'B0YBLH2',\n  '228276': '2282765', 'B0YBKL': 'B0YBKL9', '557910': '5579107', 'B0YBKR': 'B0YBKR5',\n  '585284': '5852842', 'B0YBKT': 'B0YBKT7', 'B00030': 'B000300'].each { text, expected ->\n    println \"Checking $text -> $expected\"\n    assert expected == text.sedol()\n}\n\n\nChecking 710889 -> 7108899\nChecking B0YBKJ -> B0YBKJ7\nChecking 406566 -> 4065663\nChecking B0YBLH -> B0YBLH2\nChecking 228276 -> 2282765\nChecking B0YBKL -> B0YBKL9\nChecking 557910 -> 5579107\nChecking B0YBKR -> B0YBKR5\nChecking 585284 -> 5852842\nChecking B0YBKT -> B0YBKT7\nChecking B00030 -> B000300\n", "explain": "Test Code:\nOutput:\n"}, {"task_name": "SEDOLs", "task_url": "https://rosettacode.org/wiki/SEDOLs", "task_cat": "Checksums", "lang": "AWK", "code": "\n\nfunction ord(a)\n{\n  return amap[a]\n}\n\nfunction sedol_checksum(sed)\n{\n  sw[1] = 1; sw[2] = 3; sw[3] = 1\n  sw[4] = 7; sw[5] = 3; sw[6] = 9\n  sum = 0\n  for(i=1; i <= 6; i++) {\n    c = substr(toupper(sed), i, 1)\n    if ( c ~ /[[:digit:]]/ ) {\n      sum += c*sw[i]\n    } else {\n      sum += (ord(c)-ord(\"A\")+10)*sw[i]\n    }\n  }\n  return (10 - (sum % 10)) % 10\n}\n\nBEGIN { # prepare amap for ord\n  for(_i=0;_i<256;_i++) {\n    astr = sprintf(\"%c\", _i)\n    amap[astr] = _i\n  }\n}\n\n/[AEIOUaeiou]/ {\n  print \"'\" $0 \"' not a valid SEDOL code\"\n  next\n}\n{\n  if ( (length($0) > 7) || (length($0) < 6) ) {\n    print \"'\" $0 \"' is too long or too short to be valid SEDOL\"\n    next\n  }\n  sedol = substr($0, 1, 6)\n  sedolcheck = sedol_checksum(sedol)\n  if ( length($0) == 7 ) {\n    if ( (sedol sedolcheck) != $0 ) {\n      print sedol sedolcheck \" (original \" $0 \" has wrong check digit\"\n    } else {\n      print sedol sedolcheck\n    }\n  } else {\n    print sedol sedolcheck\n  }\n}\n\n", "explain": "Validate or calculate checksum of SEDOL codes read from standard input (one per line)\n"}]