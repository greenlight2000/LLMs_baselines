[{"task_name": "Loops/Downward for", "task_url": "https://rosettacode.org/wiki/Loops/Downward_for", "task_cat": "Iteration", "lang": "Python", "code": "\nfor i in xrange(10, -1, -1):\n    print i\nList comprehension[edit]\n[i for i in xrange(10, -1, -1)]\nimport pprint\npprint.pprint([i for i in xrange(10, -1, -1)])\n", "explain": ""}, {"task_name": "Loops/Downward for", "task_url": "https://rosettacode.org/wiki/Loops/Downward_for", "task_cat": "Iteration", "lang": "C", "code": "\nint i;\nfor(i = 10; i >= 0; --i)\n  printf(\"%d\\n\",i);\n\n", "explain": ""}, {"task_name": "Loops/Downward for", "task_url": "https://rosettacode.org/wiki/Loops/Downward_for", "task_cat": "Iteration", "lang": "C++", "code": "\nfor(int i = 10; i >= 0; --i)\n  std::cout << i << \"\\n\";\n\n", "explain": ""}, {"task_name": "Loops/Downward for", "task_url": "https://rosettacode.org/wiki/Loops/Downward_for", "task_cat": "Iteration", "lang": "Java", "code": "\nfor (int i = 10; i >= 0; i--) {\n    System.out.println(i);\n}\n\n", "explain": ""}, {"task_name": "Loops/Downward for", "task_url": "https://rosettacode.org/wiki/Loops/Downward_for", "task_cat": "Iteration", "lang": "C#", "code": "\nfor (int i = 10; i >= 0; i--)\n{\n   Console.WriteLine(i);\n}\n\n", "explain": ""}, {"task_name": "Loops/Downward for", "task_url": "https://rosettacode.org/wiki/Loops/Downward_for", "task_cat": "Iteration", "lang": "JavaScript", "code": "\nfor (var i=10; i>=0; --i) print(i);\n\n\nfor (var i = 11; i--;) console.log(i);\n\n\nvar i = 11;\nwhile (i--) console.log(i);\n\n\nfunction range(m, n) {\n  return Array.apply(null, Array(n - m + 1)).map(\n    function (x, i) {\n      return m + i;\n    }\n  );\n}\n\nrange(0, 10).reverse().forEach(\n  function (x) {\n    console.log(x);\n  }\n);\n\n\nconsole.log(\n  range(0, 10).reverse().map(\n    function (x) {\n      return x;\n    }\n  ).join('\\n')\n);\n\n\nconsole.log(\n    range(0, 10).reverse().join('\\n')\n);\n\n", "explain": "Alternatively, remaining for the moment within an imperative idiom of JavaScript, in which programs are composed of statements, we could trim the computational costs over longer reversed iterations by moving the mutation into the test, and dropping the third term of a for() statement:\nand it sometimes might be more natural, especially at scales at which optimisation becomes an issue, to go one step further and express the same computation with the more economical while statement.\nIn a functional idiom of JavaScript, however, we need an expression with a value (which can be composed within superordinate expressions), rather than a statement, which produces a side-effect but returns no information-bearing value.\nIf we have grown over-attached to the English morpheme 'for', we might think first of turning to Array.forEach(),  and write something like:\n\nbut this is still a statement with side-effects, rather than a composable expression with a value.\nWe can get an expression (assuming that the range() function (above) is defined) but replacing Array.forEach with Array.map()\nbut in this case, we are simply mapping an identity function over the values, so the expression simplifies down to:\n"}, {"task_name": "Loops/Downward for", "task_url": "https://rosettacode.org/wiki/Loops/Downward_for", "task_cat": "Iteration", "lang": "PHP", "code": "\nfor ($i = 10; $i >= 0; $i--)\n  echo \"$i\\n\";\n\nforeach (range(10, 0) as $i)\n  echo \"$i\\n\";\n", "explain": "or\n"}, {"task_name": "Loops/Downward for", "task_url": "https://rosettacode.org/wiki/Loops/Downward_for", "task_cat": "Iteration", "lang": "Fortran", "code": "\nWorks with: Fortran version 90 and later\nDO i = 10, 0, -1\n  WRITE(*, *) i\nEND DO\n\nWorks with: Fortran version 77 and later\n      PROGRAM DOWNWARDFOR\nC Initialize the loop parameters.\n        INTEGER I, START, FINISH, STEP\n        PARAMETER (START = 10, FINISH = 0, STEP = -1)\n\nC If you were to leave off STEP, it would default to positive one.\n        DO 10 I = START, FINISH, STEP\n          WRITE (*,*) I\n   10   CONTINUE\n\n        STOP\n      END\n\n", "explain": ""}, {"task_name": "Loops/Downward for", "task_url": "https://rosettacode.org/wiki/Loops/Downward_for", "task_cat": "Iteration", "lang": "Go", "code": "\nfor i := 10; i >= 0; i-- {\n  fmt.Println(i)\n}\n\npackage main\n\nimport \"fmt\"\nimport \"time\"\n\nfunc main() {\n\ti := 10\n\tfor i > 0 {\n\t\tfmt.Println(i)\n\t\ttime.Sleep(time.Second)\n\t\ti = i - 1\n\t}\n\tfmt.Println(\"blast off\")\n}\n\n", "explain": ""}, {"task_name": "Loops/Downward for", "task_url": "https://rosettacode.org/wiki/Loops/Downward_for", "task_cat": "Iteration", "lang": "ARM_Assembly", "code": "\nWorks with: as version Raspberry Pi\n/* ARM assembly Raspberry PI  */\n/*  program loopdownward.s   */\n\n/* Constantes    */\n.equ STDOUT, 1     @ Linux output console\n.equ EXIT,   1     @ Linux syscall\n.equ WRITE,  4     @ Linux syscall\n\n/*********************************/\n/* Initialized data              */\n/*********************************/\n.data\nszMessResult:  .ascii \"Counter = \"      @ message result\nsMessValeur:   .fill 12, 1, ' '\n                   .asciz \"\\n\"\n/*********************************/\n/* UnInitialized data            */\n/*********************************/\n.bss \n/*********************************/\n/*  code section                 */\n/*********************************/\n.text\n.global main \nmain:                @ entry of program \n    push {fp,lr}      @ saves 2 registers \n    mov r4,#10\n1:    @ begin loop \n    mov r0,r4\n    ldr r1,iAdrsMessValeur     @ display value\n    bl conversion10             @ call function with 2 parameter (r0,r1)\n    ldr r0,iAdrszMessResult\n    bl affichageMess            @ display message\n    subs r4,#1                   @ decrement counter\n    bge 1b                      @ loop if greather\n\n100:   @ standard end of the program \n    mov r0, #0                  @ return code\n    pop {fp,lr}                 @restaur 2 registers\n    mov r7, #EXIT              @ request to exit program\n    svc #0                       @ perform the system call\n\niAdrsMessValeur:          .int sMessValeur\niAdrszMessResult:         .int szMessResult\n/******************************************************************/\n/*     display text with size calculation                         */ \n/******************************************************************/\n/* r0 contains the address of the message */\naffichageMess:\n    push {r0,r1,r2,r7,lr}      @ save  registres\n    mov r2,#0                  @ counter length \n1:      @ loop length calculation \n    ldrb r1,[r0,r2]           @ read octet start position + index \n    cmp r1,#0                  @ if 0 its over \n    addne r2,r2,#1            @ else add 1 in the length \n    bne 1b                    @ and loop \n                                @ so here r2 contains the length of the message \n    mov r1,r0        \t\t\t@ address message in r1 \n    mov r0,#STDOUT      \t\t@ code to write to the standard output Linux \n    mov r7, #WRITE             @ code call system \"write\" \n    svc #0                      @ call systeme \n    pop {r0,r1,r2,r7,lr}        @ restaur des  2 registres */ \n    bx lr                       @ return  \n/******************************************************************/\n/*     Converting a register to a decimal                                 */ \n/******************************************************************/\n/* r0 contains value and r1 address area   */\nconversion10:\n    push {r1-r4,lr}    @ save registers \n    mov r3,r1\n    mov r2,#10\n\n1:\t   @ start loop\n    bl divisionpar10 @ r0 <- dividende. quotient ->r0 reste -> r1\n    add r1,#48        @ digit\t\n    strb r1,[r3,r2]  @ store digit on area\n    sub r2,#1         @ previous position\n    cmp r0,#0         @ stop if quotient = 0 */\n    bne 1b\t          @ else loop\n    @ and move spaces in first on area\n    mov r1,#' '   @ space\t\n2:\t\n    strb r1,[r3,r2]  @ store space in area\n    subs r2,#1       @ @ previous position\n    bge 2b           @ loop if r2 >= z\u00e9ro \n\n100:\t\n    pop {r1-r4,lr}    @ restaur registres \n    bx lr\t          @return\n/***************************************************/\n/*   division par 10   sign\u00e9                       */\n/* Thanks to http://thinkingeek.com/arm-assembler-raspberry-pi/*  \n/* and   http://www.hackersdelight.org/            */\n/***************************************************/\n/* r0 dividende   */\n/* r0 quotient */\t\n/* r1 remainder  */\ndivisionpar10:\t\n  /* r0 contains the argument to be divided by 10 */\n    push {r2-r4}   /* save registers  */\n    mov r4,r0 \n    mov r3,#0x6667   @ r3 <- magic_number  lower\n    movt r3,#0x6666  @ r3 <- magic_number  upper\n    smull r1, r2, r3, r0   @ r1 <- Lower32Bits(r1*r0). r2 <- Upper32Bits(r1*r0) \n    mov r2, r2, ASR #2     /* r2 <- r2 >> 2 */\n    mov r1, r0, LSR #31    /* r1 <- r0 >> 31 */\n    add r0, r2, r1         /* r0 <- r2 + r1 */\n    add r2,r0,r0, lsl #2   /* r2 <- r0 * 5 */\n    sub r1,r4,r2, lsl #1   /* r1 <- r4 - (r2 * 2)  = r4 - (r0 * 10) */\n    pop {r2-r4}\n    bx lr                  /* leave function */\n", "explain": ""}, {"task_name": "Loops/Downward for", "task_url": "https://rosettacode.org/wiki/Loops/Downward_for", "task_cat": "Iteration", "lang": "Delphi", "code": "\nSee Pascal\n", "explain": ""}, {"task_name": "Loops/Downward for", "task_url": "https://rosettacode.org/wiki/Loops/Downward_for", "task_cat": "Iteration", "lang": "Ruby", "code": "\n10.downto(0) do |i|\n   puts i\nend\n", "explain": ""}, {"task_name": "Loops/Downward for", "task_url": "https://rosettacode.org/wiki/Loops/Downward_for", "task_cat": "Iteration", "lang": "Rust", "code": "\nfn main() {\n    for i in (0..=10).rev() {\n        println!(\"{}\", i);\n    }\n}\n", "explain": ""}, {"task_name": "Loops/Downward for", "task_url": "https://rosettacode.org/wiki/Loops/Downward_for", "task_cat": "Iteration", "lang": "Swift", "code": "\nfor i in stride(from: 10, through: 0, by: -1) {\n  println(i)\n}\n\nfor i in lazy(0...10).reverse() {\n  println(i)\n}\n\nfor i in reverse(0 ... 10) {\n  println(i)\n}\n\nfor var i = 10; i >= 0; i-- {\n  println(i)\n}\n\nfor i in (0...10).reversed() {\n    print(i)\n}\n", "explain": "Alternately:\nIn Swift 1.2 Alternately:\nAlternately (removed in Swift 3):\nSwift 3:\n"}, {"task_name": "Loops/Downward for", "task_url": "https://rosettacode.org/wiki/Loops/Downward_for", "task_cat": "Iteration", "lang": "R", "code": "\nfor(i in 10:0) {print(i)}\n", "explain": ""}, {"task_name": "Loops/Downward for", "task_url": "https://rosettacode.org/wiki/Loops/Downward_for", "task_cat": "Iteration", "lang": "COBOL", "code": "\n\nidentification division.\nprogram-id. countdown.\nenvironment division.\ndata division.\nworking-storage section.\n01\tcounter \t\tpic 99.\n\t88\tcounter-done\tvalue 0.\n01\tcounter-disp\tpic Z9.\nprocedure division.\n\tperform with test after varying counter from 10 by -1 until counter-done\n\t\tmove counter to counter-disp\n\t\tdisplay counter-disp\n\tend-perform\n\tstop run.\n\n\nOutput:\n10\n 9\n 8\n 7\n 6\n 5\n 4\n 3\n 2\n 1\n 0\n", "explain": "free-form\n"}, {"task_name": "Loops/Downward for", "task_url": "https://rosettacode.org/wiki/Loops/Downward_for", "task_cat": "Iteration", "lang": "Ada", "code": "\nfor I in reverse 0..10 loop\n   Put_Line(Integer'Image(I));\nend loop;\n\n", "explain": ""}, {"task_name": "Loops/Downward for", "task_url": "https://rosettacode.org/wiki/Loops/Downward_for", "task_cat": "Iteration", "lang": "Julia", "code": "\nfor i in 10:-1:0\n    println(i)\nend\n\n", "explain": ""}, {"task_name": "Loops/Downward for", "task_url": "https://rosettacode.org/wiki/Loops/Downward_for", "task_cat": "Iteration", "lang": "Kotlin", "code": "\n// version 1.3.61\n\nfun main() {\n    (10 downTo 0).forEach { println(it) }\n}\n\n", "explain": ""}, {"task_name": "Loops/Downward for", "task_url": "https://rosettacode.org/wiki/Loops/Downward_for", "task_cat": "Iteration", "lang": "Perl", "code": "\nforeach (reverse 0..10) {\n  print \"$_\\n\";\n}\n", "explain": ""}, {"task_name": "Loops/Downward for", "task_url": "https://rosettacode.org/wiki/Loops/Downward_for", "task_cat": "Iteration", "lang": "Prolog", "code": "\n\nrfor(Hi,Lo,Hi)\u00a0:- Hi >= Lo.\nrfor(Hi,Lo,Val)\u00a0:- Hi > Lo, H is Hi - 1,\u00a0!, rfor(H,Lo,Val).\n\nreverse_iter\u00a0:-\n  rfor(10,0,Val), write(Val), nl, fail.\nreverse_iter.\n?- reverse_iter.\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\ntrue.\n\n", "explain": "Although Prolog has a between(Lo,Hi,Value) iterator, there is no built in equivalent for iterating descending values.  This is not a show stopper, as it's easy enough to write one.\n"}, {"task_name": "Loops/Downward for", "task_url": "https://rosettacode.org/wiki/Loops/Downward_for", "task_cat": "Iteration", "lang": "Lua", "code": "\nfor i=10,0,-1 do\n  print(i)\nend\n\n", "explain": ""}, {"task_name": "Loops/Downward for", "task_url": "https://rosettacode.org/wiki/Loops/Downward_for", "task_cat": "Iteration", "lang": "Scala", "code": "\nfor(i <- 10 to 0 by -1) println(i)\n//or\n10 to 0 by -1 foreach println\n", "explain": ""}, {"task_name": "Loops/Downward for", "task_url": "https://rosettacode.org/wiki/Loops/Downward_for", "task_cat": "Iteration", "lang": "Dart", "code": "\nvoid main() {\n  for (var i = 10; i >= 0; --i) {\n    print(i);\n  }\n}\n\n", "explain": ""}, {"task_name": "Loops/Downward for", "task_url": "https://rosettacode.org/wiki/Loops/Downward_for", "task_cat": "Iteration", "lang": "D", "code": "\nimport std.stdio: writeln;\n\nvoid main() {\n    for (int i = 10; i >= 0; --i)\n        writeln(i);\n    writeln();\n\n    foreach_reverse (i ; 0 .. 10 + 1)\n        writeln(i);\n}\n\n\nOutput:\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\n\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\n", "explain": ""}, {"task_name": "Loops/Downward for", "task_url": "https://rosettacode.org/wiki/Loops/Downward_for", "task_cat": "Iteration", "lang": "Haskell", "code": "\nimport Control.Monad\n\nmain :: IO ()\nmain = forM_ [10,9 .. 0] print\n\n", "explain": ""}, {"task_name": "Loops/Downward for", "task_url": "https://rosettacode.org/wiki/Loops/Downward_for", "task_cat": "Iteration", "lang": "Scheme", "code": "\n(do ((i 10 (- i 1)))\n    ((< i 0))\n    (display i)\n    (newline))\n", "explain": ""}, {"task_name": "Loops/Downward for", "task_url": "https://rosettacode.org/wiki/Loops/Downward_for", "task_cat": "Iteration", "lang": "PowerShell", "code": "\nfor ($i = 10; $i -ge 0; $i--) {\n    $i\n}\n\n10..0\n", "explain": "Alternatively, the range operator might be used as well which simply returns a contiguous range of integers:\n"}, {"task_name": "Loops/Downward for", "task_url": "https://rosettacode.org/wiki/Loops/Downward_for", "task_cat": "Iteration", "lang": "Logo", "code": "\n\nfor [i 10 0] [print :i]\n", "explain": "If the limit is less than the start, then FOR decrements the control variable. Otherwise, a fourth parameter could be given as a custom increment.\n"}, {"task_name": "Loops/Downward for", "task_url": "https://rosettacode.org/wiki/Loops/Downward_for", "task_cat": "Iteration", "lang": "ColdFusion", "code": "\n\n<cfloop index = \"i\" from = \"10\" to = \"0\" step = \"-1\">\n  #i#\n</cfloop>\n\n\n<cfscript>\n  for( i = 10; i <= 0; i-- )\n  {\n    writeOutput( i );\n  }\n</cfscript>\n\n", "explain": "With tags:\nWith script:\n"}, {"task_name": "Loops/Downward for", "task_url": "https://rosettacode.org/wiki/Loops/Downward_for", "task_cat": "Iteration", "lang": "F#", "code": "\n\nfor i in 10..-1..0 do\n  printfn \"%d\" i\n\n\nfor i = 10 downto 0 do\n  printfn \"%d\" i\n\n", "explain": "Using an enumerable expression:\nUsing the 'downto' keyword:\n"}, {"task_name": "Loops/Downward for", "task_url": "https://rosettacode.org/wiki/Loops/Downward_for", "task_cat": "Iteration", "lang": "Groovy", "code": "\nfor (i in (10..0)) {\n    println i\n}\n\n", "explain": ""}, {"task_name": "Loops/Downward for", "task_url": "https://rosettacode.org/wiki/Loops/Downward_for", "task_cat": "Iteration", "lang": "Zig", "code": "\nconst std = @import(\"std\");\n\npub fn main() !void {\n    var i: u8 = 11;\n    while (i > 0) {\n        i -= 1;\n        try std.io.getStdOut().writer().print(\"{d}\\n\", .{i});\n    }\n}\n\n\n\n", "explain": ""}, {"task_name": "Loops/Downward for", "task_url": "https://rosettacode.org/wiki/Loops/Downward_for", "task_cat": "Iteration", "lang": "AWK", "code": "\nBEGIN {\n  for(i=10; i>=0; i--) {\n     print i\n  }\n}\n\n", "explain": ""}]