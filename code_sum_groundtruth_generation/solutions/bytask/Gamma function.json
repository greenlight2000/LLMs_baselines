[{"task_name": "Gamma function", "task_url": "https://rosettacode.org/wiki/Gamma_function", "task_cat": "Mathematical operations", "lang": "Python", "code": "\nProcedural[edit]\nTranslation of: Ada\n_a =    ( 1.00000000000000000000, 0.57721566490153286061, -0.65587807152025388108,\n         -0.04200263503409523553, 0.16653861138229148950, -0.04219773455554433675,\n         -0.00962197152787697356, 0.00721894324666309954, -0.00116516759185906511,\n         -0.00021524167411495097, 0.00012805028238811619, -0.00002013485478078824,\n         -0.00000125049348214267, 0.00000113302723198170, -0.00000020563384169776,\n          0.00000000611609510448, 0.00000000500200764447, -0.00000000118127457049,\n          0.00000000010434267117, 0.00000000000778226344, -0.00000000000369680562,\n          0.00000000000051003703, -0.00000000000002058326, -0.00000000000000534812,\n          0.00000000000000122678, -0.00000000000000011813, 0.00000000000000000119,\n          0.00000000000000000141, -0.00000000000000000023, 0.00000000000000000002\n       )\ndef gamma (x): \n   y  = float(x) - 1.0;\n   sm = _a[-1];\n   for an in _a[-2::-1]:\n      sm = sm * y + an;\n   return 1.0 / sm;\n \n\nif __name__ == '__main__':\n    for i in range(1,11):\n        print \"  %20.14e\" % gamma(i/3.0)\n\n\nOutput:\n  2.67893853470775e+00\n  1.35411793942640e+00\n  1.00000000000000e+00\n  8.92979511569249e-01\n  9.02745292950934e-01\n  1.00000000000000e+00\n  1.19063934875900e+00\n  1.50457548825154e+00\n  1.99999999999397e+00\n  2.77815847933857e+00\nFunctional[edit]\n\nWorks with: Python version 3.7\n'''Gamma function'''\n\nfrom functools import reduce\n\n\n# gamma_\u00a0:: [Float] -> Float -> Float\ndef gamma_(tbl):\n    '''Gamma function.'''\n    def go(x):\n        y = float(x) - 1.0\n        return 1.0 / reduce(\n            lambda a, x: a * y + x,\n            tbl[-2::-1],\n            tbl[-1]\n        )\n    return lambda x: go(x)\n\n\n# TBL\u00a0:: [Float]\nTBL = [\n    1.00000000000000000000, 0.57721566490153286061,\n    -0.65587807152025388108, -0.04200263503409523553,\n    0.16653861138229148950, -0.04219773455554433675,\n    -0.00962197152787697356, 0.00721894324666309954,\n    -0.00116516759185906511, -0.00021524167411495097,\n    0.00012805028238811619, -0.00002013485478078824,\n    -0.00000125049348214267, 0.00000113302723198170,\n    -0.00000020563384169776, 0.00000000611609510448,\n    0.00000000500200764447, -0.00000000118127457049,\n    0.00000000010434267117, 0.00000000000778226344,\n    -0.00000000000369680562, 0.00000000000051003703,\n    -0.00000000000002058326, -0.00000000000000534812,\n    0.00000000000000122678, -0.00000000000000011813,\n    0.00000000000000000119, 0.00000000000000000141,\n    -0.00000000000000000023, 0.00000000000000000002\n]\n\n\n# TEST ----------------------------------------------------\n# main\u00a0:: IO()\ndef main():\n    '''Gamma function over a range of values.'''\n\n    gamma = gamma_(TBL)\n    print(\n        fTable(' i -> gamma(i/3):\\n')(repr)(lambda x: \"%0.7e\" % x)(\n            lambda x: gamma(x / 3.0)\n        )(enumFromTo(1)(10))\n    )\n\n\n# GENERIC -------------------------------------------------\n\n# enumFromTo\u00a0:: (Int, Int) -> [Int]\ndef enumFromTo(m):\n    '''Integer enumeration from m to n.'''\n    return lambda n: list(range(m, 1 + n))\n\n\n# FORMATTING -------------------------------------------------\n\n# fTable\u00a0:: String -> (a -> String) ->\n#                     (b -> String) -> (a -> b) -> [a] -> String\ndef fTable(s):\n    '''Heading -> x display function -> fx display function ->\n                     f -> xs -> tabular string.\n    '''\n    def go(xShow, fxShow, f, xs):\n        ys = [xShow(x) for x in xs]\n        w = max(map(len, ys))\n        return s + '\\n' + '\\n'.join(map(\n            lambda x, y: y.rjust(w, ' ') + ' -> ' + fxShow(f(x)),\n            xs, ys\n        ))\n    return lambda xShow: lambda fxShow: lambda f: lambda xs: go(\n        xShow, fxShow, f, xs\n    )\n\n\n# MAIN ---\nif __name__ == '__main__':\n    main()\n\n\nOutput:\n i -> gamma(i/3):\n\n 1 -> 2.6789385e+00\n 2 -> 1.3541179e+00\n 3 -> 1.0000000e+00\n 4 -> 8.9297951e-01\n 5 -> 9.0274529e-01\n 6 -> 1.0000000e+00\n 7 -> 1.1906393e+00\n 8 -> 1.5045755e+00\n 9 -> 2.0000000e+00\n10 -> 2.7781585e+00\n", "explain": "In terms of fold/reduce:\n"}, {"task_name": "Gamma function", "task_url": "https://rosettacode.org/wiki/Gamma_function", "task_cat": "Mathematical operations", "lang": "C", "code": "\nLibrary: GNU Scientific Library\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n#include <gsl/gsl_sf_gamma.h>\n#ifndef M_PI\n#define M_PI 3.14159265358979323846\n#endif\n\n/* very simple approximation */\ndouble st_gamma(double x)\n{\n  return sqrt(2.0*M_PI/x)*pow(x/M_E, x);\n}\n\n#define A 12\ndouble sp_gamma(double z)\n{\n  const int a = A;\n  static double c_space[A];\n  static double *c = NULL;\n  int k;\n  double accm;\n \n  if ( c == NULL ) {\n    double k1_factrl = 1.0; /* (k - 1)!*(-1)^k with 0!==1*/\n    c = c_space;\n    c[0] = sqrt(2.0*M_PI);\n    for(k=1; k < a; k++) {\n      c[k] = exp(a-k) * pow(a-k, k-0.5) / k1_factrl;\n\t  k1_factrl *= -k;\n    }\n  }\n  accm = c[0];\n  for(k=1; k < a; k++) {\n    accm += c[k] / ( z + k );\n  }\n  accm *= exp(-(z+a)) * pow(z+a, z+0.5); /* Gamma(z+1) */\n  return accm/z;\n}\n\nint main()\n{\n  double x;\n\n\n  printf(\"%15s%15s%15s%15s\\n\", \"Stirling\", \"Spouge\", \"GSL\", \"libm\");\n  for(x=1.0; x <= 10.0; x+=1.0) {\n    printf(\"%15.8lf%15.8lf%15.8lf%15.8lf\\n\", st_gamma(x/3.0), sp_gamma(x/3.0), \n\t   gsl_sf_gamma(x/3.0), tgamma(x/3.0));\n  }\n  return 0;\n}\n\n\nOutput:\n       Stirling         Spouge            GSL           libm\n     2.15697602     2.67893853     2.67893853     2.67893853\n     1.20285073     1.35411794     1.35411794     1.35411794\n     0.92213701     1.00000000     1.00000000     1.00000000\n     0.83974270     0.89297951     0.89297951     0.89297951\n     0.85919025     0.90274529     0.90274529     0.90274529\n     0.95950218     1.00000000     1.00000000     1.00000000\n     1.14910642     1.19063935     1.19063935     1.19063935\n     1.45849038     1.50457549     1.50457549     1.50457549\n     1.94540320     2.00000000     2.00000000     2.00000000\n     2.70976382     2.77815848     2.77815848     2.77815848\n\n", "explain": "This implements Stirling's approximation and Spouge's approximation.\n"}, {"task_name": "Gamma function", "task_url": "https://rosettacode.org/wiki/Gamma_function", "task_cat": "Mathematical operations", "lang": "C++", "code": "\n#include <math.h>\n#include <numbers>\n#include <stdio.h>\n#include <vector>\n\n// Calculate the coefficients used by Spouge's approximation (based on the C\n// implemetation)\nstd::vector<double> CalculateCoefficients(int numCoeff)\n{\n    std::vector<double> c(numCoeff);\n    double k1_factrl = 1.0;\n    c[0] = sqrt(2.0 * std::numbers::pi);\n    for(size_t k=1; k < numCoeff; k++)\n    {\n        c[k] = exp(numCoeff-k) * pow(numCoeff-k, k-0.5) / k1_factrl;\n        k1_factrl *= -(double)k;\n    }\n    return c;\n}\n\n// The Spouge approximation\ndouble Gamma(const std::vector<double>& coeffs, double x)\n{\n        const size_t numCoeff = coeffs.size();\n        double accm = coeffs[0];\n        for(size_t k=1; k < numCoeff; k++)\n        {\n            accm += coeffs[k] / ( x + k );\n        }\n        accm *= exp(-(x+numCoeff)) * pow(x+numCoeff, x+0.5);\n        return accm/x;\n}\n\nint main()\n{\n    // estimate the gamma function with 1, 4, and 10 coefficients\n    const auto coeff1 = CalculateCoefficients(1);\n    const auto coeff4 = CalculateCoefficients(4);\n    const auto coeff10 = CalculateCoefficients(10);\n\n    const auto inputs = std::vector<double>{\n        0.001, 0.01, 0.1, 0.5, 1.0,\n        1.461632145, // minimum of the gamma function\n        2, 2.5, 3, 4, 5, 6, 7, 8, 9, 10, 50, 100, \n        150 // causes overflow for this implemetation\n        };\n    \n    printf(\"%16s%16s%16s%16s%16s\\n\", \"gamma( x ) =\", \"Spouge 1\", \"Spouge 4\", \"Spouge 10\", \"built-in\");\n    for(auto x : inputs) \n    {\n        printf(\"gamma(%7.3f) = %16.10g %16.10g %16.10g %16.10g\\n\", \n            x,\n            Gamma(coeff1, x),\n            Gamma(coeff4, x), \n            Gamma(coeff10, x), \n            std::tgamma(x)); // built-in gamma function\n    }\n}\n\n\nOutput:\n    gamma( x ) =        Spouge 1        Spouge 4       Spouge 10        built-in\ngamma(  0.001) =      921.6767466      999.4237321      999.4237725      999.4237725\ngamma(  0.010) =      91.76063453      99.43258106      99.43258512      99.43258512\ngamma(  0.100) =      8.834899532      9.513507269      9.513507699      9.513507699\ngamma(  0.500) =      1.677913105      1.772453737      1.772453851      1.772453851\ngamma(  1.000) =     0.9595021757     0.9999999124                1                1\ngamma(  1.462) =     0.8562774501     0.8856030992     0.8856031944     0.8856031944\ngamma(  2.000) =     0.9727015986     0.9999998717                1                1\ngamma(  2.500) =      1.298145499      1.329340195      1.329340388      1.329340388\ngamma(  3.000) =      1.958847928      1.999999681                2                2\ngamma(  4.000) =      5.900958398      5.999998905                6                6\ngamma(  5.000) =      23.66927282      23.99999523               24               24\ngamma(  6.000) =      118.5808531      119.9999749              120              120\ngamma(  7.000) =      712.5427759      719.9998442              720              720\ngamma(  8.000) =      4993.567678       5039.99889             5040             5040\ngamma(  9.000) =      39985.50687      40319.99104            40320            40320\ngamma( 10.000) =      360142.0459      362879.9193           362880           362880\ngamma( 50.000) =  6.072887637e+62  6.082817933e+62   6.08281864e+62   6.08281864e+62\ngamma(100.000) = 9.324924563e+155 9.332620912e+155 9.332621544e+155 9.332621544e+155\ngamma(150.000) =              inf              inf              inf 3.808922638e+260\n\n", "explain": ""}, {"task_name": "Gamma function", "task_url": "https://rosettacode.org/wiki/Gamma_function", "task_cat": "Mathematical operations", "lang": "Java", "code": "\n\npublic class GammaFunction {\n\n\tpublic double st_gamma(double x){\n\t\treturn Math.sqrt(2*Math.PI/x)*Math.pow((x/Math.E), x);\n\t}\n\t\n\tpublic double la_gamma(double x){\n\t\tdouble[] p = {0.99999999999980993, 676.5203681218851, -1259.1392167224028,\n\t\t\t     \t  771.32342877765313, -176.61502916214059, 12.507343278686905,\n\t\t\t     \t  -0.13857109526572012, 9.9843695780195716e-6, 1.5056327351493116e-7};\n\t\tint g = 7;\n\t\tif(x < 0.5) return Math.PI / (Math.sin(Math.PI * x)*la_gamma(1-x));\n\n\t\tx -= 1;\n\t\tdouble a = p[0];\n\t\tdouble t = x+g+0.5;\n\t\tfor(int i = 1; i < p.length; i++){\n\t\t\ta += p[i]/(x+i);\n\t\t}\n\t\t\n\t\treturn Math.sqrt(2*Math.PI)*Math.pow(t, x+0.5)*Math.exp(-t)*a;\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\tGammaFunction test = new GammaFunction();\n\t\tSystem.out.println(\"Gamma \\t\\tStirling \\t\\tLanczos\");\n\t\tfor(double i = 1; i <= 20; i += 1){\n\t\t\tSystem.out.println(\"\" + i/10.0 + \"\\t\\t\" + test.st_gamma(i/10.0) + \"\\t\" + test.la_gamma(i/10.0));\n\t\t}\n\t}\n}\n\n\nOutput:\nGamma \t\tStirling \t\tLanczos\n0.1\t\t5.697187148977169\t9.513507698668734\n0.2\t\t3.3259984240223925\t4.590843711998803\n0.3\t\t2.3625300362696198\t2.9915689876875904\n0.4\t\t1.8414763359362354\t2.218159543757687\n0.5\t\t1.5203469010662807\t1.7724538509055159\n0.6\t\t1.307158857448356\t1.489192248812818\n0.7\t\t1.15905329211392\t1.2980553326475577\n0.8\t\t1.0533709684256085\t1.1642297137253035\n0.9\t\t0.9770615078776954\t1.0686287021193193\n1.0\t\t0.9221370088957891\t0.9999999999999998\n1.1\t\t0.8834899531687038\t0.9513507698668735\n1.2\t\t0.8577553353965909\t0.9181687423997607\n1.3\t\t0.8426782594483921\t0.8974706963062777\n1.4\t\t0.8367445486370817\t0.8872638175030757\n1.5\t\t0.8389565525264963\t0.8862269254527586\n1.6\t\t0.8486932421525738\t0.8935153492876909\n1.7\t\t0.865621471793884\t0.9086387328532916\n1.8\t\t0.8896396352879945\t0.9313837709802425\n1.9\t\t0.9208427218942293\t0.9617658319073877\n2.0\t\t0.9595021757444916\t1.0000000000000002\n\n", "explain": "Implementation of Stirling's approximation and Lanczos approximation.\n"}, {"task_name": "Gamma function", "task_url": "https://rosettacode.org/wiki/Gamma_function", "task_cat": "Mathematical operations", "lang": "C#", "code": "\n\nusing System;\nusing System.Numerics;\n\nstatic int g = 7;\nstatic double[] p = {0.99999999999980993, 676.5203681218851, -1259.1392167224028,\n\t     771.32342877765313, -176.61502916214059, 12.507343278686905,\n\t     -0.13857109526572012, 9.9843695780195716e-6, 1.5056327351493116e-7};\n\t\t \nComplex Gamma(Complex z)\n{\n    // Reflection formula\n    if (z.Real < 0.5)\n\t{\n        return Math.PI / (Complex.Sin( Math.PI * z) * Gamma(1 - z));\n\t}\n    else\n\t{\n        z -= 1;\n        Complex x = p[0];\n        for (var i = 1; i < g + 2; i++)\n\t\t{\n            x += p[i]/(z+i);\n\t\t}\n        Complex t = z + g + 0.5;\n        return Complex.Sqrt(2 * Math.PI) * (Complex.Pow(t, z + 0.5)) * Complex.Exp(-t) * x;\n\t}\n}\n\n", "explain": "This is just rewritten from the Wikipedia Lanczos article.  Works with complex numbers as well as reals.\n"}, {"task_name": "Gamma function", "task_url": "https://rosettacode.org/wiki/Gamma_function", "task_cat": "Mathematical operations", "lang": "JavaScript", "code": "\n\nfunction gamma(x) {\n    var p = [0.99999999999980993, 676.5203681218851, -1259.1392167224028,\n        771.32342877765313, -176.61502916214059, 12.507343278686905,\n        -0.13857109526572012, 9.9843695780195716e-6, 1.5056327351493116e-7\n    ];\n\n    var g = 7;\n    if (x < 0.5) {\n        return Math.PI / (Math.sin(Math.PI * x) * gamma(1 - x));\n    }\n\n    x -= 1;\n    var a = p[0];\n    var t = x + g + 0.5;\n    for (var i = 1; i < p.length; i++) {\n        a += p[i] / (x + i);\n    }\n\n    return Math.sqrt(2 * Math.PI) * Math.pow(t, x + 0.5) * Math.exp(-t) * a;\n}\n\n", "explain": "Implementation of Lanczos approximation.\n"}, {"task_name": "Gamma function", "task_url": "https://rosettacode.org/wiki/Gamma_function", "task_cat": "Mathematical operations", "lang": "Fortran", "code": "\n\nWorks with: Fortran version 2008\nWorks with: Fortran version 95 with extensions\nprogram ComputeGammaInt\n\n  implicit none\n\n  integer :: i\n\n  write(*, \"(3A15)\") \"Simpson\", \"Lanczos\", \"Builtin\"\n  do i=1, 10\n     write(*, \"(3F15.8)\") my_gamma(i/3.0), lacz_gamma(i/3.0), gamma(i/3.0)\n  end do\n\ncontains\n\n  pure function intfuncgamma(x, y) result(z)\n    real :: z\n    real, intent(in) :: x, y\n    \n    z = x**(y-1.0) * exp(-x)\n  end function intfuncgamma\n\n\n  function my_gamma(a) result(g)\n    real :: g\n    real, intent(in) :: a\n\n    real, parameter :: small = 1.0e-4\n    integer, parameter :: points = 100000\n\n    real :: infty, dx, p, sp(2, points), x\n    integer :: i\n    logical :: correction\n\n    x = a\n\n    correction = .false.\n    ! value with x<1 gives \\infty, so we use\n    ! \\Gamma(x+1) = x\\Gamma(x)\n    ! to avoid the problem\n    if ( x < 1.0 ) then\n       correction = .true.\n       x = x + 1\n    end if\n\n    ! find a \"reasonable\" infinity...\n    ! we compute this integral indeed\n    ! \\int_0^M dt t^{x-1} e^{-t}\n    ! where M is such that M^{x-1} e^{-M} \u2264 \\epsilon\n    infty = 1.0e4\n    do while ( intfuncgamma(infty, x) > small )\n       infty = infty * 10.0\n    end do\n\n    ! using simpson\n    dx = infty/real(points)\n    sp = 0.0\n    forall(i=1:points/2-1) sp(1, 2*i) = intfuncgamma(2.0*(i)*dx, x)\n    forall(i=1:points/2) sp(2, 2*i - 1) = intfuncgamma((2.0*(i)-1.0)*dx, x)\n    g = (intfuncgamma(0.0, x) + 2.0*sum(sp(1,:)) + 4.0*sum(sp(2,:)) + &\n         intfuncgamma(infty, x))*dx/3.0\n\n    if ( correction ) g = g/a\n\n  end function my_gamma\n\n  \n  recursive function lacz_gamma(a) result(g)\n    real, intent(in) :: a\n    real :: g\n\n    real, parameter :: pi = 3.14159265358979324\n    integer, parameter :: cg = 7\n\n    ! these precomputed values are taken by the sample code in Wikipedia,\n    ! and the sample itself takes them from the GNU Scientific Library\n    real, dimension(0:8), parameter :: p = &\n         (/ 0.99999999999980993, 676.5203681218851, -1259.1392167224028, &\n         771.32342877765313, -176.61502916214059, 12.507343278686905, &\n         -0.13857109526572012, 9.9843695780195716e-6, 1.5056327351493116e-7 /)\n\n    real :: t, w, x\n    integer :: i\n\n    x = a\n\n    if ( x < 0.5 ) then\n       g = pi / ( sin(pi*x) * lacz_gamma(1.0-x) )\n    else\n       x = x - 1.0\n       t = p(0)\n       do i=1, cg+2\n          t = t + p(i)/(x+real(i))\n       end do\n       w = x + real(cg) + 0.5\n       g = sqrt(2.0*pi) * w**(x+0.5) * exp(-w) * t\n    end if\n  end function lacz_gamma\n\nend program ComputeGammaInt\n\n\nOutput:\n        Simpson        Lanczos        Builtin\n     2.65968132     2.67893744     2.67893839\n     1.35269761     1.35411859     1.35411787\n     1.00000060     1.00000024     1.00000000\n     0.88656044     0.89297968     0.89297950\n     0.90179849     0.90274525     0.90274531\n     0.99999803     1.00000036     1.00000000\n     1.19070935     1.19063985     1.19063926\n     1.50460517     1.50457609     1.50457561\n     2.00000286     2.00000072     2.00000000\n     2.77815390     2.77816010     2.77815843\n", "explain": "This code shows two methods: Numerical Integration through Simpson formula, and Lanczos approximation. The results of testing are printed altogether with the values given by the function gamma; this function is defined in the Fortran 2008 standard, and supported by GNU Fortran (and other vendors) as extension; if not present in your compiler, you can remove the last part of the print in order to get it compiled with any Fortran 95 compliant compiler.\n"}, {"task_name": "Gamma function", "task_url": "https://rosettacode.org/wiki/Gamma_function", "task_cat": "Mathematical operations", "lang": "Go", "code": "\npackage main\n\nimport (\n    \"fmt\"\n    \"math\"\n)\n\nfunc main() {\n    fmt.Println(\"    x               math.Gamma                 Lanczos7\")\n    for _, x := range []float64{-.5, .1, .5, 1, 1.5, 2, 3, 10, 140, 170} {\n        fmt.Printf(\"%5.1f %24.16g %24.16g\\n\", x, math.Gamma(x), lanczos7(x))\n    }\n}\n\nfunc lanczos7(z float64) float64 {\n    t := z + 6.5\n    x := .99999999999980993 +\n        676.5203681218851/z -\n        1259.1392167224028/(z+1) +\n        771.32342877765313/(z+2) -\n        176.61502916214059/(z+3) +\n        12.507343278686905/(z+4) -\n        .13857109526572012/(z+5) +\n        9.9843695780195716e-6/(z+6) +\n        1.5056327351493116e-7/(z+7)\n    return math.Sqrt2 * math.SqrtPi * math.Pow(t, z-.5) * math.Exp(-t) * x\n}\n\n\nOutput:\n    x               math.Gamma                 Lanczos7\n -0.5       -3.544907701811032       -3.544907701811087\n  0.1        9.513507698668732        9.513507698668752\n  0.5        1.772453850905516        1.772453850905517\n  1.0                        1                        1\n  1.5       0.8862269254527579       0.8862269254527587\n  2.0                        1                        1\n  3.0                        2                        2\n 10.0                   362880        362880.0000000015\n140.0    9.61572319694107e+238   9.615723196940201e+238\n170.0   4.269068009004746e+304                     +Inf\n\n", "explain": ""}, {"task_name": "Gamma function", "task_url": "https://rosettacode.org/wiki/Gamma_function", "task_cat": "Mathematical operations", "lang": "Delphi", "code": "\nLibrary:  System.SysUtils\nLibrary:  System.Math\nTranslation of: Go\nprogram Gamma_function;\n\n{$APPTYPE CONSOLE}\n\nuses\n  System.SysUtils,\n  System.Math;\n\nfunction lanczos7(z: double): Double;\nbegin\n  var t := z + 6.5;\n  var x := 0.99999999999980993 + 676.5203681218851 / z - 1259.1392167224028 / (z\n    + 1) + 771.32342877765313 / (z + 2) - 176.61502916214059 / (z + 3) +\n    12.507343278686905 / (z + 4) - 0.13857109526572012 / (z + 5) +\n    9.9843695780195716e-6 / (z + 6) + 1.5056327351493116e-7 / (z + 7);\n\n  Result := Sqrt(2) * Sqrt(pi) * Power(t, z - 0.5) * exp(-t) * x;\nend;\n\nbegin\n  var xs: TArray<double> := [-0.5, 0.1, 0.5, 1, 1.5, 2, 3, 10, 140, 170];\n  writeln('    x              Lanczos7');\n  for var x in xs do\n    writeln(format('%5.1f %24.16g', [x, lanczos7(x)]));\n  readln;\nend.\n\n\nOutput:\n    x              Lanczos7\n -0,5       -3,544907701811089\n  0,1        9,513507698668747\n  0,5        1,772453850905517\n  1,0                        1\n  1,5       0,8862269254527583\n  2,0                        1\n  3,0        2,000000000000002\n 10,0        362880,0000000007\n140,0    9,615723196940235E238\n170,0    4,269068009004271E304\n", "explain": ""}, {"task_name": "Gamma function", "task_url": "https://rosettacode.org/wiki/Gamma_function", "task_cat": "Mathematical operations", "lang": "Ruby", "code": "\nTaylor series[edit]\nTranslation of: Ada\n$a = [ 1.00000_00000_00000_00000,  0.57721_56649_01532_86061, -0.65587_80715_20253_88108,\n      -0.04200_26350_34095_23553,  0.16653_86113_82291_48950, -0.04219_77345_55544_33675,\n      -0.00962_19715_27876_97356,  0.00721_89432_46663_09954, -0.00116_51675_91859_06511,\n      -0.00021_52416_74114_95097,  0.00012_80502_82388_11619, -0.00002_01348_54780_78824,\n      -0.00000_12504_93482_14267,  0.00000_11330_27231_98170, -0.00000_02056_33841_69776,\n       0.00000_00061_16095_10448,  0.00000_00050_02007_64447, -0.00000_00011_81274_57049,\n       0.00000_00001_04342_67117,  0.00000_00000_07782_26344, -0.00000_00000_03696_80562,\n       0.00000_00000_00510_03703, -0.00000_00000_00020_58326, -0.00000_00000_00005_34812,\n       0.00000_00000_00001_22678, -0.00000_00000_00000_11813,  0.00000_00000_00000_00119,\n       0.00000_00000_00000_00141, -0.00000_00000_00000_00023,  0.00000_00000_00000_00002 ]\n \ndef gamma(x)\n  y = Float(x) - 1\n  1.0 / $a.reverse.inject {|sum, an| sum * y + an}\nend\n\n(1..10).each {|i| puts format(\"%.14e\", gamma(i/3.0))}\n\n\nOutput:\n2.67893853470775e+00\n1.35411793942640e+00\n1.00000000000000e+00\n8.92979511569249e-01\n9.02745292950934e-01\n1.00000000000000e+00\n1.19063934875900e+00\n1.50457548825154e+00\n1.99999999999397e+00\n2.77815847933857e+00\nBuilt in[edit]\n(1..10).each{|i| puts Math.gamma(i/3.0)}\n\n\nOutput:\n2.678938534707748\n1.3541179394264005\n1.0\n0.8929795115692493\n0.9027452929509336\n1.0\n1.190639348758999\n1.5045754882515558\n2.0\n2.7781584804376647\n\n", "explain": ""}, {"task_name": "Gamma function", "task_url": "https://rosettacode.org/wiki/Gamma_function", "task_cat": "Mathematical operations", "lang": "R", "code": "\n\nTranslation of: Octave\nstirling <- function(z) sqrt(2*pi/z) * (exp(-1)*z)^z\n     \nnemes <- function(z) sqrt(2*pi/z) * (exp(-1)*(z + (12*z - (10*z)^-1)^-1))^z\n\nlanczos <- function(z)\n{\n   if(length(z) > 1)\n   {\n      sapply(z, lanczos)\n   } else\n   {\n     g <- 7\n      p <- c(0.99999999999980993, 676.5203681218851, -1259.1392167224028,\n        771.32342877765313, -176.61502916214059, 12.507343278686905,\n        -0.13857109526572012, 9.9843695780195716e-6, 1.5056327351493116e-7)\n      z <- as.complex(z) \n      if(Re(z) < 0.5) \n      {\n         pi / (sin(pi*z) * lanczos(1-z)) \n      } else\n      {\n         z <- z - 1\n         x <- p[1]\n         for (i in 1:8) {\n           x <- x+p[i+1]/(z+i)\n         }\n         tt <- z + g + 0.5\n         sqrt(2*pi) * tt^(z+0.5) * exp(-tt) * x\n      }\n   }   \n}\n\nspouge <- function(z, a=49)\n{\n   if(length(z) > 1)\n   {\n      sapply(z, spouge)\n   } else\n   {\n      z <- z-1\n      k <- seq.int(1, a-1)\n      ck <- rep(c(1, -1), len=a-1) / factorial(k-1) * (a-k)^(k-0.5) * exp(a-k)\n      (z + a)^(z+0.5) * exp(-z - a) * (sqrt(2*pi) + sum(ck/(z+k)))\n   }\n}\n\n# Checks\nz <- (1:10)/3\nall.equal(gamma(z), stirling(z))             # Mean relative difference: 0.07181942\nall.equal(gamma(z), nemes(z))                # Mean relative difference: 0.003460549\nall.equal(as.complex(gamma(z)), lanczos(z))  # TRUE\nall.equal(gamma(z), spouge(z))               # TRUE\ndata.frame(z=z, stirling=stirling(z), nemes=nemes(z), lanczos=lanczos(z), spouge=spouge(z), builtin=gamma(z))\n\n\nOutput:\n          z  stirling     nemes      lanczos    spouge   builtin\n1  0.3333333 2.1569760 2.6290752 2.6789385+0i 2.6789385 2.6789385\n2  0.6666667 1.2028507 1.3515736 1.3541179+0i 1.3541179 1.3541179\n3  1.0000000 0.9221370 0.9996275 1.0000000+0i 1.0000000 1.0000000\n4  1.3333333 0.8397427 0.8928835 0.8929795+0i 0.8929795 0.8929795\n5  1.6666667 0.8591902 0.9027098 0.9027453+0i 0.9027453 0.9027453\n6  2.0000000 0.9595022 0.9999831 1.0000000+0i 1.0000000 1.0000000\n7  2.3333333 1.1491064 1.1906296 1.1906393+0i 1.1906393 1.1906393\n8  2.6666667 1.4584904 1.5045690 1.5045755+0i 1.5045755 1.5045755\n9  3.0000000 1.9454032 1.9999951 2.0000000+0i 2.0000000 2.0000000\n10 3.3333333 2.7097638 2.7781544 2.7781585+0i 2.7781585 2.7781585\n\n", "explain": "Lanczos' approximation is loosely converted from the Octave code.\n"}, {"task_name": "Gamma function", "task_url": "https://rosettacode.org/wiki/Gamma_function", "task_cat": "Mathematical operations", "lang": "Visual_FoxPro", "code": "\n\nLOCAL i As Integer, x As Double, o As lanczos\nCLOSE DATABASES ALL\nCLEAR\nCREATE CURSOR results (ZVal B(1), GamVal B(15))\nINDEX ON zval TAG ZVal COLLATE \"Machine\"\nSET ORDER TO 0\no = CREATEOBJECT(\"lanczos\")\nFOR i = 1 TO 20\nx = i/10\n    INSERT INTO results VALUES (x, o.Gamma(x))\nENDFOR\nUPDATE results SET GamVal = ROUND(GamVal, 0) WHERE ZVal = INT(ZVal)\n*!* This just creates the output text - it is not part of the algorithm\nDO cursor2txt.prg WITH \"results\", .T.\n\nDEFINE CLASS lanczos As Session\n#DEFINE FPF 5.5\n#DEFINE HALF 0.5\n#DEFINE PY PI()\nDIMENSION LanCoeff[7]\nnSize = 0\n\nPROCEDURE Init\nDODEFAULT()\nWITH THIS\n    .LanCoeff[1] = 1.000000000190015\n    .LanCoeff[2] = 76.18009172947146\n    .LanCoeff[3] = -86.50532032941677\n    .LanCoeff[4] = 24.01409824083091\n    .LanCoeff[5] = -1.231739572450155\n    .LanCoeff[6] = 0.0012086509738662\n    .LanCoeff[7] = -0.000005395239385\n    .nSize = ALEN(.LanCoeff)\nENDWITH \nENDPROC\n\nFUNCTION Gamma(z)\nRETURN EXP(THIS.LogGamma(z))\nENDFUNC\n\nFUNCTION LogGamma(z)\nLOCAL a As Double, b As Double, i As Integer, j As Integer, lg As Double\nIF z < 0.5\n    lg = LOG(PY/SIN(PY*z)) - THIS.LogGamma(1 - z)\nELSE\n    WITH THIS\t\n\tz = z - 1 \n\tb = z + FPF\n\ta = .LanCoeff[1]\n\tFOR i = 2 TO .nSize\n\t    j = i - 1\n\t    a = a + .LanCoeff[i]/(z + j)\n\tENDFOR\n\tlg = (LOG(SQRT(2*PY)) + LOG(a) - b) + LOG(b)*(z + HALF)\n    ENDWITH\t\nENDIF\nRETURN lg\nENDFUNC\t\n\nENDDEFINE\n\n\nOutput:\nzval\tgamval\n0.1\t9.513507698669704\n0.2\t4.590843712000122\n0.3\t2.991568987689402\n0.4\t2.218159543760185\n0.5\t1.772453850902053\n0.6\t1.489192248811141\n0.7\t1.298055332646772\n0.8\t1.164229713724969\n0.9\t1.068628702119210\n1.0\t1.000000000000000\n1.1\t0.951350769866919\n1.2\t0.918168742399821\n1.3\t0.897470696306335\n1.4\t0.887263817503125\n1.5\t0.886226925452796\n1.6\t0.893515349287718\n1.7\t0.908638732853309\n1.8\t0.931383770980253\n1.9\t0.961765831907391\n2.0\t1.000000000000000\n\n", "explain": "Translation of BBC Basic but with OOP extensions. Also some ideas from Numerical Methods (Press et al).\n"}, {"task_name": "Gamma function", "task_url": "https://rosettacode.org/wiki/Gamma_function", "task_cat": "Mathematical operations", "lang": "Ada", "code": "\n\nfunction Gamma (X : Long_Float) return Long_Float is\n   A : constant array (0..29) of Long_Float :=\n       (  1.00000_00000_00000_00000,\n          0.57721_56649_01532_86061,\n         -0.65587_80715_20253_88108,\n         -0.04200_26350_34095_23553,\n          0.16653_86113_82291_48950,\n         -0.04219_77345_55544_33675,\n         -0.00962_19715_27876_97356,\n          0.00721_89432_46663_09954,\n         -0.00116_51675_91859_06511,\n         -0.00021_52416_74114_95097,\n          0.00012_80502_82388_11619,\n         -0.00002_01348_54780_78824,\n         -0.00000_12504_93482_14267,\n          0.00000_11330_27231_98170,\n         -0.00000_02056_33841_69776,\n          0.00000_00061_16095_10448,\n          0.00000_00050_02007_64447,\n         -0.00000_00011_81274_57049,\n          0.00000_00001_04342_67117,\n          0.00000_00000_07782_26344,\n         -0.00000_00000_03696_80562,\n          0.00000_00000_00510_03703,\n         -0.00000_00000_00020_58326,\n         -0.00000_00000_00005_34812,\n          0.00000_00000_00001_22678,\n         -0.00000_00000_00000_11813,\n          0.00000_00000_00000_00119,\n          0.00000_00000_00000_00141,\n         -0.00000_00000_00000_00023,\n          0.00000_00000_00000_00002\n       );\n   Y   : constant Long_Float := X - 1.0;\n   Sum : Long_Float := A (A'Last);\nbegin\n   for N in reverse A'First..A'Last - 1 loop\n      Sum := Sum * Y + A (N);\n   end loop;\n   return 1.0 / Sum;\nend Gamma;\n\n\nwith Ada.Text_IO;  use Ada.Text_IO;\nwith Gamma;\n\nprocedure Test_Gamma is\nbegin\n   for I in 1..10 loop\n      Put_Line (Long_Float'Image (Gamma (Long_Float (I) / 3.0)));\n   end loop;\nend Test_Gamma;\n\n\nOutput:\n 2.67893853470775E+00\n 1.35411793942640E+00\n 1.00000000000000E+00\n 8.92979511569249E-01\n 9.02745292950934E-01\n 1.00000000000000E+00\n 1.19063934875900E+00\n 1.50457548825154E+00\n 1.99999999999397E+00\n 2.77815847933858E+00\n\n", "explain": "The implementation uses Taylor series coefficients of \u0393(x+1)-1, |x| < \u221e. \nThe coefficients are taken from Mathematical functions and their approximations \nby Yudell L. Luke.\nTest program:\n"}, {"task_name": "Gamma function", "task_url": "https://rosettacode.org/wiki/Gamma_function", "task_cat": "Mathematical operations", "lang": "Julia", "code": "\nWorks with: Julia version 0.6\n\n@show gamma(1)\n\n\nusing QuadGK\ngammaquad(t::Float64) = first(quadgk(x -> x ^ (t - 1) * exp(-x), zero(t), Inf, reltol = 100eps(t)))\n@show gammaquad(1.0)\n\n\nOutput:\ngamma(1) = 1.0\ngammaquad(1.0) = 0.9999999999999999\nWorks with: Julia version 1.0\n\nusing SpecialFunctions\ngamma(1/2) - sqrt(pi)\n\n\nOutput:\n2.220446049250313e-16\n", "explain": "Built-in function:\nBy adaptive Gauss-Kronrod integration:\nLibrary function:\n"}, {"task_name": "Gamma function", "task_url": "https://rosettacode.org/wiki/Gamma_function", "task_cat": "Mathematical operations", "lang": "Kotlin", "code": "\n// version 1.0.6\n\nfun gammaStirling(x: Double): Double = Math.sqrt(2.0 * Math.PI / x) * Math.pow(x / Math.E, x)\n\nfun gammaLanczos(x: Double): Double {\n    var xx = x\n    val p = doubleArrayOf(\n        0.99999999999980993, \n      676.5203681218851,\n    -1259.1392167224028,\t\t\t     \t  \n      771.32342877765313,\n     -176.61502916214059,\n       12.507343278686905,\n       -0.13857109526572012,\n        9.9843695780195716e-6,\n        1.5056327351493116e-7\n    )\n    val g = 7\n    if (xx < 0.5) return Math.PI / (Math.sin(Math.PI * xx) * gammaLanczos(1.0 - xx))\n    xx--\n    var a = p[0]\n    val t = xx + g + 0.5\n    for (i in 1 until p.size) a += p[i] / (xx + i)\n    return Math.sqrt(2.0 * Math.PI) * Math.pow(t, xx + 0.5) * Math.exp(-t) * a\n}\n\nfun main(args: Array<String>) {\n    println(\" x\\tStirling\\t\\tLanczos\\n\")\n    for (i in 1 .. 20) {\n        val d = i / 10.0\n        print(\"%4.2f\\t\".format(d))\n        print(\"%17.15f\\t\".format(gammaStirling(d)))\n        println(\"%17.15f\".format(gammaLanczos(d)))\n    }\n}\n\n\nOutput:\n x      Stirling                Lanczos\n\n0.10    5.697187148977170       9.513507698668736\n0.20    3.325998424022393       4.590843711998803\n0.30    2.362530036269620       2.991568987687590\n0.40    1.841476335936235       2.218159543757687\n0.50    1.520346901066281       1.772453850905516\n0.60    1.307158857448356       1.489192248812818\n0.70    1.159053292113920       1.298055332647558\n0.80    1.053370968425609       1.164229713725304\n0.90    0.977061507877695       1.068628702119319\n1.00    0.922137008895789       1.000000000000000\n1.10    0.883489953168704       0.951350769866874\n1.20    0.857755335396591       0.918168742399761\n1.30    0.842678259448392       0.897470696306278\n1.40    0.836744548637082       0.887263817503076\n1.50    0.838956552526496       0.886226925452759\n1.60    0.848693242152574       0.893515349287691\n1.70    0.865621471793884       0.908638732853292\n1.80    0.889639635287995       0.931383770980243\n1.90    0.920842721894229       0.961765831907388\n2.00    0.959502175744492       1.000000000000000\n\n", "explain": ""}, {"task_name": "Gamma function", "task_url": "https://rosettacode.org/wiki/Gamma_function", "task_cat": "Mathematical operations", "lang": "Perl", "code": "\nuse strict;\nuse warnings;\nuse constant pi => 4*atan2(1, 1);\nuse constant e  => exp(1);\n\n# Normally would be:  use Math::MPFR\n# but this will use it if it's installed and ignore otherwise\nmy $have_MPFR = eval { require Math::MPFR; Math::MPFR->import(); 1; };\n \nsub Gamma {\n    my $z = shift;\n    my $method = shift // 'lanczos';\n    if ($method eq 'lanczos') {\n        use constant g => 9;\n        $z <  .5 ?  pi / sin(pi * $z) / Gamma(1 - $z, $method) :\n        sqrt(2* pi) *\n        ($z + g - .5)**($z - .5) *\n        exp(-($z + g - .5)) *\n        do {\n            my @coeff = qw{\n            1.000000000000000174663\n        5716.400188274341379136\n      -14815.30426768413909044\n       14291.49277657478554025\n       -6348.160217641458813289\n        1301.608286058321874105\n        -108.1767053514369634679\n           2.605696505611755827729\n          -0.7423452510201416151527e-2\n           0.5384136432509564062961e-7\n          -0.4023533141268236372067e-8\n            };\n            my ($sum, $i) = (shift(@coeff), 0);\n            $sum += $_ / ($z + $i++) for @coeff;\n            $sum;\n        }\n    } elsif ($method eq 'taylor') {\n        $z <  .5 ? Gamma($z+1, $method)/$z     :\n        $z > 1.5 ? ($z-1)*Gamma($z-1, $method) :\n\tdo {\n\t    my $s = 0; ($s *= $z-1) += $_ for qw{\n\t    0.00000000000000000002 -0.00000000000000000023 0.00000000000000000141\n\t    0.00000000000000000119 -0.00000000000000011813 0.00000000000000122678\n\t    -0.00000000000000534812 -0.00000000000002058326 0.00000000000051003703\n\t    -0.00000000000369680562 0.00000000000778226344 0.00000000010434267117\n\t    -0.00000000118127457049 0.00000000500200764447 0.00000000611609510448\n\t    -0.00000020563384169776 0.00000113302723198170 -0.00000125049348214267\n\t    -0.00002013485478078824 0.00012805028238811619 -0.00021524167411495097\n\t    -0.00116516759185906511 0.00721894324666309954 -0.00962197152787697356\n\t    -0.04219773455554433675 0.16653861138229148950 -0.04200263503409523553\n\t    -0.65587807152025388108 0.57721566490153286061 1.00000000000000000000\n\t    }; 1/$s;\n\t}\n    } elsif ($method eq 'stirling') {\n        no warnings qw(recursion);\n        $z < 100 ? Gamma($z + 1, $method)/$z :\n        sqrt(2*pi*$z)*($z/e + 1/(12*e*$z))**$z / $z;\n    } elsif ($method eq 'MPFR') {\n        my $result = Math::MPFR->new();\n        Math::MPFR::Rmpfr_gamma($result, Math::MPFR->new($z), 0);\n        $result;\n    } else { die \"unknown method '$method'\" }\n}\n \nfor my $method (qw(MPFR lanczos taylor stirling)) {\n    next if $method eq 'MPFR' && !$have_MPFR;\n    printf \"%10s: \", $method;\n    print join(' ', map { sprintf \"%.12f\", Gamma($_/3, $method) } 1 .. 10);\n    print \"\\n\";\n}\n\n\nOutput:\n      MPFR: 2.678938534708 1.354117939426 1.000000000000 0.892979511569 0.902745292951 1.000000000000 1.190639348759 1.504575488252 2.000000000000 2.778158480438\n   lanczos: 2.678938534708 1.354117939426 1.000000000000 0.892979511569 0.902745292951 1.000000000000 1.190639348759 1.504575488252 2.000000000000 2.778158480438\n    taylor: 2.678938534708 1.354117939426 1.000000000000 0.892979511569 0.902745292951 1.000000000000 1.190639348759 1.504575488252 2.000000000000 2.778158480438\n  stirling: 2.678938532866 1.354117938504 0.999999999306 0.892979510955 0.902745292336 0.999999999306 1.190639347940 1.504575487227 1.999999998611 2.778158478527\n", "explain": ""}, {"task_name": "Gamma function", "task_url": "https://rosettacode.org/wiki/Gamma_function", "task_cat": "Mathematical operations", "lang": "Prolog", "code": "\n\ngamma_coefficients(\n     [ 1.00000000000000000000000,  0.57721566490153286060651, -0.65587807152025388107701,\n      -0.04200263503409523552900,  0.16653861138229148950170, -0.04219773455554433674820,\n      -0.00962197152787697356211,  0.00721894324666309954239, -0.00116516759185906511211,\n      -0.00021524167411495097281,  0.00012805028238811618615, -0.00002013485478078823865,\n      -0.00000125049348214267065,  0.00000113302723198169588, -0.00000020563384169776071,\n       0.00000000611609510448141,  0.00000000500200764446922, -0.00000000118127457048702,\n       0.00000000010434267116911,  0.00000000000778226343990, -0.00000000000369680561864,\n       0.00000000000051003702874, -0.00000000000002058326053, -0.00000000000000534812253,\n       0.00000000000000122677862, -0.00000000000000011812593,  0.00000000000000000118669,\n       0.00000000000000000141238, -0.00000000000000000022987,  0.00000000000000000001714\n    ]).\n\ntolerance(1e-17).\n\ngamma(X, _) :- X =< 0.0, !, fail.\ngamma(X, Y) :-\n    X < 1.0, small_gamma(X, Y), !.\ngamma(1, 1) :- !.\ngamma(1.0, 1) :- !.\ngamma(X, Y) :-\n    X1 is X - 1,\n    gamma(X1, Y1),\n    Y is X1 * Y1.\n    \nsmall_gamma(X, Y) :-\n    gamma_coefficients(Cs),\n    recip_gamma(X, 1.0, Cs, 1.0, 0.0, Y0),\n    Y is 1 / Y0.\n\nrecip_gamma(_, _, [], _, Y, Y) :- !.\nrecip_gamma(_, _, [], X0, X1, Y) :- tolerance(Tol), abs(X1 - X0) < Tol, Y = X1, !. % early exit\nrecip_gamma(X, PrevPow, [C|Cs], _, X1, Y) :-\n    Power is PrevPow * X,\n    X2 is X1 + C*Power,\n    recip_gamma(X, Power, Cs, X1, X2, Y).\n\n\nOutput:\n% see how close gamma(0.5) is to the square root of pi.\n?- gamma(0.5,X), Y is sqrt(pi), Err is abs(X - Y).\nX = 1.772453850905516,\nY = 1.7724538509055159,\nErr = 2.220446049250313e-16.\n\n?- gamma(1.5,X).\nX = 0.886226925452758.\n\n?- gamma(4.9,X).\nX = 20.667385961857857.\n\n?- gamma(5,X).\nX = 24.\n\n?- gamma(5.01,X).\nX = 24.364473447872836.\n\n?- gamma(6.9,X).\nX = 597.4941281573107.\n\n?- gamma(6.95,X).\nX = 655.7662628554252.\n\n?- gamma(7,X).\nX = 720.\n\n% 100!\n?- gamma(101.0,X).\nX = 9.33262154439441e+157.\n\n% Note when passed integer, gamma(101) returns full big int precision\n?- gamma(101,X).\nX = 93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000.\n\n?- gamma(100.98,X).\nX = 8.510619261391532e+157.\n\n", "explain": "This version matches Wolfram Alpha to within a few digits at the end, so the last few digits are a bit off. There's an early check to stop evaluating coefficients once the desired accuracy is reached.  Removing this check does not improve accuracy vs. Wolfram Alpha.\n"}, {"task_name": "Gamma function", "task_url": "https://rosettacode.org/wiki/Gamma_function", "task_cat": "Mathematical operations", "lang": "Lua", "code": "\n\ngamma, coeff, quad, qui, set = 0.577215664901, -0.65587807152056, -0.042002635033944, 0.16653861138228,\t-0.042197734555571\nfunction recigamma(z)\n  return z + gamma * z^2 + coeff * z^3 + quad * z^4 + qui * z^5 + set * z^6\nend\n\nfunction gammafunc(z)\n  if z == 1 then return 1\n  elseif math.abs(z) <= 0.5 then return 1 / recigamma(z)\n  else return (z - 1) * gammafunc(z-1)\n  end\nend\n\n", "explain": "Uses the wp:Reciprocal gamma function to calculate small values.\n"}, {"task_name": "Gamma function", "task_url": "https://rosettacode.org/wiki/Gamma_function", "task_cat": "Mathematical operations", "lang": "Scala", "code": "\nimport java.util.Locale._\n\nobject Gamma {\n  def stGamma(x:Double):Double=math.sqrt(2*math.Pi/x)*math.pow((x/math.E), x)\n  \n  def laGamma(x:Double):Double={\n    val p=Seq(676.5203681218851, -1259.1392167224028, 771.32342877765313, \n             -176.61502916214059, 12.507343278686905, -0.13857109526572012,\n                9.9843695780195716e-6, 1.5056327351493116e-7)\n\n    if(x < 0.5) {\n      math.Pi/(math.sin(math.Pi*x)*laGamma(1-x))\n    } else {\n      val x2=x-1\n      val t=x2+7+0.5\n      val a=p.zipWithIndex.foldLeft(0.99999999999980993)((r,v) => r+v._1/(x2+v._2+1))\n      math.sqrt(2*math.Pi)*math.pow(t, x2+0.5)*math.exp(-t)*a\n    }\n  }\n  \n  def main(args: Array[String]): Unit = {\n    println(\"Gamma    Stirling             Lanczos\")\n    for(x <- 0.1 to 2.0 by 0.1)\n      println(\"%.1f  -> \u00a0%.16f  \u00a0%.16f\".formatLocal(ENGLISH, x, stGamma(x), laGamma(x)))\n  }\n}\n\n\nOutput:\nGamma    Stirling             Lanczos\n0.1  ->  5.6971871489771690   9.5135076986687340\n0.2  ->  3.3259984240223925   4.5908437119988030\n0.3  ->  2.3625300362696198   2.9915689876875904\n0.4  ->  1.8414763359362354   2.2181595437576870\n0.5  ->  1.5203469010662807   1.7724538509055159\n0.6  ->  1.3071588574483560   1.4891922488128180\n0.7  ->  1.1590532921139200   1.2980553326475577\n0.8  ->  1.0533709684256085   1.1642297137253035\n0.9  ->  0.9770615078776956   1.0686287021193193\n1.0  ->  0.9221370088957892   1.0000000000000002\n1.1  ->  0.8834899531687038   0.9513507698668728\n1.2  ->  0.8577553353965909   0.9181687423997607\n1.3  ->  0.8426782594483921   0.8974706963062777\n1.4  ->  0.8367445486370817   0.8872638175030760\n1.5  ->  0.8389565525264964   0.8862269254527583\n1.6  ->  0.8486932421525738   0.8935153492876904\n1.7  ->  0.8656214717938840   0.9086387328532912\n1.8  ->  0.8896396352879945   0.9313837709802430\n1.9  ->  0.9208427218942294   0.9617658319073875\n2.0  ->  0.9595021757444918   1.0000000000000010\n", "explain": ""}, {"task_name": "Gamma function", "task_url": "https://rosettacode.org/wiki/Gamma_function", "task_cat": "Mathematical operations", "lang": "D", "code": "\nimport std.stdio, std.math, std.mathspecial;\n\nreal taylorGamma(in real x) pure nothrow @safe @nogc {\n    static immutable real[30] table = [\n     0x1p+0,                    0x1.2788cfc6fb618f4cp-1,\n    -0x1.4fcf4026afa2dcecp-1,  -0x1.5815e8fa27047c8cp-5,\n     0x1.5512320b43fbe5dep-3,  -0x1.59af103c340927bep-5,\n    -0x1.3b4af28483e214e4p-7,   0x1.d919c527f60b195ap-8,\n    -0x1.317112ce3a2a7bd2p-10, -0x1.c364fe6f1563ce9cp-13,\n     0x1.0c8a78cd9f9d1a78p-13, -0x1.51ce8af47eabdfdcp-16,\n    -0x1.4fad41fc34fbb2p-20,    0x1.302509dbc0de2c82p-20,\n    -0x1.b9986666c225d1d4p-23,  0x1.a44b7ba22d628acap-28,\n     0x1.57bc3fc384333fb2p-28, -0x1.44b4cedca388f7c6p-30,\n     0x1.cae7675c18606c6p-34,   0x1.11d065bfaf06745ap-37,\n    -0x1.0423bac8ca3faaa4p-38,  0x1.1f20151323cd0392p-41,\n    -0x1.72cb88ea5ae6e778p-46, -0x1.815f72a05f16f348p-48,\n     0x1.6198491a83bccbep-50,  -0x1.10613dde57a88bd6p-53,\n     0x1.5e3fee81de0e9c84p-60,  0x1.a0dc770fb8a499b6p-60,\n    -0x1.0f635344a29e9f8ep-62,  0x1.43d79a4b90ce8044p-66];\n\n    immutable real y = x - 1.0L;\n    real sm = table[$ - 1];\n    foreach_reverse (immutable an; table[0 .. $ - 1])\n        sm = sm * y + an;\n    return 1.0L / sm;\n}\n\nreal lanczosGamma(real z) pure nothrow @safe @nogc {\n    // Coefficients used by the GNU Scientific Library.\n    // http://en.wikipedia.org/wiki/Lanczos_approximation\n    enum g = 7;\n    static immutable real[9] table =\n        [    0.99999_99999_99809_93,\n           676.52036_81218_851,\n         -1259.13921_67224_028,\n           771.32342_87776_5313,\n          -176.61502_91621_4059,\n            12.50734_32786_86905,\n            -0.13857_10952_65720_12,\n             9.98436_95780_19571_6e-6,\n             1.50563_27351_49311_6e-7];\n\n    // Reflection formula.\n    if (z < 0.5L) {\n        return PI / (sin(PI * z) * lanczosGamma(1 - z));\n    } else {\n        z -= 1;\n        real x = table[0];\n        foreach (immutable i; 1 .. g + 2)\n            x += table[i] / (z + i);\n        immutable real t = z + g + 0.5L;\n        return sqrt(2 * PI) * t ^^ (z + 0.5L) * exp(-t) * x;\n    }\n}\n\nvoid main() {\n    foreach (immutable i; 1 .. 11) {\n        immutable real x = i / 3.0L;\n        writefln(\"%f: %20.19e %20.19e %20.19e\", x,\n                 x.taylorGamma, x.lanczosGamma, x.gamma);\n    }\n}\n\n\nOutput:\n0.333333: 2.6789385347077476335e+00 2.6789385347077470551e+00 2.6789385347077476339e+00\n0.666667: 1.3541179394264004169e+00 1.3541179394264007092e+00 1.3541179394264004170e+00\n1.000000: 1.0000000000000000000e+00 1.0000000000000002126e+00 1.0000000000000000000e+00\n1.333333: 8.9297951156924921124e-01 8.9297951156924947465e-01 8.9297951156924921132e-01\n1.666667: 9.0274529295093361132e-01 9.0274529295093396555e-01 9.0274529295093361123e-01\n2.000000: 1.0000000000000000000e+00 1.0000000000000004903e+00 1.0000000000000000000e+00\n2.333333: 1.1906393487589989474e+00 1.1906393487589996490e+00 1.1906393487589989482e+00\n2.666667: 1.5045754882515545787e+00 1.5045754882515570474e+00 1.5045754882515560190e+00\n3.000000: 1.9999999999992207405e+00 2.0000000000000015575e+00 2.0000000000000000000e+00\n3.333333: 2.7781584802531739378e+00 2.7781584804376666336e+00 2.7781584804376642124e+00\n", "explain": ""}, {"task_name": "Gamma function", "task_url": "https://rosettacode.org/wiki/Gamma_function", "task_cat": "Mathematical operations", "lang": "Haskell", "code": "\n\nThe Gamma and Beta function as described in 'Numerical Recipes in C++', the approximation is taken from [Lanczos, C. 1964 SIAM Journal on Numerical Analysis, ser. B, vol. 1, pp. 86-96]\ncof :: [Double]\ncof =\n  [ 76.18009172947146\n  , -86.50532032941677\n  , 24.01409824083091\n  , -1.231739572450155\n  , 0.001208650973866179\n  , -0.000005395239384953\n  ]\n\nser :: Double\nser = 1.000000000190015\n\ngammaln :: Double -> Double\ngammaln xx =\n  let tmp_ = (xx + 5.5) - (xx + 0.5) * log (xx + 5.5)\n      ser_ = ser + sum (zipWith (/) cof [xx + 1 ..])\n  in -tmp_ + log (2.5066282746310005 * ser_ / xx)\n\nmain :: IO ()\nmain = mapM_ print $ gammaln <$> [0.1,0.2 .. 1.0]\n\n\nimport Control.Applicative\n\ncof :: [Double]\ncof =\n  [ 76.18009172947146\n  , -86.50532032941677\n  , 24.01409824083091\n  , -1.231739572450155\n  , 0.001208650973866179\n  , -0.000005395239384953\n  ]\n\ngammaln :: Double -> Double\ngammaln =\n  ((+) . negate . (((-) . (5.5 +)) <*> (((*) . (0.5 +)) <*> (log . (5.5 +))))) <*>\n  (log .\n   ((/) =<<\n    (2.5066282746310007 *) .\n    (1.000000000190015 +) . sum . zipWith (/) cof . enumFrom . (1 +)))\n\nmain :: IO ()\nmain = mapM_ print $ gammaln <$> [0.1,0.2 .. 1.0]\n\n\nOutput:\n2.252712651734255\n1.5240638224308496\n1.09579799481814\n0.7966778177018394\n0.572364942924743\n0.3982338580692666\n0.2608672465316877\n0.15205967839984869\n6.637623973474716e-2\n-4.440892098500626e-16\n", "explain": "Based on HaskellWiki (compatible license):\nOr equivalently, as a point-free applicative expression:\n"}, {"task_name": "Gamma function", "task_url": "https://rosettacode.org/wiki/Gamma_function", "task_cat": "Mathematical operations", "lang": "Scheme", "code": "\nTranslation of: Scala for Lanczos and Stirling\nTranslation of: Ruby for Taylor\n(import (scheme base)\n        (scheme inexact)\n        (scheme write))\n\n(define PI 3.14159265358979323846264338327950)  \n(define e 2.7182818284590452353602875)\n\n(define gamma-lanczos\n  (let ((p '(676.5203681218851 -1259.1392167224028 771.32342877765313 \n             -176.61502916214059 12.507343278686905 -0.13857109526572012\n             9.9843695780195716e-6 1.5056327351493116e-7)))\n    (lambda (x)\n      (if (< x 0.5)\n        (/ PI (* (sin (* PI x)) (gamma-lanczos (- 1 x))))\n        (let* ((x2 (- x 1))\n               (t (+ x2 7 0.5))\n               (a (do ((ps p (cdr ps))\n                       (idx 0 (+ 1 idx))\n                       (res 0.99999999999980993 (+ res \n                                                   (/ (car ps)\n                                                      (+ x2 idx 1)))))\n                    ((null? ps) res))))\n          (* (sqrt (* 2 PI)) (expt t (+ x2 0.5)) (exp (- t)) a))))))\n\n(define (gamma-stirling x)\n  (* (sqrt (* 2 (/ PI x))) (expt (/ x e) x)))\n\n(define gamma-taylor\n  (let ((a (reverse\n             '(1.00000000000000000000  0.57721566490153286061 \n               -0.65587807152025388108 -0.04200263503409523553  \n               0.16653861138229148950 -0.04219773455554433675\n               -0.00962197152787697356  0.00721894324666309954 \n               -0.00116516759185906511 -0.00021524167411495097  \n               0.00012805028238811619 -0.00002013485478078824\n               -0.00000125049348214267  0.00000113302723198170 \n               -0.00000020563384169776 0.00000000611609510448  \n               0.00000000500200764447 -0.00000000118127457049\n               0.00000000010434267117 0.00000000000778226344 \n               -0.00000000000369680562 0.00000000000051003703 \n               -0.00000000000002058326 -0.00000000000000534812\n               0.00000000000000122678 -0.00000000000000011813  \n               0.00000000000000000119 0.00000000000000000141 \n               -0.00000000000000000023  0.00000000000000000002))))\n    (lambda (x)\n      (let ((y (- x 1)))\n        (do ((as a (cdr as))\n             (res 0 (+ (car as) (* res y))))\n          ((null? as) (/ 1 res)))))))\n\n(do ((i 0.1 (+ i 0.1)))\n  ((> i 2.01) )\n  (display (string-append \"Gamma (\"\n                          (number->string i)\n                          \"): \"\n                          \"\\n --- Lanczos\u00a0: \"\n                          (number->string (gamma-lanczos i))\n                          \"\\n --- Stirling: \"\n                          (number->string (gamma-stirling i))\n                          \"\\n --- Taylor \u00a0: \"\n                          (number->string (gamma-taylor i))\n                          \"\\n\")))\n\n\nOutput:\nGamma (0.1): \n --- Lanczos\u00a0: 9.513507698668736\n --- Stirling: 5.69718714897717\n --- Taylor \u00a0: 9.513507698668734\nGamma (0.2): \n --- Lanczos\u00a0: 4.590843711998803\n --- Stirling: 3.3259984240223925\n --- Taylor \u00a0: 4.5908437119988035\nGamma (0.30000000000000004): \n --- Lanczos\u00a0: 2.9915689876875904\n --- Stirling: 2.3625300362696198\n --- Taylor \u00a0: 2.991568987687591\nGamma (0.4): \n --- Lanczos\u00a0: 2.218159543757687\n --- Stirling: 1.8414763359362354\n --- Taylor \u00a0: 2.2181595437576886\nGamma (0.5): \n --- Lanczos\u00a0: 1.7724538509055159\n --- Stirling: 1.5203469010662807\n --- Taylor \u00a0: 1.772453850905516\nGamma (0.6): \n --- Lanczos\u00a0: 1.489192248812818\n --- Stirling: 1.307158857448356\n --- Taylor \u00a0: 1.489192248812817\nGamma (0.7): \n --- Lanczos\u00a0: 1.2980553326475577\n --- Stirling: 1.15905329211392\n --- Taylor \u00a0: 1.298055332647558\nGamma (0.7999999999999999): \n --- Lanczos\u00a0: 1.1642297137253035\n --- Stirling: 1.0533709684256085\n --- Taylor \u00a0: 1.1642297137253033\nGamma (0.8999999999999999): \n --- Lanczos\u00a0: 1.0686287021193193\n --- Stirling: 0.9770615078776956\n --- Taylor \u00a0: 1.0686287021193195\nGamma (0.9999999999999999): \n --- Lanczos\u00a0: 1.0000000000000002\n --- Stirling: 0.9221370088957892\n --- Taylor \u00a0: 1.0000000000000002\nGamma (1.0999999999999999): \n --- Lanczos\u00a0: 0.9513507698668728\n --- Stirling: 0.8834899531687039\n --- Taylor \u00a0: 0.9513507698668733\nGamma (1.2): \n --- Lanczos\u00a0: 0.9181687423997607\n --- Stirling: 0.8577553353965909\n --- Taylor \u00a0: 0.9181687423997608\nGamma (1.3): \n --- Lanczos\u00a0: 0.8974706963062777\n --- Stirling: 0.842678259448392\n --- Taylor \u00a0: 0.8974706963062773\nGamma (1.4000000000000001): \n --- Lanczos\u00a0: 0.8872638175030759\n --- Stirling: 0.8367445486370818\n --- Taylor \u00a0: 0.8872638175030753\nGamma (1.5000000000000002): \n --- Lanczos\u00a0: 0.8862269254527583\n --- Stirling: 0.8389565525264964\n --- Taylor \u00a0: 0.886226925452758\nGamma (1.6000000000000003): \n --- Lanczos\u00a0: 0.8935153492876904\n --- Stirling: 0.8486932421525738\n --- Taylor \u00a0: 0.8935153492876904\nGamma (1.7000000000000004): \n --- Lanczos\u00a0: 0.9086387328532912\n --- Stirling: 0.865621471793884\n --- Taylor \u00a0: 0.9086387328532904\nGamma (1.8000000000000005): \n --- Lanczos\u00a0: 0.931383770980243\n --- Stirling: 0.8896396352879945\n --- Taylor \u00a0: 0.9313837709802427\nGamma (1.9000000000000006): \n --- Lanczos\u00a0: 0.9617658319073875\n --- Stirling: 0.9208427218942294\n --- Taylor \u00a0: 0.9617658319073876\nGamma (2.0000000000000004): \n --- Lanczos\u00a0: 1.000000000000001\n --- Stirling: 0.9595021757444918\n --- Taylor \u00a0: 1.0000000000000002\n\n", "explain": ""}, {"task_name": "Gamma function", "task_url": "https://rosettacode.org/wiki/Gamma_function", "task_cat": "Mathematical operations", "lang": "PowerShell", "code": "\n\nAdd-Type -Path \"C:\\Program Files (x86)\\Math\\MathNet.Numerics.3.12.0\\lib\\net40\\MathNet.Numerics.dll\"\n\n1..20 | ForEach-Object {[MathNet.Numerics.SpecialFunctions]::Gamma($_ / 10)}\n\n\nOutput:\n9.51350769866874\n4.5908437119988\n2.99156898768759\n2.21815954375769\n1.77245385090552\n1.48919224881282\n1.29805533264756\n1.1642297137253\n1.06862870211932\n1\n0.951350769866874\n0.918168742399759\n0.897470696306277\n0.887263817503075\n0.88622692545276\n0.89351534928769\n0.908638732853289\n0.931383770980245\n0.961765831907388\n1\n\n", "explain": "I would download the Math.NET Numerics dll(s).  Documentation and download at: http://cyber-defense.sans.org/blog/2015/06/27/powershell-for-math-net-numerics/comment-page-1/\n"}, {"task_name": "Gamma function", "task_url": "https://rosettacode.org/wiki/Gamma_function", "task_cat": "Mathematical operations", "lang": "F#", "code": "\n\nopen System\n\nlet gamma z = \n    let lanczosCoefficients = [76.18009172947146;-86.50532032941677;24.01409824083091;-1.231739572450155;0.1208650973866179e-2;-0.5395239384953e-5]\n    let rec sumCoefficients acc i coefficients =\n        match coefficients with\n        | []   -> acc\n        | h::t -> sumCoefficients (acc + (h/i)) (i+1.0) t\n    let gamma = 5.0\n    let x = z - 1.0\n    Math.Pow(x + gamma + 0.5, x + 0.5) * Math.Exp( -(x + gamma + 0.5) ) * Math.Sqrt( 2.0 * Math.PI ) * sumCoefficients 1.000000000190015 (x + 1.0) lanczosCoefficients\n\nseq { for i in 1 .. 20 do yield ((double)i/10.0) } |> Seq.iter ( fun v -> System.Console.WriteLine(\"{0}\u00a0: {1}\", v, gamma v ) )\nseq { for i in 1 .. 10 do yield ((double)i*10.0) } |> Seq.iter ( fun v -> System.Console.WriteLine(\"{0}\u00a0: {1}\", v, gamma v ) )\n\nOutput:\n0.1\u00a0: 9.51350769855015\n0.2\u00a0: 4.59084371196153\n0.3\u00a0: 2.99156898767207\n0.4\u00a0: 2.21815954375051\n0.5\u00a0: 1.77245385090205\n0.6\u00a0: 1.48919224881114\n0.7\u00a0: 1.29805533264677\n0.8\u00a0: 1.16422971372497\n0.9\u00a0: 1.06862870211921\n1\u00a0: 1\n1.1\u00a0: 0.951350769866919\n1.2\u00a0: 0.91816874239982\n1.3\u00a0: 0.897470696306335\n1.4\u00a0: 0.887263817503124\n1.5\u00a0: 0.886226925452797\n1.6\u00a0: 0.893515349287718\n1.7\u00a0: 0.908638732853309\n1.8\u00a0: 0.931383770980253\n1.9\u00a0: 0.961765831907391\n2\u00a0: 1\n10\u00a0: 362880.000000085\n20\u00a0: 1.21645100409886E+17\n30\u00a0: 8.84176199395902E+30\n40\u00a0: 2.03978820820436E+46\n50\u00a0: 6.08281864068541E+62\n60\u00a0: 1.38683118555266E+80\n70\u00a0: 1.71122452441801E+98\n80\u00a0: 8.94618213157899E+116\n90\u00a0: 1.65079551625067E+136\n100\u00a0: 9.33262154536104E+155\n\nTranslation of: C#\n\nopen System.Numerics\nopen System\n\nlet rec gamma (z: Complex) =\n    let mutable z = z\n    let lanczosCoefficients = [| 676.520368121885; -1259.1392167224; 771.323428777653; -176.615029162141; 12.5073432786869; -0.13857109526572; 9.98436957801957E-06; 1.50563273514931E-07 |]\n\n    if z.Real < 0.5 then\n        Math.PI / (sin (Math.PI * z) * gamma (1.0 - z))\n    else\n        let mutable x = Complex.One\n        z <- z - 1.0\n\n        for i = 0 to lanczosCoefficients.Length - 1 do\n            x <- x + lanczosCoefficients.[i] / (z + Complex(i, 0) + 1.0)\n\n        let t = z + float lanczosCoefficients.Length - 0.5\n        sqrt (2.0 * Math.PI) * (t ** (z + 0.5)) * exp (-t) * x\n\nSeq.iter (fun i -> printfn \"Gamma(%f) = %A\" i (gamma (Complex(i, 0)))) [ 0 .. 100 ]\nSeq.iter2 (fun i j -> printfn \"Gamma(%f + i%f) = %A\" i j (gamma (Complex(i, j)))) [ 0 .. 100 ] [ 0 .. 100 ]\n\nOutput:\nGamma(0.000000) = (NaN, NaN)\nGamma(1.000000) = (1,0000000000000049, 0)\nGamma(2.000000) = (1,0000000000000115, 0)\nGamma(3.000000) = (2,0000000000000386, 0)\nGamma(4.000000) = (6,000000000000169, 0)\nGamma(5.000000) = (24,00000000000084, 0)\nGamma(6.000000) = (120,00000000000514, 0)\nGamma(7.000000) = (720,0000000000364, 0)\nGamma(8.000000) = (5040,000000000289, 0)\nGamma(9.000000) = (40320,000000002554, 0)\nGamma(10.000000) = (362880,00000002526, 0)\nGamma(11.000000) = (3628800,0000002664, 0)\nGamma(12.000000) = (39916800,000003114, 0)\nGamma(13.000000) = (479001600,00004023, 0)\nGamma(14.000000) = (6227020800,000546, 0)\nGamma(15.000000) = (87178291200,00801, 0)\nGamma(16.000000) = (1307674368000,1267, 0)\nGamma(17.000000) = (20922789888002,08, 0)\nGamma(18.000000) = (355687428096034,7, 0)\nGamma(19.000000) = (6402373705728658, 0)\nGamma(20.000000) = (1,2164510040884514E+17, 0)\nGamma(21.000000) = (2,4329020081769083E+18, 0)\nGamma(22.000000) = (5,109094217171516E+19, 0)\nGamma(23.000000) = (1,1240007277777331E+21, 0)\nGamma(24.000000) = (2,5852016738887927E+22, 0)\nGamma(25.000000) = (6,20448401733312E+23, 0)\nGamma(26.000000) = (1,5511210043332811E+25, 0)\nGamma(27.000000) = (4,032914611266542E+26, 0)\nGamma(28.000000) = (1,0888869450419632E+28, 0)\nGamma(29.000000) = (3,048883446117507E+29, 0)\nGamma(30.000000) = (8,841761993740793E+30, 0)\nGamma(31.000000) = (2,652528598122235E+32, 0)\nGamma(32.000000) = (8,222838654178949E+33, 0)\nGamma(33.000000) = (2,631308369337265E+35, 0)\nGamma(34.000000) = (8,683317618812963E+36, 0)\nGamma(35.000000) = (2,9523279903964145E+38, 0)\nGamma(36.000000) = (1,0333147966387422E+40, 0)\nGamma(37.000000) = (3,719933267899472E+41, 0)\nGamma(38.000000) = (1,3763753091228064E+43, 0)\nGamma(39.000000) = (5,230226174666675E+44, 0)\nGamma(40.000000) = (2,0397882081200028E+46, 0)\nGamma(41.000000) = (8,159152832480012E+47, 0)\nGamma(42.000000) = (3,3452526613168034E+49, 0)\nGamma(43.000000) = (1,4050061177530564E+51, 0)\nGamma(44.000000) = (6,041526306338149E+52, 0)\nGamma(45.000000) = (2,658271574788788E+54, 0)\nGamma(46.000000) = (1,1962222086549537E+56, 0)\nGamma(47.000000) = (5,502622159812779E+57, 0)\nGamma(48.000000) = (2,586232415112008E+59, 0)\nGamma(49.000000) = (1,2413915592537631E+61, 0)\nGamma(50.000000) = (6,082818640343433E+62, 0)\nGamma(51.000000) = (3,04140932017172E+64, 0)\nGamma(52.000000) = (1,551118753287575E+66, 0)\nGamma(53.000000) = (8,065817517095389E+67, 0)\nGamma(54.000000) = (4,27488328406056E+69, 0)\nGamma(55.000000) = (2,308436973392699E+71, 0)\nGamma(56.000000) = (1,2696403353659833E+73, 0)\nGamma(57.000000) = (7,109985878049497E+74, 0)\nGamma(58.000000) = (4,0526919504882125E+76, 0)\nGamma(59.000000) = (2,350561331283167E+78, 0)\nGamma(60.000000) = (1,386831185457067E+80, 0)\nGamma(61.000000) = (8,3209871127424E+81, 0)\nGamma(62.000000) = (5,075802138772854E+83, 0)\nGamma(63.000000) = (3,1469973260391715E+85, 0)\nGamma(64.000000) = (1,9826083154046777E+87, 0)\nGamma(65.000000) = (1,2688693218589942E+89, 0)\nGamma(66.000000) = (8,247650592083449E+90, 0)\nGamma(67.000000) = (5,443449390775078E+92, 0)\nGamma(68.000000) = (3,647111091819299E+94, 0)\nGamma(69.000000) = (2,48003554243712E+96, 0)\nGamma(70.000000) = (1,711224524281613E+98, 0)\nGamma(71.000000) = (1,1978571669971308E+100, 0)\nGamma(72.000000) = (8,504785885679606E+101, 0)\nGamma(73.000000) = (6,123445837689312E+103, 0)\nGamma(74.000000) = (4,470115461513189E+105, 0)\nGamma(75.000000) = (3,307885441519755E+107, 0)\nGamma(76.000000) = (2,4809140811398187E+109, 0)\nGamma(77.000000) = (1,8854947016662648E+111, 0)\nGamma(78.000000) = (1,451830920283022E+113, 0)\nGamma(79.000000) = (1,1324281178207572E+115, 0)\nGamma(80.000000) = (8,946182130783977E+116, 0)\nGamma(81.000000) = (7,1569457046271725E+118, 0)\nGamma(82.000000) = (5,797126020748008E+120, 0)\nGamma(83.000000) = (4,753643337013366E+122, 0)\nGamma(84.000000) = (3,945523969721089E+124, 0)\nGamma(85.000000) = (3,31424013456571E+126, 0)\nGamma(86.000000) = (2,8171041143808564E+128, 0)\nGamma(87.000000) = (2,4227095383675335E+130, 0)\nGamma(88.000000) = (2,1077572983797526E+132, 0)\nGamma(89.000000) = (1,8548264225741817E+134, 0)\nGamma(90.000000) = (1,650795516091023E+136, 0)\nGamma(91.000000) = (1,4857159644819212E+138, 0)\nGamma(92.000000) = (1,3520015276785438E+140, 0)\nGamma(93.000000) = (1,2438414054642616E+142, 0)\nGamma(94.000000) = (1,1567725070817618E+144, 0)\nGamma(95.000000) = (1,0873661566568553E+146, 0)\nGamma(96.000000) = (1,032997848824012E+148, 0)\nGamma(97.000000) = (9,916779348710516E+149, 0)\nGamma(98.000000) = (9,619275968249195E+151, 0)\nGamma(99.000000) = (9,42689044888421E+153, 0)\nGamma(100.000000) = (9,33262154439535E+155, 0)\nGamma(0.000000 + i0.000000) = (NaN, NaN)\nGamma(1.000000 + i1.000000) = (0,49801566811835923, -0,15494982830180806)\nGamma(2.000000 + i2.000000) = (0,11229424234632254, 0,3236128855019324)\nGamma(3.000000 + i3.000000) = (-0,4401134076370088, -0,0636372431263299)\nGamma(4.000000 + i4.000000) = (0,7058649325913451, -0,49673908399741584)\nGamma(5.000000 + i5.000000) = (-0,9743952418053669, 2,0066898827226805)\nGamma(6.000000 + i6.000000) = (1,0560845455210948, -7,123931816061554)\nGamma(7.000000 + i7.000000) = (-0,26095668519941206, 27,88827411508434)\nGamma(8.000000 + i8.000000) = (1,8442848156317595, -125,96060801752867)\nGamma(9.000000 + i9.000000) = (-94,00399991734474, 643,3621714431141)\nGamma(10.000000 + i10.000000) = (1423,851941789479, -3496,081973308168)\nGamma(11.000000 + i11.000000) = (-16211,00700465313, 18168,810510285286)\nGamma(12.000000 + i12.000000) = (158471,8890918886, -68793,30331463458)\nGamma(13.000000 + i13.000000) = (-1329505,1052081874, -142199,12520863872)\nGamma(14.000000 + i14.000000) = (8576976,67312178, 7218722,503716219)\nGamma(15.000000 + i15.000000) = (-20768001,573587183, -99064686,32101583)\nGamma(16.000000 + i16.000000) = (-490395650,85195, 847486174,9207268)\nGamma(17.000000 + i17.000000) = (9782747798,66319, -2523864726,357996)\nGamma(18.000000 + i18.000000) = (-91408144092,80728, -62548333665,79536)\nGamma(19.000000 + i19.000000) = (80368797570,63837, 1283152922013,1064)\nGamma(20.000000 + i20.000000) = (12322153606702,379, -9813622771583,531)\nGamma(21.000000 + i21.000000) = (-191651224429571,5, -67416801166719,305)\nGamma(22.000000 + i22.000000) = (476610838765573,75, 2709614130691551,5)\nGamma(23.000000 + i23.000000) = (31282423285710508, -23340622982977492)\nGamma(24.000000 + i24.000000) = (-5,062346571412891E+17, -2,8075410996386413E+17)\nGamma(25.000000 + i25.000000) = (-1,1135374386470528E+18, 8,889271476011264E+18)\nGamma(26.000000 + i26.000000) = (1,4103207063357242E+20, -3,1111347801608966E+19)\nGamma(27.000000 + i27.000000) = (-1,20394153792971E+21, -2,100813378567903E+21)\nGamma(28.000000 + i28.000000) = (-2,9772583255514483E+22, 2,9845666640271078E+22)\nGamma(29.000000 + i29.000000) = (6,474322395366405E+23, 4,002110222682179E+23)\nGamma(30.000000 + i30.000000) = (4,982468347052982E+24, -1,3332730971666784E+25)\nGamma(31.000000 + i31.000000) = (-2,701233953257487E+26, -5,3335652308619844E+25)\nGamma(32.000000 + i32.000000) = (-3,5481927258667466E+26, 5,492417944693437E+27)\nGamma(33.000000 + i33.000000) = (1,13499763334942E+29, -3,936060260026878E+27)\nGamma(34.000000 + i34.000000) = (-2,497617380231244E+29, -2,4036706229026682E+30)\nGamma(35.000000 + i35.000000) = (-5,244047476964302E+31, 7,550247174479453E+30)\nGamma(36.000000 + i36.000000) = (1,8326953464053433E+32, 1,1815797667494789E+33)\nGamma(37.000000 + i37.000000) = (2,7496330950708185E+34, -3,7903032739968576E+33)\nGamma(38.000000 + i38.000000) = (-6,153702881069039E+34, -6,593476804299637E+35)\nGamma(39.000000 + i39.000000) = (-1,622188754583588E+37, 3,702408035066972E+35)\nGamma(40.000000 + i40.000000) = (-2,9787072201603815E+37, 4,069596487794187E+38)\nGamma(41.000000 + i41.000000) = (1,0327223226588694E+40, 2,028448840265614E+39)\nGamma(42.000000 + i42.000000) = (9,258591867044077E+40, -2,623834405446389E+41)\nGamma(43.000000 + i43.000000) = (-6,5825696143104E+42, -3,6674407207212435E+42)\nGamma(44.000000 + i44.000000) = (-1,3470021394042014E+44, 1,5970917674147318E+44)\nGamma(45.000000 + i45.000000) = (3,611191294816286E+45, 4,700641025433376E+45)\nGamma(46.000000 + i46.000000) = (1,572050028597055E+47, -6,978410499639601E+46)\nGamma(47.000000 + i47.000000) = (-8,064316457005957E+47, -5,037500759309252E+48)\nGamma(48.000000 + i48.000000) = (-1,5346852327090097E+50, -1,8750204416673013E+49)\nGamma(49.000000 + i49.000000) = (-1,963123049571723E+51, 4,3640542056764855E+51)\nGamma(50.000000 + i50.000000) = (1,112141672863102E+53, 1,0242389193853564E+53)\nGamma(51.000000 + i51.000000) = (4,3124175139534486E+54, -2,2723736598857867E+54)\nGamma(52.000000 + i52.000000) = (-1,9794169465380243E+55, -1,5907071359978385E+56)\nGamma(53.000000 + i53.000000) = (-5,198770735397539E+57, -1,364053254830618E+57)\nGamma(54.000000 + i54.000000) = (-1,120153853109903E+59, 1,4557034579325553E+59)\nGamma(55.000000 + i55.000000) = (3,0502206279504673E+60, 5,6213787579421754E+60)\nGamma(56.000000 + i56.000000) = (2,263901598439912E+62, -1,3869357395249425E+61)\nGamma(57.000000 + i57.000000) = (3,1337184675942048E+63, -7,566798379913671E+63)\nGamma(58.000000 + i58.000000) = (-1,9547779277051327E+65, -2,289059342042218E+65)\nGamma(59.000000 + i59.000000) = (-1,0990589957539216E+67, 2,43674092519427E+66)\nGamma(60.000000 + i60.000000) = (-1,2138821648921022E+68, 4,1070828497360523E+68)\nGamma(61.000000 + i61.000000) = (1,1429060333301634E+70, 1,199617402383565E+70)\nGamma(62.000000 + i62.000000) = (6,356301051435098E+71, -1,4385777048397157E+71)\nGamma(63.000000 + i63.000000) = (8,496122222382356E+72, -2,4629448359526944E+73)\nGamma(64.000000 + i64.000000) = (-6,555666234065589E+74, -8,308825832655404E+74)\nGamma(65.000000 + i65.000000) = (-4,35298630131942E+76, 3,566503620394996E+75)\nGamma(66.000000 + i66.000000) = (-9,093720755985274E+77, 1,5886817012950856E+78)\nGamma(67.000000 + i67.000000) = (3,276704637172729E+79, 7,067540192000104E+79)\nGamma(68.000000 + i68.000000) = (3,3000031716552424E+81, 6,606403155114497E+80)\nGamma(69.000000 + i69.000000) = (1,1027558271573558E+83, -9,8053446601259E+82)\nGamma(70.000000 + i70.000000) = (-4,322638823338879E+83, -6,551055369074648E+84)\nGamma(71.000000 + i71.000000) = (-2,4300476213174805E+86, -1,695901195606269E+86)\nGamma(72.000000 + i72.000000) = (-1,3066738432408389E+88, 3,647419995967721E+87)\nGamma(73.000000 + i73.000000) = (-2,631035116210543E+89, 5,722329713478048E+89)\nGamma(74.000000 + i74.000000) = (1,2168690154152985E+91, 2,7033309001464033E+91)\nGamma(75.000000 + i75.000000) = (1,3482397421660745E+93, 4,28037329878204E+92)\nGamma(76.000000 + i76.000000) = (5,937687180258459E+94, -3,3970662984923895E+94)\nGamma(77.000000 + i77.000000) = (7,877518886977203E+95, -3,258429077036584E+96)\nGamma(78.000000 + i78.000000) = (-8,893580405683355E+97, -1,4068641589865653E+98)\nGamma(79.000000 + i79.000000) = (-8,171120040126758E+99, -1,8182361788970335E+99)\nGamma(80.000000 + i80.000000) = (-3,620672062418723E+101, 2,252383956928435E+101)\nGamma(81.000000 + i81.000000) = (-5,470323981863164E+102, 2,130475015794634E+103)\nGamma(82.000000 + i82.000000) = (5,5003853678128614E+104, 1,0085770500872239E+105)\nGamma(83.000000 + i83.000000) = (5,740274728712029E+106, 1,986132310865518E+106)\nGamma(84.000000 + i84.000000) = (3,002634263016605E+108, -1,245707037705857E+108)\nGamma(85.000000 + i85.000000) = (7,865153067057636E+109, -1,575289481058232E+110)\nGamma(86.000000 + i86.000000) = (-2,2903303039804873E+111, -9,374401780068583E+111)\nGamma(87.000000 + i87.000000) = (-4,291880277570836E+113, -3,196185984412844E+113)\nGamma(88.000000 + i88.000000) = (-2,9995707183640408E+115, 1,1845722184191957E+114)\nGamma(89.000000 + i89.000000) = (-1,2943245318203042E+117, 1,1073023439932073E+117)\nGamma(90.000000 + i90.000000) = (-2,0007723042777158E+118, 9,568042990491017E+118)\nGamma(91.000000 + i91.000000) = (2,4147687416625443E+120, 5,132960890087842E+120)\nGamma(92.000000 + i92.000000) = (2,9270673985442265E+122, 1,5846423875074053E+122)\nGamma(93.000000 + i93.000000) = (1,9583971561168918E+124, -2,5166936071920716E+123)\nGamma(94.000000 + i94.000000) = (8,735240498823332E+125, -7,993043748530299E+125)\nGamma(95.000000 + i95.000000) = (1,6159775690644545E+127, -6,9922194609237035E+127)\nGamma(96.000000 + i96.000000) = (-1,569012926564151E+129, -4,10649302643008E+129)\nGamma(97.000000 + i97.000000) = (-2,2080981691082815E+131, -1,5902953016632018E+131)\nGamma(98.000000 + i98.000000) = (-1,6995881449793942E+133, -8,982249136857376E+131)\nGamma(99.000000 + i99.000000) = (-9,394719018633069E+134, 5,234766160326565E+134)\nGamma(100.000000 + i100.000000) = (-3,3597454530316526E+136, 5,986962556433683E+136)\n\n", "explain": "Solved using the Lanczos Coefficients described in Numerical Recipes (Press et al)\nThe C# version can be translated to F# to support complex numbers:\n"}, {"task_name": "Gamma function", "task_url": "https://rosettacode.org/wiki/Gamma_function", "task_cat": "Mathematical operations", "lang": "Groovy", "code": "\nTranslation of: Ada\na = [ 1.00000000000000000000, 0.57721566490153286061, -0.65587807152025388108,\n     -0.04200263503409523553, 0.16653861138229148950, -0.04219773455554433675,\n     -0.00962197152787697356, 0.00721894324666309954, -0.00116516759185906511,\n     -0.00021524167411495097, 0.00012805028238811619, -0.00002013485478078824,\n     -0.00000125049348214267, 0.00000113302723198170, -0.00000020563384169776,\n      0.00000000611609510448, 0.00000000500200764447, -0.00000000118127457049,\n      0.00000000010434267117, 0.00000000000778226344, -0.00000000000369680562,\n      0.00000000000051003703, -0.00000000000002058326, -0.00000000000000534812,\n      0.00000000000000122678, -0.00000000000000011813, 0.00000000000000000119,\n      0.00000000000000000141, -0.00000000000000000023, 0.00000000000000000002].reverse()\n\ndef gamma = { 1.0 / a.inject(0) { sm, a_i -> sm * (it - 1) + a_i } }\n\n(1..10).each{ printf(\"%  1.9e\\n\", gamma(it / 3.0)) }\n\n\nOutput:\n  2.678938535e+00\n  1.354117939e+00\n  1.000000000e+00\n  8.929795116e-01\n  9.027452930e-01\n  1.000000000e+00\n  1.190639349e+00\n  1.504575488e+00\n  2.000000000e+00\n  2.778158479e+00\n", "explain": ""}, {"task_name": "Gamma function", "task_url": "https://rosettacode.org/wiki/Gamma_function", "task_cat": "Mathematical operations", "lang": "AWK", "code": "\n# syntax: GAWK -f GAMMA_FUNCTION.AWK\nBEGIN {\n    e = (1+1/100000)^100000\n    pi = atan2(0,-1)\n\n    print(\"X    Stirling\")\n    for (i=1; i<=20; i++) {\n      d = i / 10\n      printf(\"%4.2f %9.5f\\n\",d,gamma_stirling(d))\n    }\n    exit(0)\n}\nfunction gamma_stirling(x) {\n    return sqrt(2*pi/x) * pow(x/e,x)\n}\nfunction pow(a,b) {\n    return exp(b*log(a))\n}\n\n\nOutput:\nX    Stirling\n0.10   5.69719\n0.20   3.32600\n0.30   2.36253\n0.40   1.84148\n0.50   1.52035\n0.60   1.30716\n0.70   1.15906\n0.80   1.05338\n0.90   0.97707\n1.00   0.92214\n1.10   0.88349\n1.20   0.85776\n1.30   0.84268\n1.40   0.83675\n1.50   0.83896\n1.60   0.84870\n1.70   0.86563\n1.80   0.88965\n1.90   0.92085\n2.00   0.95951\n\n", "explain": ""}]